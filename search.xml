<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C# Params</title>
    <url>/2017/10/02/2017-10-02%20C#%20Params/</url>
    <content><![CDATA[<h2 id="1-Sample-Code"><a href="#1-Sample-Code" class="headerlink" title="1. Sample Code"></a>1. Sample Code</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Call params method with one to four int arguments.</span></span><br><span class="line">        <span class="built_in">int</span> sum1 = SumParameters(<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">int</span> sum2 = SumParameters(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="built_in">int</span> sum3 = SumParameters(<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line">        <span class="built_in">int</span> sum4 = SumParameters(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ... Write results of the method invocations.</span></span><br><span class="line">        Console.WriteLine(sum1);</span><br><span class="line">        Console.WriteLine(sum2);</span><br><span class="line">        Console.WriteLine(sum3);</span><br><span class="line">        Console.WriteLine(sum4);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="built_in">int</span> <span class="title">SumParameters</span>(<span class="params"><span class="keyword">params</span> <span class="built_in">int</span>[] values</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Loop through and sum the integers in the array.</span></span><br><span class="line">        <span class="built_in">int</span> total = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="built_in">int</span> <span class="keyword">value</span> <span class="keyword">in</span> values)</span><br><span class="line">        &#123;</span><br><span class="line">            total += <span class="keyword">value</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="2-參考網站"><a href="#2-參考網站" class="headerlink" title="2. 參考網站"></a>2. 參考網站</h2><ul>
<li><a href="https://www.dotnetperls.com/params">https://www.dotnetperls.com/params</a></li>
</ul>
]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>CORS (Cross-Origin Resource Sharing)</title>
    <url>/2020/05/06/2020-05-06%20CORS%20(Cross-Origin%20Resource%20Sharing)/</url>
    <content><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>前端開發人員寫 JS 遇到需要串接第三方 API，或是想存取第三方網站的資料時，遲早會遇到跨域限制的問題。</p>
<span id="more"></span>

<p>跨域(Cross-Origin Resource Sharing)的原理可參考這篇「<a href="https://developer.mozilla.org/zh-TW/docs/Web/HTTP/CORS">跨來源資源共用</a>」，因為安全性考量，網站主幾可設定收到 HTTP 請求時，是否允許非主機網域的來源進行存取。例如自架站的圖片若不想被盜連，可以設定不允許其他網域存取。</p>
<p>使用 JS 存取第三方 API 或網站資料時，若對方主機未允許 CORS，那麼前端人員可是一點辦法都沒有，只能求助於後端，利用伺服器端程式來繞過此問題。</p>
<p>但是不太可能每個前端人員都自己架個伺服器，花這麼一大筆費用只為了處理跨域問題。值得慶幸的是，有國外免費服務架設伺服器，幫大家處理跨域存取的問題，本篇就來整理一些可用的選擇。</p>
<h2 id="2-同源政策（same-origin-policy）"><a href="#2-同源政策（same-origin-policy）" class="headerlink" title="2. 同源政策（same-origin policy）"></a>2. 同源政策（same-origin policy）</h2><p>在同源政策（same-origin policy）中規範了那寫資源可以跨源存取，哪些會受到限制。</p>
<p>同源的定義簡單如下：</p>
<ul>
<li>不同網域（Domain）</li>
<li>不同通訊協定：HTTP, HTTPS, FTP</li>
<li>不同連接埠號（Port）</li>
<li>一般來說跨來源寫（Cross-origin writes）、跨來源嵌入（Cross-origin embedding）是被允許的，而跨來源讀取（Cross-origin reads）是受限制的。</li>
</ul>
<h2 id="3-解決方法"><a href="#3-解決方法" class="headerlink" title="3. 解決方法"></a>3. 解決方法</h2><h3 id="3-1-後端程式人員幫忙解開限制-開啟跨來源請求"><a href="#3-1-後端程式人員幫忙解開限制-開啟跨來源請求" class="headerlink" title="3.1. 後端程式人員幫忙解開限制(開啟跨來源請求)"></a>3.1. 後端程式人員幫忙解開限制(開啟跨來源請求)</h3><p>若要開啟跨來源請求，必須在伺服器端做一些設定，像是在 Response Header 加上 Access-Control-Allow-Origin：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Access-Control-Allow-Origin</span><span class="punctuation">: </span>* # 允許所有網站發送的請求</span><br><span class="line"><span class="attribute">Access-Control-Allow-Origin</span><span class="punctuation">: </span>http://foo.example   # 只允許 http://foo.example 的請求</span><br></pre></td></tr></table></figure>

<p>也就是在後端程式碼要寫開放的規則</p>
<h3 id="3-2-後端程式碼再包裝第三方API後，給前端調用"><a href="#3-2-後端程式碼再包裝第三方API後，給前端調用" class="headerlink" title="3.2. 後端程式碼再包裝第三方API後，給前端調用"></a>3.2. 後端程式碼再包裝第三方API後，給前端調用</h3><p>如果是第三方的API，沒辦法請對方幫我改後端，那要怎麼辦呢？<br>另外做個後端再包裝API，讓前端得以調用。這也是最常見的方式。</p>
<h3 id="3-3-第三方服務代理請求"><a href="#3-3-第三方服務代理請求" class="headerlink" title="3.3. 第三方服務代理請求"></a>3.3. 第三方服務代理請求</h3><h4 id="3-3-1-CORS-ANYWHERE"><a href="#3-3-1-CORS-ANYWHERE" class="headerlink" title="3.3.1. CORS-ANYWHERE"></a>3.3.1. CORS-ANYWHERE</h4><p>API 使用很簡單，用以下格式即可：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">https://cors-anywhere.herokuapp.com/第三方網址 </span><br></pre></td></tr></table></figure>

<h4 id="3-3-2-CORSIO"><a href="#3-3-2-CORSIO" class="headerlink" title="3.3.2. CORSIO"></a>3.3.2. CORSIO</h4><p>API 使用很簡單，用以下格式即可：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">https://cors.io/?第三方網址</span><br></pre></td></tr></table></figure>

<h3 id="3-4-JSONP"><a href="#3-4-JSONP" class="headerlink" title="3.4. JSONP"></a>3.4. JSONP</h3><h4 id="3-4-1-JSONP-的原理"><a href="#3-4-1-JSONP-的原理" class="headerlink" title="3.4.1. JSONP 的原理"></a>3.4.1. JSONP 的原理</h4><p>利用 script 標籤不受同源策略影響，可以跨域引入外部資源的特性，讓服務器端返回可執行的 JS 函數，將要返回的數據作為參數傳進函數，以此實現跨域加載數據的目的<br>此時，繞過 Ajax，並未使用它，但同樣達成了請求數據的目的<br>[](【備註】——script 標籤引用資源得本質是：<br>1）向 src 發送請求<br>2）將資源下載到當前頁面<br>3）當資源加載完畢後，把該資源當做 JS 代碼來立刻執行——【備註】)</p>
<h4 id="3-4-2-JSONP-的使用"><a href="#3-4-2-JSONP-的使用" class="headerlink" title="3.4.2. JSONP 的使用"></a>3.4.2. JSONP 的使用</h4><p>動態創建 script 標籤，src 地址指向數據接口，並傳遞 callback 參數<br>定義數據處理函數<br>服務端接收請求，解析參數，計算數，返回回調函數字符串<br>將回調函數字符串引入頁面並作為 JS 去執行：此時會調用數據處理函數，數據會作為數據處理函數的參數被處理計算出一個結果</p>
<h2 id="4-精華解析"><a href="#4-精華解析" class="headerlink" title="4. 精華解析"></a>4. 精華解析</h2><ul>
<li><a href="https://www.jianshu.com/p/0446b5bcdbab">跨域之一：同源策略和跨域</a></li>
<li><a href="https://www.jianshu.com/p/94946ca90194">跨域之二：JSONP 和 CORS</a></li>
<li><a href="https://www.jianshu.com/p/7666e1ffb8c6">跨域之三：降域 和 postMessage</a></li>
</ul>
<h2 id="5-參考資料"><a href="#5-參考資料" class="headerlink" title="5. 參考資料"></a>5. 參考資料</h2><ul>
<li><a href="https://medium.com/@brianwu291/jsonp-with-simple-example-4711e2a07443">[JS] 同源政策與跨來源資源共用（CORS）</a></li>
<li><a href="https://www.jianshu.com/p/94946ca90194">跨域之二：JSONP 和 CORS</a></li>
</ul>
]]></content>
      <categories>
        <category>資訊安全</category>
        <category>CORS</category>
      </categories>
      <tags>
        <tag>資訊安全</tag>
        <tag>CORS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSRF Cross Site Request Forgery</title>
    <url>/2020/05/06/2020-05-06%20CSRF%20Cross%20Site%20Request%20Forgery/</url>
    <content><![CDATA[<h2 id="1-攻擊手段"><a href="#1-攻擊手段" class="headerlink" title="1. 攻擊手段"></a>1. <strong>攻擊手段</strong></h2><p>利用使用者已經登入過A系統之後，在B系統上偽造請求去做壞事情。比如影片中舉的例子轉帳金額跟對象參數偽造。</p>
<span id="more"></span>


<p>CSRF 就是在不同的 domain 底下卻能夠偽造出「使用者本人發出的 request」。要達成這件事也很簡單，因為瀏覽器的機制，你只要發送 request 給某個網域，就會把關聯的 cookie 一起帶上去。如果使用者是登入狀態，那這個 request 就理所當然包含了他的資訊（例如說 session id），這 request 看起來就像是使用者本人發出的。</p>
<h2 id="2-防禦手段"><a href="#2-防禦手段" class="headerlink" title="2. 防禦手段"></a>2. <strong>防禦手段</strong></h2><ol>
<li>儘量使用POST</li>
<li>加入驗證碼(比如圖形驗證碼、滑塊驗證、簡訊驗證碼)</li>
<li>檢驗HTTP Referer(確認是否從允許的網站過來的請求)</li>
<li>Anti CSRF Token</li>
</ol>
<h3 id="2-1-方法一"><a href="#2-1-方法一" class="headerlink" title="2.1. 方法一"></a>2.1. 方法一</h3><pre><code>    * 在form表單隱藏token 或者是在 head 的 meta attribute

        <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;csrf-token&quot;</span> <span class="attr">content</span>=<span class="string">&quot;GBU1HKZpy3N2grxxoR...&quot;</span></span></span><br></pre></td></tr></table></figure>

    * 後端檢驗時確認是否是存在的token(可以放在資料庫比對或在session上記錄)
</code></pre>
<h3 id="2-2-方法二"><a href="#2-2-方法二" class="headerlink" title="2.2. 方法二"></a>2.2. 方法二</h3><p>利用framework 提供的內鍵library,比如PHP CodeIgniter 本身就有<br>5. 加入自定義 Header<br>    這個概念我覺得應該跟平常在設計JWT或WEB API時考量資安問題的方式一樣</p>
<h2 id="3-參考資料"><a href="#3-參考資料" class="headerlink" title="3. 參考資料"></a>3. 參考資料</h2><ul>
<li><a href="https://www.youtube.com/watch?v=gEPii2y3ISQ">CSRF 攻击和防御 - Web 安全常识</a></li>
<li><a href="https://blog.techbridge.cc/2017/02/25/csrf-introduction/">讓我們來談談 CSRF</a></li>
</ul>
]]></content>
      <categories>
        <category>資訊安全</category>
        <category>CSRF</category>
      </categories>
      <tags>
        <tag>資訊安全</tag>
        <tag>CSRF</tag>
      </tags>
  </entry>
  <entry>
    <title>windows python environment install 相關記錄</title>
    <url>/2020/05/10/2020-05-10%20windows%20python%20environment%20install%20%E7%9B%B8%E9%97%9C%E8%A8%98%E9%8C%84/</url>
    <content><![CDATA[<h2 id="1-windows-python-install"><a href="#1-windows-python-install" class="headerlink" title="1. windows python install"></a>1. windows python install</h2><ul>
<li>直接去官網下載windows 版本安裝</li>
<li>檢查安裝是否成功</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python --version</span><br></pre></td></tr></table></figure>
<span id="more"></span>



<h3 id="1-1-如果有重新安裝過python"><a href="#1-1-如果有重新安裝過python" class="headerlink" title="1.1 如果有重新安裝過python"></a>1.1 如果有重新安裝過python</h3><p>會遇到</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Fatal error in launcher: Unable to create process using</span><br></pre></td></tr></table></figure>

<p>這個是因為在環境變數裡面有2個路徑說明了python,pip的位置。<br>可以利用以下指令確認路徑，並選擇刪除多餘的路徑參數</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">where python</span><br><span class="line">where pip</span><br></pre></td></tr></table></figure>

<h2 id="2-windows-pip-install"><a href="#2-windows-pip-install" class="headerlink" title="2. windows pip install"></a>2. windows pip install</h2><p>pip 基本上已經內鍵了<br>如果你安裝的Python版本，Python 2在2.7.9含以上或 Python 3在3.4含以上，則預設已經包含了pip。本範例為Python 3.7.3。<br>檢查安裝是否成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python -m pip --version</span><br></pre></td></tr></table></figure>

<p>參考文章 &gt;&gt; <a href="https://matthung0807.blogspot.com/2019/08/windows-pythonpip.html">Windows 安裝Python套件管理工具pip</a></p>
<h2 id="3-virtualenv-install"><a href="#3-virtualenv-install" class="headerlink" title="3. virtualenv install"></a>3. virtualenv install</h2><p>這篇寫的很好，在裝opencv之前，先教你怎麼裝virtualenv<br><a href="https://medium.com/@airwaves/opencv-%E5%9C%A8windows%E4%B8%AD%E5%AE%89%E8%A3%9D-opencv-python-295ae092ca57">OpenCV —在Windows中安裝 OpenCV-python</a></p>
<h2 id="4-VSCode-install"><a href="#4-VSCode-install" class="headerlink" title="4. VSCode install"></a>4. VSCode install</h2><p>直接去官網上下載安裝</p>
<h3 id="4-1-Pylint"><a href="#4-1-Pylint" class="headerlink" title="4.1 Pylint"></a>4.1 Pylint</h3><p>PyLint 是一種廣泛使用的工具，可檢查 Python 程式碼中的錯誤，有助於撰寫良好的 Python 程式碼模式，因此 Visual Studio 已針對 Python 專案整合這項工具。</p>
<h3 id="4-2-VSCode-virtualenv"><a href="#4-2-VSCode-virtualenv" class="headerlink" title="4.2 VSCode &amp; virtualenv"></a>4.2 VSCode &amp; virtualenv</h3><p>自己實測，如果在terminal 下，弄出一個env,跑獨立環境是沒問題的<br>但是如果我們又想要在VSCode 下能在env底下run debug ，我目前成功的方式是將setting.json 裡面指向的python 指向到env&#x2F;Scripts</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;python.pythonPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;E:\\pythonworkspace\\venv2\\Scripts\\python.exe&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>我是也有看到有人改動lanuch.json ,讓運行的設定進行調改，但我沒成功.總覺得應該找時間把lanuch.json與vscode 的愛昧關係給搞定</p>
<h2 id="5-其它遇到的問題"><a href="#5-其它遇到的問題" class="headerlink" title="5. 其它遇到的問題"></a>5. 其它遇到的問題</h2><ul>
<li>opencv 讀取資料夾的時候最好不要有中文字，不然會讀取不到</li>
<li>在用VSCode 結合virtualenv 時，debug run , terminal 會出現錯誤，但還是可以繼續debug 跟跑出結果，只是有點不順眼，查了一下怎麼解決不出現這個錯誤，可以參考這篇的教學&gt;&gt;<a href="https://officeguide.cc/powershell-set-execution-policy-remote-signed/">PowerShell 更改執行原則，解決無法執行 ps1 指令稿問題</a></li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL inject 防範</title>
    <url>/2020/05/06/2020-05-06%20SQL%20inject%20%E9%98%B2%E7%AF%84/</url>
    <content><![CDATA[<h2 id="1-在-patterns-practices-Developer-Center簡單歸納出三個步驟防止SQL-injection："><a href="#1-在-patterns-practices-Developer-Center簡單歸納出三個步驟防止SQL-injection：" class="headerlink" title="1. 在 patterns &amp; practices Developer Center簡單歸納出三個步驟防止SQL injection："></a>1. 在 patterns &amp; practices Developer Center簡單歸納出三個步驟防止SQL injection：</h2><ol>
<li>Constrain input.</li>
<li>Use parameters with stored procedures.</li>
<li>Use parameters with dynamic SQL.</li>
</ol>
<span id="more"></span>


<h2 id="2-參考資料"><a href="#2-參考資料" class="headerlink" title="2. 參考資料"></a>2. 參考資料</h2><ul>
<li><a href="https://www.qa-knowhow.com/?p=131">SQL Injection 的測試與防範</a></li>
<li><a href="https://sites.google.com/site/chengshixuexipingtai/sql/ql-injection-de-jian-jie-yu-yu-fang">SQL injection的簡介與預防</a></li>
</ul>
]]></content>
      <categories>
        <category>資訊安全</category>
        <category>SQL injection</category>
      </categories>
      <tags>
        <tag>資訊安全</tag>
        <tag>SQL injection</tag>
      </tags>
  </entry>
  <entry>
    <title>python筆記</title>
    <url>/2020/05/21/2020-05-21%20python/</url>
    <content><![CDATA[<h2 id="1-整數除法"><a href="#1-整數除法" class="headerlink" title="1. 整數除法"></a>1. 整數除法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">7</span>//<span class="number">3</span>)</span><br><span class="line"><span class="comment">#2</span></span><br></pre></td></tr></table></figure>

<h2 id="2-平方"><a href="#2-平方" class="headerlink" title="2. 平方"></a>2. 平方</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">2</span>**<span class="number">4</span>)</span><br><span class="line"><span class="comment">#16</span></span><br></pre></td></tr></table></figure>

<h2 id="3-字串換行"><a href="#3-字串換行" class="headerlink" title="3. 字串換行"></a>3. 字串換行</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;&quot;Hi,</span></span><br><span class="line"><span class="string">How are you?</span></span><br><span class="line"><span class="string">I&#x27;m fine.&quot;&quot;&quot;</span>)</span><br><span class="line"><span class="comment">#How are you?</span></span><br></pre></td></tr></table></figure>

<h2 id="4-開根號"><a href="#4-開根號" class="headerlink" title="4. 開根號"></a>4. 開根號</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">64</span>**<span class="number">0.5</span>)</span><br><span class="line"><span class="comment">#8.0</span></span><br></pre></td></tr></table></figure>

<h2 id="5-3次方根"><a href="#5-3次方根" class="headerlink" title="5. 3次方根"></a>5. 3次方根</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">pow</span>(<span class="number">8</span>,<span class="number">1</span>/<span class="number">3</span>))</span><br><span class="line"><span class="comment">#2.0</span></span><br></pre></td></tr></table></figure>

<h2 id="6-LIST"><a href="#6-LIST" class="headerlink" title="6. LIST"></a>6. LIST</h2><h3 id="6-1-length"><a href="#6-1-length" class="headerlink" title="6.1. length"></a>6.1. length</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fruits =[<span class="string">&quot;apple&quot;</span>,<span class="string">&quot;orange&quot;</span>,<span class="string">&quot;Guava&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(fruits))</span><br><span class="line"><span class="comment">#3</span></span><br></pre></td></tr></table></figure>

<h3 id="6-2-how-to-list-remove-range"><a href="#6-2-how-to-list-remove-range" class="headerlink" title="6.2. how to list remove range"></a>6.2. how to list remove range</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fruits =[<span class="string">&quot;apple&quot;</span>,<span class="string">&quot;orange&quot;</span>,<span class="string">&quot;Guava&quot;</span>]</span><br><span class="line">fruits[:<span class="number">2</span>] = []</span><br><span class="line"><span class="built_in">print</span>(fruits)</span><br><span class="line"></span><br><span class="line"><span class="comment">#==result==</span></span><br><span class="line"><span class="comment">#[&#x27;Guava&#x27;]</span></span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"><span class="comment">### how to set nested list</span></span><br><span class="line"></span><br><span class="line">```python=</span><br><span class="line">[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]]</span><br></pre></td></tr></table></figure>

<h2 id="7-what’s-differnect-list-vs-tuple"><a href="#7-what’s-differnect-list-vs-tuple" class="headerlink" title="7. what’s differnect list vs tuple ?"></a>7. what’s differnect list vs tuple ?</h2><p>不能修改值</p>
<h2 id="8-collections"><a href="#8-collections" class="headerlink" title="8. collections"></a>8. collections</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">collection_1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">collection_2 = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8-1-交集"><a href="#8-1-交集" class="headerlink" title="8.1. 交集"></a>8.1. 交集</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(collection_1 &amp; collection_2)</span><br><span class="line"><span class="comment">#&#123;2, 3&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="8-2-聯集"><a href="#8-2-聯集" class="headerlink" title="8.2. 聯集"></a>8.2. 聯集</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(collection_1 | collection_2)</span><br><span class="line"><span class="comment">#&#123;1, 2, 3, 4&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="8-3-差集"><a href="#8-3-差集" class="headerlink" title="8.3. 差集"></a>8.3. 差集</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(collection_1 - collection_2)</span><br><span class="line"><span class="comment">#&#123;1&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="8-4-反交集"><a href="#8-4-反交集" class="headerlink" title="8.4. 反交集"></a>8.4. 反交集</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(collection_1 ^ collection_2)</span><br><span class="line"><span class="comment">#&#123;1, 4&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="8-5-IN"><a href="#8-5-IN" class="headerlink" title="8.5. IN"></a>8.5. IN</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">2</span> <span class="keyword">in</span> &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;)</span><br><span class="line"><span class="comment">#True</span></span><br></pre></td></tr></table></figure>

<h2 id="9-string-to-list"><a href="#9-string-to-list" class="headerlink" title="9. string to list"></a>9. string to list</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&quot;kite&quot;</span>*<span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(name)</span><br><span class="line">name = <span class="built_in">set</span>(<span class="string">&quot;kite&quot;</span>*<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(name)</span><br><span class="line"></span><br><span class="line"><span class="comment">#==result==</span></span><br><span class="line"><span class="comment">#kitekite</span></span><br><span class="line"><span class="comment">#&#123;&#x27;i&#x27;, &#x27;e&#x27;, &#x27;k&#x27;, &#x27;t&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="10-從列表的資料產生字典"><a href="#10-從列表的資料產生字典" class="headerlink" title="10. 從列表的資料產生字典"></a>10. 從列表的資料產生字典</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic = &#123; x:x*<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span>[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>] &#125;</span><br><span class="line"><span class="built_in">print</span>(dic)</span><br><span class="line"><span class="comment">#==result==</span></span><br><span class="line"><span class="comment">#&#123;3: 6, 4: 8, 5: 10&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="11-函式不定參數"><a href="#11-函式不定參數" class="headerlink" title="11. 函式不定參數"></a>11. 函式不定參數</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">avg</span>(<span class="params">*nums</span>):</span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">        <span class="built_in">sum</span> = <span class="built_in">sum</span> + num</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>/<span class="built_in">len</span>(nums)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(avg(<span class="number">4</span>,<span class="number">8</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="12-模組的概念"><a href="#12-模組的概念" class="headerlink" title="12. 模組的概念"></a>12. 模組的概念</h2><p>sys.path.append(“modules”)<br>sys.path</p>
<p>封包的設計與使用<br>專案檔案配置</p>
<ul>
<li>專案資料夾</li>
<li>封包資料夾<ul>
<li><strong>init</strong>.py<ul>
<li>模組一.py</li>
<li>模組二.py</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>import 封包名稱.模組名稱</p>
<h2 id="13-檔案操作"><a href="#13-檔案操作" class="headerlink" title="13. 檔案操作"></a>13. 檔案操作</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;config.json&quot;</span>,mode=<span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    data = json.load(file)</span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;config.json&quot;</span>,mode=<span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    data = json.load(file)</span><br><span class="line">    data[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;kite&quot;</span></span><br><span class="line">    json.dump(data,file)</span><br></pre></td></tr></table></figure>

<h2 id="14-隨機數"><a href="#14-隨機數" class="headerlink" title="14. 隨機數"></a>14. 隨機數</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">random.choice([<span class="number">0</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">8</span>])</span><br><span class="line">random.sample([<span class="number">0</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">8</span>],<span class="number">2</span>)</span><br><span class="line">data = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">8</span>]</span><br><span class="line"><span class="comment">#洗牌</span></span><br><span class="line">random.shuffle(data)</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"><span class="comment">#隨機數</span></span><br><span class="line">random.random()</span><br><span class="line">random.uniform(<span class="number">0.0</span>,<span class="number">1.0</span>)</span><br><span class="line"><span class="comment">#常態分配</span></span><br><span class="line">random.normalvariate(<span class="number">100</span>,<span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<h2 id="15-平均數"><a href="#15-平均數" class="headerlink" title="15. 平均數"></a>15. 平均數</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> statistics</span><br><span class="line">statistics.mean([<span class="number">1</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">9</span>])</span><br></pre></td></tr></table></figure>

<h2 id="16-中位數"><a href="#16-中位數" class="headerlink" title="16. 中位數"></a>16. 中位數</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> statistics</span><br><span class="line">statistics.median([<span class="number">1</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">9</span>])</span><br></pre></td></tr></table></figure>

<h2 id="17-標準差"><a href="#17-標準差" class="headerlink" title="17. 標準差"></a>17. 標準差</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> statistics</span><br><span class="line"><span class="comment">#標準差 資料散部的狀況，資料間有沒有落差很大</span></span><br><span class="line">statistics.stdev([<span class="number">1</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">9</span>])</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>網頁切版筆記</title>
    <url>/2020/09/15/2020-09-15%20%E7%B6%B2%E9%A0%81%E5%88%87%E7%89%88%E7%AD%86%E8%A8%98/</url>
    <content><![CDATA[<p>上課筆記</p>
<span id="more"></span>
<p>行內元素包在區塊元素內<br>標籤選擇器<br>類別選擇器<br>後代選擇器</p>
<p>表頭<br>選單<br>內容<br>表尾</p>
<p>margin<br>區塊元素儘量不要寫死高度<br>不然內容會超出區塊元素</p>
<p>box model</p>
<p>margin-left auto<br>margin-right auto<br>自適應父元素的width ，左右置中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;&quot;</span>&gt;</span><br><span class="line">&lt;laber <span class="keyword">for</span>=<span class="string">&quot;account&quot;</span>&gt;帳號&lt;/laber&gt;</span><br><span class="line">&lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> <span class="built_in">id</span>=<span class="string">&quot;account&quot;</span> placeholder=<span class="string">&quot;請輸入帳號&quot;</span>&gt;</span><br><span class="line">&lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;送出&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<p>http 就像暴露狂<br>https 安全</p>
<p>coreui<br>ckeditor</p>
<p>bs4 裡面的精神</p>
<p>aplha2 &gt; aplha3&gt;beta公開測試&gt;正式</p>
]]></content>
      <categories>
        <category>網頁切版</category>
      </categories>
      <tags>
        <tag>網頁切版</tag>
      </tags>
  </entry>
  <entry>
    <title>XSS 類型</title>
    <url>/2020/11/07/2020-11-07%20XSS%20%E9%A1%9E%E5%9E%8B/</url>
    <content><![CDATA[<span id="more"></span>


<ol>
<li>反射型</li>
<li>存儲型</li>
<li>DOM-Based型</li>
</ol>
<h2 id="1-XSS的防範"><a href="#1-XSS的防範" class="headerlink" title="1. XSS的防範"></a>1. XSS的防範</h2><blockquote>
<p>對輸入進行過濾<br>對輸出進行編碼<br>Cookie 設置 http-only</p>
</blockquote>
<hr>
<h2 id="2-相關參考"><a href="#2-相關參考" class="headerlink" title="2. 相關參考"></a>2. 相關參考</h2><p><a href="https://www.youtube.com/watch?v=QJzkifQ-Cuk&t=629s">XSS原理和攻防</a><br><a href="https://xss-game.appspot.com/">Google XSS Game</a></p>
]]></content>
      <categories>
        <category>資訊安全</category>
        <category>XSS</category>
      </categories>
      <tags>
        <tag>資訊安全</tag>
        <tag>XSS</tag>
      </tags>
  </entry>
  <entry>
    <title>git 20道題目</title>
    <url>/2020/11/07/2020-11-07%20git%2020%E9%81%93%E9%A1%8C%E7%9B%AE/</url>
    <content><![CDATA[<h2 id="1-git-20道題目"><a href="#1-git-20道題目" class="headerlink" title="1. git 20道題目"></a>1. git 20道題目</h2><span id="more"></span>


<p>1.<a href="https://pcottle.github.io/learnGitBranching/?gist_level_id=f7db497104dffa008bc801fb49230444">git commit</a><br>2.<a href="https://pcottle.github.io/learnGitBranching/?gist_level_id=817c026fe90d09e67eb30946ef5d42fa">git head 技巧 I</a><br>3.<a href="https://pcottle.github.io/learnGitBranching/?gist_level_id=8dba225432eba46847beafd616042fc7">git head 技巧 II</a><br>4.<a href="https://pcottle.github.io/learnGitBranching/?gist_level_id=81354f6467eeebfcbd81294787371458">分支合併(快轉模式)</a><br>5.<a href="https://pcottle.github.io/learnGitBranching/?gist_level_id=3821f5ac77cd68c20f7e5ac9ea4a4234">分支合併(非快轉模式 -no-ff) I</a><br>6.<a href="https://pcottle.github.io/learnGitBranching/?gist_level_id=4ebc7d237aec42ba62f5d9484040d279">分支合併(非快轉模式 -no-ff) II</a><br>7.<a href="https://pcottle.github.io/learnGitBranching/?gist_level_id=51dbe15aa9787175a8c4c34b8fa6ed12">分支合併(非快轉模式) I</a><br>8.<a href="https://pcottle.github.io/learnGitBranching/?gist_level_id=8a53b2a46b9fa9e963d0eb80b65f17bb">分支合併(非快轉模式) II</a><br>9.<a href="https://pcottle.github.io/learnGitBranching/?gist_level_id=293df94156d03ffcb8ad2a796c3d1ebf">git clone</a><br>10.<a href="https://pcottle.github.io/learnGitBranching/?gist_level_id=c350fdc6aa338549b6eb4b1499383fca">git push</a><br>11.<a href="https://pcottle.github.io/learnGitBranching/?gist_level_id=96dd4464d93b751d3fc5d124663bdd73">git pull (可用 git fakeTeamwork)</a><br>12.<a href="https://pcottle.github.io/learnGitBranching/?gist_level_id=fd0557f04608384f2d35c3814c088913">git fetch</a><br>13.<a href="https://pcottle.github.io/learnGitBranching/?gist_level_id=9eddf30e74e1b1c089e83f7c265c192e">本地三個分支(master、dev、feature&#x2F;a)</a><br>14.<a href="https://pcottle.github.io/learnGitBranching/?gist_level_id=20cf21dbc718a76cce6cd77363abe335">本地三個分支(master、dev、feature&#x2F;a) ，遠端有 master 分支，並擁有合併後的所有 commit</a><br>15.<a href="https://pcottle.github.io/learnGitBranching/?gist_level_id=f6e4b301996ac6c121b6d0fb25c51027">git reset 還原練習</a><br>16.<a href="https://pcottle.github.io/learnGitBranching/?gist_level_id=40764d63ded638a1b48b2d9e3afeff09">git rebase 練習 I</a><br>17.<a href="https://pcottle.github.io/learnGitBranching/?gist_level_id=3148f8917a34af79cf9bd348cc99c3f8">git rebase 練習 II</a><br>18.<a href="https://pcottle.github.io/learnGitBranching/?gist_level_id=0896114d1a1d3a66e022631dab133726">git cherry-pick 練習</a><br>19.<a href="https://pcottle.github.io/learnGitBranching/?gist_level_id=6b282a154f95ba54844d6b747f65128a">git tag 練習</a><br>20.<a href="https://pcottle.github.io/learnGitBranching/?gist_level_id=1cb0672c88c5f675ff393d010ef9deda">魔王題</a></p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>bootstrap5 學習筆記</title>
    <url>/2020/12/27/2020-12-27%20bootstrap5%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/</url>
    <content><![CDATA[<p>格線系統</p>
<p>container-fluid 滿版容器<br>container 定寬容器</p>
<p>手機、平板以上<br>col-12 col-md-3</p>
<p>平板直向md<br>平板橫向lg<br>桌機xl</p>
<p>不想管幾欄 就寫class&#x3D;”col”<br>自動欄寬 col</p>
<p>col-4 ，如果有6個div 會自己換行<br>w-100 h-100</p>
<p>breakpoint<br>用時寫sm 與md ，優先序是md會蓋掉sm</p>
<p>col-12 col-md-4 col-lg-3 col-xxl-2<br>這個寫法用在col 上</p>
<p>另一種寫法寫在row<br>row row-cols-md-3 row-cols-lg-4 row-cols-xl-6<br>欄位間距<br>g-5</p>
<p>垂直居中<br>justify-content-center<br>align-items-center<br>col-8 col-md-6</p>
<p>height:98vh  – &gt; vh 是什麼?<br>background-size:cover; –&gt; 是什麼?<br>mb4</p>
<p>格線距離的控制</p>
<p>圖片與寬高尺寸控制<br>class img-fluid 滿版圖片<br>css max-width:100%<br>w-100 與 max-width:100%</p>
<p>共用項目margin padding</p>
<p>卡片組件<br>.amos-card-img{<br>width:100%;<br>height:100%;<br>object-fit:cover;<br>}</p>
]]></content>
      <categories>
        <category>CSS FrameWork</category>
        <category>Bootstrap5</category>
      </categories>
      <tags>
        <tag>Bootstrap5</tag>
      </tags>
  </entry>
  <entry>
    <title>RESTful API</title>
    <url>/2021/03/03/2021-03-03%20RESTful%20API/</url>
    <content><![CDATA[<h2 id="1-什麼是-API"><a href="#1-什麼是-API" class="headerlink" title="1. 什麼是 API?"></a>1. 什麼是 API?</h2><p>應用程式介面（英語：Application Programming Interface)</p>
<p>想像API是服務員，你來到了餐廳，看了菜單(API Doc)，點了你想要的項目(Request)。經過廚師的努力(Server)，服務員將菜端出來(response)給你。</p>
<span id="more"></span>


<p><a href="https://youtu.be/s7wmiS2mSXY">What is an API?</a></p>
<h3 id="1-1-以API-公開性大概可以分為三類"><a href="#1-1-以API-公開性大概可以分為三類" class="headerlink" title="1.1.以API 公開性大概可以分為三類"></a>1.1.以API 公開性大概可以分為三類</h3><ol>
<li><strong>Open API又稱作Public API</strong><br>Developers(開發商)它還是需要去Register(註冊),Sign up 取得key。給大眾使用的API</li>
<li><strong>Internal API</strong><br>公司內部使用，串聯不同service，不同team之間</li>
<li><strong>Private API</strong><br>有授權使用，透過合作或付費方式</li>
</ol>
<h3 id="1-2-以-protocol-與-architectural角度來分"><a href="#1-2-以-protocol-與-architectural角度來分" class="headerlink" title="1.2.以 protocol 與 architectural角度來分"></a>1.2.以 protocol 與 architectural角度來分</h3><ol>
<li><strong>Local APIs</strong><br>The original API, created to provide operating system or middleware services to application programs.</li>
<li><strong>Web APIs</strong><br>Designed to represent widely used resources like HTML pages and are accessed using a simple HTTP protocol.Often called REST APIs or RESTful APIs.</li>
<li><strong>Program APIs</strong><br>Based on RPC technology that makes a remote program component appear to be local to the rest of the software</li>
</ol>
<h2 id="2-什麼是-REST"><a href="#2-什麼是-REST" class="headerlink" title="2. 什麼是 REST?"></a>2. 什麼是 REST?</h2><p>REST 是 Representational State Transfer 的縮寫，可譯為「具象狀態傳輸」。由 Roy Fielding 博士在 2000 年的博士論文中所提出。他同時也是 HTTP 規範的主要作者之一。符合 REST 風格的網站架構可以稱為 RESTful。</p>
<p>REST 是一種軟體架構風格（並非標準），目的是幫助在世界各地不同軟體、程式在網際網路中能夠互相傳遞訊息。每一個網頁都可視為一個資源（resource）提供使用者使用，而你可以透過 URL（Uniform Resource Locator），也就是這些資源的地址，來取得這些資源並在你的瀏覽器上使用。</p>
<p>REST指的是網路中Client端和Server端的一種呼叫服務形式，透過既定的規則，滿足約束條件和原則的應用程式設計，對資源的操作包括獲取、創建、修改和刪除資源，這些操作就是依照我們前面所提到的HTTP Method: GET、POST、PUT、PATCH和DELETE。這正好會對應到資料庫基本操作CRUD。</p>
<p>CRUD 為 Create(新增)、Read(讀取)、Update(更新)與Delete(刪除)的縮寫。</p>
<h2 id="3-什麼是-RESTful"><a href="#3-什麼是-RESTful" class="headerlink" title="3. 什麼是 RESTful?"></a>3. 什麼是 RESTful?</h2><p>運用 HTTP 來表達語義的路由設計風格稱為 RESTful API。</p>
<p>(Rest化 ＝ Restful，如果像小編一樣常常不知道講述的時候該用Rest或是Restful可以這樣去記，被轉化成Rest架構的Web API &#x3D; Restful API)</p>
<p>HTTP 本身就是 REST 的實作</p>
<h2 id="4-REST和RESTFUL的區別"><a href="#4-REST和RESTFUL的區別" class="headerlink" title="4. REST和RESTFUL的區別?"></a>4. REST和RESTFUL的區別?</h2><p>經過大量資料閱讀，我只能這樣詮釋：就好比Beauty和Beautiful的關係。</p>
<h2 id="5-RESTful-API-主要由三種元件組成"><a href="#5-RESTful-API-主要由三種元件組成" class="headerlink" title="5. RESTful API 主要由三種元件組成"></a>5. RESTful API 主要由三種元件組成</h2><ol>
<li><strong>Nouns 名詞</strong>：定義資源位置的 URL，每個資源在網路上都會有唯一的位置，就如每戶人家都有唯一的地址一樣。</li>
<li><strong>Verbs 動詞</strong>：對資源要做的動作。</li>
<li><strong>Content Types 資源呈現方式</strong>：API 資源可以以多種方式表現，最常用的是 JSON，較輕，也較好處理。</li>
</ol>
<p>不同公司，不一樣的工程師，設計的名稱都會不一樣，沒有統一的命名方式，造成在引用各家 API 時，都需要詳讀 API 文件，理解所有設計命名規則後，才可使用。</p>
<h2 id="6-REST-優點與限制"><a href="#6-REST-優點與限制" class="headerlink" title="6. REST 優點與限制"></a>6. REST 優點與限制</h2><ol>
<li>有唯一的URL表示資源位置，統一的 API 接口。(Uniform Interface)</li>
<li>無狀態。(Stateless)<br>RESTful 的狀態，意即 HTTP 的請求狀態，一般 Web 服務中，Server 端和 Client 端交互的資訊，會存在 Server 端的 Session (例如：已登入狀態)，在 Client 端再次發送請求的時候，Server 端透過保存在 Server 端的 Session，去執行 request。無狀態的意思，即 Client 端自行保存狀態，在請求 Server 的時候，一併附上給 Server 端，Server 端無保存 Client 端的狀態資訊。<br>舉例來說，可能在用戶登錄系統時，Server 產生 token 紀錄 user 已登錄系統，然後把 token 還給 Client，在 Client 再次發送請求的時候，把 token 一起發給 Server，這樣 Server 就知道這一個 Client 是已經處於登錄的狀態。<br>意即所有的資源都可以 URI 定位，而且這個定位與其他資源無關，也不會因為其他資源的變化而變化，資源相互的依賴性降低。<br>舉一個白話一點的例子：查詢員工工資：<br>第一步：登錄系統。<br>第二步：進入查詢工資的頁面。<br>第三步：搜索該員工。<br>第四步：點擊姓名查看工資。<br>這樣的操作流程就是有狀態的，查詢工資的每一個步驟都依賴於前一個步驟，只要前置操作不成功，後續操作就無法執行。如果輸入一個URL就可以直接得到指定員工的工資，這種情況就是無狀態的，因為獲取工資不依賴於其他資源或狀態，這種情況下，員工工資是一個資源，由一個 URL 與之對應可以通過 HTTP 中的 GET 方法得到資源，這就是典型的 RESTful 風格。</li>
<li>可更高效利用快取來提高回應速度 (Cachable)<br>在 server-side，GET 過的資源，如果沒有被變更過，可以利用 cache 機制減少 request。<br>在 client-side，透過 client 端 cache 紀錄 cache 版本，若向 server 要求資源時發現 server 最新版與 cache 相同，則 client 端直接取用本地資源即可，不需要再做一次查詢</li>
<li>分層系統架構 (Layered System)</li>
<li>客戶端服務器分離 (Client-Server)</li>
<li>充份利用 HTTP protocal(GET&#x2F;POST&#x2F;PUT&#x2F;DELETE) (Manipulation of resources through representations)</li>
<li>可執行程式碼的設計，像是 JavaScript（非必要實作項目） Code-On-Demand (optional)</li>
</ol>
<h3 id="6-1-好處"><a href="#6-1-好處" class="headerlink" title="6.1. 好處"></a>6.1. 好處</h3><p>RESTful 這種「和 CRUD 對齊」的特性會帶來一些溝通的便利性，客戶端只需要知道可用資源，就能依照約定俗成的邏輯，推測出相關的 API。<br>這種「約定俗成」的設計感也可以讓工程師規劃路由時減少一些煩惱。</p>
<h3 id="6-2-壞處"><a href="#6-2-壞處" class="headerlink" title="6.2. 壞處"></a>6.2. 壞處</h3><p>REST 也不是萬能的，除了優點也是有許多在實務上應用的缺點。比如查詢時常被詬病資源相依結構鬆散問題，有時候取資料時都要呼叫好多次 API 才可以組合成完整的物件。舉個例子，想要取得文章與作者資訊，就必須先 GET &#x2F;文章&#x2F;{ID}，然後再透過取回的文章物件中的 Author 欄位再一次呼叫 GET &#x2F;使用者&#x2F;{NAME} 取得作者資訊，挺麻煩的。像是最近興起的 GraphQL (由 Facebook 發佈) 就可以解決 REST 取相依結構資料的問題，整體來說 ORM 的實踐概念更好了，也剛好呼應近幾年熱門的 NoSQL 設計</p>
<p>當然，一個專案裡不可能所有的路由都在操作資料，因此不會每條路由都能完美對齊 RESTful，例如「登入」的路由通常設定為 <em><strong>POST &#x2F;login</strong></em>，就完全是以動詞為中心。身為專案的架構者，有時候還是需因地制宜，風格只是參考，不是阻礙。</p>
<h2 id="7-PUT-需要注意"><a href="#7-PUT-需要注意" class="headerlink" title="7. PUT 需要注意"></a>7. PUT 需要注意</h2><p>POST／PUT 都可以用來新增，PATCH／PUT 都可以用來修改，但其中的差別在哪裡呢?</p>
<p>POST的定義上屬於將原先沒有的資料去做一筆新增的動作，PATCH就是一般常見的修改，所以真的有問題的其實是PUT。<br>PUT在定義上(idempotent)無論做多少次，回傳結果都會一樣。</p>
<p>以POST來說，我要一雙鞋，我就會得到一雙鞋。但是如果再用POST發一次我要一雙鞋，會出現兩種可能：</p>
<ol>
<li>我”再”得到一雙鞋，而且這雙鞋跟上一雙是不一樣的，以資料庫來說，就是ID不一樣。</li>
<li>我只能有一雙鞋，所以他會跟我說”錯誤”，我已經得到一雙鞋了！</li>
</ol>
<h2 id="8-使用回傳-HTTP-狀態碼-Status-codes-來表示執行結果如何"><a href="#8-使用回傳-HTTP-狀態碼-Status-codes-來表示執行結果如何" class="headerlink" title="8. 使用回傳 HTTP 狀態碼 (Status codes) 來表示執行結果如何"></a>8. 使用回傳 HTTP 狀態碼 (Status codes) 來表示執行結果如何</h2><p>HTTP 中也規範了各種狀態碼，來表示請求是否被完成，因此 API 在回應時也應回傳適當的 HTTP 狀態碼，來表示執行結果。HTTP 狀態碼的大分類如下：<br>1XX 訊息 (Informational)<br>2XX 成功 (Successful)<br>3XX 重新導向 (Redirection)<br>4XX 請求錯誤 (Client Error)<br>5XX 伺服器錯誤 (Server Error)</p>
<h2 id="9-實作"><a href="#9-實作" class="headerlink" title="9. 實作"></a>9. 實作</h2><p>PYTHON FAST API</p>
<p><code>index.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Optional</span></span><br><span class="line"><span class="keyword">from</span> fastapi.middleware.cors <span class="keyword">import</span> CORSMiddleware</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line">origins = [    </span><br><span class="line">    <span class="string">&quot;http://127.0.0.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;http://127.0.0.1:0000&quot;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">app.add_middleware(</span><br><span class="line">    CORSMiddleware,</span><br><span class="line">    allow_origins=origins,</span><br><span class="line">    allow_credentials=<span class="literal">True</span>,</span><br><span class="line">    allow_methods=[<span class="string">&quot;*&quot;</span>],</span><br><span class="line">    allow_headers=[<span class="string">&quot;*&quot;</span>],</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Item</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">root</span>():</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;1&quot;</span>&#125;</span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;2&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/file/&#123;name&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">file</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="keyword">return</span> name + <span class="string">&quot;..GET file(R)&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/file&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">file</span>(<span class="params">item: Item</span>):</span><br><span class="line">    <span class="keyword">return</span> item.name + <span class="string">&quot;..POST file(C)&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.put(<span class="params"><span class="string">&quot;/file&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">file</span>(<span class="params">item: Item</span>):</span><br><span class="line">    <span class="keyword">return</span> item.name + <span class="string">&quot;..UPDATE file(U)&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.delete(<span class="params"><span class="string">&quot;/file&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">file</span>(<span class="params">item: Item</span>):</span><br><span class="line">    <span class="keyword">return</span> item.name + <span class="string">&quot;..DELETE file(D)&quot;</span></span><br></pre></td></tr></table></figure>

<p><code>index.html</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;https://unpkg.com/axios/dist/axios.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    uvicorn index:app --reload</span><br><span class="line">    &lt;button id=&quot;get&quot; onclick=&quot;apiget()&quot;&gt;get&lt;/button&gt;</span><br><span class="line">    &lt;button id=&quot;post&quot; onclick=&quot;callapi(this.id)&quot;&gt;post&lt;/button&gt;</span><br><span class="line">    &lt;button id=&quot;put&quot; onclick=&quot;callapi(this.id)&quot;&gt;put&lt;/button&gt;</span><br><span class="line">    &lt;button id=&quot;delete&quot; onclick=&quot;callapi(this.id)&quot;&gt;delete&lt;/button&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line"></span><br><span class="line">        function apiget() &#123;</span><br><span class="line">            axios.get(&#x27;http://127.0.0.1:8000/file/kite file22&#x27;, &#123;                </span><br><span class="line">            &#125;).then(function (res) &#123;</span><br><span class="line">                console.log(res.data);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        function callapi(method) &#123;</span><br><span class="line">            axios(&#123;</span><br><span class="line">                method: method,</span><br><span class="line">                url: &#x27;http://127.0.0.1:8000/file&#x27;,</span><br><span class="line">                headers: &#123;</span><br><span class="line">                    &#x27;Content-Type&#x27;: &#x27;application/json;charset=UTF-8&#x27;</span><br><span class="line">                &#125;,</span><br><span class="line">                data: &#123;</span><br><span class="line"></span><br><span class="line">                    name: &quot;kite file&quot;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).then(function (res) &#123;</span><br><span class="line">                console.log(res.data);</span><br><span class="line">            &#125;)</span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h2 id="10-其它ISSUE"><a href="#10-其它ISSUE" class="headerlink" title="10. 其它ISSUE"></a>10. 其它ISSUE</h2><p>避免API被攻擊，可以考慮啟用API調用速度限制(Rate limiting)，又或是HTTP Cache的機制</p>
<p>狀態碼</p>
<p>2xx &#x3D; Success（成功）</p>
<p>3xx &#x3D; Redirect（重定向）</p>
<p>4xx &#x3D; User error（客戶端錯誤）</p>
<p>5xx &#x3D; Server error（伺服器端錯誤）</p>
<h2 id="11-延伸閱讀"><a href="#11-延伸閱讀" class="headerlink" title="11. 延伸閱讀"></a>11. 延伸閱讀</h2><ol>
<li>RPC</li>
<li>SOAP</li>
<li>REST</li>
<li>GraphQL</li>
</ol>
<h3 id="11-1-WEB-SERVICE-分四種"><a href="#11-1-WEB-SERVICE-分四種" class="headerlink" title="11.1. WEB SERVICE 分四種"></a>11.1. WEB SERVICE 分四種</h3><ul>
<li>JSON-RPC</li>
<li>SOAP</li>
<li>XML-RPC</li>
<li>REST</li>
</ul>
<h2 id="12-參考文章"><a href="#12-參考文章" class="headerlink" title="12. 參考文章"></a>12. 參考文章</h2><ul>
<li><p><a href="https://blog.enixjin.net/api_design_part1/">API设计，从RPC、SOAP、REST到GraphQL（一）</a></p>
</li>
<li><p><a href="https://github.com/twtrubiks/django-rest-framework-tutorial/tree/master/RESTful-API-Tutorial">twtrubiks&#x2F;django-rest-framework-tutorial</a></p>
</li>
<li><p><a href="https://www.webguide.nat.gov.tw/News_Content.aspx?n=531&s=2918">RESTful API 設計準則與實務經驗</a></p>
</li>
<li><p><a href="https://www.youtube.com/watch?v=R8GL5y49iJc">[ Alex 宅幹嘛 ] 👨‍💻 JSON 與 RESTFUL API 串接一次搞定</a></p>
</li>
<li><p><a href="https://stoplight.io/api-types/">Types of API | Open Rest API Types for Enterprise | Types Of API Calls &amp; REST API Protocol</a></p>
</li>
<li><p><a href="https://www.cevgroup.org/what-is-api/">What is API? - CUTTING EDGE VISIONARIES</a></p>
</li>
<li><p><a href="https://rapidapi.com/blog/types-of-apis/">Types of APIs (and what’s the Difference?) [2021] | RapidAPI</a></p>
</li>
<li><p><a href="https://tw.alphacamp.co/blog/rest-restful-api">什麼是REST? 認識 RESTful API 路由語義化設計風格｜ALPHA Camp Blog</a></p>
</li>
<li><p><a href="https://medium.com/itsems-frontend/api-%E6%98%AF%E4%BB%80%E9%BA%BC-restful-api-%E5%8F%88%E6%98%AF%E4%BB%80%E9%BA%BC-a001a85ab638">API 是什麼? RESTful API 又是什麼?</a></p>
</li>
<li><p><a href="https://progressbar.tw/posts/53">[不是工程師] 休息(REST)式架構? 寧靜式(RESTful)的Web API是現在的潮流？</a></p>
</li>
<li><p><a href="https://noob.tw/restful-api/">API 實作(一)：規劃 RESTful API 要注意什麼</a></p>
</li>
<li><p><a href="https://blog.csdn.net/John_ToStr/article/details/103473077">RPC and REST</a></p>
</li>
<li><p><a href="https://blog.csdn.net/laomo_bible/article/details/79677677?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.control&dist_request_id=1328593.8780.16147646030120667&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.control">REST RPC</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>RESTful API</category>
      </categories>
      <tags>
        <tag>RESTful API</tag>
        <tag>Python</tag>
        <tag>FastAPI</tag>
      </tags>
  </entry>
  <entry>
    <title>JSON APIs(v1.0)</title>
    <url>/2021/03/08/2021-03-08%20JSON%20APIs(v1.0)/</url>
    <content><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>這項技術是由originally drafted by Yehuda Katz in May of 2013 提出的。一個概念或技術的出現往往都有它的目的與精神，整理如下</p>
<ul>
<li><blockquote>
<p>Its original goal was to create a communication model based around defined interactions,<strong>rather than leaning on per-application “ad-hoc” code</strong></p>
</blockquote>
</li>
</ul>
<p><code>ad-hoc</code>：「特設的、特定目的的、即席的、臨時的、將就的、專案的」</p>
<ul>
<li>官網</li>
</ul>
<blockquote>
<p>JSON:API is a <strong>specification</strong> for how a client should request that resources be fetched or modified, and how a server should respond to those requests.<br>JSON:API is designed to <strong>minimize both the number of requests and the amount of data transmitted between clients and servers</strong>. This efficiency is achieved without compromising readability, flexibility, or discoverability.</p>
</blockquote>
<ul>
<li>will 保哥</li>
</ul>
<blockquote>
<p>JSON 幾乎成為 Web 業界的標準傳輸格式，不過由於 JSON 的格式非常彈性，不少人光是為了爭辯 JSON 到底該長得怎樣而吵半天，我也好幾次<strong>被客戶「自訂」的 JSON 格式打敗</strong>，不但<strong>缺發一致性</strong>，更有<strong>前後版本相容性的問題</strong>，身為前端攻城獅的你能不在乎嗎？！<br>現在有了 <strong>JSON API 這份標準規格</strong>，可以幫助你**增加效率 (減少溝通)**、套用工具支援 (或現有函式庫)、並且讓你專注在你的應用程式開發上，不再為了 JSON 的長相而煩惱！<br>目前實作 JSON API 的函式庫很多了，有支援 ASP.NET WebAPI, Json.NET, 與 Entity Framework 的 JSONAPI . NET，其他還有 PHP, node.js, Ruby, Python, Go 都有相對應的 Server&#x2F;Client 實作出現，使用上非常方便！</p>
</blockquote>
<ul>
<li><p>自己的結語</p>
<p>JSON APIs 的資料結構 很像是RMDBS 與SQL 的另一種形式呈現。</p>
</li>
</ul>
<h2 id="2-Client-Server-Responsibilities"><a href="#2-Client-Server-Responsibilities" class="headerlink" title="2. Client &amp; Server Responsibilities"></a>2. <a href="https://jsonapi.org/format/#content-negotiation">Client &amp; Server Responsibilities</a></h2><p>在client 跟server 都有一些職責在，大家都必須在 header 中聲明<code>application/vnd.api+json</code></p>
<p>而JSON API 已經在<code>IANA</code>機構完成註冊囉，它的MIME 類型就是<strong>application&#x2F;vnd.api+json</strong></p>
<h2 id="3-Document-Structure"><a href="#3-Document-Structure" class="headerlink" title="3. Document Structure"></a>3. Document Structure</h2><h3 id="3-1-Top-Level"><a href="#3-1-Top-Level" class="headerlink" title="3.1. Top Level"></a>3.1. Top Level</h3><p>MUST</p>
<ul>
<li>data</li>
<li>errors</li>
<li>meta</li>
</ul>
<p>MAY</p>
<ul>
<li>jsonapi</li>
<li>links</li>
<li>included</li>
</ul>
<p>Primary data <strong>MUST</strong> be either:</p>
<ul>
<li>single resource object,resource identifier object, or null</li>
<li>an array of resource objects</li>
</ul>
<p>Primary data <strong>MUST</strong> have type and id</p>
<p>可以想像成是資料表與資料的ID</p>
<h3 id="3-2-Resource-Objects"><a href="#3-2-Resource-Objects" class="headerlink" title="3.2. Resource Objects"></a>3.2. Resource Objects</h3><h4 id="3-2-1-Identification"><a href="#3-2-1-Identification" class="headerlink" title="3.2.1. Identification"></a>3.2.1. Identification</h4><p>每一個RO(Resource Objects) 都必須要有id,type，且必須是字串</p>
<h4 id="3-2-2-Fields"><a href="#3-2-2-Fields" class="headerlink" title="3.2.2. Fields"></a>3.2.2. Fields</h4><p>attributes ,relationships 在這邊統稱<code>fields</code></p>
<h4 id="3-2-3-Attributes"><a href="#3-2-3-Attributes" class="headerlink" title="3.2.3. Attributes"></a>3.2.3. Attributes</h4><p>表達資料的資訊，可以想像是我們在資料表欄位</p>
<h4 id="3-2-4-Relationships"><a href="#3-2-4-Relationships" class="headerlink" title="3.2.4. Relationships"></a>3.2.4. Relationships</h4><p><strong>MUST</strong> contain at least one</p>
<p>links</p>
<ul>
<li><p>self</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;relationships&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;links&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;self&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://example.com/articles/1/relationships/author&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;related&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://example.com/articles/1/author&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;people&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;9&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>relationships 下的 links-&gt;self 可以想像是依據文章編號1的作者，再反推找到所有文章?</p>
</li>
<li><p>related</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;relationships&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;links&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;self&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://example.com/articles/1/relationships/author&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;related&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://example.com/articles/1/author&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;people&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;9&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>取得文章編號1的作者資訊?</p>
</li>
</ul>
<p>data</p>
<p>此關聯資源的資料，一樣必須包含type,id</p>
<p>meta</p>
<h3 id="3-3-Related-Resource-Links"><a href="#3-3-Related-Resource-Links" class="headerlink" title="3.3. Related Resource Links"></a>3.3. Related Resource Links</h3><h3 id="3-4-Resource-Linkage"><a href="#3-4-Resource-Linkage" class="headerlink" title="3.4. Resource Linkage"></a>3.4. Resource Linkage</h3><h3 id="3-5-JSON-API-Object"><a href="#3-5-JSON-API-Object" class="headerlink" title="3.5. JSON:API Object"></a>3.5. JSON:API Object</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;jsonapi&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-6-Compound-Documents"><a href="#3-6-Compound-Documents" class="headerlink" title="3.6. Compound Documents"></a>3.6. Compound Documents</h3><p>To reduce the number of HTTP requests, servers <strong>MAY</strong> allow responses that include related resources along with the requested primary resources. Such responses are called “compound documents.</p>
<p>試著解釋以下文檔</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;articles&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;attributes&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JSON:API paints my bikeshed!&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;links&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;self&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://example.com/articles/1&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;relationships&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;links&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;self&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://example.com/articles/1/relationships/author&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;related&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://example.com/articles/1/author&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;people&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;9&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;comments&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;links&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;self&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://example.com/articles/1/relationships/comments&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;related&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://example.com/articles/1/comments&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">&#123;</span> <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;comments&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;5&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="punctuation">&#123;</span> <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;comments&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;12&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;included&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;people&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;9&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;attributes&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;first-name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Dan&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;last-name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Gebhardt&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;twitter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dgeb&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;links&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;self&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://example.com/people/9&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;comments&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;5&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;attributes&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;First!&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;relationships&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;people&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;links&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;self&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://example.com/comments/5&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;comments&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;12&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;attributes&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;I like XML better&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;relationships&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;people&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;9&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;links&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;self&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://example.com/comments/12&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="4-參考資料"><a href="#4-參考資料" class="headerlink" title="4. 參考資料"></a>4. 參考資料</h2><ol>
<li><a href="https://jsonapi.org/">JSON APIs en</a></li>
<li><a href="http://jsonapi.org.cn/">JSON APIs cn</a></li>
<li><a href="https://openhome.cc/Gossip/Spring/HATEOAS.html">聊聊 Spring HATEOAS</a></li>
<li><a href="https://www.ithome.com.tw/voice/128528">你的REST不是REST？</a></li>
<li><a href="https://www.ithome.com.tw/node/80062">重新認識HTTP請求方法</a></li>
<li><a href="https://raygun.com/blog/soap-vs-rest-vs-json/">soap-vs-rest-vs-json</a></li>
<li><a href="https://dri.es/headless-cms-rest-vs-jsonapi-vs-graphql">Headless CMS: REST vs JSON:API vs GraphQL</a></li>
<li><a href="https://nordicapis.com/how-does-jsonapi-compare-to-rest-and-graphql/">How Does JSON:API Compare To REST and GraphQL?</a></li>
<li><a href="https://raygun.com/blog/soap-vs-rest-vs-json/">SOAP vs REST vs JSON - a 2020 comparison</a></li>
<li><a href="https://www.drupal.org/docs/core-modules-and-themes/core-modules/jsonapi-module/jsonapi-vs-cores-rest-module">REST 與JSON API 比較</a></li>
<li>JSON API Server</li>
<li>JSON API Client</li>
<li>JsonApiDotNetCore</li>
<li>JSONAPI 與 REST</li>
</ol>
]]></content>
      <categories>
        <category>JSON APIs</category>
      </categories>
      <tags>
        <tag>JSON APIs</tag>
      </tags>
  </entry>
  <entry>
    <title>CCNA_02</title>
    <url>/2021/04/13/2021-04-13%20CCNA_02/</url>
    <content><![CDATA[<h2 id="1-THE-Bassic-internet"><a href="#1-THE-Bassic-internet" class="headerlink" title="1. THE Bassic internet"></a>1. THE Bassic internet</h2><span id="more"></span>


<h3 id="1-1-解釋internet-單字"><a href="#1-1-解釋internet-單字" class="headerlink" title="1.1. 解釋internet 單字"></a>1.1. 解釋internet 單字</h3><p>兩個物體外部相互連接之關係是inter 表示<br>net 是網的意思<br>所以internet 是互相連的網<br>而網跟網之間的連結就是使用ISP來連接</p>
<h3 id="1-2-ISP-Internet-Service-Provider-網際網路服務供應商"><a href="#1-2-ISP-Internet-Service-Provider-網際網路服務供應商" class="headerlink" title="1.2. ISP - Internet Service Provider (網際網路服務供應商)"></a>1.2. ISP - Internet Service Provider (網際網路服務供應商)</h3><p><img src="https://i.imgur.com/uOd8zEA.png" alt="image"></p>
<h4 id="1-2-1-ISP依大小來分級構建示意圖如下"><a href="#1-2-1-ISP依大小來分級構建示意圖如下" class="headerlink" title="1.2.1. ISP依大小來分級構建示意圖如下"></a>1.2.1. ISP依大小來分級構建示意圖如下</h4><p><img src="https://i.imgur.com/QDkWvXl.jpg" alt="image"></p>
<h4 id="1-2-2-ISP依大小分為"><a href="#1-2-2-ISP依大小分為" class="headerlink" title="1.2.2. ISP依大小分為"></a>1.2.2. ISP依大小分為</h4><ul>
<li>國家 national ISP<ul>
<li>國家級的ISP會相互連接，有時候這個連結點也會連結Regional ISP<ul>
<li>這個連接點叫NAP(Network Access Point)</li>
</ul>
</li>
</ul>
</li>
<li>區域 Regional ISP<ul>
<li>Regional ISP點連接起來的叫MAE(Metropolitan Area Exchange)</li>
</ul>
</li>
<li>地區 Local ISP</li>
</ul>
<h4 id="1-2-3-國家和國家之間的ISP"><a href="#1-2-3-國家和國家之間的ISP" class="headerlink" title="1.2.3. 國家和國家之間的ISP"></a>1.2.3. 國家和國家之間的ISP</h4><p>國家跟國家之間用海底電纜連接ISP 服務，如下示意圖：<br><img src="https://i.imgur.com/udIZOLO.jpg" alt="image"></p>
<h4 id="1-2-4-國家內部ISP"><a href="#1-2-4-國家內部ISP" class="headerlink" title="1.2.4. 國家內部ISP"></a>1.2.4. 國家內部ISP</h4><p><img src="https://i.imgur.com/9xI9Pc9.png" alt="image"></p>
<ul>
<li>國家最大的ISP<ul>
<li>稱為 Tier 1 ISP</li>
<li>而最大ISP會再從某一個Router 再跟其它國家連接，如圖框選的紅色圓</li>
</ul>
</li>
<li>國家小的ISP<ul>
<li>會跟大的ISP 連接在一起，會使用IXP(Internet exchange point)</li>
<li>沒有辦法去訪問別的國家ISP(小的ISP沒有海底電纜)，所以一定要跟大的ISP連接，訪問別的國家</li>
</ul>
</li>
<li>ISP環境<ul>
<li>小的ISP向大的ISP購買互聯網，再賣給我們一般用戶</li>
</ul>
</li>
</ul>
<h3 id="1-3-從機房慢慢介紹到如何登入switch、router"><a href="#1-3-從機房慢慢介紹到如何登入switch、router" class="headerlink" title="1.3. 從機房慢慢介紹到如何登入switch、router"></a>1.3. 從機房慢慢介紹到如何登入switch、router</h3><h3 id="1-4-Data-Center-Server-Room"><a href="#1-4-Data-Center-Server-Room" class="headerlink" title="1.4. Data Center&#x2F;Server Room"></a>1.4. Data Center&#x2F;Server Room</h3><p>數據中心的樣貌<br><img src="https://i.imgur.com/sc2ULpR.jpg" alt="image"></p>
<h3 id="1-5-機架-RACK-大小的標準"><a href="#1-5-機架-RACK-大小的標準" class="headerlink" title="1.5. 機架(RACK)大小的標準"></a>1.5. 機架(RACK)大小的標準</h3><p>1U &#x3D; 44mm (厚度)<br>42U RACK<br><img src="https://i.imgur.com/N3GrB0g.jpg" alt="image"></p>
<p><strong>Cisco 系列</strong><br><img src="https://i.imgur.com/bPh95SU.jpg" alt="image"></p>
<ul>
<li>SWITCH<ul>
<li>CISCO Catalyst<ul>
<li>一般用在校園區網或辦公大樓</li>
<li>catalyst 6509 switch<ul>
<li>模塊化設計</li>
</ul>
</li>
<li>cisco Nexus<ul>
<li>主要用在數據中心裡面</li>
<li>數據轉發能力比Catlyst大</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Router<ul>
<li>ASR<ul>
<li>高端一點</li>
<li>差別在數據轉方能力</li>
</ul>
</li>
<li>ISR<ul>
<li>低端一點</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="1-6-交換機觀查"><a href="#1-6-交換機觀查" class="headerlink" title="1.6. 交換機觀查"></a>1.6. 交換機觀查</h3><p><img src="https://i.imgur.com/EMamnL2.png" alt="image"></p>
<ul>
<li>連接交換機的方式，要插console 的那個port</li>
</ul>
<h3 id="1-7-連接交換機的線材介紹"><a href="#1-7-連接交換機的線材介紹" class="headerlink" title="1.7. 連接交換機的線材介紹"></a>1.7. 連接交換機的線材介紹</h3><p><img src="https://i.imgur.com/lUik6NF.jpg" alt="image"></p>
<p><img src="https://i.imgur.com/48fJzNG.png" alt="image"></p>
<h3 id="1-8-連接交換機使用的軟體"><a href="#1-8-連接交換機使用的軟體" class="headerlink" title="1.8. 連接交換機使用的軟體"></a>1.8. 連接交換機使用的軟體</h3><p><img src="https://i.imgur.com/LZ9qzc9.png" alt="image"></p>
<ul>
<li>以前是使用實體的Terminal(終端機)來連線機器</li>
<li>現在可以使用軟體的方式來連線機器</li>
<li>可以使用PuTTY</li>
</ul>
<h3 id="1-9-如何連接與設定"><a href="#1-9-如何連接與設定" class="headerlink" title="1.9. 如何連接與設定"></a>1.9. 如何連接與設定</h3><p><img src="https://i.imgur.com/zEMvG8g.png" alt="image"></p>
<ul>
<li>當插上線之後可以去裝置管理員(Computer Managerment)去查目前的 serrial line 名稱，比如看到的是com4</li>
<li>打開putty 填上com4，speed 默認9600(cisco 都是用這個)</li>
<li>選擇Serial 方式</li>
<li>登入成功如下：<br><img src="https://i.imgur.com/4QWNoLv.png" alt="image"></li>
</ul>
]]></content>
      <categories>
        <category>CCNA</category>
      </categories>
      <tags>
        <tag>CCNA</tag>
      </tags>
  </entry>
  <entry>
    <title>前後端分離架構探討</title>
    <url>/2021/03/30/2021-03-30%20%E5%89%8D%E5%BE%8C%E7%AB%AF%E5%88%86%E9%9B%A2%E6%9E%B6%E6%A7%8B%E6%8E%A2%E8%A8%8E/</url>
    <content><![CDATA[<h2 id="1-好處"><a href="#1-好處" class="headerlink" title="1. 好處"></a>1. 好處</h2><h3 id="1-1-解耦了前後端的工作人員"><a href="#1-1-解耦了前後端的工作人員" class="headerlink" title="1.1. 解耦了前後端的工作人員"></a>1.1. 解耦了前後端的工作人員</h3><p>讓前端和後端分別交給更擅長的人來做，細化了工種，可以更加的專精。前端人員來關心使用者體驗、UI設計、互動渲染；後端人員更關注業務邏輯、效能保障、安全等方面。在專案進度方面，前後端可以並行開發，而互不影響，加快了整體的專案進度。</p>
<span id="more"></span>


<h3 id="1-2-解耦了前後端的程式碼"><a href="#1-2-解耦了前後端的程式碼" class="headerlink" title="1.2. 解耦了前後端的程式碼"></a>1.2. 解耦了前後端的程式碼</h3><p>後端只需提供API服務，不再與靜態檔案互動。後端可以使用更復雜的分散式、微服務架構，提供更好的效能和穩定性保障。同時前端除了PC端之外，移動端也可以使用相同的一套後端服務。</p>
<h2 id="2-適專案考慮是否要前後端分離"><a href="#2-適專案考慮是否要前後端分離" class="headerlink" title="2. 適專案考慮是否要前後端分離"></a>2. 適專案考慮是否要前後端分離</h2><p>並不是所有的專案都需要前後端分離，像是大型的專案，開發人員很多，人員分工明確，這種團隊配置下，使用前後端分離可增加工作效率提高系統質量。但是團隊人員少，分工不那麼明確的情況下，再採用前後端分離的架構，只會增加開發成本和系統複雜度。前後端分離是一個好的架構思路，但是需要看具體的業務和人員情況，切勿盲目的跟從。</p>
<h3 id="2-1-前後端分離常用的認證方式"><a href="#2-1-前後端分離常用的認證方式" class="headerlink" title="2.1. 前後端分離常用的認證方式"></a>2.1. 前後端分離常用的認證方式</h3><p>前後端分離中前後端的互動是通過API進行的，那麼其中的認證是少不了的。前後端分離中常用的認證方式有下面幾種：</p>
<ul>
<li>Session-Cookie</li>
<li>Token 驗證</li>
<li>OAuth(開放授權)</li>
</ul>
<h3 id="2-2-參考連結"><a href="#2-2-參考連結" class="headerlink" title="2.2. 參考連結"></a>2.2. 參考連結</h3><ul>
<li><a href="https://segmentfault.com/a/1190000024571092">談談前後端分離及認證選擇</a></li>
</ul>
]]></content>
      <categories>
        <category>應用架構</category>
        <category>前後端分離</category>
      </categories>
      <tags>
        <tag>應用架構</tag>
        <tag>前後端分離</tag>
      </tags>
  </entry>
  <entry>
    <title>CDN(Content Delivery Network) - 內容傳遞網路</title>
    <url>/2021/04/14/2021-04-14%20CDN(Content%20Delivery%20Network)%20-%20%E5%85%A7%E5%AE%B9%E5%82%B3%E9%81%9E%E7%B6%B2%E8%B7%AF/</url>
    <content><![CDATA[<p><img src="https://i.imgur.com/kOVMSky.png" alt="image"></p>
<span id="more"></span>


<ul>
<li><a href="https://www.youtube.com/watch?v=MgjkRt0xHZg">How to setup a CDN on a website (In under 5 minutes!)</a></li>
<li><a href="https://www.youtube.com/watch?v=HYZdRvekH04">域名解析教程 讲解IP地址CDN设置CNAME设置A记录【愛來教程】</a></li>
</ul>
]]></content>
      <categories>
        <category>CDN</category>
      </categories>
      <tags>
        <tag>CDN</tag>
      </tags>
  </entry>
  <entry>
    <title>CCNA_01</title>
    <url>/2021/04/13/2021-04-13%20CCNA_01/</url>
    <content><![CDATA[<h2 id="1-課程理念及自我介紹"><a href="#1-課程理念及自我介紹" class="headerlink" title="1. 課程理念及自我介紹"></a>1. 課程理念及自我介紹</h2><p><img src="https://i.imgur.com/N8AKFeC.png" alt="image"></p>
<ul>
<li>CCIE</li>
<li>CCNP</li>
<li>CCNA Cisco Certified Network Associate</li>
<li>CCENT</li>
</ul>
<span id="more"></span>


<p>需不需要買真實的機器嗎?</p>
<blockquote>
<p>可以用軟體去模擬練習</p>
</blockquote>
<p>有沒有必要學CCENT呢?</p>
<blockquote>
<p>沒有必要學CCENT，CCENT是把CCNA分成2個部分，這樣要考兩次試。</p>
</blockquote>
<p>如何學習呢?</p>
<blockquote>
<p>搞懂視頻之外，再找CCNA的書藉來看</p>
</blockquote>
<h2 id="2-網路資源"><a href="#2-網路資源" class="headerlink" title="2. 網路資源"></a>2. 網路資源</h2><ul>
<li><p><a href="http://www.csie.sju.edu.tw/cm/course/ccnalist.htm">CCNA綜合實驗練習總覽表(影音教學版)</a></p>
</li>
<li><p><a href="https://www.youtube.com/channel/UCOp_kACnYZL9AOWGBbLvseg/videos">https://www.youtube.com/channel/UCOp_kACnYZL9AOWGBbLvseg/videos</a></p>
</li>
<li><p><a href="https://www.stockfeel.com.tw/tag/topic-server/">https://www.stockfeel.com.tw/tag/topic-server/</a></p>
</li>
<li><p><a href="https://notfalse.net/">https://notfalse.net/</a></p>
</li>
<li><p><a href="https://notfalse.net/66/repeater-hub-bridge-switch">https://notfalse.net/66/repeater-hub-bridge-switch</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>CCNA</category>
      </categories>
      <tags>
        <tag>CCNA</tag>
      </tags>
  </entry>
  <entry>
    <title>Latency and Throughput - 延遲與吞吐量</title>
    <url>/2021/04/14/2021-04-14%20Latency%20and%20Throughput%20-%20%E5%BB%B6%E9%81%B2%E8%88%87%E5%90%9E%E5%90%90%E9%87%8F/</url>
    <content><![CDATA[<h2 id="Latency-延遲"><a href="#Latency-延遲" class="headerlink" title="Latency 延遲"></a>Latency 延遲</h2><p>執行一個操作要花費的「時間長度」。</p>
<span id="more"></span>


<h2 id="Throughput-吞吐量"><a href="#Throughput-吞吐量" class="headerlink" title="Throughput 吞吐量"></a>Throughput 吞吐量</h2><p>以一個時間區間作為單位，單位時間內可以執行「幾次」操作，或運算的「次數」。</p>
<p><strong>系統設計目標</strong><br>可接受的延遲數量下的最大化吞吐量為設計目標。</p>
<p>例子</p>
<blockquote>
<p>有個專門製造汽車的工廠，它製造 1 輛汽車所需要的時間是 8 個小時，而它的生產線在 1 天當中可以製造 120 輛汽車。</p>
</blockquote>
<ul>
<li>Latency 延遲：8 小時。  </li>
<li>Throughput 吞吐量：1 天 120 輛汽車，或者是 1 個小時 5 輛汽車。</li>
</ul>
<h2 id="Latency-in-web"><a href="#Latency-in-web" class="headerlink" title="Latency in web"></a>Latency in web</h2><p>Latency 是效能的一環，它讓我們得以量化，有所依規的來訂定優化的標準。那以 Web 來說的話，Latency 指的就是使用者自發出請求後，等待伺服器回應並回傳給使用者的總花費時間，也等同代表網站「被訪問的速度」。對於第一個請求，對於前面的 14Kb 位元，延遲時間會比較長，因為它包括 DNS 查詢、 TCP 三次握手和安全 TLS 協定。<br><img src="https://i.imgur.com/EnVZEtM.png" alt="image"></p>
<p><img src="https://i.imgur.com/kykhe9g.png" alt="image"></p>
<h3 id="關於延遲的-Web-相關技術"><a href="#關於延遲的-Web-相關技術" class="headerlink" title="關於延遲的 Web 相關技術"></a>關於延遲的 Web 相關技術</h3><ul>
<li><p>圖片的 Lazy Loading</p>
<ul>
<li>這個部分我有實作過，原理是將圖片的路徑放在 data-set 中，再設定設計好的「載入中 placeholder」，透過 Intersection Observer API 來監聽元素是否進入畫面，當圖片元素進入畫面時，透過 JS 將 src 替換掉。需考量瀏覽器支援度。</li>
</ul>
</li>
<li><p>延遲載入 3rd party,script 的屬性 defer 和 async。</p>
<ul>
<li>以下兩者載入過程相同：渲染 DOM 與載入 JS 以非同步方式進行。</li>
<li>defer：執行時間要等到 DOM 解析完成後，才會執行。</li>
<li>async：執行時間是在於 JS 本身載入完成後馬上執行，會中斷 HTML 解析。</li>
</ul>
</li>
<li><p>Preload 和 Prefetch</p>
<ul>
<li><p>Preload：預先載入，但不執行，只在需要時才執行，以 as 屬性分辨檔案類型。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;preload&quot;</span> <span class="attr">src</span>=<span class="string">&quot;style.css&quot;</span> <span class="attr">as</span>=<span class="string">&quot;style&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Prefetch：告訴瀏覽器未來可能用到這個資源，有空再去載就好。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;prefetch&quot;</span> <span class="attr">src</span>=<span class="string">&quot;style.css&quot;</span> <span class="attr">type</span>=<span class="string">&quot;style&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<p><strong>參考連結</strong><br><a href="https://askie.today/system-design-primer-latency-vs-throughput/">系統設計入門：延遲與吞吐量</a></p>
]]></content>
      <categories>
        <category>網路知識</category>
      </categories>
      <tags>
        <tag>Latency</tag>
        <tag>Throughput</tag>
      </tags>
  </entry>
  <entry>
    <title>DLP(Data Loss Prevention) - 資料外洩防護</title>
    <url>/2021/04/14/2021-04-14%20DLP(Data%20Loss%20Prevention)%20-%20%E8%B3%87%E6%96%99%E5%A4%96%E6%B4%A9%E9%98%B2%E8%AD%B7/</url>
    <content><![CDATA[<p>保護您的資料，降低資料外洩成本。</p>
<span id="more"></span>


<ul>
<li><a href="https://www.youtube.com/watch?v=3lxHUay3QzI">Demo | 8.7 | Forcepoint DLP Endpoint
</a><br>-<a href="https://www.trendmicro.com/zh_tw/business/products/user-protection/sps/endpoint/integrated-data-loss-prevention.html">趨勢科技</a></li>
</ul>
]]></content>
      <categories>
        <category>DLP</category>
      </categories>
      <tags>
        <tag>DLP</tag>
      </tags>
  </entry>
  <entry>
    <title>NAT(Network Address Translation) - 網路位址轉換</title>
    <url>/2021/04/14/2021-04-14%20NAT(Network%20Address%20Translation)%20-%20%E7%B6%B2%E8%B7%AF%E4%BD%8D%E5%9D%80%E8%BD%89%E6%8F%9B/</url>
    <content><![CDATA[<p>網路位址轉譯（Network Address Translation, NAT）可以改變封包的傳送端 IP 位址與接收端 IP 位址，減少真實 IP 的使用量，也可以將私有 IP（內部 IP）改變成真實 IP（外部 IP）再傳送到網際網路，只需要向網際網路服務供應商，例如：中華電信（2412-TW）申請一個真實 IP，就可以將公司內部所有的電腦連接到網際網路了，因此 NAT 伺服器是最重要的防火牆成員，也是一種「封包過濾器（Packet filter）」。</p>
<ul>
<li>Cisco設備中，NAT會被應用在Cisco路由器上</li>
</ul>
<span id="more"></span>


<h2 id="1-NAT-伺服器的原理"><a href="#1-NAT-伺服器的原理" class="headerlink" title="1. NAT 伺服器的原理"></a>1. NAT 伺服器的原理</h2><p>NAT 伺服器的連接方式如＜圖一＞所示，一端連接私有網路（內部網路），由企業內部網管人員自行設定私有 IP，可以自由設定但是不可以重覆，不需要支付費用，而且可以減少真實 IP 的使用量；一端連接外部網路（網際網路），由企業向網際網路服務供應商（例如：中華電信）申請真實 IP，必須支付費用。</p>
<p>假設台大電機系的網管人員將網路切割為內部與外部，內部網路的網址設定為 192.168.1.1、192.168.1.2、192.168.1.3；而外部網路的網址為 140.112.66.88，則 NAT 伺服器的功能就是更改封包表頭的傳送端 IP 位址與接收端 IP 位址。</p>
<p>➤傳送封包：假設私有網路（內部網路）的電腦 A 要傳送封包到網際網路（外部網路），所以將封包表頭內的傳送端 IP 位址設定為 192.168.1.1，如（a）所示。</p>
<p>➤轉送封包：NAT 伺服器將封包表頭的傳送端 IP 位址改成 140.112.66.88 再傳送到網際網路（外部網路），並且記錄這個封包來自電腦 A，如（b）所示。</p>
<p>➤接收封包：網際網路（外部網路）要傳送封包到電腦 A，但是封包表頭的接收端 IP 位址設定為 140.112.66.88，因此先由 NAT 伺服器接收進來，如（c）所示。</p>
<p>➤轉送封包：NAT 伺服器將封包表頭的接收端 IP 位址改成 192.168.1.1 再傳送到私有網路（內部網路）的電腦 A，如（d）所示。</p>
<p><img src="https://i.imgur.com/OL1dxor.jpg" alt="image"></p>
<h2 id="2-NAT-伺服器的功能"><a href="#2-NAT-伺服器的功能" class="headerlink" title="2. NAT 伺服器的功能"></a>2. NAT 伺服器的功能</h2><p>➤封包偽裝（IP masquerade）：可以將私有 IP（內部IP）改變成真實 IP（外部 IP）再傳送到網際網路，使網路上的人無法得知私有網路的 IP 分配情形而增加網路安全性。</p>
<p>➤封包過濾：可以攔截網際網路進入私有網路的封包，阻擋怪客（Cracker）的攻擊，所以 NAT 伺服器是最重要的防火牆成員，也是一種「封包過濾器（Packet filter）」。</p>
<p>➤平衡負載：通常使用在網頁伺服器（Web server），一般公司的網頁伺服器同時可能會有數千人連線上來，如果只使用一台主機，一定無法負荷這麼多電腦的連線，我們可以在入口處加裝一台 NAT 伺服器，改變網際網路（外部網路）進入私有網路（內部網路）封包表頭的接收端 IP 位址，使進入的封包分散到不同的主機上，可以減輕單一主機的負擔，也可以增加網路安全性，如下圖所示：</p>
<p><img src="https://i.imgur.com/92gzAXV.jpg" alt="image"></p>
<p><img src="https://i.imgur.com/wNW6xnq.png" alt="image"></p>
<h2 id="3-NAT技術用語"><a href="#3-NAT技術用語" class="headerlink" title="3. NAT技術用語"></a>3. NAT技術用語</h2><ul>
<li>內部網路(Inside Network)</li>
<li>外部網路(Outside Network)</li>
<li>Inside Global位址<ul>
<li>經由Network Information Center或Server Provider所分派的邏輯IP位址</li>
</ul>
</li>
<li>Inside Local位址<ul>
<li>非透過Network Information Center或Server Provider所取得的ip位置</li>
</ul>
</li>
<li>Outside Global位址<ul>
<li>網際網路中實際有效，而且能被繞送的IP位址</li>
</ul>
</li>
<li>Outside Local位址<ul>
<li>外部網際網路中的電腦在內部網路中所運行的IP位址</li>
</ul>
</li>
</ul>
<h2 id="4-私有IP位址"><a href="#4-私有IP位址" class="headerlink" title="4. 私有IP位址"></a>4. 私有IP位址</h2><ul>
<li><p>私有IP位置定義在RFC1918規格中</p>
<ul>
<li>當電腦不需要存取網際網路時，可以只用私有IP位置。私有IP不需要註冊。</li>
</ul>
</li>
<li><p>Link-local位置</p>
<ul>
<li>定義在RFC 3330和RFC 3927文件中</li>
<li>希望在沒有DHCP伺服器的情況之下還能夠提供IP位址</li>
<li>範圍 <code>169.254.0.0/16</code></li>
<li>Link-local Address 所發送或送往出來的網路封包都不能經過<strong>路由器</strong><ul>
<li>這個限制被定義在RFC 3927中，有興趣的話可以參考RFC 3927和RFC 1918文件</li>
</ul>
</li>
</ul>
</li>
<li><p>私有IP範圍<br><img src="https://i.imgur.com/JwookYX.png" alt="image"></p>
</li>
</ul>
<h2 id="5-NAT運行種類"><a href="#5-NAT運行種類" class="headerlink" title="5. NAT運行種類"></a>5. NAT運行種類</h2><ul>
<li>靜態（Static）<ul>
<li>將私有IP位址對應用公有IP位址，採用對應方式一對一，屬於最基本的NAT</li>
</ul>
</li>
<li>動態（Dynamic）<ul>
<li>將一個私有IP位址與一群公有IP位址對應</li>
</ul>
</li>
<li>Overlapping<ul>
<li>將多個私有IP位址與單一一個公有IP位址對應</li>
</ul>
</li>
</ul>
<h2 id="6-NAT穿透技術相關RFC文件"><a href="#6-NAT穿透技術相關RFC文件" class="headerlink" title="6. NAT穿透技術相關RFC文件"></a>6. NAT穿透技術相關RFC文件</h2><p><img src="https://i.imgur.com/bZiat6r.png" alt="image"></p>
<h2 id="7-參考連結"><a href="#7-參考連結" class="headerlink" title="7. 參考連結"></a>7. 參考連結</h2><ul>
<li><a href="https://www.stockfeel.com.tw/nat-%E4%BC%BA%E6%9C%8D%E5%99%A8%E6%98%AF%E4%BB%80%E9%BA%BC%EF%BC%9F%E5%A6%82%E4%BD%95%E9%81%8B%E7%94%A8%EF%BC%9F/">nat-伺服器是什麼？如何運用</a></li>
<li><a href="https://www.netadmin.com.tw/netadmin/zh-tw/technology/9E69BC3BDD3E427C8D1DAF3272983130?page=1">NAT穿透技術 從外部直接溝通私有IP</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10209590">30-28之 WebRTC 連線前傳 - 為什麼 P2P 連線很麻煩 ? ( NAT )</a></li>
</ul>
]]></content>
      <categories>
        <category>NAT</category>
      </categories>
      <tags>
        <tag>NAT</tag>
      </tags>
  </entry>
  <entry>
    <title>VDI(Virtual Desktop Infrastructure)  - 雲端桌面(桌面虛擬化)</title>
    <url>/2021/04/14/2021-04-14%20VDI(Virtual%20Desktop%20Infrastructure)%20-%20%E9%9B%B2%E7%AB%AF%E6%A1%8C%E9%9D%A2(%E6%A1%8C%E9%9D%A2%E8%99%9B%E6%93%AC%E5%8C%96)/</url>
    <content><![CDATA[<p><img src="https://i.imgur.com/ywsWQMO.jpg" alt="image"></p>
<h2 id="VDI-Virtual-Desktop-Infrastructure"><a href="#VDI-Virtual-Desktop-Infrastructure" class="headerlink" title="VDI(Virtual Desktop Infrastructure)"></a>VDI(Virtual Desktop Infrastructure)</h2><span id="more"></span>


<p><code>集中計算，集中管理</code></p>
<ul>
<li>使用者只要透過網路連線，執行遠端虛擬機，使用的硬體資源都是屬於伺服器的。</li>
<li>運行在遠端硬體虛擬化層<br><img src="https://i.imgur.com/FXUInpK.jpg" alt="image"></li>
</ul>
<p>架構特性</p>
<ul>
<li>客戶端的設備性能不需要很好</li>
<li>與傳統的比較，對於作業系統的所有操作與掌控都回到伺服器來決定，也就是集中管理概念</li>
</ul>
<p>探討問題</p>
<ul>
<li>服務器的硬體等級要提升，所有成本都在伺服器的規格上去擴充</li>
<li>客戶端一定要有穩定的網路傳輸，畢竟所有操作都是經由網路傳輸下達指令</li>
</ul>
<h2 id="IDV-Intelligent-Desktop-Virtualization"><a href="#IDV-Intelligent-Desktop-Virtualization" class="headerlink" title="IDV(Intelligent Desktop Virtualization)"></a>IDV(Intelligent Desktop Virtualization)</h2><p><code>分布式計算，集中管理</code></p>
<ul>
<li>IDV技術是由英特爾公司提出的革新性框架</li>
<li>鏡像資源在伺服器端，將鏡像資源配發到客戶端，由客戶端在本地運行虛擬機。</li>
<li>運行在本地硬體虛擬化層<br><img src="https://i.imgur.com/lvBbjdv.jpg" alt="image"></li>
</ul>
<p>架構特性</p>
<ul>
<li>不依賴網路(不需連網)，畢竟使用者在運行系統是在自己的電腦上執行</li>
<li>一樣可以管理虛擬系統的環境，因為是由伺服器配發鏡像到客戶端的，鏡像的管理權限一樣在伺服器端</li>
</ul>
<p>探討問題</p>
<ul>
<li>吃的是客戶端的硬體資源</li>
<li>要求本地硬體必須統一，必須支持VT等帶外特性</li>
</ul>
<h2 id="RDV"><a href="#RDV" class="headerlink" title="RDV"></a>RDV</h2><p><code>分布式計算，集中管理</code><br>RDV又在IDV基礎上進行了改進,終端機器啟動的時候，通過網絡重定向技術從伺服器端獲取很小的系統啟動數據，跟上述二個技術差別在於是運行在<strong>本地物理計算機</strong>。</p>
<p>架構特性</p>
<ul>
<li>運行在本地物理計算機</li>
<li>系統數據在伺服器共享存儲</li>
<li>支持系統緩存到本地運行</li>
<li>支持離線運行</li>
<li>支持工作數據集中存儲和管理</li>
</ul>
<p><img src="https://i.imgur.com/OrrlM5E.jpg" alt="image"></p>
<h2 id="VOI"><a href="#VOI" class="headerlink" title="VOI"></a>VOI</h2><p>VOI技術是直接在I&#x2F;O 層實現對物理存儲介質的數據重定向，以達到虛擬化的操作系統完全工作於本機物理硬件之上。VOI技術是對操作系統存儲層進行重新定義，是改進的無盤工作站方案。其最大特點是管理集中化，性能體驗好。</p>
<h2 id="參考連結"><a href="#參考連結" class="headerlink" title="參考連結"></a>參考連結</h2><p><a href="https://kknews.cc/zh-tw/tech/9nle9yb.html">VDI、IDV、RDV三種雲桌面的區別</a><br><a href="https://kknews.cc/tech/mb64gr2.html">細說桌面虛擬化發展歷程</a></p>
]]></content>
      <categories>
        <category>網路知識</category>
      </categories>
      <tags>
        <tag>網路知識</tag>
        <tag>VDI</tag>
        <tag>IDV</tag>
        <tag>RDV</tag>
        <tag>VOI</tag>
      </tags>
  </entry>
  <entry>
    <title>WAF(Web Application Firewall) - 網路應用程式防火牆</title>
    <url>/2021/04/14/2021-04-14%20WAF(Web%20Application%20Firewall)%20-%20%E7%B6%B2%E8%B7%AF%E6%87%89%E7%94%A8%E7%A8%8B%E5%BC%8F%E9%98%B2%E7%81%AB%E7%89%86/</url>
    <content><![CDATA[<p>Imperva 透過動態學習網頁Web服務的行為來保護這些應用，包括 XML檔、元件、屬性、架構、變數和簡單物件連結協定(SOAP)。Imperva將識別並阻止任何嘗試竄改正常Web服務的行為，還會抵禦應用程式中常見的威脅，如SQL注入、XSS、CSRF等。</p>
<p><img src="https://i.imgur.com/3C7NgBi.png" alt="image"></p>
]]></content>
      <categories>
        <category>WAF</category>
      </categories>
      <tags>
        <tag>WAF</tag>
      </tags>
  </entry>
  <entry>
    <title>python 讀取不同檔案類型</title>
    <url>/2021/04/14/2021-04-14%20python%20%E8%AE%80%E5%8F%96%E4%B8%8D%E5%90%8C%E6%AA%94%E6%A1%88%E9%A1%9E%E5%9E%8B/</url>
    <content><![CDATA[<h2 id="1-PDF"><a href="#1-PDF" class="headerlink" title="1. PDF"></a>1. PDF</h2><span id="more"></span>


<h3 id="1-1-套件名稱"><a href="#1-1-套件名稱" class="headerlink" title="1.1. 套件名稱"></a>1.1. 套件名稱</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pdfminer</span><br></pre></td></tr></table></figure>

<h3 id="1-2-安裝套件"><a href="#1-2-安裝套件" class="headerlink" title="1.2. 安裝套件"></a>1.2. 安裝套件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install pdfminer</span><br></pre></td></tr></table></figure>

<h3 id="1-3-程式碼"><a href="#1-3-程式碼" class="headerlink" title="1.3. 程式碼"></a>1.3. 程式碼</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pdf2txt.py -o b.txt EDC-<span class="number">957</span>-0374-<span class="number">33</span>-<span class="number">0</span>(OK).pdf</span><br></pre></td></tr></table></figure>

<h2 id="2-OCR-jpg…"><a href="#2-OCR-jpg…" class="headerlink" title="2. OCR(jpg…)"></a>2. OCR(jpg…)</h2><h3 id="2-1-安裝"><a href="#2-1-安裝" class="headerlink" title="2.1. 安裝"></a>2.1. 安裝</h3><h4 id="2-1-1-下載安裝執行檔"><a href="#2-1-1-下載安裝執行檔" class="headerlink" title="2.1.1. 下載安裝執行檔"></a>2.1.1. 下載安裝執行檔</h4><figure class="highlight http"><table><tr><td class="code"><pre><span class="line">https://github.com/UB-Mannheim/tesseract/wiki</span><br></pre></td></tr></table></figure>

<p>安裝過程中可以勾選要OCR的語系，其中有包含繁體語系<br>當然也可以上網去抓最新的語系包，參考路徑路下：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">https://github.com/tesseract-ocr/tessdata</span><br></pre></td></tr></table></figure>

<p>實際擺放位置應該會在</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">C:\Program Files\Tesseract-OCR\tessdata</span><br></pre></td></tr></table></figure>

<h4 id="2-1-2-安裝套件"><a href="#2-1-2-安裝套件" class="headerlink" title="2.1.2. 安裝套件"></a>2.1.2. 安裝套件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install pillow</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install pytesseract</span><br></pre></td></tr></table></figure>

<h3 id="2-2-OCR程式碼"><a href="#2-2-OCR程式碼" class="headerlink" title="2.2. OCR程式碼"></a>2.2. OCR程式碼</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> pytesseract</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    pytesseract.pytesseract.tesseract_cmd = <span class="string">r&#x27;XXXXXX\Tesseract-OCR\tesseract.exe&#x27;</span></span><br><span class="line">    <span class="comment">#指定tesseract.exe執行檔位置</span></span><br><span class="line">    img = Image.<span class="built_in">open</span>(<span class="string">&#x27;XXXXXXXX/XXXX.png&#x27;</span>) <span class="comment">#圖片檔案位置</span></span><br><span class="line">    text = pytesseract.image_to_string(img, lang=<span class="string">&#x27;eng&#x27;</span>) <span class="comment">#讀英文</span></span><br><span class="line">    <span class="comment">#text = pytesseract.image_to_string(img, lang=&#x27;chi_sim&#x27;) #簡體中文</span></span><br><span class="line">    <span class="comment">#text = pytesseract.image_to_string(img, lang=&#x27;chi_tra&#x27;) #繁體中文</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h2 id="3-Word-Docx"><a href="#3-Word-Docx" class="headerlink" title="3. Word(Docx)"></a>3. Word(Docx)</h2><h3 id="3-1-Word安裝套件"><a href="#3-1-Word安裝套件" class="headerlink" title="3.1. Word安裝套件"></a>3.1. Word安裝套件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install python-docx</span><br></pre></td></tr></table></figure>

<h3 id="3-2-word-doc-to-docx"><a href="#3-2-word-doc-to-docx" class="headerlink" title="3.2. word doc to docx"></a>3.2. word doc to docx</h3><blockquote>
<ol>
<li>First and foremost, organize all file to be processed in one file folder.</li>
<li>Then open Word and press “Alt+ F11” to open the VBA editor.</li>
<li>Now click “Normal” project and click “Insert” after it.</li>
<li>Next choose “Module” to insert a new module in the project<br><img src="https://i.imgur.com/fv4iazv.jpg" alt="image"></li>
<li>Then double click the module to open the editing area and paste the following codes:</li>
</ol>
</blockquote>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Sub</span> TranslateDocIntoDocx()</span><br><span class="line">  <span class="keyword">Dim</span> objWordApplication As <span class="keyword">New</span> Word.Application</span><br><span class="line">  <span class="keyword">Dim</span> objWordDocument As Word.Document</span><br><span class="line">  <span class="keyword">Dim</span> strFile As String</span><br><span class="line">  <span class="keyword">Dim</span> strFolder As String</span><br><span class="line"></span><br><span class="line">  strFolder = <span class="string">&quot;E:\Temp\&quot;</span></span><br><span class="line">  strFile = Dir(strFolder &amp; <span class="string">&quot;*.doc&quot;</span>, vbNormal)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">While</span> strFile &lt;&gt; <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">With</span> objWordApplication      </span><br><span class="line">      <span class="keyword">Set</span> objWordDocument = .Documents.Open(FileName:=strFolder &amp;strFile, AddToRecentFiles:=<span class="literal">False</span>, ReadOnly:=<span class="literal">True</span>, Visible:=<span class="literal">False</span>)</span><br><span class="line">          </span><br><span class="line">      <span class="keyword">With</span> objWordDocument</span><br><span class="line">        .SaveAs FileName:=strFolder &amp; <span class="built_in">Replace</span>(strFile, <span class="string">&quot;doc&quot;</span>, <span class="string">&quot;docx&quot;</span>), FileFormat:=<span class="number">16</span></span><br><span class="line">        .Close</span><br><span class="line">      <span class="keyword">End</span> <span class="keyword">With</span></span><br><span class="line">    <span class="keyword">End</span> <span class="keyword">With</span></span><br><span class="line">    strFile = Dir()</span><br><span class="line">  <span class="keyword">Wend</span>   </span><br><span class="line"></span><br><span class="line">  <span class="keyword">Set</span> objWordDocument = <span class="literal">Nothing</span></span><br><span class="line">  <span class="keyword">Set</span> objWordApplication = <span class="literal">Nothing</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>6.At last, click “Run” button.<br><img src="https://i.imgur.com/iKuMCMv.jpg" alt="image"></p>
</blockquote>
<ul>
<li><a href="https://www.datanumen.com/blogs/3-quick-ways-to-batch-convert-word-doc-to-docx-files-and-vice-versa/">3 Quick Ways to Batch Convert Word DOC to DOCX Files and Vice Versa</a></li>
</ul>
<h3 id="3-3-Doc-to-Docx程式碼"><a href="#3-3-Doc-to-Docx程式碼" class="headerlink" title="3.3. Doc to Docx程式碼"></a>3.3. Doc to Docx程式碼</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> docx</span><br><span class="line"></span><br><span class="line">doc = docx.Document(<span class="string">&quot;E:/my_word_file.docx&quot;</span>)</span><br><span class="line">fullText = []</span><br><span class="line"><span class="keyword">for</span> para <span class="keyword">in</span> doc.paragraphs:</span><br><span class="line">    fullText.append(para.text)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;\n&#x27;</span>.join(fullText)</span><br><span class="line"></span><br><span class="line"><span class="comment">#with open(&quot;Output.txt&quot;, &quot;w&quot;) as text_file:</span></span><br><span class="line"><span class="comment">#    print(MY_TEXT, file=text_file)</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>HUB&amp;SWITCH&amp;ROUTER</title>
    <url>/2021/04/15/2021-04-15%20HUB%20SWITCH%20ROUTER/</url>
    <content><![CDATA[<h2 id="1-Hub"><a href="#1-Hub" class="headerlink" title="1. Hub"></a>1. Hub</h2><ul>
<li>L1 - 實體層(TCP&#x2F;IP第一層)</li>
<li>每個PORT是互通的</li>
<li>收到封包時，每個PORT上的PC都會收到封包，而其他的PC不處理，所以會丟棄</li>
</ul>
<span id="more"></span>


<p><img src="https://i.imgur.com/vKIhQA9.png" alt="image"></p>
<h2 id="2-Switch"><a href="#2-Switch" class="headerlink" title="2. Switch"></a>2. Switch</h2><ul>
<li>L2 - 資料鏈結層(TCP&#x2F;IP的第二層(MAC))</li>
<li>每個PORT都是個別區隔<ul>
<li>原因在於每個PORT會自動記憶電腦的MAC Address(switch table)</li>
</ul>
</li>
<li>收到封包時，switch會只給該mac address 對象電腦</li>
</ul>
<p><img src="https://i.imgur.com/zxGKaBg.png" alt="image"></p>
<p><img src="https://i.imgur.com/nrIPlCz.png" alt="image"></p>
<h2 id="3-Switch-Layer3"><a href="#3-Switch-Layer3" class="headerlink" title="3. Switch Layer3"></a>3. Switch Layer3</h2><p>同switch，多了routing(路由)的功能</p>
<ul>
<li>L3 - 網路層(TCP&#x2F;IP的第二層及第三、四層(MAC、IP及TCP&#x2F;UDP Port)</li>
<li>仍無法做NAT(網路位置轉譯)功能，除非要像CISCO 65XX 等級的 layer3 switch</li>
</ul>
<h3 id="3-1-Switch-交換機樣式"><a href="#3-1-Switch-交換機樣式" class="headerlink" title="3.1. Switch 交換機樣式"></a>3.1. Switch 交換機樣式</h3><p>盒式（箱式）交換機<br><img src="https://i.imgur.com/aHOAwEr.jpg" alt="image"></p>
<p>桌面式交換機<br><img src="https://i.imgur.com/5QDk9zq.jpg" alt="image"></p>
<p>機櫃式交換機<br><img src="https://i.imgur.com/AVIZ9hC.jpg" alt="image"></p>
<h3 id="3-2-Switch當有數據經過時，如何運作的呢"><a href="#3-2-Switch當有數據經過時，如何運作的呢" class="headerlink" title="3.2. Switch當有數據經過時，如何運作的呢??"></a>3.2. Switch當有數據經過時，如何運作的呢??</h3><ul>
<li>直通轉發<ul>
<li>直接看送信到哪個MAC，就直接投遞訊息，速度快。仰賴ASIC與FPGA晶片的硬體作用</li>
</ul>
</li>
<li>碎片隔離<ul>
<li>看數據的簡要內容，也只不過是斷章取義，不去校驗是否正確。</li>
</ul>
</li>
<li>存儲轉發<ul>
<li>全部讀取一遍後再進行投遞訊息，將錯誤的信息進行丟棄。</li>
</ul>
</li>
</ul>
<p>這3類可以看到速度是由快而慢的，可靠性是逐漸上升的。</p>
<h2 id="4-Router"><a href="#4-Router" class="headerlink" title="4. Router"></a>4. Router</h2><p>交換不同網段的封包、決定封包的傳送方向及路徑</p>
<ul>
<li>L3、L4 - 網路層、傳輸層(TCP&#x2F;IP的第三層及第四層(IP和TCP&#x2F;UDP Port)</li>
<li>功能列表<ul>
<li>Firewall<ul>
<li>我可以決定什麼資料可以進來，什麼資料可以出去</li>
</ul>
</li>
<li>QoS<ul>
<li>我可以決定誰的資料先走，誰可以使用比較大的頻𡪨等等</li>
</ul>
</li>
<li>負載平衡<ul>
<li>我可以使用兩條對外的線路，讓資料平均的在兩個線路上傳輸。一條線路發生故障時，所有的資料流自動移轉到另一條線路上。</li>
</ul>
</li>
<li>NAT<ul>
<li>就是人稱的IP分享器，我可以在內網使用虛擬的IP，這樣可以解決IP不夠的問題，也同時把內網與外網徹底的隔開了</li>
<li>VOIP<ul>
<li>網路電話應用</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="https://i.imgur.com/pEOxGn4.png" alt="image"></p>
<p><img src="https://i.imgur.com/Dy0l5ae.png" alt="image"></p>
<h3 id="4-1-Switch-與-Hub"><a href="#4-1-Switch-與-Hub" class="headerlink" title="4.1. Switch 與 Hub"></a>4.1. Switch 與 Hub</h3><ul>
<li>Switch HUB比 HUB 更有安全性，減少封包碰撞，傳輸更有效率。</li>
<li>使用sniffer 之類的軟體聽取封包，Swtich 無法讓你監聽PC跟ROUTER之間的封包訊息。但是如果是 HUB，無論是這個線段網路上的任何資料，每個Port都收得到。</li>
</ul>
<h3 id="4-2-switch-與-router"><a href="#4-2-switch-與-router" class="headerlink" title="4.2. switch 與 router"></a>4.2. switch 與 router</h3><ul>
<li>switch &amp; hub  are used to create networks</li>
<li>Routers are used to connect networks</li>
</ul>
<h2 id="5-Hub、Switch、Router共同點"><a href="#5-Hub、Switch、Router共同點" class="headerlink" title="5. Hub、Switch、Router共同點"></a>5. Hub、Switch、Router共同點</h2><p>連結多台電腦、傳遞封包，延伸網路範圍、進行廣播。可在區域網路內使用。</p>
<h2 id="6-說明L2-L3"><a href="#6-說明L2-L3" class="headerlink" title="6. 說明L2 L3"></a>6. 說明L2 L3</h2><p>L2、L3、L4、L7  的L  指的是OSI模型中的Layer層</p>
<p>L3 的交換器又稱為IP Switch 或 Switch Router</p>
<h2 id="7-TCP-IP-MODEL-VS-OSI-MODEL"><a href="#7-TCP-IP-MODEL-VS-OSI-MODEL" class="headerlink" title="7. TCP&#x2F;IP MODEL VS OSI MODEL"></a>7. TCP&#x2F;IP MODEL VS OSI MODEL</h2><p><img src="https://i.imgur.com/pjQJeD2.jpg" alt="image"></p>
<p>Layer2<br>L2將實體在網路之間建立邏輯連結，在傳輸過程中處理流量控制及錯誤偵測，L2將實體層的數位訊號封裝成訊框(data frame)，其中訊框包含資料鏈結層的MAC位址，用以識別主機資料來源位址。主要用於區域網路上。</p>
<p>Layer3<br>運用在網路層，在傳輸中將IP位址加入資料組成封包，L3主要以IP運作為主，相比於L2 可橫跨不同實體區域或VLAN的IP路由，在不同網段間互相連通。</p>
<p>Layer4<br>用於傳輸層中，可辨識傳輸層內TCP或UDP埠號(port)，判斷封包是使用哪一種應用協定(http或ftp等)，在傳遞的封包中加入控制信息，以增加服務品質，達成重新導向(redirect)或伺服器的負載平衡(Load Balancing)</p>
<p>Layer7<br>用於應用層中，提供網路應用服務，包含DHCP或瀏覽器(www、http)等，可做Cookie Switch、Session Switch、Url Switch 或是 CDN。</p>
<h2 id="8-參考連結"><a href="#8-參考連結" class="headerlink" title="8. 參考連結"></a>8. 參考連結</h2><ul>
<li><a href="https://hivenson.pixnet.net/blog/post/225842720-l2-switch-%E8%88%87-l3-switch-%E5%B7%AE%E5%88%A5">l2-switch-與-l3-switch-差別</a></li>
<li><a href="http://www.coolsun.idv.tw/modules/xhnewbb/viewtopic.php?topic_id=353">一網情深 : [分享]L2與L3 Switch的差別</a></li>
<li><a href="https://www.youtube.com/watch?v=1z0ULvg_pW8">集線器，交換機和路由器解釋 - 有什麼區別？</a></li>
<li><a href="https://home.gamer.com.tw/creationDetail.php?sn=4247878">L2、L3、L4、L7 Switch與Hub、Router的差異</a></li>
</ul>
]]></content>
      <categories>
        <category>網路知識</category>
      </categories>
      <tags>
        <tag>網路知識</tag>
        <tag>HUB</tag>
        <tag>SWITCH</tag>
        <tag>ROUTER</tag>
      </tags>
  </entry>
  <entry>
    <title>windows batch 指令基本觀念</title>
    <url>/2021/04/15/2021-04-15%20windows%20batch%20%E6%8C%87%E4%BB%A4%E5%9F%BA%E6%9C%AC%E8%A7%80%E5%BF%B5/</url>
    <content><![CDATA[<h2 id="1-中文編碼"><a href="#1-中文編碼" class="headerlink" title="1. 中文編碼"></a>1. 中文編碼</h2><p>Windows Command 視窗，預設開啟時使用的 Code Page 是 950 (Big-5)，<br>請在.bat 檔第一行加入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chcp 65001</span><br></pre></td></tr></table></figure>

<span id="more"></span>


<h2 id="2-檔案包含中文或空白"><a href="#2-檔案包含中文或空白" class="headerlink" title="2. 檔案包含中文或空白"></a>2. 檔案包含中文或空白</h2><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">請在前後加上雙引號</span><br></pre></td></tr></table></figure>

<h2 id="3-7zip-參數"><a href="#3-7zip-參數" class="headerlink" title="3. 7zip 參數"></a>3. 7zip 參數</h2><p>password</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-p&quot;pa$$word @|&quot;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>BAT</category>
      </categories>
      <tags>
        <tag>BAT</tag>
      </tags>
  </entry>
  <entry>
    <title>CCNA_03</title>
    <url>/2021/04/17/2021-04-17%20CCNA_03/</url>
    <content><![CDATA[<h2 id="1-TCP-IP-Protocol-Suite-1-協議的定義，TCP-IP協議族的歷史及定義）"><a href="#1-TCP-IP-Protocol-Suite-1-協議的定義，TCP-IP協議族的歷史及定義）" class="headerlink" title="1. TCP IP Protocol Suite 1(協議的定義，TCP&#x2F;IP協議族的歷史及定義）"></a>1. TCP IP Protocol Suite 1(協議的定義，TCP&#x2F;IP協議族的歷史及定義）</h2><h3 id="1-1-Protocol-協議"><a href="#1-1-Protocol-協議" class="headerlink" title="1.1. Protocol-協議"></a>1.1. Protocol-協議</h3><p>系統與系統之間講的是一個協議，只有2個系統用一個協議才能進行通訊<br>系統的內部我們使用了通訊模型<br>每一層都代表了不同模型，把它拼接起來就是一套系統</p>
<span id="more"></span>


<p>Layered Communication Model 好處</p>
<ul>
<li>Products from different vendors can work together<ul>
<li>所有廠商都參照相同模型，這樣大家的廠商產品才有辦法互相通訊</li>
</ul>
</li>
<li>Provides a common language to describe networking functions and capabilities<ul>
<li>可以單獨開發一層的產品<ul>
<li>到時候可以蓋房子一樣，把這些產品拼接起來</li>
</ul>
</li>
</ul>
</li>
<li>Easy to design protocol</li>
<li>Prevents technology changes in one layer from affecting other layers above and blow<ul>
<li>更新比較容易<ul>
<li>可以針對某一層更新就好，可以不用動到別層<ul>
<li>舉例裝修4樓房子，不用動到別層樓</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>重要規則，只有同一層才能互相通訊<br>四樓只能跟四樓的講話<br><img src="https://i.imgur.com/UF2XO5V.png" alt="image"></p>
<h3 id="1-2-通信的流程"><a href="#1-2-通信的流程" class="headerlink" title="1.2. 通信的流程"></a>1.2. 通信的流程</h3><p><img src="https://i.imgur.com/5Qu4PgB.png" alt="image"><br>假如4樓的想跟對面4樓的說話，寫了一個信封，<br>到了第3層會用再大一點的信封把它包起來，<br>到了第2層會用再大一點的信封把它包起來，<br>到了第1層會用再大一點的信封把它包起來，<br>交由派送員傳到對面<br>接著，經過每一層再逐一拆解最外面的信封。<br>最終第四樓的人就看得到訊息囉</p>
<h3 id="1-3-學習通訊模型"><a href="#1-3-學習通訊模型" class="headerlink" title="1.3. 學習通訊模型"></a>1.3. 學習通訊模型</h3><h4 id="1-3-1-OSI-Model"><a href="#1-3-1-OSI-Model" class="headerlink" title="1.3.1. OSI Model"></a>1.3.1. OSI Model</h4><ul>
<li><p>最早的通訊模型</p>
</li>
<li><p>是一個Reference Model</p>
<ul>
<li>什麼是Reference Model?<ul>
<li>大家在開發系統的時候，只是參考這種模型來開發，並不是100%的遵守<br><img src="https://i.imgur.com/49C5FDF.png" alt="image"></li>
</ul>
</li>
</ul>
</li>
<li><p>表達層(6)</p>
<ul>
<li>加密、解密</li>
</ul>
</li>
<li><p>網路層(3)</p>
<ul>
<li>IP address</li>
</ul>
</li>
</ul>
<h4 id="1-3-2-DoD-Model-Department-of-Defense"><a href="#1-3-2-DoD-Model-Department-of-Defense" class="headerlink" title="1.3.2. DoD Model (Department of Defense)"></a>1.3.2. DoD Model (Department of Defense)</h4><ul>
<li>美國國防部開發出來的<br><img src="https://i.imgur.com/chtlDsm.png" alt="image"></li>
</ul>
<h4 id="1-3-3-TCP-IP-Model-Protocol-Suite"><a href="#1-3-3-TCP-IP-Model-Protocol-Suite" class="headerlink" title="1.3.3. TCP&#x2F;IP Model(Protocol Suite)"></a>1.3.3. TCP&#x2F;IP Model(Protocol Suite)</h4><ul>
<li>我們現在實際使用的模型</li>
<li>可以看作一個水果籃<ul>
<li>每一種水果就相對是一種協議<ul>
<li>最重要的是TCP UDP IP 這3個水果是目前互相聯的基礎<ul>
<li>TCP UDP 是在Transport Layer</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>二層跟一層的協議不屬於TCP&#x2F;IP協議(Ethernet,Token Ring,Frame Relay,ATM)<ul>
<li>它們都是單獨的協議</li>
</ul>
</li>
<li>只有圖中紫色的部分才是屬於TCP&#x2F;IP 協議</li>
</ul>
<p><img src="https://i.imgur.com/XoyWhyw.png" alt="image"></p>
<ul>
<li><p>包裏從哪裡來??</p>
  <figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">從Application來的，比如你有一個應用程序，比如郵件，它會用到SNMP協議</span><br><span class="line">當然你寫了一封郵件按發送，應用程序會產生Data(數據)(parcel)</span><br></pre></td></tr></table></figure>
</li>
<li><p>下一步要做決定? 要買保險嗎??</p>
  <figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">要的話會採用TCP形式傳送</span><br><span class="line">不要的話可以用UDP形式傳送</span><br></pre></td></tr></table></figure>
</li>
<li><p>是誰決定買保險的呢??</p>
  <figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">由程序員決定的</span><br></pre></td></tr></table></figure>
</li>
<li><p>接下來，寫地址</p>
  <figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">IP 協議專門來處理地址的，最大貢獻統一了所有系統的地址格式</span><br></pre></td></tr></table></figure>
</li>
<li><p>這樣就能送件了嗎?? 其實還插了張地圖</p>
  <figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">由Routing Protocol 來負責產生地圖的</span><br><span class="line">路由協議跟IP協議一樣都在第三層工作的</span><br></pre></td></tr></table></figure></li>
</ul>
<p><img src="https://i.imgur.com/7Od9qeb.png" alt="image"></p>
<ul>
<li><p>上述的條件都有了，我們能送件了嗎??</p>
</li>
<li><p>參考圖片，我們從第6區出發到第一區有很多條路徑，但是要走6421還是6531的路徑呢?</p>
</li>
<li><p>通訊系統中是誰來做這個決定呢??</p>
<ul>
<li>答案是第二層協議(Ethernet、token ring、Frame Relay、ATM)</li>
<li>目前應用最廣泛的是Ethernet(乙太網路)</li>
<li>可以是現在的網路百分之99%都是用乙太網協議</li>
</ul>
</li>
<li><p>乙太網協議又是如何決定往哪走呢?</p>
<ul>
<li>它使用的是MAC來決定的</li>
</ul>
</li>
<li><p>我們要記得我們會有兩個地址，一個是三層的IP地址，一個是二層的MAC地址<br><img src="https://i.imgur.com/6T855h1.png" alt="image"></p>
</li>
</ul>
<p>比如我的MAC是屬於MAC4，所以我們就轉發到區域4，當到達到區域4之後，這個MAC4的地址就會被丟棄掉，在第四區會重新獲得一個新的MAC地址，會問區域4的快遞員說，你要往3走還是往2走?以此類推走到目的地。這個就是基本的通訊原理</p>
<p><img src="https://i.imgur.com/yVz6Vvo.png" alt="image"></p>
<h3 id="1-4-Data-Encapsulation"><a href="#1-4-Data-Encapsulation" class="headerlink" title="1.4. Data Encapsulation"></a>1.4. Data Encapsulation</h3><p><img src="https://i.imgur.com/bNAbazi.png" alt="image"></p>
<ul>
<li><p>應用層</p>
<ul>
<li>產生data</li>
</ul>
</li>
<li><p>第四層</p>
<ul>
<li>如果想買保險，我就用TCP header</li>
</ul>
</li>
<li><p>第三層</p>
<ul>
<li>寫上地址IP</li>
</ul>
</li>
<li><p>第二層</p>
<ul>
<li>寫MAC地址，決定下一站要到什麼地方</li>
</ul>
</li>
<li><p>第一層</p>
<ul>
<li>變成0101，電信號出去</li>
</ul>
</li>
<li><p>Transport</p>
<ul>
<li>segment</li>
</ul>
</li>
<li><p>Network</p>
<ul>
<li>packet</li>
</ul>
</li>
<li><p>Data Link</p>
<ul>
<li>frame</li>
</ul>
</li>
<li><p>Physical</p>
<ul>
<li>bits</li>
</ul>
</li>
</ul>
<h3 id="1-5-History-of-TCP-IP-Protocol-Suite"><a href="#1-5-History-of-TCP-IP-Protocol-Suite" class="headerlink" title="1.5. History of TCP&#x2F;IP Protocol Suite"></a>1.5. History of TCP&#x2F;IP Protocol Suite</h3><p><img src="https://i.imgur.com/pEVoNmv.png" alt="image"><br>TCP 負擔太大把IP分出來<br>TCP UDP IP 是裡面最重要的協議</p>
]]></content>
      <categories>
        <category>CCNA</category>
      </categories>
      <tags>
        <tag>CCNA</tag>
      </tags>
  </entry>
  <entry>
    <title>DNS介紹</title>
    <url>/2021/04/18/2021-04-18%20DNS%E4%BB%8B%E7%B4%B9/</url>
    <content><![CDATA[<p>透過 <strong>hosts</strong> 設定檔手動設定主機名稱與 IP 位址是系統與網站管理者常用的除錯技巧，以下我們將介紹這個好用小功能該怎麼使用。</p>
<p>在架設網站時，除了伺服主機的網路設定之外，還要配合 DNS 伺服器才能讓網站正常運作，而 DNS 上面的記錄在變更之後，通常都會需要幾個小時才會生效，所以很多人在架設網站初期都會浪費許多時間在等待 DNS 生效，才進行後續的設定，其實我們可以在 DNS 生效之前，以動的方式自行先設定自己電腦上的 hosts 檔，加速網站的建置工作。</p>
<span id="more"></span>


<h2 id="1-DNS"><a href="#1-DNS" class="headerlink" title="1. DNS"></a>1. DNS</h2><p><img src="https://i.imgur.com/OvwcVPi.png" alt="image"><br>負責將網址轉換成 IP 位址</p>
<h2 id="2-hosts-設定檔是什麼？"><a href="#2-hosts-設定檔是什麼？" class="headerlink" title="2. hosts 設定檔是什麼？"></a>2. hosts 設定檔是什麼？</h2><p>hosts 設定檔的作用跟 DNS 伺服器相同,檔案裡面紀錄了一些網址與 IP 位址的對應表<br>般的電腦在需要查詢網址與 IP 位址的時候，會先開啟這個檔案來查詢，如果這個檔案裡面剛好有電腦需要查詢的對應記錄，就可以直接連上網站來瀏覽；如果從 hosts 設定檔裡面查不到，才會連線至 DNS 伺服器來查詢。如下圖：<br><img src="https://i.imgur.com/WCbp5Di.png" alt="image"></p>
<h2 id="3-如何設定-hosts-檔？"><a href="#3-如何設定-hosts-檔？" class="headerlink" title="3. 如何設定 hosts 檔？"></a>3. 如何設定 hosts 檔？</h2><p>hosts 設定檔在 Windows 與 Linux 系統上都有，而且裡面的資料格式完全一樣，只是放置檔案的目錄有差異而已，以下用windows 系統進行說明：</p>
<p>直接使用cmd or power shell 以系統管理員身份進入以下路徑：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">C:\Windows\System32\drivers\etc\</span><br></pre></td></tr></table></figure>

<p>接著指令輸入,預設就會以vscode 編輯器打開，就可以直接編輯儲存囉。</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">C:<span class="keyword">\Windows</span><span class="keyword">\System</span>32<span class="keyword">\drivers</span><span class="keyword">\etc</span><span class="keyword">\ </span>code hosts</span><br></pre></td></tr></table></figure>

<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="params">#</span> Copyright (c) 1993-2009 Microsoft Corp.</span><br><span class="line"><span class="params">#</span></span><br><span class="line"><span class="params">#</span> This is a sample HOSTS file used by Microsoft TCP/IP for Windows.</span><br><span class="line"><span class="params">#</span></span><br><span class="line"><span class="params">#</span> This file contains the mappings of IP addresses to host names. Each</span><br><span class="line"><span class="params">#</span> entry should be kept on an individual line. The IP address should</span><br><span class="line"><span class="params">#</span> be placed in the first column followed by the corresponding host name.</span><br><span class="line"><span class="params">#</span> The IP address and the host name should be separated by at least one</span><br><span class="line"><span class="params">#</span> space.</span><br><span class="line"><span class="params">#</span></span><br><span class="line"><span class="params">#</span> Additionally, comments (such as these) may be inserted on individual</span><br><span class="line"><span class="params">#</span> lines or following the machine name denoted by a &#x27;<span class="params">#</span>&#x27; symbol.</span><br><span class="line"><span class="params">#</span></span><br><span class="line"><span class="params">#</span> For example:</span><br><span class="line"><span class="params">#</span></span><br><span class="line"><span class="params">#</span>      102.54.94.97     rhino.acme.com          <span class="params">#</span> source server</span><br><span class="line"><span class="params">#</span>       38.25.63.10     x.acme.com              <span class="params">#</span> x client host</span><br><span class="line"></span><br><span class="line"><span class="params">#</span> localhost name resolution is handled within DNS itself.</span><br><span class="line"><span class="params">#</span> 127.0.0.1       localhost</span><br><span class="line"><span class="params">#</span> ::1             localhost</span><br><span class="line"> 127.0.0.1       kite.com.tw</span><br></pre></td></tr></table></figure>

<p>有人也喜歡把dns 設為</p>
<p>223.5.5.5 阿里</p>
<p>8.8.8.8 google</p>
<h3 id="3-1-其它關鍵字"><a href="#3-1-其它關鍵字" class="headerlink" title="3.1. 其它關鍵字"></a>3.1. 其它關鍵字</h3><p>bind9</p>
<h3 id="3-2-參考連結"><a href="#3-2-參考連結" class="headerlink" title="3.2. 參考連結"></a>3.2. 參考連結</h3><ul>
<li><a href="https://blog.miniasp.com/post/2008/08/25/Modify-hosts-file-to-change-Domain-Name-IP-Mapping">手動設定網址對應 IP 的方式 ( 主機 IP 域名對應檔 hosts )</a></li>
<li><a href="https://blog.gtwang.org/windows/windows-linux-hosts-file-configuration/">手動設定網址與 IP 對應的 hosts 檔教學，適用 Windows、Mac OS X 與 Linux 系統</a></li>
<li><a href="https://www.youtube.com/watch?v=1ZBqfuFdBCU">DNS是干什么的？修改hosts的原理又是什么？</a></li>
<li><a href="https://wcc723.github.io/dns/2019/04/25/custom_name_server/">自建 Name Server</a></li>
<li><a href="https://www.youtube.com/watch?v=-kjZq2unnJU">拆解 Domain Name System 網域名稱系統 的運作原理 DNS 基礎概念 教學</a></li>
</ul>
]]></content>
      <categories>
        <category>DNS</category>
      </categories>
      <tags>
        <tag>DNS</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu FTP Server 安裝</title>
    <url>/2021/04/18/2021-04-18%20Ubuntu%20FTP%20Server%20%E5%AE%89%E8%A3%9D/</url>
    <content><![CDATA[<ol>
<li><p>安裝vsftpd</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install vsftpd</span><br></pre></td></tr></table></figure></li>
</ol>
<span id="more"></span>


<ol start="2">
<li><p>如果以前有裝過vsftpd 或者已經移除，如果有發現”&#x2F;etc&#x2F;vsftpd.conf”這個檔案不存在的話，請移除vsftpd再重新安裝一次</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get remove --purge vsftpd</span><br></pre></td></tr></table></figure>
</li>
<li><p>編輯 vsftpd.conf</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo nano /etc/vsftpd.conf</span><br></pre></td></tr></table></figure>
</li>
<li><p>重啟vsftpd</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo service vsftpd restart</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看FTP 狀態</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service vsftpd status</span><br></pre></td></tr></table></figure>
</li>
<li><p>新增一個不能登入 OS 的使用者</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo useradd -M  -s /usr/sbin/nologin user1  </span><br></pre></td></tr></table></figure>
</li>
<li><p>新增此user1帳號的密碼</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo passwd user1</span><br></pre></td></tr></table></figure>
</li>
<li><p>新增與設定資料夾權限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mkdir /home/user1  </span><br><span class="line">sudo chmod 777 /home/user1  </span><br><span class="line">sudo mkdir /home/user1/uploads  </span><br><span class="line">sudo chmod 777 /home/user1/uploads  </span><br><span class="line">sudo chown user1:ftp -R /home/user1</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="1-參考連結"><a href="#1-參考連結" class="headerlink" title="1. 參考連結"></a>1. 參考連結</h2><ul>
<li><a href="https://oranwind.org/-ftp-ubuntu-an-zhuang-ftp-yu-she-ding-apache-du-qu-quan-xian/">ftp ubuntu 安裝 ftp 與設定權限</a></li>
<li><a href="https://www.alvinchen.club/2019/12/11/ubuntu-ftp-server-%E6%9E%B6%E8%A8%AD/">Ubuntu FTP server 架設</a></li>
<li><a href="https://blog.csdn.net/bbc2005/article/details/80034065">Ubuntu安装SFTP服务</a></li>
</ul>
]]></content>
      <categories>
        <category>FTP Server</category>
      </categories>
      <tags>
        <tag>FTP Server</tag>
      </tags>
  </entry>
  <entry>
    <title>CCNA_05</title>
    <url>/2021/04/21/2021-04-21%20CCNA_05/</url>
    <content><![CDATA[<h2 id="1-TCP-IP-Protocol-Suite-3-系统如何识别各层协议，Ethernet-Type，Protocol-Number及Port-Number"><a href="#1-TCP-IP-Protocol-Suite-3-系统如何识别各层协议，Ethernet-Type，Protocol-Number及Port-Number" class="headerlink" title="1. TCP IP Protocol Suite 3(系统如何识别各层协议，Ethernet Type，Protocol Number及Port Number)"></a>1. TCP IP Protocol Suite 3(系统如何识别各层协议，Ethernet Type，Protocol Number及Port Number)</h2><span id="more"></span>


<h3 id="1-1-Layered-System-Review"><a href="#1-1-Layered-System-Review" class="headerlink" title="1.1. Layered System Review"></a>1.1. Layered System Review</h3><p><img src="https://i.imgur.com/QYbUcHW.png" alt="image"></p>
<h3 id="1-2-TCP-UDP-Port-Number"><a href="#1-2-TCP-UDP-Port-Number" class="headerlink" title="1.2. TCP&#x2F;UDP Port Number"></a>1.2. TCP&#x2F;UDP Port Number</h3><p><img src="https://i.imgur.com/ov3P7IB.png" alt="image"></p>
<p>我們在講端口號(Port Number) 時，記得要講清楚是UDP 還是TCP，意味著這2個是不同的應用程序</p>
<h4 id="1-2-1-Port-Number-範圍與規範"><a href="#1-2-1-Port-Number-範圍與規範" class="headerlink" title="1.2.1. Port Number 範圍與規範"></a>1.2.1. Port Number 範圍與規範</h4><ul>
<li>0 to 65535 (TCP &amp; UDP)</li>
<li>0 to 1024<ul>
<li>分配給最常用的應用程序, 比如80 http</li>
</ul>
</li>
<li>1024 to 49151 registred ports<ul>
<li>給Internet Assigned Numbers Authority 組織機構，註冊走了</li>
</ul>
</li>
<li>49152 to 65535 dynamic or private<ul>
<li>比如自己開發遊戲，可以用這邊的端口號</li>
</ul>
</li>
</ul>
<h3 id="1-3-NIC-Ethernet-Type-Protocol-Number"><a href="#1-3-NIC-Ethernet-Type-Protocol-Number" class="headerlink" title="1.3. NIC,Ethernet Type,Protocol Number"></a>1.3. NIC,Ethernet Type,Protocol Number</h3><h4 id="1-3-1-NIC-network-interface-controller-網路介面控制器"><a href="#1-3-1-NIC-network-interface-controller-網路介面控制器" class="headerlink" title="1.3.1. NIC(network interface controller) - 網路介面控制器"></a>1.3.1. NIC(network interface controller) - 網路介面控制器</h4><p>第一層 Physical layer</p>
<ul>
<li>銅線</li>
<li>光纖</li>
<li>Serial port - 串口(v.35標準)<ul>
<li>序列埠或序列埠，序列通信埠，COM埠，簡稱串口</li>
</ul>
</li>
</ul>
<p>銅線和光纖都是根據乙太網協議設計的<br>而串口是根據PPP協議設計的<br><img src="https://i.imgur.com/5nOlzDy.jpg" alt="image"></p>
<h4 id="1-3-2-Ethernet-Type"><a href="#1-3-2-Ethernet-Type" class="headerlink" title="1.3.2. Ethernet Type"></a>1.3.2. Ethernet Type</h4><p>第二層<br>如何判斷要給IPv4 還是IPv6 協議呢??<br>判斷 EtherNet Type <code>0x0800 = IPv4</code> <code>0x86DD = IPv6</code><br><img src="https://i.imgur.com/XyZae4N.png" alt="image"></p>
<h4 id="1-3-3-Protocol-Number"><a href="#1-3-3-Protocol-Number" class="headerlink" title="1.3.3. Protocol Number"></a>1.3.3. Protocol Number</h4><p>第三層<br>到了IP這層header 會記錄 Protocol Number<br>如果header記錄了<code>6</code>那就知道下一步轉發到上一層TCP<br>如果header<code>89</code>那就知道下一步先平行移動轉發到OSPF<br><img src="https://i.imgur.com/UPwucgs.png" alt="image"></p>
<h3 id="1-4-Host-to-Host-Communication"><a href="#1-4-Host-to-Host-Communication" class="headerlink" title="1.4. Host to Host Communication"></a>1.4. Host to Host Communication</h3><p>寫下IP之後，接下來通過路由協議來查看地圖，如果有路由到SERVER，我就把封包往下發送<br>OSPF EIGRP 來確認是否有辦法達到SERVER的路由</p>
<p>ARP是在做IP與MAC的對應</p>
<p><img src="https://i.imgur.com/vTQ2nKy.png" alt="image"></p>
]]></content>
      <categories>
        <category>CCNA</category>
      </categories>
      <tags>
        <tag>CCNA</tag>
        <tag>Port Number</tag>
        <tag>Protocol Number</tag>
      </tags>
  </entry>
  <entry>
    <title>CCNA_06</title>
    <url>/2021/04/23/2021-04-23%20CCNA_06/</url>
    <content><![CDATA[<h2 id="1-TCP-IP-Protocol-Suite-4"><a href="#1-TCP-IP-Protocol-Suite-4" class="headerlink" title="1. TCP IP Protocol Suite 4"></a>1. TCP IP Protocol Suite 4</h2><h3 id="1-1-TCP-UDP-形容圖"><a href="#1-1-TCP-UDP-形容圖" class="headerlink" title="1.1. TCP UDP 形容圖"></a>1.1. TCP UDP 形容圖</h3><p><img src="https://i.imgur.com/Yj1XQAh.png" alt="image"></p>
<span id="more"></span>


<h3 id="1-2-TCP-3-Way-Handshake"><a href="#1-2-TCP-3-Way-Handshake" class="headerlink" title="1.2. TCP 3-Way Handshake"></a>1.2. TCP 3-Way Handshake</h3><h4 id="1-2-1-virtual-circuit-虛擬電路"><a href="#1-2-1-virtual-circuit-虛擬電路" class="headerlink" title="1.2.1. virtual circuit (虛擬電路)"></a>1.2.1. virtual circuit (虛擬電路)</h4><p>在兩個終端系統（End system）間，建立一條連線，來進行資料交換。在使用虛擬電路之前，必須先在兩個節點或軟體應用程式間建立連線。在建立連線之後，兩個節點之間，就可以進行資料串流的交換。概念來自於電路交換</p>
<p>3次握手</p>
<ul>
<li>SYN</li>
<li>SYN-ACK</li>
<li>ACK<br>握手成功後，就開始傳送資料<br>只要任何一次出了問題，就不會傳送資料</li>
</ul>
<p>當資料傳送太快時，會將接收資料先放在buffer區等待處理</p>
<p><img src="https://i.imgur.com/B9RqmdF.png" alt="image"></p>
<h3 id="1-3-TCP-Flow-Control"><a href="#1-3-TCP-Flow-Control" class="headerlink" title="1.3. TCP Flow Control"></a>1.3. TCP Flow Control</h3><p>發送停止命令<br>當有能力再處理資料時，再發送開始命令<br><img src="https://i.imgur.com/NkPom8i.png" alt="image"></p>
<h3 id="1-4-TCP-Sequencing-Acknowledgment"><a href="#1-4-TCP-Sequencing-Acknowledgment" class="headerlink" title="1.4. TCP Sequencing &amp; Acknowledgment"></a>1.4. TCP Sequencing &amp; Acknowledgment</h3><p>當點擊下載10m的檔案時候，其實會拆解成多個包裏傳遞<br>可以解決的問題<br>數據包可能沒有按步驟到達<br>我可以確保每一個數據包都在接受方有收到</p>
<p><img src="https://i.imgur.com/CeVLcoi.png" alt="image"></p>
<h3 id="1-5-TCP-Window-Control"><a href="#1-5-TCP-Window-Control" class="headerlink" title="1.5. TCP Window Control"></a>1.5. TCP Window Control</h3><p>一次能發送多少數據包<br><img src="https://i.imgur.com/aobn75H.png" alt="image"></p>
<h3 id="1-6-TCP-Segment-Format"><a href="#1-6-TCP-Segment-Format" class="headerlink" title="1.6. TCP Segment Format"></a>1.6. TCP Segment Format</h3><p>20 bytes overhead<br><img src="https://i.imgur.com/2d3IlRl.png" alt="image"></p>
<h3 id="1-7-UDP"><a href="#1-7-UDP" class="headerlink" title="1.7. UDP"></a>1.7. UDP</h3><p>8 bytes overhead<br>傳輸速率比TCP快<br>傳送的過程掉包了就掉了，沒有SEQ跟ACK<br>程序員決定TCP跟UDP方式<br>以前的電纜品質比較不好，物理上的質量造成很容易掉包<br>現在的品質比較好，物理上的質量造成的丟包比較少了<br>現在的應用程序比較傾向用UDP<br><img src="https://i.imgur.com/yHi4xR0.png" alt="image"></p>
<h3 id="1-8-回顧第四層協議"><a href="#1-8-回顧第四層協議" class="headerlink" title="1.8. 回顧第四層協議"></a>1.8. 回顧第四層協議</h3><p><img src="https://i.imgur.com/CzdxYnR.png" alt="image"></p>
<h3 id="1-9-TCP與UDP-SUMMARY"><a href="#1-9-TCP與UDP-SUMMARY" class="headerlink" title="1.9. TCP與UDP SUMMARY"></a>1.9. TCP與UDP SUMMARY</h3><p><img src="https://i.imgur.com/9Jzilrj.png" alt="image"></p>
]]></content>
      <categories>
        <category>CCNA</category>
      </categories>
      <tags>
        <tag>CCNA</tag>
        <tag>TCP</tag>
        <tag>UDP</tag>
      </tags>
  </entry>
  <entry>
    <title>CCNA_07</title>
    <url>/2021/04/24/2021-04-24%20CCNA_07/</url>
    <content><![CDATA[<h2 id="1-MAC-Address"><a href="#1-MAC-Address" class="headerlink" title="1. MAC Address"></a>1. MAC Address</h2><h3 id="1-1-Data-Link-Layer-Protocol"><a href="#1-1-Data-Link-Layer-Protocol" class="headerlink" title="1.1. Data Link Layer Protocol"></a>1.1. Data Link Layer Protocol</h3><p>最常用還是Ethernet<br><img src="https://i.imgur.com/bLFkpCO.png" alt="image"></p>
<p><img src="https://i.imgur.com/PfSMWQx.png" alt="image"></p>
<span id="more"></span>


<h3 id="1-2-Ethernet"><a href="#1-2-Ethernet" class="headerlink" title="1.2. Ethernet"></a>1.2. Ethernet</h3><p>為什麼要叫乙太網呢?因為是它具有medium independent 特性<br>copper 銅線<br>Fiber 光纖<br>wireless 無線<br>乙太網跟物理層是不相關的，可以用任何線材去實踐乙太網的規範</p>
<p>Net 是網<br>Ether 是啥<br>乙太是古臘的哲學家亞里斯多德所設想的一種物質<br>被認為是一種電磁波傳播的媒介<br>他認為在空間當中宇宙當中都存在這種物質<br>這種乙太是拿來被傳播電磁波的，只要有乙太的地方都可以傳播電磁波<br>這個概念很符合乙太網，我就可以進行數據傳輸，不需要管下層的媒介是什麼<br>但事實上乙太這個物質是不存在的</p>
<h3 id="1-3-Ethernet-Addressing"><a href="#1-3-Ethernet-Addressing" class="headerlink" title="1.3. Ethernet Addressing"></a>1.3. Ethernet Addressing</h3><p>IP 32 bits<br>MAC 48 bits<br>MAC 地址理論上是全球唯一的<br>但其實也可以用軟體去修改MAC地址<br>前24bit 是廠商的資訊<br>後24bit 根據廠商自己生產分配<br><img src="https://i.imgur.com/8sLiSCo.png" alt="image"></p>
<h3 id="1-4-查詢MAC-Address"><a href="#1-4-查詢MAC-Address" class="headerlink" title="1.4. 查詢MAC Address"></a>1.4. 查詢MAC Address</h3><p><img src="https://i.imgur.com/k8PFQfk.png" alt="image"></p>
<p>知道生產廠商在我們troubleshooting時是有幫助的，比如上可以了解連接到交換機的到底是什麼設備</p>
<h3 id="1-5-乙太網格式"><a href="#1-5-乙太網格式" class="headerlink" title="1.5. 乙太網格式"></a>1.5. 乙太網格式</h3><ul>
<li>Ethernet Type<ul>
<li>如果我的Type 是 0x0800 代表我後面的data 是屬於IPv4</li>
</ul>
</li>
<li>FCS<ul>
<li>FCS 就是一個CRC(Cyclic redundancy check)</li>
<li>過程大概是將data經由hash演算法算完之後，得到一個值(比如值是1234)，放在FCS，接著對方也利用相同的算法檢驗收到的資料，看看算出來得值是否等於FCS所記錄的值1234。</li>
<li>可以檢驗人為或非人為(資料竄改)的資料是否完整</li>
</ul>
</li>
</ul>
<h4 id="1-5-1-Ethernet-Type"><a href="#1-5-1-Ethernet-Type" class="headerlink" title="1.5.1. Ethernet Type"></a>1.5.1. Ethernet Type</h4><ul>
<li>0x0800 IPv4</li>
<li>0x0842 Wake-on-Lan</li>
<li>0x86DD IPv6</li>
<li>0x8906 <code>FCoE (Fibre Channel over Ethernet)</code></li>
</ul>
<p><img src="https://i.imgur.com/37EQhnX.png" alt="image"></p>
<h4 id="1-5-2-CRC-Cyclic-redundancy-check-循環冗餘校驗"><a href="#1-5-2-CRC-Cyclic-redundancy-check-循環冗餘校驗" class="headerlink" title="1.5.2. CRC(Cyclic redundancy check) - 循環冗餘校驗"></a>1.5.2. CRC(Cyclic redundancy check) - 循環冗餘校驗</h4><p>是一種根據網路數據封包或電腦檔案等數據產生簡短固定位數驗證碼的一種散列函數，主要用來檢測或校驗數據傳輸或者保存後可能出現的錯誤。</p>
]]></content>
      <categories>
        <category>CCNA</category>
      </categories>
      <tags>
        <tag>CCNA</tag>
        <tag>MAC Address</tag>
        <tag>CRC</tag>
        <tag>Ethernet Type</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu TFTP Server 安裝</title>
    <url>/2021/04/26/2021-04-26%20Ubuntu%20TFTP%20Server%20%E5%AE%89%E8%A3%9D/</url>
    <content><![CDATA[<p>TFTP (Trivial File Transfer Protocol)，是很常見的通訊協議用在一些小系統上，如 cisco 韌體更新、或是有些廠家會 BIOS 內建 tftp 下載 rom 檔功能。如此輕巧簡易的通訊協議就很常派上用場。</p>
<span id="more"></span>


<h2 id="1-Install"><a href="#1-Install" class="headerlink" title="1. Install"></a>1. Install</h2><ol>
<li><p>Install following packages.</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install xinetd tftpd tftp</span><br></pre></td></tr></table></figure>
</li>
<li><p>Create &#x2F;etc&#x2F;xinetd.d&#x2F;tftp and put this entry</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service tftp</span><br><span class="line">&#123;</span><br><span class="line">protocol        = udp</span><br><span class="line">port            = 69</span><br><span class="line">socket_type     = dgram</span><br><span class="line">wait            = yes</span><br><span class="line">user            = nobody</span><br><span class="line">server          = /usr/sbin/in.tftpd</span><br><span class="line">server_args     = /tftpboot</span><br><span class="line">disable         = no</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Create a folder &#x2F;tftpboot  this should match whatever you gave in server_args. mostly it will be tftpboot</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mkdir /tftpboot</span><br><span class="line">sudo chmod -R 777 /tftpboot</span><br><span class="line">sudo chown -R nobody /tftpboot</span><br></pre></td></tr></table></figure>
</li>
<li><p>Restart the xinetd service</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo /etc/init.d/xinetd stop</span><br><span class="line">sudo /etc/init.d/xinetd start</span><br></pre></td></tr></table></figure></li>
</ol>
<p>Now our tftp server is up and running.</p>
<h2 id="2-Testing-our-tftp-server"><a href="#2-Testing-our-tftp-server" class="headerlink" title="2. Testing our tftp server"></a>2. Testing our tftp server</h2><ol>
<li><p>Create a file named test with some content in &#x2F;tftpboot path of the tftp server</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"> ls / &gt; /tftpboot/test</span><br><span class="line"> sudo chmod -R 777 /tftpboot</span><br><span class="line"> ls /tftpboot/test -lh</span><br><span class="line">-rw-r--r-- 1 thalib thalib 159 2010-03-05 20:48 test</span><br></pre></td></tr></table></figure>
</li>
<li><p>Now in some other system follow the following steps.</p>
</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tftp localhost</span><br><span class="line"><span class="meta prompt_">tftp&gt; </span><span class="language-bash">get <span class="built_in">test</span></span></span><br><span class="line">Sent xxx bytes in 0.0 seconds</span><br><span class="line"><span class="meta prompt_">tftp&gt; </span><span class="language-bash">quit</span></span><br><span class="line">cat test</span><br></pre></td></tr></table></figure>

<h2 id="3-參考資料"><a href="#3-參考資料" class="headerlink" title="3. 參考資料"></a>3. 參考資料</h2><ul>
<li><a href="https://mohammadthalif.wordpress.com/2010/03/05/installing-and-testing-tftpd-in-ubuntudebian/">Installing and Testing TFTP Server in Ubuntu&#x2F;Debian</a></li>
<li><a href="https://yulun.me/2016/setup-tftp-server-on-ubuntu/">架設 tftp server 在 Ubuntu 環境</a></li>
</ul>
]]></content>
      <categories>
        <category>TFTP</category>
      </categories>
      <tags>
        <tag>TFTP</tag>
        <tag>TFTP Server</tag>
      </tags>
  </entry>
  <entry>
    <title>CCNA_04</title>
    <url>/2021/04/27/2021-04-27%20CCNA_04/</url>
    <content><![CDATA[<h2 id="1-TCP-IP-Protocol-Suite-2"><a href="#1-TCP-IP-Protocol-Suite-2" class="headerlink" title="1. TCP IP Protocol Suite 2"></a>1. TCP IP Protocol Suite 2</h2><h3 id="1-1-Telnet"><a href="#1-1-Telnet" class="headerlink" title="1.1. Telnet"></a>1.1. Telnet</h3><p>1969就被開發出來<br>主要用途在用於遠程登入<br>目前很少人用這個方式登入<br><img src="https://i.imgur.com/2a6baDO.png" alt="image"></p>
<p>Telnet 是不安全的<br>wireshark 進行網路抓包<br>使用Telnet 連線，打的帳密可以在wireshark裡面看得很清楚</p>
<span id="more"></span>


<h3 id="1-2-SSH-Secure-Shell-安全外殼協定"><a href="#1-2-SSH-Secure-Shell-安全外殼協定" class="headerlink" title="1.2. SSH(Secure Shell) - 安全外殼協定"></a>1.2. SSH(Secure Shell) - 安全外殼協定</h3><p><img src="https://i.imgur.com/VM6qYG6.png" alt="image"></p>
<ul>
<li><a href="/ib3MOXKETcyR9gzPxuQkiA">Ubuntu SSH Server 安裝</a></li>
</ul>
<h3 id="1-3-FTP-File-Transfer-Protocol-檔案傳輸協定"><a href="#1-3-FTP-File-Transfer-Protocol-檔案傳輸協定" class="headerlink" title="1.3. FTP(File Transfer Protocol) - 檔案傳輸協定"></a>1.3. FTP(File Transfer Protocol) - 檔案傳輸協定</h3><p><img src="https://i.imgur.com/Tyma9Qr.png" alt="image"></p>
<ul>
<li>指令</li>
</ul>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">ftp 1.1.1.1</span><br><span class="line">dir</span><br><span class="line">get filename</span><br><span class="line">quit</span><br></pre></td></tr></table></figure>

<h4 id="1-3-1-FTP-架設"><a href="#1-3-1-FTP-架設" class="headerlink" title="1.3.1. FTP 架設"></a>1.3.1. FTP 架設</h4><ul>
<li><a href="https://hackmd.io/@kite/Ubuntu_FTP_Install">Ubuntu FTP Server 安裝</a></li>
</ul>
<h3 id="1-4-TFTP-Trivial-File-Transfer-Protocol-簡單檔案傳輸協定"><a href="#1-4-TFTP-Trivial-File-Transfer-Protocol-簡單檔案傳輸協定" class="headerlink" title="1.4. TFTP(Trivial File Transfer Protocol) - 簡單檔案傳輸協定"></a>1.4. TFTP(Trivial File Transfer Protocol) - 簡單檔案傳輸協定</h3><p><img src="https://i.imgur.com/5c5aYgL.png" alt="image"><br><img src="https://i.imgur.com/cN7mQPX.png" alt="image"></p>
<h4 id="1-4-1-TFTP-架設"><a href="#1-4-1-TFTP-架設" class="headerlink" title="1.4.1. TFTP 架設"></a>1.4.1. TFTP 架設</h4><p>FTP 可以看到目錄<br>TFTP 看不到目錄，要提前知道檔名才能下載</p>
<ul>
<li><a href="https://hackmd.io/@kite/Ubuntu_TFTP_Install">TFTP 架設</a></li>
</ul>
<h3 id="1-5-TFTP與FTP差異"><a href="#1-5-TFTP與FTP差異" class="headerlink" title="1.5. TFTP與FTP差異"></a>1.5. TFTP與FTP差異</h3><p><img src="https://i.imgur.com/NAx1NFY.png" alt="image"></p>
<h3 id="1-6-SNMP-Simple-Network-Management-Protocol-簡易網路管理通訊協定"><a href="#1-6-SNMP-Simple-Network-Management-Protocol-簡易網路管理通訊協定" class="headerlink" title="1.6. SNMP(Simple Network Management Protocol) - 簡易網路管理通訊協定"></a>1.6. SNMP(Simple Network Management Protocol) - 簡易網路管理通訊協定</h3><h4 id="1-6-1-SNMP管理的網路主要由3個元件所組成"><a href="#1-6-1-SNMP管理的網路主要由3個元件所組成" class="headerlink" title="1.6.1. SNMP管理的網路主要由3個元件所組成"></a>1.6.1. SNMP管理的網路主要由3個元件所組成</h4><ol>
<li>NMS(Network Management System) - 網路管理系統<br> 為安裝於管理端(Manager)的軟體，用以向代理者查詢被管理裝置的相關資訊。</li>
<li>Managed Device - 被管理裝置<br> 是指網路中被監控的設備節點。</li>
<li>Agent - 代理者<br> 為安裝於被管理裝置的軟體，負責監控及回傳被監控設備的相關資訊。</li>
</ol>
<p><img src="https://i.imgur.com/c6dr7P7.png" alt="image"><br>可以監控網路設備、服務器、應用程序、防火牆…等</p>
<h4 id="1-6-2-SNMP-概念"><a href="#1-6-2-SNMP-概念" class="headerlink" title="1.6.2. SNMP 概念"></a>1.6.2. SNMP 概念</h4><p><img src="https://i.imgur.com/3HIITtu.png" alt="image"></p>
<p><code>監控的方式</code></p>
<ul>
<li>polling</li>
<li>SNMP Traps</li>
</ul>
<p><strong>SNMP所定義的五種Manager與Agent溝通指令</strong><br><img src="https://i.imgur.com/YWIiFo5.png" alt="image"></p>
<h4 id="1-6-3-MIB-Management-Information-Base-管理資訊資料庫"><a href="#1-6-3-MIB-Management-Information-Base-管理資訊資料庫" class="headerlink" title="1.6.3. MIB(Management Information Base) - 管理資訊資料庫"></a>1.6.3. MIB(Management Information Base) - 管理資訊資料庫</h4><p>是描述被管理物件的資料結構。SNMP 被設計成可以管理各種網路設備，造成它所管理的訊息也隨著設備有成千上萬種，而每種網路或設備對自己資料的表達方式也不會相同</p>
<p>為了讓這些資訊納入同一套管理系統，就必須採用一套抽象的語法，來描述所有類型的訊息，因此，SNMP 定義了『管理訊息資料庫』（MIB），以階層式來描述所有被管理物件的屬性，並稱這些被管理訊息為『SNMP 物件』（SNMP Object）。</p>
<p>MIB 檔案是 SNMP 管理器可以詢問代理程式的問題集合。如 MIB 中所定義，代理程式在本地收集這些資料並將其存儲。</p>
<p>SNMP Agent是以變數方式呈現被管理裝置的相關資訊，每個變數皆有其唯一的物件識別碼(Object Identifier; OID)，而OID是以階層方式被描述於管理資訊庫(Management Information Base; MIB)，例如OID為1.3.6.1.4.1.9代表Cisco公司。</p>
<p><img src="https://i.imgur.com/GgowT9u.jpg" alt="image"></p>
<h4 id="1-6-4-知名軟體-solarwinds-監控實際狀況"><a href="#1-6-4-知名軟體-solarwinds-監控實際狀況" class="headerlink" title="1.6.4. 知名軟體 solarwinds 監控實際狀況"></a>1.6.4. 知名軟體 solarwinds 監控實際狀況</h4><p><img src="https://i.imgur.com/UDB2vlZ.png" alt="image"></p>
<h4 id="1-6-5-SNMP-架設"><a href="#1-6-5-SNMP-架設" class="headerlink" title="1.6.5. SNMP 架設"></a>1.6.5. SNMP 架設</h4><p><a href="https://www.netadmin.com.tw/netadmin/zh-tw/technology/38DA8ABF30B448EC985421D5D23D1233">https://www.netadmin.com.tw/netadmin/zh-tw/technology/38DA8ABF30B448EC985421D5D23D1233</a></p>
<p>自刻專案</p>
<p><a href="http://ir.hust.edu.tw/bitstream/310993100/2600/1/%E7%B6%B2%E8%B7%AF%E7%AE%A1%E7%90%86%E4%B9%8BSNMP%E5%B0%88%E9%A1%8C%E5%A0%B1%E5%91%8A%E6%9B%B8.pdf">http://ir.hust.edu.tw/bitstream/310993100/2600/1/%E7%B6%B2%E8%B7%AF%E7%AE%A1%E7%90%86%E4%B9%8BSNMP%E5%B0%88%E9%A1%8C%E5%A0%B1%E5%91%8A%E6%9B%B8.pdf</a></p>
<h4 id="1-6-6-參考連結"><a href="#1-6-6-參考連結" class="headerlink" title="1.6.6. 參考連結"></a>1.6.6. 參考連結</h4><ul>
<li><a href="http://www.cc.ntu.edu.tw/chinese/epaper/0047/20181220_4707.html">淺談簡單網路管理協定(SNMP)</a></li>
<li><a href="http://www.tsnien.idv.tw/Internet_WebBook/chap16/16-7%20MIB%20%E8%A8%8A%E6%81%AF%E8%B3%87%E6%96%99%E5%BA%AB.html">TCP&#x2F;IP 協定與 Internet 網路：第十六章 SNMP 網路管理協定</a></li>
<li><a href="https://www.netadmin.com.tw/netadmin/zh-tw/technology/38DA8ABF30B448EC985421D5D23D1233">以SNMP即時監控網站伺服器</a></li>
<li><a href="https://www.youtube.com/watch?v=2IXP0TkwNJU">How SNMP Works - a quick guide</a></li>
</ul>
<h3 id="1-7-DNS-Domain-Name-System-網域名稱系統"><a href="#1-7-DNS-Domain-Name-System-網域名稱系統" class="headerlink" title="1.7. DNS(Domain Name System) - 網域名稱系統"></a>1.7. DNS(Domain Name System) - 網域名稱系統</h3><p>ROOT-domain</p>
<ul>
<li>Top-Level<ul>
<li>edu</li>
<li>gov</li>
<li>com</li>
<li>net</li>
</ul>
</li>
<li>Second-levl<ul>
<li>nsu</li>
<li>mit</li>
<li>google</li>
<li>att</li>
</ul>
</li>
</ul>
<p>目前root domain 有13個server<br>一旦root 出問題了，大家就斷網啦<br><a href="http://www.root-servers.org/">http://www.root-servers.org/</a></p>
<p><img src="https://i.imgur.com/eI53qx5.png" alt="image"><br>Resolves hostnames</p>
<ul>
<li>A record</li>
<li>PTR record</li>
</ul>
<h4 id="1-7-1-Query-Difference"><a href="#1-7-1-Query-Difference" class="headerlink" title="1.7.1. Query Difference"></a>1.7.1. Query Difference</h4><p><img src="https://i.imgur.com/nVi4DIF.png" alt="image"></p>
<ul>
<li>Recursive</li>
<li>Lterative</li>
</ul>
<h4 id="1-7-2-實際使用是用-Recursive-還是-Ilterative-呢"><a href="#1-7-2-實際使用是用-Recursive-還是-Ilterative-呢" class="headerlink" title="1.7.2. 實際使用是用 Recursive 還是 Ilterative 呢?"></a>1.7.2. 實際使用是用 Recursive 還是 Ilterative 呢?</h4><p><img src="https://i.imgur.com/H30mj8P.png" alt="image"></p>
<p>DNS resolver 右邊是 Lterative<br>DNS resolver 左邊是 Recursive</p>
<h4 id="1-7-3-實驗"><a href="#1-7-3-實驗" class="headerlink" title="1.7.3. 實驗"></a>1.7.3. 實驗</h4><p><img src="https://i.imgur.com/NxAqLU3.png" alt="image"></p>
<h4 id="1-7-4-DNS-架設"><a href="#1-7-4-DNS-架設" class="headerlink" title="1.7.4. DNS 架設"></a>1.7.4. DNS 架設</h4><h4 id="1-7-5-相關文章"><a href="#1-7-5-相關文章" class="headerlink" title="1.7.5. 相關文章"></a>1.7.5. 相關文章</h4><ul>
<li><a href="/DIxl6euWSj-1TiPvB0NTaQ">DNS(Domain Name System) - 網域名稱系統</a></li>
</ul>
<h3 id="1-8-HTTP-與-HTTPS"><a href="#1-8-HTTP-與-HTTPS" class="headerlink" title="1.8. HTTP 與 HTTPS"></a>1.8. HTTP 與 HTTPS</h3><p><img src="https://i.imgur.com/fRM9Esy.png" alt="image"></p>
<h4 id="1-8-1-HTTPS-架設"><a href="#1-8-1-HTTPS-架設" class="headerlink" title="1.8.1. HTTPS 架設"></a>1.8.1. HTTPS 架設</h4><h3 id="1-9-NTP-Network-Time-Protocol-網路時間協定"><a href="#1-9-NTP-Network-Time-Protocol-網路時間協定" class="headerlink" title="1.9. NTP(Network Time Protocol) - 網路時間協定"></a>1.9. NTP(Network Time Protocol) - 網路時間協定</h3><h4 id="1-9-1-統一時間的重要性"><a href="#1-9-1-統一時間的重要性" class="headerlink" title="1.9.1. 統一時間的重要性"></a>1.9.1. 統一時間的重要性</h4><ul>
<li>log 檢查，時間不對了，就無法追溯問題</li>
<li>證書的時間，證書是用來加密的，設備與設備之間的通訊利用證書來加密，設備和設備之間時間差不可以大於15分鐘，一旦大於15分鐘，通訊就會失敗</li>
</ul>
<h4 id="1-9-2-同步機制"><a href="#1-9-2-同步機制" class="headerlink" title="1.9.2. 同步機制"></a>1.9.2. 同步機制</h4><p><img src="https://i.imgur.com/sWGSbgr.png" alt="image"><br>比如NTP Server有一條天線，接去到屋頂，使用GPS方式與衛星同步時間<br>比如網路設備與服務連結到NTP SERVER再進行同步<br>比如說核心交換機或區域的伺服器再上一層進行同步<br>達到一級一級的同步(SYNC)<br><em>註：stratum - 層</em></p>
<h4 id="1-9-3-同步的時間源頭種類"><a href="#1-9-3-同步的時間源頭種類" class="headerlink" title="1.9.3. 同步的時間源頭種類"></a>1.9.3. 同步的時間源頭種類</h4><ul>
<li>CDMA&#x2F;GSM</li>
<li>GPS</li>
<li>Radio Wave<br>…<br>商業常見的是使用GPS</li>
</ul>
<h4 id="1-9-4-NTP-Server-架設"><a href="#1-9-4-NTP-Server-架設" class="headerlink" title="1.9.4. NTP Server 架設"></a>1.9.4. NTP Server 架設</h4><ul>
<li><a href="http://slashview.com/archive2013/20131219.html">http://slashview.com/archive2013/20131219.html</a></li>
<li><a href="http://www.tquark.com.tw/zh_tw/Download/NTPServer%E6%9E%B6%E8%A8%AD.pdf">http://www.tquark.com.tw/zh_tw/Download/NTPServer%E6%9E%B6%E8%A8%AD.pdf</a></li>
</ul>
<h3 id="1-10-DHCP-Dynamic-Host-Configuration-Protocol-動態主機設定協定"><a href="#1-10-DHCP-Dynamic-Host-Configuration-Protocol-動態主機設定協定" class="headerlink" title="1.10. DHCP(Dynamic Host Configuration Protocol) - 動態主機設定協定"></a>1.10. DHCP(Dynamic Host Configuration Protocol) - 動態主機設定協定</h3><h4 id="1-10-1-BootP"><a href="#1-10-1-BootP" class="headerlink" title="1.10.1. BootP"></a>1.10.1. BootP</h4><ul>
<li>DHCP 前身</li>
<li>host’s hardware address must be entered <strong>manually</strong> in a BootP table</li>
</ul>
<h4 id="1-10-2-DHCP-主要功能"><a href="#1-10-2-DHCP-主要功能" class="headerlink" title="1.10.2. DHCP 主要功能"></a>1.10.2. DHCP 主要功能</h4><p>可以減少用戶端手動設定 IP 位址的麻煩，並且減少手動設定發生錯誤的機率，又可以節省 IP 位址的使用量。</p>
<ul>
<li>提供IP位置</li>
<li>Subnet mask - 子網路遮罩</li>
<li>Default gateway - 預設閘道器</li>
<li>DNS伺服器 IP</li>
</ul>
<p><img src="https://i.imgur.com/c1wtxVB.png" alt="image"></p>
<h4 id="1-10-3-DHCP-工作流程"><a href="#1-10-3-DHCP-工作流程" class="headerlink" title="1.10.3. DHCP 工作流程"></a>1.10.3. DHCP 工作流程</h4><p><img src="https://i.imgur.com/rAGDQHE.png" alt="image"></p>
<ul>
<li>DHCP Discover - 探索<ul>
<li>用戶端電腦發出廣播封包到整個子網路，向負責這個子網路的DHCP伺服器要求IP位址來連接網路</li>
</ul>
</li>
<li>DHCP Offer - 提供<ul>
<li>DHCP伺服器回應用戶端電腦的要求，指定一個未被使用的IP位置給用戶端電腦使用，比如192.168.10.12</li>
</ul>
</li>
<li>DHCP Request - 回覆<ul>
<li>用戶端電腦收到配發的IP後，發出回覆給DHCP伺服器，表示接受DHCP指定的IP位置</li>
</ul>
</li>
<li>DHCP ACK - 確認<ul>
<li>由DHCP伺服器回應用戶端電腦確認訊號，表示用戶端電腦可以使用這個IP位址連接網路</li>
</ul>
</li>
</ul>
<h4 id="1-10-4-用戶端設定IP方式"><a href="#1-10-4-用戶端設定IP方式" class="headerlink" title="1.10.4. 用戶端設定IP方式"></a>1.10.4. 用戶端設定IP方式</h4><ul>
<li><p>Manual - 手動設定<br>使用者以手動的方式自行為電腦設定 IP 位址，每次連線的 IP 位址是固定的，除非使用者再以手動的方式變更設定</p>
</li>
<li><p>Dynamic - 動態設定<br>用戶端電腦向 DHCP 伺服器要求 IP 位址，DHCP 伺服器動態指定一個未被使用的 IP 位址給用戶端電腦使用，動態設定的 IP 位址通常並不固定</p>
</li>
</ul>
<p><img src="https://i.imgur.com/cVhpE7M.jpg" alt="image"></p>
<h4 id="1-10-5-如果DHCP-死掉了，該怎麼辦-不能有IP上網了"><a href="#1-10-5-如果DHCP-死掉了，該怎麼辦-不能有IP上網了" class="headerlink" title="1.10.5. 如果DHCP 死掉了，該怎麼辦? 不能有IP上網了?"></a>1.10.5. 如果DHCP 死掉了，該怎麼辦? 不能有IP上網了?</h4><p>微軟想到這個問題，Windows 98 之後的 Windows 作業系統都有支援 APIPA</p>
<h4 id="1-10-6-DHCP參考連結"><a href="#1-10-6-DHCP參考連結" class="headerlink" title="1.10.6. DHCP參考連結"></a>1.10.6. DHCP參考連結</h4><ul>
<li><a href="https://www.stockfeel.com.tw/dhcp%E4%BC%BA%E6%9C%8D%E5%99%A8%E6%98%AF%E4%BB%80%E9%BA%BC%EF%BC%9F%E5%A6%82%E4%BD%95%E9%81%8B%E7%94%A8%EF%BC%9F/">DHCP 伺服器是什麼？如何運用？</a></li>
</ul>
<h3 id="1-11-APIPA-Automatic-Private-IP-Addressing"><a href="#1-11-APIPA-Automatic-Private-IP-Addressing" class="headerlink" title="1.11. APIPA (Automatic Private IP Addressing)"></a>1.11. APIPA (Automatic Private IP Addressing)</h3><ul>
<li>生命週期<ul>
<li>APIPA服務會持續每5分鐘一次，週期的檢查 DHCP 伺服器是否出現，如果偵測到 DHCP 伺服器，APIPA 便會停止，原先的IP 相關設定轉為向 DHCP 伺服器要求。</li>
</ul>
</li>
<li>IP範圍<ul>
<li>168.254.0.1 ~ 168.254.255.254(Class B)</li>
</ul>
</li>
<li>遮照範圍<ul>
<li>255.255.0.0</li>
</ul>
</li>
<li>優點<ul>
<li>小型不作路由的網路環境很實用，不需作任何設定，電腦之間就能透過網路連線</li>
</ul>
</li>
</ul>
<h4 id="1-11-1-APIPA-工作流程"><a href="#1-11-1-APIPA-工作流程" class="headerlink" title="1.11.1. APIPA 工作流程"></a>1.11.1. APIPA 工作流程</h4><p>由於 APIPA 是自我指定 IP 位址，因此就有可能產生相同 IP 位址的問題，要避免 IP 衝突的問題，APIPA 用戶端會送出 gratuitous ARP（Address Resolution Protocol）封包，以便宣告我要使用某個 169.254.x.x的 IP 位址，若有其他 APIPA用戶端剛好要用到同樣 IP 位址時，先前佔用此 IP 的用戶便會告訴後者這個 IP 位址已被採用，後者就只好重新配一個 IP 位置，若配到的 IP 位址也被用掉了，就再重覆配置的動作，總共有十次的配置的機會。</p>
<p><img src="https://i.imgur.com/5kD1aOt.png" alt="image"></p>
<h4 id="1-11-2-APIPA參考連結"><a href="#1-11-2-APIPA參考連結" class="headerlink" title="1.11.2. APIPA參考連結"></a>1.11.2. APIPA參考連結</h4><ul>
<li><a href="https://chaomengyang.wordpress.com/2008/05/02/apipa-automatic-private-ip-addressing/">APIPA</a></li>
</ul>
]]></content>
      <categories>
        <category>CCNA</category>
      </categories>
      <tags>
        <tag>CCNA</tag>
        <tag>網路知識</tag>
        <tag>DNS</tag>
        <tag>TFTP</tag>
        <tag>SSH</tag>
        <tag>FTP</tag>
        <tag>SNMP</tag>
        <tag>HTTP</tag>
        <tag>HTTPS</tag>
        <tag>NTP</tag>
        <tag>DHCP</tag>
        <tag>BootP</tag>
        <tag>APIPA</tag>
      </tags>
  </entry>
  <entry>
    <title>CCNA_08</title>
    <url>/2021/04/28/2021-04-28%20CCNA_08/</url>
    <content><![CDATA[<h2 id="1-IP-Address"><a href="#1-IP-Address" class="headerlink" title="1. IP Address"></a>1. IP Address</h2><h3 id="1-1-Hierarchical-IP-Addressing"><a href="#1-1-Hierarchical-IP-Addressing" class="headerlink" title="1.1. Hierarchical IP Addressing"></a>1.1. Hierarchical IP Addressing</h3><p>MAC address is <strong>flat</strong> or <strong>non-hierarchical</strong> schema</p>
<p>如果用MAC 地址當作互相聯基礎，這樣每個node都必須儲存所有node資訊，搜尋效率也比較慢</p>
<p><img src="https://i.imgur.com/XGPcDLz.png" alt="image"></p>
<span id="more"></span>


<h3 id="1-2-IP-Address-Class"><a href="#1-2-IP-Address-Class" class="headerlink" title="1.2. IP Address Class"></a>1.2. IP Address Class</h3><p><img src="https://i.imgur.com/SM18cie.png" alt="image"></p>
<p>IP Address &#x3D; Network Address + Node(host) Address<br>網段 + 每一台電腦的主機地址</p>
<p>Class A 與 Class C 比較說明</p>
<h3 id="1-3-Identify-the-Class"><a href="#1-3-Identify-the-Class" class="headerlink" title="1.3. Identify the Class"></a>1.3. Identify the Class</h3><p><img src="https://i.imgur.com/78eaxoN.png" alt="image"></p>
<ul>
<li>127.0.0.1<ul>
<li>指自己的電腦</li>
</ul>
</li>
</ul>
<p><img src="https://i.imgur.com/Q2EtNoz.png" alt="image"><br><img src="https://i.imgur.com/5ZZN5L1.png" alt="image"><br><img src="https://i.imgur.com/wmkBDrX.png" alt="image"></p>
<p><img src="https://i.imgur.com/uoizwQV.png" alt="image"></p>
<p>私有不可以在互聯網路由<br>NAT<br>公有轉私有<br>私有轉公有</p>
<h3 id="1-4-ARP"><a href="#1-4-ARP" class="headerlink" title="1.4. ARP"></a>1.4. ARP</h3><p>2.5 層<br>要Ping 地址，會經過學習.<br>如圖廣播一樣<br>確認了對方的MAC 之後，就會記錄起來了，之後再進行通訊</p>
<p><img src="https://i.imgur.com/5jY6pYl.png" alt="image"></p>
<p><img src="https://i.imgur.com/qum2Hno.png" alt="image"><br><img src="https://i.imgur.com/XO3MBLu.png" alt="image"><br><img src="https://i.imgur.com/YHcAUF8.png" alt="image"></p>
<h3 id="1-5-Layer-2-Broadcast"><a href="#1-5-Layer-2-Broadcast" class="headerlink" title="1.5. Layer 2 Broadcast"></a>1.5. Layer 2 Broadcast</h3><p>如何得知這個封包是廣播封包<br>呢?<br>確認目標地址</p>
<ul>
<li>ff:ff:ff:ff:ff:ff<br><img src="https://i.imgur.com/ZrFQ6jb.png" alt="image"><br><img src="https://i.imgur.com/xUM8KfL.png" alt="image"></li>
</ul>
<h3 id="1-6-Layer-3-Broadcast"><a href="#1-6-Layer-3-Broadcast" class="headerlink" title="1.6. Layer 3 Broadcast"></a>1.6. Layer 3 Broadcast</h3><p>當ping 192.168.1.255 時，在第二層MAC 目標地址會自動變成 ff:ff:ff:ff:ff:ff<br>交換機(L2)收到的時候，才會知道這個是廣播封包。<br><img src="https://i.imgur.com/JpIiaoF.png" alt="image"></p>
<h3 id="1-7-Unicast"><a href="#1-7-Unicast" class="headerlink" title="1.7. Unicast"></a>1.7. Unicast</h3><p><img src="https://i.imgur.com/AwTJP2w.png" alt="image"></p>
<h2 id="2-Multicast"><a href="#2-Multicast" class="headerlink" title="2. Multicast"></a>2. Multicast</h2><p><img src="https://i.imgur.com/Ye53ZWp.png" alt="image"></p>
]]></content>
      <categories>
        <category>CCNA</category>
      </categories>
      <tags>
        <tag>CCNA</tag>
      </tags>
  </entry>
  <entry>
    <title>CCNA_09</title>
    <url>/2021/04/30/2021-04-30%20CCNA_09/</url>
    <content><![CDATA[<h2 id="1-Subnetting-1"><a href="#1-Subnetting-1" class="headerlink" title="1. Subnetting 1"></a>1. Subnetting 1</h2><p>Subnetting 劃分子網，大的網路地址劃分地小的網路地址範圍</p>
<p>為什麼要劃分?</p>
<span id="more"></span>


<ul>
<li>More Secure<ul>
<li>網路安全<br>HR + IT + Sale 如果都在同一個網域裡，就可以直接訪問IT，顯然不安全…</li>
</ul>
</li>
<li>Easier to Manager<ul>
<li>好管理<ul>
<li>比如針對IT部門做決策政策管理，就可以直接找同網段的IP即可<br><img src="https://i.imgur.com/bF3RB7C.png" alt="image"></li>
</ul>
</li>
</ul>
</li>
<li>Save IP Address<ul>
<li>節省地址空間<br>以下範例說明了浪費，Class C 2^8 - 2 個地址可用<ul>
<li>192.168.10.0 HR</li>
<li>192.168.20.0 IT</li>
<li>192.168.30.0 Sale</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="2-Why-you-need-subnetting"><a href="#2-Why-you-need-subnetting" class="headerlink" title="2. Why you need subnetting"></a>2. Why you need subnetting</h2><p>把一個網段劃分成若干網段<br><img src="https://i.imgur.com/WaYd8ge.png" alt="image"></p>
<h2 id="3-How-to-create-subnets"><a href="#3-How-to-create-subnets" class="headerlink" title="3. How to create subnets"></a>3. How to create subnets</h2><p><img src="https://i.imgur.com/yFWbRUY.png" alt="image"></p>
<p>Classful 沒進行子網劃分稱為有類<br>Classless 進擁子網劃分稱為無類<br>複習一下<br>Class A 8 + 24<br>Class B 16 + 16<br>Class C 24 + 8</p>
<h2 id="4-Subnet-Mask"><a href="#4-Subnet-Mask" class="headerlink" title="4. Subnet Mask"></a>4. Subnet Mask</h2><p>給你這3個ip 是無法判斷是否為同網段</p>
<ul>
<li>192.168.1.1</li>
<li>192.168.1.129</li>
<li>192.168.1.254</li>
</ul>
<p>只有IP Address + Subnet Mask 才能判斷是否為同一個網段</p>
<p><img src="https://i.imgur.com/FIisjlB.png" alt="image"></p>
<p><img src="https://i.imgur.com/ZxUBMIy.png" alt="image"></p>
<h2 id="5-Classless-Inter-Domain-Routing-CIDR"><a href="#5-Classless-Inter-Domain-Routing-CIDR" class="headerlink" title="5. Classless Inter-Domain Routing (CIDR)"></a>5. Classless Inter-Domain Routing (CIDR)</h2><p><img src="https://i.imgur.com/hANy2d0.png" alt="image"></p>
<p>Subnet Mask<br>不能迅速告訴我借了多少bit給network，所以可以用CIDR<br>CIDR<br>又稱為Slash Notation<br>Prefix<br>&#x2F;8 代表有8個網路位<br>以&#x2F;26為例</p>
<h2 id="6-Subnet-Mask-with-CIDR"><a href="#6-Subnet-Mask-with-CIDR" class="headerlink" title="6. Subnet Mask with CIDR"></a>6. Subnet Mask with CIDR</h2><p>思科設備大部分是以MASK 進行設定，其它廠商有時候會以CIDR進行設定<br><img src="https://i.imgur.com/5ED86zA.png" alt="image"></p>
<ul>
<li>IP&#x2F;32<ul>
<li>代表是一個主機</li>
</ul>
</li>
<li>IP&#x2F;30<ul>
<li>2^-2 &#x3D; 2</li>
<li>最小網段</li>
<li>如何確認另一個IP是哪一個呢?<ul>
<li>Tips</li>
<li>the lower IP is always odd,and the higher is always even</li>
</ul>
</li>
</ul>
</li>
<li>IP&#x2F;31<ul>
<li>是理論上最小的網段</li>
<li>2個HOST彼此之間溝通，不需要再有頭跟尾的IP需求(網路、廣播)</li>
<li>能否設定IP&#x2F;31 要看硬體設備是否有支持這樣的作法<br><img src="https://i.imgur.com/iiqD35a.png" alt="image"></li>
</ul>
</li>
</ul>
<h2 id="7-Subnet-Zero"><a href="#7-Subnet-Zero" class="headerlink" title="7. Subnet Zero"></a>7. Subnet Zero</h2><p>思科設備在版本12.x 以前 subnet zero 是不允許使用的</p>
<p><img src="https://i.imgur.com/vJD8OrS.png" alt="image"></p>
]]></content>
      <categories>
        <category>CCNA</category>
      </categories>
      <tags>
        <tag>CCNA</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu SSH Server 安裝</title>
    <url>/2021/04/30/2021-04-30%20Ubuntu%20SSH%20Server%20%E5%AE%89%E8%A3%9D/</url>
    <content><![CDATA[<ol>
<li><p>開啟 Terminal</p>
</li>
<li><p>安裝openSSH Server</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install -y openssh-server</span><br></pre></td></tr></table></figure></li>
</ol>
<span id="more"></span>


<ol start="3">
<li><p>確認SSH服務</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo service ssh status</span><br></pre></td></tr></table></figure>
</li>
<li><p>安裝網路指令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install net-tools</span><br></pre></td></tr></table></figure>
</li>
<li><p>查詢IP</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 PuTTY or ZOC 軟體連線</p>
</li>
</ol>
]]></content>
      <categories>
        <category>SSH</category>
      </categories>
      <tags>
        <tag>SSH</tag>
        <tag>SSH Server</tag>
        <tag>SSH Client</tag>
      </tags>
  </entry>
  <entry>
    <title>DRY、KISS、YAGNI三原則的理解</title>
    <url>/2021/05/06/2021-05-06%20DRY%E3%80%81KISS%E3%80%81YAGNI%E4%B8%89%E5%8E%9F%E5%89%87%E7%9A%84%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<p>軟件三原則的個人理解<br>在軟件的設計當中前人已經總結了許多的設計原則和設計模式。例如SOLID，GRASP設計原則，這些原則都是基於面向對象設計總結而來的。而GOF23是基於許多常見的場景總結出了一套設計模式，在我們遇到類似的場景，都可以套用設計模式。而今天所講到的軟件三原則是適用於在軟件設計的各個層面的。它不僅適用於面向對象的設計，也適用於面向過程的程序設計；不僅適用於類的設計，也適用於模塊、子系統的設計。就連在項目架構運維部署中也適用於這一套簡單的法則。</p>
<span id="more"></span>


<h2 id="1-DRY-Don’t-Repeat-Yourself"><a href="#1-DRY-Don’t-Repeat-Yourself" class="headerlink" title="1. DRY - Don’t Repeat Yourself"></a>1. DRY - Don’t Repeat Yourself</h2><p>第一條準則是千萬不要重複你自身。盡量在項目中減少重複的代碼行，重複的方法，重複的模塊。其實許多設計原則和模式最本質的思想都是在消除重複。&#x3D;&#x3D;我們經常提起的重用性和可維護性其實是基於減少重複這一簡單的思想&#x3D;&#x3D;。為什麼現在微服務盛行呢？正是因為將系統中的服務進行抽取的話，便減少了重複。重複冗餘在維護代碼的時候將是非常困難的。 DRY意味著系統內的每一個部件都應該是唯一的並且是不模糊的。我們可以&#x3D;&#x3D;通過應用單一職責接口隔離等原則盡量拆分系統，模塊，類，方法·。使其每一個部件都是職責明確的並且可重用的。&#x3D;&#x3D;</p>
<h2 id="2-KISS-Keep-It-Simple-Stupid"><a href="#2-KISS-Keep-It-Simple-Stupid" class="headerlink" title="2. KISS - Keep It Simple &amp; Stupid"></a>2. KISS - Keep It Simple &amp; Stupid</h2><p>第二條準則是保持簡單易懂。從小到幾行代碼的寫法大到整個系統的架構我們都應該保持簡單易懂。高手高就高在可以將復雜的東西“簡單”的實現出來。剛入行的時候，我總喜歡用三目運算符將復雜的邏輯用一句冗長的代碼行寫出來。後面才發現這是非常愚蠢的。到了重構或者需求變更的時候，連我自己寫的代碼我都看著非常費勁難以下手。所以我們應該致力於代碼的可理解性。降低複雜度也意味著維護變得簡單。 &#x3D;&#x3D;Martin Flower在《重構》中有一句經典的話：”任何一個傻瓜都能寫出計算機可以理解的程序，只有寫出人類容易理解的程序才是優秀的程序員。”&#x3D;&#x3D; 其實不光是程序，這個原則也可以延伸到產品的設計，業務的設計，項目結構的設計上。</p>
<h2 id="3-YAGNI-You-Ain’t-Gonna-Need-It"><a href="#3-YAGNI-You-Ain’t-Gonna-Need-It" class="headerlink" title="3. YAGNI - You Ain’t Gonna Need It"></a>3. YAGNI - You Ain’t Gonna Need It</h2><p>&#x3D;&#x3D;第三條準則是你將不會需要它。千萬不要進行過度設計。&#x3D;&#x3D; 我們經常會在開發當中盡可能的迎合未來可能的需求。而為了迎合某些產生概率極低的需求而設計的成本是非常高的，這種過度設計的收益非常低。可能你深思熟慮的設計花了不少時間成本，卻在未來的兩三年內這個設計卻完全沒有派上用場。一些設計是否必要，更多的應該基於當前的情況。而不是為了應對未來的各種變化，畫蛇添足的設計。如果淘寶一開始就往日均交易上億的情況進行設計的話，那麼可能就不會有今天的淘寶了。因為創業公司的時間是非常寶貴的，比其他公司早一步退出新的服務就能搶占先機。並不是說淘寶不需要考慮以後交易量暴增的情況，而是不應該以當前日均交易才幾萬的情況下去設計編碼日均交易上億的項目。過度設計往往會延緩開發迭代的速度。</p>
<blockquote>
<p>YAGNI 原則想到想當在讀易讀程式碼之美學時，也有講到類似的概念，主要是釐清需求範圍跟可能發生的狀況，將會大大減少不必要的開發成本與過度開發可能沒用到的功能</p>
</blockquote>
<h3 id="3-1-參考資料"><a href="#3-1-參考資料" class="headerlink" title="3.1. 參考資料"></a>3.1. 參考資料</h3><ul>
<li><a href="https://juejin.im/post/5d65da856fb9a06ac93cdf5a#heading-3">DRY、KISS、YAGNI三原则的理解</a></li>
</ul>
]]></content>
      <categories>
        <category>軟體思維</category>
      </categories>
      <tags>
        <tag>軟體思維</tag>
      </tags>
  </entry>
  <entry>
    <title>CCNA_11</title>
    <url>/2021/05/02/2021-05-02%20CCNA_11/</url>
    <content><![CDATA[<h2 id="1-Physical-Layer"><a href="#1-Physical-Layer" class="headerlink" title="1. Physical Layer"></a>1. Physical Layer</h2><h3 id="1-1-物理層拓璞"><a href="#1-1-物理層拓璞" class="headerlink" title="1.1. 物理層拓璞"></a>1.1. 物理層拓璞</h3><p><img src="https://i.imgur.com/u9mPd2p.png"></p>
<span id="more"></span>


<h3 id="1-2-Network-Cabling-網路線"><a href="#1-2-Network-Cabling-網路線" class="headerlink" title="1.2. Network Cabling 網路線"></a>1.2. Network Cabling 網路線</h3><p>只要可以傳播數據的我們都可以稱為是網線</p>
<p><img src="https://i.imgur.com/cwwmAnQ.png"></p>
<h3 id="1-3-Ethernet-Cabling"><a href="#1-3-Ethernet-Cabling" class="headerlink" title="1.3. Ethernet Cabling"></a>1.3. Ethernet Cabling</h3><p>最常見的為雙絞線<br><img src="https://i.imgur.com/NoGy76d.png"></p>
<h3 id="1-4-Twisted-Pair-Cable"><a href="#1-4-Twisted-Pair-Cable" class="headerlink" title="1.4. Twisted Pair Cable"></a>1.4. Twisted Pair Cable</h3><ul>
<li>UTP</li>
<li>STP<ul>
<li>減少電磁波的干擾</li>
</ul>
</li>
</ul>
<p>STP 相對貴一些<br>但是現在的UTP 其實不太影響，除非是很特殊的環境</p>
<p><img src="https://i.imgur.com/SAODf43.png"></p>
<h3 id="1-5-UTP-Categories"><a href="#1-5-UTP-Categories" class="headerlink" title="1.5. UTP Categories"></a>1.5. UTP Categories</h3><p>CAT 是指Categories<br><img src="https://i.imgur.com/OyKQUb6.png"></p>
<h3 id="1-6-UTP-Connector"><a href="#1-6-UTP-Connector" class="headerlink" title="1.6. UTP Connector"></a>1.6. UTP Connector</h3><p>凹的是JACK<br>凸的是PLUG<br><img src="https://i.imgur.com/1qQEKCM.png"></p>
<h3 id="1-7-RJ-45-接線標準"><a href="#1-7-RJ-45-接線標準" class="headerlink" title="1.7. RJ-45 接線標準"></a>1.7. RJ-45 接線標準</h3><p><img src="https://i.imgur.com/JsWt4mG.png"><br>現在常用的是T568B<br>白橙橙白綠藍白藍綠白棕棕<br>RJ-11 電話線</p>
<h3 id="1-8-Straight-Through-Cable"><a href="#1-8-Straight-Through-Cable" class="headerlink" title="1.8. Straight-Through Cable"></a>1.8. Straight-Through Cable</h3><p>不同種類的設備的連線</p>
<ul>
<li>Host to Switch</li>
<li>Router to Switch</li>
<li>Host to Router</li>
</ul>
<h3 id="1-9-Crossover-Cable"><a href="#1-9-Crossover-Cable" class="headerlink" title="1.9. Crossover Cable"></a>1.9. Crossover Cable</h3><p>同種設備的連線</p>
<ul>
<li>Host to Host</li>
<li>Switch to Switch </li>
<li>Router to Router</li>
</ul>
<p>不過目前是可以直接使用Straight-Through Cable ,系統偵測如果線序是不一致的，會進行跳線轉換<br>Automatic Medium-Dependent Interface Crossover(Auto-MDIX)<br><img src="https://i.imgur.com/mXvVaq7.png"></p>
<h3 id="1-10-Rolled-Cable"><a href="#1-10-Rolled-Cable" class="headerlink" title="1.10. Rolled Cable"></a>1.10. Rolled Cable</h3><p>Console cable 就是用這種線序<br><img src="https://i.imgur.com/AlcnAUf.png"></p>
<h3 id="1-11-Fiber-Optic"><a href="#1-11-Fiber-Optic" class="headerlink" title="1.11. Fiber Optic"></a>1.11. Fiber Optic</h3><ul>
<li>Single-mode 單模<ul>
<li>遠距離傳輸</li>
<li>較貴</li>
</ul>
</li>
<li>Multi-mode 多模<ul>
<li>近距離傳輸</li>
</ul>
</li>
</ul>
<p>光纖使用的光<br>請不要用眼睛直接看裡面的光</p>
<ul>
<li>LED</li>
<li>激光<ul>
<li>激光對視網模會造成損害</li>
</ul>
</li>
</ul>
<p><img src="https://i.imgur.com/1T6GPQT.jpg"></p>
<h3 id="1-12-OM-Optical-Multimode"><a href="#1-12-OM-Optical-Multimode" class="headerlink" title="1.12. OM (Optical Multimode)"></a>1.12. OM (Optical Multimode)</h3><p>大部分會使用OM3</p>
<ul>
<li>OM1</li>
<li>OM2</li>
<li>OM3</li>
<li>OM4<br><img src="https://i.imgur.com/YB3GL9Z.png"><br><img src="https://i.imgur.com/OKsNXuq.png"></li>
</ul>
<h3 id="1-13-Fiber-Connector"><a href="#1-13-Fiber-Connector" class="headerlink" title="1.13. Fiber Connector"></a>1.13. Fiber Connector</h3><p>光纖的接口叫connect<br>最常見的是SC、LC<br>比較舊的設備是用SC<br>現在比較常用的是LC<br><img src="https://i.imgur.com/TLXpuJ3.png"><br><img src="https://i.imgur.com/1RbmFrt.png"></p>
<h3 id="1-14-SFP-Transceiver"><a href="#1-14-SFP-Transceiver" class="headerlink" title="1.14. SFP Transceiver"></a>1.14. SFP Transceiver</h3><p>當有了線有了頭，還要一個東西就是這個，這個東西叫模塊<br>買交接機的時候要注意一下後面是固定的RJ-45接口呢還是空的位置讓你插<br>SFP 也可以拿來接RJ-45的哦!!<br><img src="https://i.imgur.com/1Lub1X1.png"></p>
<h3 id="1-15-Transceiver-Code"><a href="#1-15-Transceiver-Code" class="headerlink" title="1.15. Transceiver Code"></a>1.15. Transceiver Code</h3><p>太多種了，只講以下兩種</p>
<ul>
<li>SR stnads for Short Reach(10GBase-SR)<ul>
<li>Short Range</li>
<li>Almost always multi-mode (多模)</li>
</ul>
</li>
<li>LR stands for Long Reach(10GBase-LR)<ul>
<li>Long Range</li>
<li>Either multi-mode or single-mode(單模)</li>
</ul>
</li>
</ul>
<p>當在買模塊的時候，要考慮線材是多模的還是單模的，再去挑對應的模塊代號</p>
<p><img src="https://i.imgur.com/58n2Igo.png"></p>
<h3 id="1-16-Simple-HalfDuplex-Duplex"><a href="#1-16-Simple-HalfDuplex-Duplex" class="headerlink" title="1.16. Simple ,HalfDuplex ,Duplex"></a>1.16. Simple ,HalfDuplex ,Duplex</h3><ul>
<li>單工<ul>
<li>單行道</li>
<li>只能單向傳輸</li>
</ul>
</li>
<li>半雙工<ul>
<li>一個時間點只允一個方向傳輸</li>
</ul>
</li>
<li>全雙工<ul>
<li>雙向道</li>
<li>同一個時間點可以同時允許雙向傳輸</li>
</ul>
</li>
</ul>
<p>如果兩個交換機 之間是 1 Gbps &#x2F;Full Duplex<br>那我們在講吞吐量的時候會說有2gbps，但是一樣每一個方向最多是1g</p>
<p><img src="https://i.imgur.com/hVtzUOF.png"></p>
<h3 id="1-17-Simplex-Duplex-Fiber-Optic-Cables"><a href="#1-17-Simplex-Duplex-Fiber-Optic-Cables" class="headerlink" title="1.17. Simplex &amp; Duplex Fiber Optic Cables"></a>1.17. Simplex &amp; Duplex Fiber Optic Cables</h3><p>Tx<br>Rx</p>
<p><img src="https://i.imgur.com/pLeHZmW.png"></p>
]]></content>
      <categories>
        <category>CCNA</category>
      </categories>
      <tags>
        <tag>CCNA</tag>
      </tags>
  </entry>
  <entry>
    <title>CCNA_10</title>
    <url>/2021/05/03/2021-05-03%20CCNA_10/</url>
    <content><![CDATA[<h2 id="1-Subnetting-2"><a href="#1-Subnetting-2" class="headerlink" title="1. Subnetting 2"></a>1. Subnetting 2</h2><span id="more"></span>


<h3 id="1-1-練習題"><a href="#1-1-練習題" class="headerlink" title="1.1. 練習題"></a>1.1. 練習題</h3><p><img src="https://i.imgur.com/PQgu1YC.png"></p>
<p><img src="https://i.imgur.com/HcnW4A3.png"></p>
<p><img src="https://i.imgur.com/2H8P5Mn.png"></p>
<p><img src="https://i.imgur.com/xxlX41n.png"></p>
<p><img src="https://i.imgur.com/VgimToH.png"></p>
<p><img src="https://i.imgur.com/mTtqxA6.png"></p>
<p><img src="https://i.imgur.com/RgolIpi.png"></p>
<p><img src="https://i.imgur.com/lyIvKh1.png"></p>
<p><img src="https://i.imgur.com/zd6PIwD.png"></p>
<p><img src="https://i.imgur.com/XlOhugE.png"></p>
<h3 id="1-2-VLSM-Variable-Length-Subnet-Mask"><a href="#1-2-VLSM-Variable-Length-Subnet-Mask" class="headerlink" title="1.2. VLSM (Variable Length Subnet Mask)"></a>1.2. VLSM (Variable Length Subnet Mask)</h3><p>借用host number 來當 sunbet number , 這個行為叫 VLSM<br>mechanism - 機制<br>CIDR 只是一種表式的格式(方式)</p>
<p>路由器支持VLSM 就是在表達可以配置不同長度的子網路遮照<br>如果這路由器每個PORT都要統一的 &#x2F;24 &#x2F;24 &#x2F;24 的話，代表是不支持VSLM的<br><img src="https://i.imgur.com/cq0f45P.png"></p>
<h3 id="1-3-Summarization"><a href="#1-3-Summarization" class="headerlink" title="1.3. Summarization"></a>1.3. Summarization</h3><p>把小的子網路合成一個大網路</p>
<p><img src="https://i.imgur.com/7svzUMJ.png"></p>
<p><img src="https://i.imgur.com/9oUsh3n.png"></p>
]]></content>
      <categories>
        <category>CCNA</category>
      </categories>
      <tags>
        <tag>CCNA</tag>
      </tags>
  </entry>
  <entry>
    <title>CCNA_12</title>
    <url>/2021/05/12/2021-05-12%20CCNA_12/</url>
    <content><![CDATA[<h2 id="12-Warm-Up-Packet-Tracer-and-IOS-Basic"><a href="#12-Warm-Up-Packet-Tracer-and-IOS-Basic" class="headerlink" title="12. Warm Up Packet Tracer and IOS Basic"></a>12. Warm Up Packet Tracer and IOS Basic</h2><p>IOS 是思科網路的系統名稱</p>
<h3 id="Bring-Up-a-Device"><a href="#Bring-Up-a-Device" class="headerlink" title="Bring Up a Device"></a>Bring Up a Device</h3><p>Router Bootup Process</p>
<ul>
<li><ol>
<li>Perform POST</li>
</ol>
<ul>
<li>Power-on Self-test(POST) - 通電自檢</li>
<li>對於硬件做基本檢測</li>
</ul>
</li>
<li><ol start="2">
<li>Load Bootstrap</li>
</ol>
<ul>
<li>當當於電腦的BIOS</li>
</ul>
</li>
<li><ol start="3">
<li>Locate IOS</li>
</ol>
<ul>
<li>啟動系統二種方法<ul>
<li>啟動一個文件，存在於flash上，相當於本地硬盤一樣</li>
<li>存取TFTP Server 上的文件進行啟動<ul>
<li>跟無盤工作站概念很相似</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><ol start="4">
<li>Load IOS</li>
</ol>
<ul>
<li>加載系統</li>
<li>加載完過後，要加載配置文件</li>
</ul>
</li>
<li><ol start="5">
<li>Locate the Configuration File</li>
</ol>
<ul>
<li>NVRAM</li>
<li>TFTP Server</li>
<li>Console</li>
</ul>
</li>
<li><ol start="6">
<li>Execute the Configuration File or enter “Setup” mode</li>
</ol>
</li>
</ul>
<p>NVRAM 斷電之後，儲存在裡面的資料不會流失</p>
<p><img src="https://i.imgur.com/l5Up7Eq.png"></p>
<h3 id="Different-Modes"><a href="#Different-Modes" class="headerlink" title="Different Modes"></a>Different Modes</h3><h4 id="USER-MODE"><a href="#USER-MODE" class="headerlink" title="USER MODE"></a>USER MODE</h4><p>show users<br>show version<br>無法進行配置</p>
<h4 id="PRIVILEGED-MODE"><a href="#PRIVILEGED-MODE" class="headerlink" title="PRIVILEGED MODE"></a>PRIVILEGED MODE</h4><p>enable<br>也無法進行配置<br>?<br>接口地址、接口路由，在這邊也無法配置</p>
<h4 id="CONFIGURE-MODE"><a href="#CONFIGURE-MODE" class="headerlink" title="CONFIGURE MODE"></a>CONFIGURE MODE</h4><p>指令<br>configure terminal<br>exit<br>或者打<br>config<br>t</p>
<p>可以對系統配置進行修改<br>要配置接口就必須在 interface 模式以此類推…</p>
<p><img src="https://i.imgur.com/LQZxGjS.png"></p>
<p><img src="https://i.imgur.com/2wVngsm.png"></p>
<p><img src="https://i.imgur.com/oJs1Xzw.png"></p>
<h4 id="Viewing-Saving-and-Erasing-Configurations"><a href="#Viewing-Saving-and-Erasing-Configurations" class="headerlink" title="Viewing,Saving, and Erasing Configurations"></a>Viewing,Saving, and Erasing Configurations</h4><p>Running configuration<br>正在敲打配置命令時，是存在於RAM裡面的</p>
<p>要經過<br>copy running-config startup-config<br>才會寫到NVRAM</p>
<p>系統reboot時都是找Startup configuration</p>
<p>系統上敲打wr 跟copy running-config 效果是一樣的</p>
<p><img src="https://i.imgur.com/HN9aOVM.png"></p>
<h4 id="Configuration-Register"><a href="#Configuration-Register" class="headerlink" title="Configuration Register"></a>Configuration Register</h4><p>IOS 要去找starup-config 是由configuration register 控制的<br>改完之後不會馬上生效<br>在這個模式要加上do 指令才能show</p>
<p><img src="https://i.imgur.com/zVyonJg.png"></p>
<h4 id="Boot-System"><a href="#Boot-System" class="headerlink" title="Boot System"></a>Boot System</h4><p>系統要從哪裡啟動</p>
<ul>
<li>本地硬碟</li>
<li>TFTP</li>
</ul>
<p>可以先備份舊系統到別台服務器，以便還原<br>請操作練習<br><img src="https://i.imgur.com/PGq1cdw.png"></p>
<h4 id="ROM-Monitor-ROMMON"><a href="#ROM-Monitor-ROMMON" class="headerlink" title="ROM Monitor(ROMMON)"></a>ROM Monitor(ROMMON)</h4><p>作業系統丟失時，比方說斷電導致IOS死掉，可以用ROM Monitor 進行recover</p>
<p>圖中所列出的指令，記得大小寫是有差的。<br><img src="https://i.imgur.com/KeCQrbt.png"></p>
<h4 id="Cisco-IOS-FILE-SYSTEM-IFS"><a href="#Cisco-IOS-FILE-SYSTEM-IFS" class="headerlink" title="Cisco IOS FILE SYSTEM(IFS)"></a>Cisco IOS FILE SYSTEM(IFS)</h4><ul>
<li><p>dir</p>
</li>
<li><p>copy</p>
</li>
<li><p>show file</p>
</li>
<li><p>delete</p>
</li>
<li><p>erase</p>
</li>
<li><p>cd&#x2F;pwd</p>
</li>
<li><p>mkdir&#x2F;rmdir</p>
</li>
<li><p>ctrl + a</p>
</li>
<li><p>ctrl + e</p>
</li>
<li><p>ctrl + u</p>
</li>
</ul>
<p><img src="https://i.imgur.com/9qr0d0V.png"></p>
]]></content>
      <categories>
        <category>CCNA</category>
      </categories>
      <tags>
        <tag>CCNA</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS權重考題</title>
    <url>/2021/05/13/2021-05-13%20CSS%E6%AC%8A%E9%87%8D%E8%80%83%E9%A1%8C/</url>
    <content><![CDATA[<span id="more"></span>


<h3 id="1-第一題"><a href="#1-第一題" class="headerlink" title="1. 第一題"></a>1. 第一題</h3><p>請問以下的 HTML 裡面的 h1 是什麼顏色？</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;title1 title2&quot;</span>&gt;</span>標題<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;!--  CSS --&gt;</span><br><span class="line"><span class="selector-tag">h1</span>&#123;</span><br><span class="line"> <span class="attribute">color</span>:blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.title2</span>&#123;</span><br><span class="line"> <span class="attribute">color</span>: black</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.title1</span>&#123;</span><br><span class="line"> <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-第二題"><a href="#2-第二題" class="headerlink" title="2. 第二題"></a>2. 第二題</h3><p>請問以下的 HTML 裡面的 h1 是什麼顏色？</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;title1 title2&quot;</span>&gt;</span>標題<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;!--  CSS --&gt;</span><br><span class="line"><span class="selector-class">.title1</span>&#123;</span><br><span class="line"> <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.title2</span>&#123;</span><br><span class="line"> <span class="attribute">color</span>: black</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.title1</span><span class="selector-class">.title2</span>&#123;</span><br><span class="line"> <span class="attribute">color</span>:orange;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-第三題"><a href="#3-第三題" class="headerlink" title="3. 第三題"></a>3. 第三題</h3><p>請問以下的 HTML 裡面的 h1 是什麼顏色？</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;title1 title2&quot;</span>&gt;</span>標題<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;!--  CSS --&gt;</span><br><span class="line"><span class="selector-class">.title1</span><span class="selector-class">.title2</span>&#123;</span><br><span class="line"> <span class="attribute">color</span>:orange;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.title2</span>&#123;</span><br><span class="line"> <span class="attribute">color</span>: black</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.title1</span>&#123;</span><br><span class="line"> <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>21天Bootstrap5新手實戰營-格線系統(下)</title>
    <url>/2021/05/27/2021-05-27%2021%E5%A4%A9Bootstrap5%E6%96%B0%E6%89%8B%E5%AF%A6%E6%88%B0%E7%87%9F-%E6%A0%BC%E5%BC%8F%E7%B3%BB%E7%B5%B1(%E4%B8%8B)/</url>
    <content><![CDATA[<h2 id="1-格線系統斷點設計"><a href="#1-格線系統斷點設計" class="headerlink" title="1. 格線系統斷點設計"></a>1. 格線系統斷點設計</h2><p>下面區塊你會切6還是12呢?<br><img src="https://i.imgur.com/ZAbPfZg.jpg" alt="2021_05_22_01_41_01_697.png"></p>
<blockquote>
<p>12比較好，未來字長度變了，還有空間<br>老師也有可能只會用container , 連row 都不用</p>
</blockquote>
<span id="more"></span>


<p>老師切版參考答案</p>
<blockquote>
<p><img src="https://i.imgur.com/OJ8q4IZ.jpg" alt="2021_05_22_01_16_50_432.png"></p>
</blockquote>
<ul>
<li>網格系統再次強調不要動margin,padding</li>
<li>可以在上面加顏色、背景圖片、文字樣式等等</li>
<li>col-4,col-8寫法 是手機優先的寫法</li>
<li>我們在做網站通常都是從PC版的開始開發，會從md大小開始</li>
<li>若想先做 PC 版，可用 md、lg 當起手式</li>
<li>老師斷點通常會寫3個，比如當md,lg不滿足就會是手機版格式</li>
</ul>
<h2 id="2-格線系統與元件整合"><a href="#2-格線系統與元件整合" class="headerlink" title="2. 格線系統與元件整合"></a>2. 格線系統與元件整合</h2><p><img src="https://i.imgur.com/86BsgeN.png" alt="Untitled.png"></p>
<ul>
<li>容器裡放元件</li>
<li>鉛筆盒 是容器 象皮擦是元件</li>
</ul>
<h2 id="3-容器與元件分離-內容與樣式分離"><a href="#3-容器與元件分離-內容與樣式分離" class="headerlink" title="3. 容器與元件分離? 內容與樣式分離?"></a>3. 容器與元件分離? 內容與樣式分離?</h2><p>這樣寫有沒有問題?<br><img src="https://i.imgur.com/moZmDbK.png" alt="2021_05_22_02_00_49_631.png"></p>
<blockquote>
<p>容器與元件各司其職，拆開寫</p>
</blockquote>
<p><img src="https://i.imgur.com/Yw92gU3.png" alt="2021_05_22_02_03_04_140.png"></p>
<p>請說出容器與元件的行數<br><img src="https://i.imgur.com/7CrjdnY.png" alt="2021_05_22_02_04_43_916.png"></p>
<h2 id="4-通用類別搭配"><a href="#4-通用類別搭配" class="headerlink" title="4. 通用類別搭配"></a>4. 通用類別搭配</h2><ul>
<li>我希望在md 平板大小時隱藏</li>
<li>厲害之處是結合了斷點組合了常用的功能</li>
</ul>
<p><img src="https://i.imgur.com/G875Os4.png" alt="2021_05_22_02_13_28_553.png"></p>
<h2 id="5-問題時間-網站範例"><a href="#5-問題時間-網站範例" class="headerlink" title="5. 問題時間-網站範例"></a>5. 問題時間-網站範例</h2><p><a href="https://www.hexschool.com/">六角學院</a></p>
<h3 id="5-1-判斷哪些地方有用到-row-哪些地方沒有"><a href="#5-1-判斷哪些地方有用到-row-哪些地方沒有" class="headerlink" title="5.1. 判斷哪些地方有用到 .row 哪些地方沒有"></a>5.1. 判斷哪些地方有用到 .row 哪些地方沒有</h3><p><img src="https://i.imgur.com/pyUtqSd.jpg" alt="2021_05_24_11_16_06_80.png"></p>
<blockquote>
<p>通常選單不會切row column,因為選單的選項會一直增加，要切column 會一直調整。可以使用<a href="https://bootstrap5.hexschool.com/docs/5.0/components/navbar/">導覽列 (Navbar)</a></p>
</blockquote>
<h3 id="5-2-這個區塊會使用到row-column-嗎"><a href="#5-2-這個區塊會使用到row-column-嗎" class="headerlink" title="5.2. 這個區塊會使用到row column 嗎?"></a>5.2. 這個區塊會使用到row column 嗎?</h3><p><img src="https://i.imgur.com/sAyuQiL.png" alt="2021_05_24_11_17_23_599.png"></p>
<blockquote>
<p>會</p>
</blockquote>
<h3 id="5-3-有用到格線系統嗎"><a href="#5-3-有用到格線系統嗎" class="headerlink" title="5.3. 有用到格線系統嗎?"></a>5.3. 有用到格線系統嗎?</h3><p><img src="https://i.imgur.com/rGA5rO7.png" alt="2021_05_24_11_28_36_368.png"></p>
<blockquote>
<p>有</p>
</blockquote>
<h3 id="5-4-補充說明"><a href="#5-4-補充說明" class="headerlink" title="5.4. 補充說明"></a>5.4. 補充說明</h3><ul>
<li>另外Flex 也有通用類別</li>
<li>老師習慣class 由小寫到大(手機到平板到桌機)</li>
<li>範例<br><img src="https://i.imgur.com/UDpfrBp.jpg" alt="2021_05_24_12_05_14_723.png"></li>
</ul>
<h3 id="5-5-表尾，會使用到格線系統嗎"><a href="#5-5-表尾，會使用到格線系統嗎" class="headerlink" title="5.5. 表尾，會使用到格線系統嗎?"></a>5.5. 表尾，會使用到格線系統嗎?</h3><blockquote>
<p>會<br>另外提醒，盡量不要算的剛好。<br>要自己買保險啊，孩子。<br>老師自己又說自己可以用boostrap 的其它方式達成，不見得一定要用格線系統<br><img src="https://i.imgur.com/5j8FT1o.png" alt="2021_05_24_12_27_48_867.png"></p>
</blockquote>
<ol>
<li>會嗎?</li>
</ol>
<ul>
<li><p>答案</p>
<p>  會</p>
</li>
</ul>
<p><img src="https://i.imgur.com/hkvhqRF.jpg" alt="2021_05_24_12_31_02_351.png"></p>
<h3 id="5-6-有用到格線系統嗎"><a href="#5-6-有用到格線系統嗎" class="headerlink" title="5.6. 有用到格線系統嗎??"></a>5.6. 有用到格線系統嗎??</h3><blockquote>
<p>有<br><img src="https://i.imgur.com/i67JS8r.jpg" alt="2021_05_24_12_33_22_499.png"></p>
</blockquote>
<p>補充說明：</p>
<p>在boostrap版型應該都有要格線。</p>
<p>像button 的部分 設計師沒有follow 格線系統，因此我們自己在切版的時候，就可以照自己的方式達到就好</p>
<p><img src="https://i.imgur.com/cs1VgAs.jpg" alt="2021_05_24_12_36_13_651.png"></p>
<h3 id="5-7-會用到格線系統嗎"><a href="#5-7-會用到格線系統嗎" class="headerlink" title="5.7. 會用到格線系統嗎??"></a>5.7. 會用到格線系統嗎??</h3><blockquote>
<p>不會<br><img src="https://i.imgur.com/FK53y5e.png" alt="2021_05_24_12_42_14_733.png"></p>
</blockquote>
<p>補充說明：</p>
<p>如果自己要開版設計稿，格線的圖可以哪裡找?</p>
<p>可用軟體如下</p>
<ul>
<li>Adobe XD</li>
<li>sketch</li>
<li>figma</li>
</ul>
<p><a href="https://bootstrapmade.com/">Free Bootstrap Templates</a></p>
<h3 id="5-8-需要格線系統嗎"><a href="#5-8-需要格線系統嗎" class="headerlink" title="5.8. 需要格線系統嗎?"></a>5.8. 需要格線系統嗎?</h3><blockquote>
<p>要<br><img src="https://i.imgur.com/UM5IwAU.png" alt="2021_05_24_12_45_33_367.png"></p>
</blockquote>
<h2 id="6-問題解答-column-再包row-column-能不能"><a href="#6-問題解答-column-再包row-column-能不能" class="headerlink" title="6. 問題解答 column 再包row column 能不能?"></a>6. 問題解答 column 再包row column 能不能?</h2><p><img src="https://i.imgur.com/mzUWZdK.png" alt="2021_05_24_13_21_12_769.png"></p>
<h2 id="7-主線及每日任務"><a href="#7-主線及每日任務" class="headerlink" title="7. 主線及每日任務"></a>7. 主線及每日任務</h2><h3 id="7-1-通用類別前3名"><a href="#7-1-通用類別前3名" class="headerlink" title="7.1. 通用類別前3名"></a>7.1. 通用類別前3名</h3><ul>
<li>display</li>
<li>flex</li>
<li>spacing</li>
</ul>
]]></content>
      <categories>
        <category>CSS FrameWork</category>
        <category>Bootstrap5</category>
      </categories>
      <tags>
        <tag>Bootstrap5</tag>
        <tag>CSS</tag>
        <tag>RWD</tag>
      </tags>
  </entry>
  <entry>
    <title>21天Bootstrap5新手實戰營-格式系統(上)</title>
    <url>/2021/05/27/2021-05-27%2021%E5%A4%A9Bootstrap5%E6%96%B0%E6%89%8B%E5%AF%A6%E6%88%B0%E7%87%9F-%E6%A0%BC%E5%BC%8F%E7%B3%BB%E7%B5%B1(%E4%B8%8A)/</url>
    <content><![CDATA[<h2 id="1-活動連結"><a href="#1-活動連結" class="headerlink" title="1. 活動連結"></a>1. 活動連結</h2><p><a href="https://hackmd.io/@YmcMgo-NSKOqgTGAjl_5tg/ryar-vGOd/%2FNdGKchTeRBqbkTMiQ2HSmw">21 天帶您做出 Bootstrap 5 募資網站</a></p>
<span id="more"></span>


<h2 id="2-格線"><a href="#2-格線" class="headerlink" title="2. 格線"></a>2. 格線</h2><p>容器就讓他回歸於容器</p>
<p>元件就讓他回歸於元件</p>
<p><img src="https://i.imgur.com/cEQ5Mrs.png" alt="img"></p>
<p>選單通常不會用col 去排</p>
<p>class 小寫到大</p>
<p><img src="https://i.imgur.com/uy8Lphw.jpg" alt="img"></p>
<p>寫東西不要寫剛好，在不同瀏覽器差1px就會斷行，幫自己買保險</p>
<p><img src="https://i.imgur.com/SgDk9Mz.png" alt="img"></p>
<p>設計師應該要用格線系統</p>
<p>軟體</p>
<p>figma,adobe xd</p>
<p><img src="https://i.imgur.com/cly8xDg.jpg" alt="img"></p>
<h2 id="3-PC-優先與手機優先之寫法介紹"><a href="#3-PC-優先與手機優先之寫法介紹" class="headerlink" title="3. PC 優先與手機優先之寫法介紹"></a>3. PC 優先與手機優先之寫法介紹</h2><p>桌面版優先是指樣式書寫順序為: 先寫最大寬度上限(EX: max-width:1440px) 當所有樣式寫完 最後再依序寫</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width</span>:<span class="number">992px</span>) &#123;...&#125;</span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width</span>:<span class="number">768px</span>) &#123;...&#125;</span><br></pre></td></tr></table></figure>

<p>手機優先是指樣式書寫順序為: 先寫最小固定寬度(通常都是: width:100% or width:100vw) 當所有樣式寫完 最後再依序寫</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>:<span class="number">768px</span>) &#123;...&#125;</span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>:<span class="number">992px</span>) &#123;...&#125;</span><br></pre></td></tr></table></figure>



<h2 id="4-格線系統-上"><a href="#4-格線系統-上" class="headerlink" title="4. 格線系統(上)"></a>4. 格線系統(上)</h2><p>常開的版型是1140px，水平居中，所以可以用container class</p>
<p>col-4 ,col-5 這樣寫是在寫手機</p>
<p>boostrap5 是手機優先</p>
<p>通常在寫的時候會先寫桌機版</p>
<p>老師自己寫的時候，斷點的col 最多寫3個</p>
<p>老師比較常用md ,lg</p>
<p>sm,xxl 比較少</p>
<h3 id="4-1-奇幻數字"><a href="#4-1-奇幻數字" class="headerlink" title="4.1. 奇幻數字"></a>4.1. 奇幻數字</h3><p><img src="https://i.imgur.com/AMgKdFL.jpg" alt="img"></p>
<p>切版有了203、408 這種魔術數字，於有人發明了格線系統，解決自由發展的困擾</p>
<h2 id="5-格線系統"><a href="#5-格線系統" class="headerlink" title="5. 格線系統"></a>5. 格線系統</h2><ul>
<li>目的是為了減輕 magic number 出現</li>
<li>可以解決重複code問題</li>
<li>格線系統關鍵字：column(欄)、gutter(間距)</li>
<li>960 grid<ul>
<li>使用float 方式進行格線系統設計</li>
<li>故意多1px，就會換行囉，這個就是float的特性</li>
</ul>
</li>
</ul>
<p><img src="https://i.imgur.com/gpa0zTN.png" alt="img"></p>
<ul>
<li><p>Bootstrap5 也是用float 特性設計的哦 12:26</p>
</li>
<li><p>格線系統就是column + gutter 的加總</p>
</li>
<li><p>格線系統有11個gutter</p>
</li>
<li><p>為什麼要設計12欄</p>
<ul>
<li>因為比較好整除</li>
<li>2,3,4,6欄好整除</li>
</ul>
</li>
<li><p>gutter 產生方式</p>
<ul>
<li>有時候會用padding</li>
<li>有時候會用margin</li>
<li>960 grid 網站就是用margin-left,margin-right   左右各推10，產生20的空間</li>
</ul>
<p><img src="https://i.imgur.com/95DJhLa.png" alt="img"></p>
<ul>
<li>Bootstarp 本來是用padding 去推的</li>
<li>每個格線系統推的方式可能有所不同，之後在設計上要注意。</li>
</ul>
</li>
</ul>
<h2 id="6-切版方式的演進"><a href="#6-切版方式的演進" class="headerlink" title="6. 切版方式的演進"></a>6. 切版方式的演進</h2><ul>
<li>table + table</li>
<li>float</li>
<li>inline block</li>
<li>flexbox</li>
<li>grid</li>
</ul>
<h2 id="7-格線系統三劍客"><a href="#7-格線系統三劍客" class="headerlink" title="7. 格線系統三劍客"></a>7. 格線系統三劍客</h2><ul>
<li>container</li>
<li>row</li>
<li>column</li>
<li>Boostrap 是用box-sizing: border-box;</li>
</ul>
<h2 id="8-格線系統名言"><a href="#8-格線系統名言" class="headerlink" title="8. 格線系統名言"></a>8. 格線系統名言</h2><ul>
<li>row的下一層一定要是column</li>
<li>column的上一層一定要是row</li>
<li>網頁內容與元件請放在.col-裡面</li>
</ul>
<h2 id="9-常見錯誤"><a href="#9-常見錯誤" class="headerlink" title="9. 常見錯誤"></a>9. 常見錯誤</h2><ul>
<li><p>在 .col 增加寬度</p>
</li>
<li><p>在格線系統調整左右 margin 與 padding</p>
</li>
<li><p>常見觀念</p>
<ul>
<li>可以加上下 的 margin 與 padding</li>
<li>最外層至少補一個 container</li>
<li>整體格線邏輯是一致</li>
</ul>
</li>
</ul>
<h2 id="10-格線觀念考驗時間"><a href="#10-格線觀念考驗時間" class="headerlink" title="10. 格線觀念考驗時間"></a>10. 格線觀念考驗時間</h2><ol>
<li><p>請問這樣寫對還是錯?</p>
<p><img src="https://i.imgur.com/NTzBBh3.png" alt="img"></p>
<blockquote>
<p>對</p>
</blockquote>
</li>
<li><p>請問這樣寫對還是錯？</p>
<p><img src="https://i.imgur.com/nhwarkP.png" alt="img"></p>
<blockquote>
<p>對</p>
</blockquote>
</li>
<li><p>請問這樣寫對還是錯?</p>
<p><img src="https://i.imgur.com/QLBU2FM.png" alt="img"></p>
<blockquote>
<p>錯</p>
</blockquote>
</li>
<li><p>會斷行還是不會斷行?</p>
<p><img src="https://i.imgur.com/h4nROPq.jpg" alt="img"></p>
<blockquote>
<p>會,因為row有flex-wrap:wrap屬性</p>
</blockquote>
</li>
<li><p>上面的版本對，還是下面的版本對，還是都對?</p>
<p><img src="https://i.imgur.com/uhiDo0z.jpg" alt="img"></p>
<blockquote>
<p>上面的版本對，因為跟後端邏輯設計有關</p>
<p>提醒：flex-wrap 自己會往下換行</p>
</blockquote>
</li>
<li><p>對還是錯？</p>
<p><img src="https://i.imgur.com/9NRk6Ff.png" alt="img"></p>
<blockquote>
<p>錯</p>
</blockquote>
</li>
<li><p>對還是錯？</p>
<p><img src="https://i.imgur.com/t7M9Cei.png" alt="img"></p>
<blockquote>
<p>錯，沒有下container</p>
</blockquote>
</li>
<li><p>對還是錯?</p>
<p><img src="https://i.imgur.com/Yr9TrMY.png" alt="img"></p>
<blockquote>
<p>是ok的</p>
</blockquote>
</li>
<li><p>對還錯?</p>
<p><img src="https://i.imgur.com/VaVhCEk.png" alt="img"></p>
<blockquote>
<p>對的，其中第三個footer 沒有一定要求水平居中，有可能需求會需要滿版設計</p>
</blockquote>
</li>
<li><p>對還錯?</p>
</li>
</ol>
<p><img src="https://i.imgur.com/kZbhPjs.png" alt="img"></p>
<blockquote>
<p>對</p>
<p>header ,footer 想要滿版</p>
<p>container 裡面符合名言</p>
</blockquote>
]]></content>
      <categories>
        <category>CSS FrameWork</category>
        <category>Bootstrap5</category>
      </categories>
      <tags>
        <tag>Bootstrap5</tag>
        <tag>CSS</tag>
        <tag>RWD</tag>
      </tags>
  </entry>
  <entry>
    <title>伸縮自如的RWD排版術(上)</title>
    <url>/2021/09/30/2021-05-27%20%E4%BC%B8%E7%B8%AE%E8%87%AA%E5%A6%82%E7%9A%84RWD%E6%8E%92%E7%89%88%E8%A1%93(%E4%B8%8A)/</url>
    <content><![CDATA[<ul>
<li>開版的寬度通常是多少</li>
</ul>
<p>可以參考Bootstrap</p>
<p><img src="https://i.imgur.com/gpjKfLB.png" alt="2021_05_16_10_17_50_938.png"></p>
<ul>
<li>RWD 一定要加的語法</li>
</ul>
<p>viewport</p>
<ul>
<li>Media Query</li>
</ul>
<span id="more"></span>


<h2 id="1-權重規則"><a href="#1-權重規則" class="headerlink" title="1. 權重規則"></a>1. 權重規則</h2><ul>
<li>HTML 標籤1分</li>
<li>css類別選擇器10分</li>
<li>id 選擇器 100分</li>
<li>element 1000分</li>
<li>!important 10000分</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>&#123;</span><br><span class="line"><span class="attribute">color</span>:black <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>先看權重，再看先後順序，後者贏</li>
<li>永遠不用要id</li>
<li>寫CSS樣式不需要ID</li>
</ul>
<p>寫在style的時機 回吐一個動態的url回來 style&#x3D;”background:url()”</p>
<ul>
<li><p>權重測驗1</p>
<p>  <img src="https://i.imgur.com/20voVsm.png" alt="2021_05_16_10_56_23_702.png"></p>
</li>
<li><p>權重測驗2</p>
<p>  <img src="https://i.imgur.com/l0Bhbd3.jpg" alt="2021_05_16_10_58_22_285.png"></p>
</li>
<li><p>權重測驗3</p>
<p>  <img src="https://i.imgur.com/MQmfbhS.jpg" alt="2021_05_16_10_59_27_152.png"></p>
<p>  <img src="https://i.imgur.com/M5cFjwi.jpg" alt="2021_05_16_10_59_07_3.png"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>RWD</tag>
      </tags>
  </entry>
  <entry>
    <title>伸縮自如的RWD排版術(下)</title>
    <url>/2021/09/30/2021-05-27%20%E4%BC%B8%E7%B8%AE%E8%87%AA%E5%A6%82%E7%9A%84RWD%E6%8E%92%E7%89%88%E8%A1%93(%E4%B8%8B)/</url>
    <content><![CDATA[<ul>
<li><p>max-width 與 width 差異</p>
<p>  max-width 最大就是1200 不會再大了</p>
<p>  如果螢幕寬度為768 ，那max-width 就會自動縮到768</p>
<p>  <img src="https://i.imgur.com/9PNSi10.png" alt="2021_05_16_18_20_42_511.png"></p>
<p>  <img src="https://i.imgur.com/TuXYfoW.png" alt="2021_05_16_18_20_50_32.png"></p>
</li>
</ul>
<p>rwd img css，可當作是css reset 其中一個</p>
<span id="more"></span>


<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span>&#123;</span><br><span class="line"><span class="attribute">max-width</span>:<span class="number">100%</span>;</span><br><span class="line"><span class="attribute">height</span>:auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果客戶使用了單眼相機上傳照片，width 很有可能是4800 ，用這個方法，可以避免版型破掉</p>
<p>全域 border box</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*,*<span class="selector-pseudo">::before</span>,*<span class="selector-pseudo">::after</span>&#123;</span><br><span class="line"><span class="attribute">box-sizing</span>:border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>市場手機大小</p>
<ul>
<li>iphone 7~ 11 375px</li>
<li>iphone plus  414px</li>
<li>ipad 768px</li>
<li>PC 1140px 1200px</li>
</ul>
<p>media query 要從最大寫到最小</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span>(max-width:768px)&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span>(max-width:568px)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>業務潛規則 就會去客戶 把它們在用的載具都記錄起來，給設計稿可以剛好符合</p>
<p>版型有很多種做法，都可以做得出來，最後你會找出自己的維護風格</p>
<p>適時的使用display:none ，因為不見得在手機的資訊量是需要這麼多的</p>
<p>設定767px 直接全吃小於ipad 的裝置</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span>(max-width:767px)&#123;</span><br><span class="line"><span class="selector-class">.header</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ipad 大於768px</p>
<p>斷點越少越好,設計給pad mobile 吃</p>
<p>不要超過5個，儘量3個</p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>RWD</tag>
      </tags>
  </entry>
  <entry>
    <title>應用架構學習</title>
    <url>/2021/05/29/2021-05-29%20%E6%87%89%E7%94%A8%E6%9E%B6%E6%A7%8B%E5%AD%B8%E7%BF%92/</url>
    <content><![CDATA[<h2 id="1-最簡單架構"><a href="#1-最簡單架構" class="headerlink" title="1. 最簡單架構"></a>1. 最簡單架構</h2><p>剛開始應用沒有太多訪問量，所以只需要一台服務器<br><img src="https://i.imgur.com/FWy7Rin.png"></p>
<span id="more"></span>


<h2 id="2-應用與數據服務分隔"><a href="#2-應用與數據服務分隔" class="headerlink" title="2. 應用與數據服務分隔"></a>2. 應用與數據服務分隔</h2><p><strong>場景探討</strong><br>隨著應用的業務越來越複雜，應用訪問量越來越大，導致性能越來越差，存儲空間嚴重不足</p>
<p><strong>架構概念</strong><br>這時候我們考慮把服務增加到三台(能通過加機器解決的問題都不是問題);分離出應用服務器、數據庫服務器、文件服務器。</p>
<ul>
<li>應用服務器需要處理大量的訪問，所以需要性能更好的CPU</li>
<li>數據庫服務器需要存儲大量的數據以及快速的檢索，所以需磁盤的檢索速度較快以及儲存空間大</li>
<li>文件服務器需要存儲上傳的文件，需要更大的磁盤;現在通常情況下會選擇第三方的存儲服務<br><img src="https://i.imgur.com/nQdiZWe.png"></li>
</ul>
<p><strong>架構問題探討</strong><br>根據每個服務器對應的場景，配置服務器後應用的性能能夠大大提高，更好的支持業務的發展。但是隨之業務的發展，訪問量的增大，這種架構又將再次面臨挑戰，應用服務器處理能力下降，存儲空間不足。</p>
<h2 id="3-應用服務器集群"><a href="#3-應用服務器集群" class="headerlink" title="3. 應用服務器集群"></a>3. 應用服務器集群</h2><p><strong>場景探討</strong><br>在高併發大流量的情況下，一台服務器是肯定處理不過來的</p>
<p><strong>架構概念</strong><br>這個時候增加服務器，部署集群提供服務，來分擔每台服務器的壓力，部署集群的另一個好處是可伸縮性，比如當遇到了雙11大流量的場景下，可以增加服務器分攤流量，等雙11過後，減少服務器節約成本。架構如下：</p>
<p><img src="https://i.imgur.com/g5sVSRr.png"></p>
<p>如果應用服務器是tomcat，那麼可以部署一個tomcat的集群，外部再部署一個負載均衡器，可以採用<strong>隨機</strong>、<strong>輪詢</strong>、<strong>一致性合希演算法</strong>將用戶的請求分發到不同應用服務集群;通常選擇免費的負載均衡是<strong>nginx</strong>。在這種架構下，應用服務器的負載將不會是整個應用的瓶頸點。</p>
<p><strong>架構問題探討</strong><br>雖然應用程序的處理速度在這種架構下提升了許多，但是又會暴露一個問題，數據庫的壓力大大增加，導致訪問響應延遲，影響整個應用的性能。</p>
<p>這種架構還有個問題，通常應用是有狀態的，需要記錄用戶的登錄信息，如果每次用戶的請求都是隨機路由到後端的應用服務器，那麼用戶的會話(session)將會丟失;</p>
<p><strong>架構問題-解決方案</strong></p>
<ul>
<li>採用一致性的hash把用戶的請求路由到同一個tomcat，如果有一台服務器跪了，那麼這台服務器上面的用戶信息將會丟失。</li>
<li>tomcat集群之間通過配置session複製，達到共享，此方案效率較低。</li>
</ul>
<p>這邊我覺得可以後續再接上看nginx 跟一口氣說出4種分布式一致性session 實現方式。</p>
<h2 id="4-緩存"><a href="#4-緩存" class="headerlink" title="4. 緩存"></a>4. 緩存</h2><p><strong>場景探討</strong><br>根據二八原則，80%的業務都是集中訪問20%的數據，這20%的數據通常稱為<strong>熱點數據</strong>，但是這20%的數據占用的內存也不會小，如果每個應用服務器都存放一份，有些浪費存儲空間</p>
<p><strong>架構概念</strong><br>所以這時候需要考慮加入分布式緩存服務器(常用的是<strong>Redis</strong>);當引入了分布式緩存服務器，再來看上面那個方案的問題，就可以解決了，<strong>把用戶的會話存放到緩存服務器</strong>，不僅可以防止用戶數據丟失，效率也不低;架構圖如下：<br><img src="https://i.imgur.com/VBZqdZ8.png"></p>
<p>由於分布式緩存服務器畢竟存放在遠程，需要經過網路，所以取數據還是要花一點時間;地本緩存訪問速度更快，但是內存空間有限，並且還會出現和應用程序爭搶資源;所以這種架構搭配了<strong>分布式緩存</strong>和<strong>本地緩存</strong>，本地緩存存放少量常用熱點數據，當本地緩存中沒有命中時再去集中式緩存取。</p>
<p>在引進緩存之後，數據庫的訪問壓力可以得到一定的緩解。</p>
<h2 id="5-數據庫讀寫分離"><a href="#5-數據庫讀寫分離" class="headerlink" title="5. 數據庫讀寫分離"></a>5. 數據庫讀寫分離</h2><p><strong>場景探討</strong><br>雖然在加入了緩存之後，部分數據可以直接走緩存，不需要訪問數據庫，但是仍然會有一些請求，會訪問數據庫，比如：緩存失效，緩存未命中;當流量大的時候，數據庫的訪問量也不小，這時候我們需要考慮搭建<strong>數據庫集群，讀寫分離</strong>。</p>
<p><strong>架構概念</strong><br>當應用服務器有寫操作時，訪問主庫，當應用程序有讀操作時，訪問從庫;大多數的應用都是讀的操作遠遠大於寫的操作，所以可以配置數據庫一主多從來分擔數據庫的壓力;為了讓應用程序對應主庫和從庫無感知，通常需要引入一些讀寫分離的框架做一個統一的數據訪問模塊。</p>
<p><img src="https://i.imgur.com/lH34pof.png"></p>
<p><strong>架構問題探討</strong><br>這種架構通常需要警惕的一個問題是<strong>主從延遲</strong>，當在高併發的場景下，主庫剛寫成功，數據庫還未成功同步完從庫，這時候另一個請求進入讀取數據發現不存在;</p>
<p><strong>架構問題-解決方案</strong><br>在應用程序中高併發的場景下設置強制走主庫查詢。</p>
<p>如何確認目前是高併發的場景??</p>
<h2 id="6-反向代理和CDN"><a href="#6-反向代理和CDN" class="headerlink" title="6. 反向代理和CDN"></a>6. 反向代理和CDN</h2><h2 id="7-搜索引擎和NoSQL"><a href="#7-搜索引擎和NoSQL" class="headerlink" title="7. 搜索引擎和NoSQL"></a>7. 搜索引擎和NoSQL</h2><h2 id="8-業務縱向拆分"><a href="#8-業務縱向拆分" class="headerlink" title="8. 業務縱向拆分"></a>8. 業務縱向拆分</h2><h2 id="9-參考連結"><a href="#9-參考連結" class="headerlink" title="9. 參考連結"></a>9. 參考連結</h2><ul>
<li><a href="https://excalidraw.com/#room=532abe3496fd700504ca,OyZ_NtxeOQf3IBADjq8Q5g">excalidraw1</a></li>
<li><a href="https://excalidraw.com/#json=5004874848665600,pWnfJa3eZMcA3i0WL8a02g">excalidraw2</a></li>
<li><a href="https://excalidraw.com/#json=4983856352460800,t4IjF3Jm3clW4PWqoltx8g">excalidraw3</a></li>
<li><a href="https://excalidraw.com/#json=5535324247687168,XNBF-YEp94WfBqxapRot4Q">excalidraw4</a></li>
<li><a href="https://excalidraw.com/#json=6708724680884224,vtYWfYXomE9GJqrhQU3Rng">excalidraw5</a></li>
<li><a href="https://gitmind.com/app/doc/dab110f6d06ca5288d8215912ddcd2d3">gitMind</a></li>
<li><a href="https://mp.weixin.qq.com/s/jtBTv1rsFHDDlyqbaWI-bA">8张图带你了解大型应用架构演进历程</a></li>
<li><a href="https://www.cnblogs.com/goodAndyxublog/archive/2020/07/17/13327412.html">一口氣說出4種分布式架構</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/94176221">互聯網公司分布式架構</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/339719011">分布式集群架构场景化解决方案</a></li>
<li><a href="https://www.jianshu.com/p/76b359480940">秒杀系统的“热点数据”</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10226783">30-25之資料庫層的擴展 - 讀寫分離架構</a></li>
</ul>
<p><a href="https://akuma1.pixnet.net/blog/post/168180962-%E5%A4%A7%E6%9E%B6%E6%A7%8B%E7%9A%84%E6%A6%82%E5%BF%B5%E8%88%87%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88%EF%BC%8D%EF%BC%8D%EF%BC%88%E4%B8%80%EF%BC%89%E5%B0%8E%E8%AB%96">大架構的概念與程式設計－－（一）導論</a></p>
<p>系統設計入門：效能與可擴展性的差異<br><a href="https://askie.today/system-design-primer-performance-vs-scalability/">https://askie.today/system-design-primer-performance-vs-scalability/</a><br>系統設計入門：內容傳遞網路 CDN<br><a href="https://askie.today/system-design-cdn-content-delivery-network/">https://askie.today/system-design-cdn-content-delivery-network/</a></p>
<p>系統設計學習地圖<br><a href="https://medium.com/%E5%BE%8C%E7%AB%AF%E6%96%B0%E6%89%8B%E6%9D%91/%E7%B3%BB%E7%B5%B1%E8%A8%AD%E8%A8%88%E5%AD%B8%E7%BF%92%E5%9C%B0%E5%9C%96-de216ab211fb">https://medium.com/%E5%BE%8C%E7%AB%AF%E6%96%B0%E6%89%8B%E6%9D%91/%E7%B3%BB%E7%B5%B1%E8%A8%AD%E8%A8%88%E5%AD%B8%E7%BF%92%E5%9C%B0%E5%9C%96-de216ab211fb</a></p>
<p>筆記整理：技術架構涵蓋內容和演變過程總結</p>
<p><a href="https://codingnote.cc/zh-hk/p/336942/">https://codingnote.cc/zh-hk/p/336942/</a></p>
<p><a href="https://www.bilibili.com/video/BV1Ct4y1a7wU?p=49">https://www.bilibili.com/video/BV1Ct4y1a7wU?p=49</a></p>
]]></content>
      <categories>
        <category>應用架構</category>
      </categories>
      <tags>
        <tag>應用架構</tag>
      </tags>
  </entry>
  <entry>
    <title>什麼是負載平衡?</title>
    <url>/2021/05/30/2021-05-30%20%E4%BB%80%E9%BA%BC%E6%98%AF%E8%B2%A0%E8%BC%89%E5%B9%B3%E8%A1%A1/</url>
    <content><![CDATA[<h3 id="1-什麼是負載平衡"><a href="#1-什麼是負載平衡" class="headerlink" title="1. 什麼是負載平衡?"></a>1. 什麼是負載平衡?</h3><ul>
<li><p>頻寬管理</p>
<ul>
<li>LAN Load Balance</li>
<li>WAN Load Balance<br>  WAN Load Balance（WLB），一般也稱為Multi-Homing設備。當企業對外線路有兩條以上的時候，WLB就可以擔負起網際網路（Internet）與內部網路（Intranet）之間多條連外線路流量平衡的工作。 LAN Load Balance針對區域網路，設置在封包類別較複雜的節點，有助於調整、控制封包的進出順序。</li>
</ul>
</li>
<li><p>應用管理</p>
<ul>
<li>Server Load Balance<br>  Server Load Balance（SLB）是最早發展的一塊，其功能在於將企業內多部伺服器的負載量作平衡，將過大流量轉向相同功能的其他伺服器，讓每一部伺服器工作量維持平均，保持服務不因流量過大而變慢或中斷。SLB主要應用在入口端的網頁分流，透過SLB轉址到各個伺服器，平均分配網路流量。</li>
</ul>
</li>
<li><p><a href="https://www.ithome.com.tw/node/26592">ITHOME-什麼是負載平衡？</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>負載平衡</category>
      </categories>
      <tags>
        <tag>負載平衡</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx</title>
    <url>/2021/06/01/2021-06-01%20Nginx/</url>
    <content><![CDATA[<h2 id="1-什麼是Nginx"><a href="#1-什麼是Nginx" class="headerlink" title="1. 什麼是Nginx?"></a>1. 什麼是Nginx?</h2><h3 id="1-1-wiki"><a href="#1-1-wiki" class="headerlink" title="1.1. wiki"></a>1.1. wiki</h3><p>是一個高性能的HTTP和反向代理WEB服務器，同時也提供了IMAP&#x2F;POP3&#x2F;SMTP服務。NGINX是由俄羅斯伊戈爾·賽索耶夫開發。Nginx在官方測試的結果中，能夠支援五萬個並列連接。2019年3月11日，Nginx公司被F5 Networks以6.7億美元收購。截至2018年1月，Nginx服務或者代理了全球30.46%的網站。在維基百科裡面講的相當全面。</p>
<span id="more"></span>
<h3 id="1-2-簡單說"><a href="#1-2-簡單說" class="headerlink" title="1.2. 簡單說"></a>1.2. 簡單說</h3><p>Nginx 是一個反向代理伺服器，就像是餐廳的櫃檯，接收所有客戶的需求後，分配給廚師處理。這樣的好處可以保護後方的 Web Server 被攻擊。同時，還可以提供負載平衡 (Load Balance)、快取以及 HTTPS 憑證等功能。</p>
<h2 id="2-使用Nginx好處"><a href="#2-使用Nginx好處" class="headerlink" title="2. 使用Nginx好處"></a>2. 使用Nginx好處</h2><ol>
<li>隱藏伺服器真實IP</li>
<li>負載平衡</li>
<li>提高訪問速度<ul>
<li>可以使用動靜分離方式進行架構分離</li>
<li>可使用緩存服務<ul>
<li>動手做做看</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="3-名詞解釋"><a href="#3-名詞解釋" class="headerlink" title="3. 名詞解釋"></a>3. 名詞解釋</h2><h3 id="3-1-代理"><a href="#3-1-代理" class="headerlink" title="3.1. 代理"></a>3.1. 代理</h3><p>分為正向代理及反向代理</p>
<ul>
<li>正向代理：看不到client 是誰</li>
<li>反向代理：看不到server 是誰</li>
</ul>
<h4 id="3-1-1-正向代理"><a href="#3-1-1-正向代理" class="headerlink" title="3.1.1. 正向代理"></a>3.1.1. 正向代理</h4><p><img src="https://i.imgur.com/QVQ3E8z.png"></p>
<h4 id="3-1-2-反向代理"><a href="#3-1-2-反向代理" class="headerlink" title="3.1.2. 反向代理"></a>3.1.2. 反向代理</h4><p><img src="https://i.imgur.com/0AtN2s5.png"></p>
<h3 id="3-2-負載平衡"><a href="#3-2-負載平衡" class="headerlink" title="3.2. 負載平衡"></a>3.2. 負載平衡</h3><p>這邊講的是應用系統的負載平衡，知識連結→<a href="/DI3pdA2rR-ypH5goq75YVA">什麼是負載平衡?</a></p>
<h2 id="4-基本指令"><a href="#4-基本指令" class="headerlink" title="4. 基本指令"></a>4. 基本指令</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 查詢版本</span><br><span class="line">$ nginx -v</span><br><span class="line"></span><br><span class="line">// 啟動 Nginx</span><br><span class="line">$ nginx</span><br><span class="line"></span><br><span class="line">// 關閉 Nginx</span><br><span class="line">$ nginx -s stop</span><br><span class="line"></span><br><span class="line">// 重啟 Nginx</span><br><span class="line">$ nginx -s reload</span><br><span class="line"></span><br><span class="line">// 查詢文件位置</span><br><span class="line">$ nginx -t</span><br><span class="line"></span><br><span class="line">// 資料架構</span><br><span class="line">$ tree -L 1</span><br><span class="line"></span><br><span class="line">// 查詢安裝路徑</span><br><span class="line">$ whereis nginx</span><br><span class="line"></span><br><span class="line">// 查看nginx進程</span><br><span class="line">$ ps aux|grep nginx</span><br></pre></td></tr></table></figure>


<h2 id="5-安裝"><a href="#5-安裝" class="headerlink" title="5. 安裝"></a>5. 安裝</h2><ol>
<li><p>更新 apt-get 套件內容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure></li>
<li><p>安裝 Nginx 套件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install nginx</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 server 上設定 nginx 套件<br>├── conf.d<br>├── fastcgi.conf<br>├── fastcgi_params<br>├── koi-utf<br>├── koi-win<br>├── mime.types<br>├── <code>modules-available</code><br>├── <code>modules-enabled</code><br>├── <code>nginx.conf</code><br>├── proxy_params<br>├── scgi_params<br>├── sites-available<br>├── sites-enabled<br>├── snippets<br>├── uwsgi_params<br>└── win-utf</p>
</li>
</ol>
<p>在這個版本nginx.conf include 其它檔案</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">include /etc/nginx/conf.d/*.conf;</span><br><span class="line">include /etc/nginx/sites-enabled/*;</span><br></pre></td></tr></table></figure>

<p>這次的實驗也是直接進去到<code>sites-enabled/default</code>檔案進行負載平衡等相關設定練習</p>
<p>補充：<br>裝了以下這個才能支持使用 <code>tree -L 1</code>，產生目錄文字結構</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install tree</span><br></pre></td></tr></table></figure>


<h2 id="6-配置教學"><a href="#6-配置教學" class="headerlink" title="6. 配置教學"></a>6. 配置教學</h2><p>nginx.conf 大概可以分成以下幾個區塊：</p>
<ol>
<li>全域性區塊：主要是設定一些影響Nginx伺服器整體執行的配置指令</li>
<li>events 區塊：主要是設定 Nginx 伺服器與使用者的網路連結</li>
<li>http 區塊：是配置中重要的部分，包含代理、緩存、日誌等功能都在這設定，而 http 區塊中還會包含了 server 區塊 和 location 區塊</li>
</ol>
<p>配置概觀</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...                   # 全域性區塊</span><br><span class="line"></span><br><span class="line">event&#123;                # events 區塊</span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br><span class="line">http&#123;                 # http 區塊</span><br><span class="line">    server&#123;           # server 區塊</span><br><span class="line">        location&#123;     # location 區塊</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>http 配置說明</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">      listen  80;</span><br><span class="line">      listen [::]80;</span><br><span class="line">      server_name  example.com  www.example.com;</span><br><span class="line">      location /&#123;</span><br><span class="line">        proxy_pass  http://127.0.0.1:8001;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>listen 80; 代表監聽所有 ipv4 的位址</li>
<li>listen [::]80; 代表監聽所有 ipv6 的位址</li>
<li>server_name 是你的 Domain 名稱。由於 Nginx 可以用來開多個網站或反向代理多個服務，所以可以設定不同的 Domain</li>
<li>location 中則是指定對不同路徑要怎麼處理，針對 location 的寫法可以參考如下<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 匹配所有目錄</span><br><span class="line">location /</span><br><span class="line"></span><br><span class="line"># 匹配所有 /static 開頭的目錄</span><br><span class="line">location /static</span><br><span class="line">動手做做看</span><br><span class="line"></span><br><span class="line"># 只有 /index 會被代理，而 /index/test 不會被代理</span><br><span class="line">location = /index</span><br><span class="line">動手做做看</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="7-動手作實驗"><a href="#7-動手作實驗" class="headerlink" title="7. 動手作實驗"></a>7. 動手作實驗</h2><p>我使用的是vmware進行實驗模擬<br>1台nginx 配 2台apache 伺服器</p>
<h3 id="7-1-負載平衡-load-balance"><a href="#7-1-負載平衡-load-balance" class="headerlink" title="7.1. 負載平衡 load balance"></a>7.1. 負載平衡 load balance</h3><p>負載平衡的方法<code>輪詢</code> <code>加權輪詢</code> <code>ip-hash</code> <code>least-connected</code> <code>fair</code> <code>url_hash</code>，中其中4個在nginx已經內鍵有了，後面2個需要安裝第三方套件。</p>
<h4 id="7-1-1-round-robin-輪詢"><a href="#7-1-1-round-robin-輪詢" class="headerlink" title="7.1.1. round-robin(輪詢)"></a>7.1.1. round-robin(輪詢)</h4><p>預設值，會將請求輪流平均分配到每台伺服器上，server設備性能資源相同時適用</p>
<p>負載平衡的設定有兩段要寫</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upstream [名稱]&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>與</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">location /&#123;</span><br><span class="line">    ...</span><br><span class="line">    proxy_pass http://[名稱];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>完整<code>site-enabled/default</code>檔</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line">upstream kite &#123;	    </span><br><span class="line">    server 192.168.199.132;</span><br><span class="line">    server 192.168.199.133;</span><br><span class="line">&#125;</span><br><span class="line">server&#123;</span><br><span class="line">...</span><br><span class="line">    location / &#123;</span><br><span class="line">        # First attempt to serve request as file, then</span><br><span class="line">        # as directory, then fall back to displaying a 404.</span><br><span class="line">        try_files $uri $uri/ =404;</span><br><span class="line">        index index.php index.html;</span><br><span class="line">        proxy_pass  http://kite;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下來的部份僅以異動的部分進行說明。</p>
<h4 id="7-1-2-加權輪詢"><a href="#7-1-2-加權輪詢" class="headerlink" title="7.1.2. 加權輪詢"></a>7.1.2. 加權輪詢</h4><p>當server設備性能資源不同時，可透過weight屬性設定，進行比例的分配。weight越高代表此台server性能越好。</p>
<p>這樣設定代表<br>req 1 –&gt; .132<br>req 2 –&gt; .132<br>req 3 –&gt; .132<br>req 4 –&gt; .133    </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upstream kite &#123;               </span><br><span class="line">    server 192.168.199.132 weight=3;//權重，預設為1</span><br><span class="line">    server 192.168.199.133;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h4 id="7-1-3-ip-hash"><a href="#7-1-3-ip-hash" class="headerlink" title="7.1.3. ip-hash"></a>7.1.3. ip-hash</h4><p>利用 hash-function 來決定使用者要被分配到的伺服器，此方法可以達到同一個使用者 (IP address) 每次連結的伺服器都是相同的。此方法最簡單，不用解決共享session機制的問題</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upstream kite &#123;</span><br><span class="line">    ip_hash;#經由hash運算讓同一 clinet ip 轉發到同一台server</span><br><span class="line">    server 192.168.199.132;</span><br><span class="line">    server 192.168.199.133;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="7-1-4-least-connected"><a href="#7-1-4-least-connected" class="headerlink" title="7.1.4. least-connected"></a>7.1.4. least-connected</h4><p>會將請求分配到目前連接數最少的伺服器上 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upstream kite &#123;</span><br><span class="line">    least_conn;#會將請求分配到目前連接數最少的伺服器上</span><br><span class="line">    server 192.168.199.132;</span><br><span class="line">    server 192.168.199.133;        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h4 id="7-1-5-fair-第三方套件"><a href="#7-1-5-fair-第三方套件" class="headerlink" title="7.1.5. fair(第三方套件)"></a>7.1.5. fair(第三方套件)</h4><p>按後端服務器的響應時間來分配請求，響應時間短的優先分配</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upstream kite &#123;</span><br><span class="line">    fair;#動手做做看</span><br><span class="line">    server 192.168.199.132;</span><br><span class="line">    server 192.168.199.133;        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h4 id="7-1-6-url-hash-第三方套件"><a href="#7-1-6-url-hash-第三方套件" class="headerlink" title="7.1.6. url_hash(第三方套件)"></a>7.1.6. url_hash(第三方套件)</h4><p>按訪問url的hash結果來分配請求，使每個url定向到同一個後端服務器，后端服務器有實踐緩存機制時，此方法才比較有效。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upstream backserver &#123;</span><br><span class="line">    server squid1:3128;</span><br><span class="line">    server squid2:3128;</span><br><span class="line">    hash $request_uri;</span><br><span class="line">    hash_method crc32;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">proxy_pass http://backserver/; </span><br><span class="line">upstream backserver&#123; </span><br><span class="line">ip_hash; </span><br><span class="line">server 127.0.0.1:9090 down; (down 表示单前的server暂时不参与负载) </span><br><span class="line">server 127.0.0.1:8080 weight=2; (weight 默认为1.weight越大，负载的权重就越大) </span><br><span class="line">server 127.0.0.1:6060; </span><br><span class="line">server 127.0.0.1:7070 backup; (其它所有的非backup机器down或者忙的时候，请求backup机器) </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>



<h3 id="7-2-負載平衡-熱備份"><a href="#7-2-負載平衡-熱備份" class="headerlink" title="7.2. 負載平衡-熱備份"></a>7.2. 負載平衡-熱備份</h3><p>熱備份有兩個層面<code>Web Server</code>、<code>Nginx</code></p>
<h4 id="7-2-1-Web-Server-熱備份"><a href="#7-2-1-Web-Server-熱備份" class="headerlink" title="7.2.1. Web Server 熱備份"></a>7.2.1. Web Server 熱備份</h4><p>設定如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upstream kite &#123;	    </span><br><span class="line">    server 192.168.199.132;</span><br><span class="line">    server 192.168.199.133 backup;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>.132 server 掛了，會自動啟用133。那如果.132恢復了呢??<br>結論是一樣會先由132進行服務</p>
<h4 id="7-2-2-Nginx-熱備份"><a href="#7-2-2-Nginx-熱備份" class="headerlink" title="7.2.2. Nginx 熱備份"></a>7.2.2. Nginx 熱備份</h4><p>keepalive</p>
<p>動手作作看</p>
<h3 id="7-3-負載平衡-Cache機制-緩存機制"><a href="#7-3-負載平衡-Cache機制-緩存機制" class="headerlink" title="7.3. 負載平衡-Cache機制(緩存機制)"></a>7.3. 負載平衡-Cache機制(緩存機制)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line"></span><br><span class="line">    listen 80;</span><br><span class="line">    server_name www.example.com;</span><br><span class="line"></span><br><span class="line">    location ~* \.(jpg|jpeg|png|css|js)$ &#123;  </span><br><span class="line">            expires 365d;  </span><br><span class="line">            proxy_pass http://loaclhost:8080;  </span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 Nginx 配置 expires 等同於在 HTTP Response Header 裡面加上一個 Expires 的字段，裡面就是這個 Cache 到期的時間<br>動手做做看</p>
<h3 id="7-4-動靜分離"><a href="#7-4-動靜分離" class="headerlink" title="7.4. 動靜分離"></a>7.4. 動靜分離</h3><p>軟體開發中，有些請求是需要後台處理的，有些請求是不需要經過後台處理的(如css、html、jpg、js等等文件)，這些不需要經過後台處理的文件稱為靜態文件。動態網站裡的動態網頁根據一定規則把不變的資源與經常變的資源區分開離，動靜資源做好拆分之後，我們就可以根據靜態資源的特點將其做緩存操作，提高資源響應的速度。<br><img src="https://i.imgur.com/88bpBAW.png"></p>
<h4 id="7-4-1-第一次實驗"><a href="#7-4-1-第一次實驗" class="headerlink" title="7.4.1. 第一次實驗"></a>7.4.1. 第一次實驗</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">location ~*\.(jpg|jpeg|bmp|png|ico|js|css)$ &#123;						</span><br><span class="line">    root /var/www/html;<span class="comment">#ok</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>實驗結果：可以將靜態資料掛在<code>nginx</code>上面</p>
<h4 id="7-4-2-第二次實驗"><a href="#7-4-2-第二次實驗" class="headerlink" title="7.4.2. 第二次實驗"></a>7.4.2. 第二次實驗</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upstream img_server&#123;</span><br><span class="line">    server 192.168.152.130:80;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">location ~*\.(jpg|jpeg|bmp|png|ico|js|css)$ &#123;			</span><br><span class="line">    proxy_pass http://img_server; <span class="comment">#ok</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>實驗結果：可以將靜態資料掛在某台<code>web server</code>上面</p>
<h4 id="7-4-3-實驗影片"><a href="#7-4-3-實驗影片" class="headerlink" title="7.4.3. 實驗影片"></a>7.4.3. 實驗影片</h4><ul>
<li><a href="https://youtu.be/mW0bbRiIoAs">動靜分離設定在nginx上</a></li>
<li><a href="https://youtu.be/EioA1qrA0Yk">動靜分離設定在另一台webserver上</a></li>
</ul>
<h4 id="7-4-4-實驗資訊"><a href="#7-4-4-實驗資訊" class="headerlink" title="7.4.4. 實驗資訊"></a>7.4.4. 實驗資訊</h4><h5 id="7-4-4-1-ubuntu01-nginx"><a href="#7-4-4-1-ubuntu01-nginx" class="headerlink" title="7.4.4.1. ubuntu01(nginx)"></a>7.4.4.1. ubuntu01(nginx)</h5><p>圖片路徑</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/var/www/html/images/1.jpg</span><br></pre></td></tr></table></figure>


<h5 id="7-4-4-2-ubuntu02-webserver"><a href="#7-4-4-2-ubuntu02-webserver" class="headerlink" title="7.4.4.2. ubuntu02(webserver)"></a>7.4.4.2. ubuntu02(webserver)</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;ubuntu02&quot;</span>.<span class="string">&quot;&lt;BR&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$_SERVER</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;/&lt;pre&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;p&gt;</span><br><span class="line">&lt;img src=<span class="string">&quot;./images/1.jpg&quot;</span> style=<span class="string">&quot;width:250px;height:250px&quot;</span>&gt;</span><br></pre></td></tr></table></figure>

<p>程式路徑</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/var/www/html/images/index.php</span><br></pre></td></tr></table></figure>

<p>圖片路徑</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/var/www/html/images/1.jpg</span><br></pre></td></tr></table></figure>

<h5 id="7-4-4-3-ubuntu03-webserver"><a href="#7-4-4-3-ubuntu03-webserver" class="headerlink" title="7.4.4.3. ubuntu03(webserver)"></a>7.4.4.3. ubuntu03(webserver)</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;ubuntu03&quot;</span>.<span class="string">&quot;&lt;BR&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;p&gt;</span><br><span class="line">&lt;img src=<span class="string">&quot;images/1.jpg&quot;</span> style=<span class="string">&quot;width:250px;height:250px&quot;</span>&gt;</span><br></pre></td></tr></table></figure>

<p>程式路徑</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/var/www/html/images/index.php</span><br></pre></td></tr></table></figure>

<p>圖片路徑</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/var/www/html/images/1.jpg</span><br></pre></td></tr></table></figure>


<h3 id="7-5-取得Client-IP"><a href="#7-5-取得Client-IP" class="headerlink" title="7.5. 取得Client IP"></a>7.5. 取得Client IP</h3><p>在Web Server那邊只會看到nginx的IP。實際上client 是先接觸nginx,所以client IP 資訊在nginx上面，因此要取得client ip 的話，要從nginx那邊設定將訊息轉發到web server,埋在request header裡，設定如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">       # First attempt to serve request as file, then</span><br><span class="line">       # as directory, then fall back to displaying a 404.</span><br><span class="line">       try_files $uri $uri/ =404;</span><br><span class="line">       index index.php index.html;</span><br><span class="line">       proxy_pass  http://kite;</span><br><span class="line">       proxy_set_header   Host    $host;#這三行</span><br><span class="line">       proxy_set_header   X-Real-IP   $remote_addr;#這三行</span><br><span class="line">       proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;#這三行</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="8-待實作記錄"><a href="#8-待實作記錄" class="headerlink" title="8. 待實作記錄"></a>8. 待實作記錄</h2><ul>
<li>實作 Nginx 虛擬主機 Virtual Host</li>
<li>錯誤檢測</li>
<li>SSH</li>
</ul>
<h2 id="9-安裝版本記錄"><a href="#9-安裝版本記錄" class="headerlink" title="9. 安裝版本記錄"></a>9. 安裝版本記錄</h2><ul>
<li>nginx version: nginx&#x2F;1.18.0 (Ubuntu)</li>
<li>ubuntu-20.04.2.0-desktop-amd64</li>
<li>VMware Workstation 16 Pro</li>
</ul>
<h2 id="10-參考連結"><a href="#10-參考連結" class="headerlink" title="10. 參考連結"></a>10. 參考連結</h2><ul>
<li><p><a href="https://zh.wikipedia.org/wiki/Nginx#cite_note-8">WIKI</a></p>
</li>
<li><p><a href="https://www.bilibili.com/video/BV1za411F7zr?p=2&spm_id_from=pageDriver">看完这个视频还不了解Nginx，那我就哭了！</a></p>
<ul>
<li>看完囉</li>
</ul>
</li>
<li><p><a href="https://www.maxlist.xyz/2020/06/18/flask-nginx/">淺談 Nginx 基本配置、負載均衡、緩存和反向代理</a></p>
<ul>
<li>整理的很好，淺談的很完整</li>
</ul>
</li>
<li><p><a href="https://www.kuangstudy.com/bbs/1377454518035292162">Nginx学习笔记</a></p>
</li>
<li><p><a href="https://xuexb.github.io/learn-nginx/example/echo.html#%E5%AE%89%E8%A3%85">Nginx 入门教程</a></p>
<ul>
<li>還沒看過, 跟echo 模塊有關</li>
</ul>
</li>
<li><p><a href="https://nginx.org/en/docs/http/load_balancing.html">官網介紹load balance</a></p>
</li>
</ul>
<p><a href="https://www.runoob.com/w3cnote/nginx-setup-intro.html">https://www.runoob.com/w3cnote/nginx-setup-intro.html</a><br>配置詳解，可以K一一下</p>
<p><a href="https://www.nginx.cn/">https://www.nginx.cn/</a><br>詳儘內容，感覺上</p>
<p><a href="https://www.bilibili.com/video/BV1F5411J7vK?p=1">https://www.bilibili.com/video/BV1F5411J7vK?p=1</a><br>重看一次</p>
<p><a href="https://lq782655835.github.io/blogs/node/nginx.html">https://lq782655835.github.io/blogs/node/nginx.html</a><br>再K一下</p>
<p>環境架設說明</p>
<p>ab測試</p>
]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>負載平衡</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>排程備份記錄</title>
    <url>/2021/06/01/2021-06-01%20%E6%8E%92%E7%A8%8B%E5%82%99%E4%BB%BD%E8%A8%98%E9%8C%84/</url>
    <content><![CDATA[<p>要注意系統預設的日期格式，當時在開發的時候是在這個格式底下進行開發的，如果有切換到別的格式日期，那腳本的跟有日期計算的要再重新疏理一遍。</p>
<p><img src="https://i.imgur.com/sFGHFNM.jpg"></p>
<span id="more"></span>


<h2 id="1-MYSQL-資料庫備份"><a href="#1-MYSQL-資料庫備份" class="headerlink" title="1. MYSQL 資料庫備份"></a>1. MYSQL 資料庫備份</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">chcp 65001</span><br><span class="line">@rem =========================================</span><br><span class="line">@rem 設定與備份</span><br><span class="line">@rem =========================================</span><br><span class="line"><span class="built_in">set</span> CUR_DAY=%<span class="built_in">date</span>:~11,2%</span><br><span class="line"><span class="built_in">set</span> START_DATETIME=<span class="string">&quot;%date% %time%&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> DB_NAME=exam2018_api</span><br><span class="line"><span class="built_in">set</span> DATA_DEST_ROOT_PATH=D:/TQE_backup/TQE_SERVER/DB_BAK/</span><br><span class="line"><span class="built_in">set</span> DATA_DEST_FOLDER_PATH=%DATA_DEST_ROOT_PATH%%CUR_DAY%/</span><br><span class="line"><span class="built_in">set</span> DATA_DEST_FILE_NAME=%DB_NAME%_db__D%<span class="built_in">date</span>:~11,2%</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /d %DATA_DEST_ROOT_PATH%</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> not exist <span class="string">&quot;%DATA_DEST_FOLDER_PATH%/&quot;</span> <span class="built_in">mkdir</span> %CUR_DAY%</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;C:\xampp\mysql\bin\mysqldump&quot;</span> --add-drop-database --add-drop-table --allow-keywords -QqceKf --routines --create-options --flush-privileges --insert-ignore --databases -r <span class="string">&quot;%DATA_DEST_FOLDER_PATH%%DATA_DEST_FILE_NAME%.sql&quot;</span> -uroot -prootNaerTqa %DB_NAME% </span><br><span class="line"><span class="string">&quot;C:\Program Files\7-Zip\7z&quot;</span> a -t7z -mx9 <span class="string">&quot;%DATA_DEST_FOLDER_PATH%%DATA_DEST_FILE_NAME%.7z&quot;</span> -p<span class="string">&quot;ej;2u,654yji4j06t/6vu;&quot;</span> -mhe <span class="string">&quot;%DATA_DEST_FOLDER_PATH%%DATA_DEST_FILE_NAME%.sql&quot;</span></span><br><span class="line"><span class="keyword">if</span> exist <span class="string">&quot;%DATA_DEST_FOLDER_PATH%%DATA_DEST_FILE_NAME%.7z&quot;</span> <span class="built_in">cd</span> /d %DATA_DEST_FOLDER_PATH% &amp;&amp; del %DATA_DEST_FILE_NAME%.sql</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> END_DATETIME=<span class="string">&quot;%date% %time%&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@rem =========================================</span><br><span class="line">@rem 寫LOG</span><br><span class="line">@rem =========================================</span><br><span class="line">(	</span><br><span class="line">	<span class="built_in">echo</span> 資料庫名稱 %DB_NAME%</span><br><span class="line">	<span class="built_in">echo</span> 檔案備份_來源路徑 mysqldump database output</span><br><span class="line">	<span class="built_in">echo</span> 檔案備份_目的路徑 %DATA_DEST_FOLDER_PATH%</span><br><span class="line">	<span class="built_in">echo</span> 檔案備份_開始時間 %START_DATETIME%</span><br><span class="line">	<span class="built_in">echo</span> 檔案備份_結束時間 %END_DATETIME%	</span><br><span class="line">	<span class="built_in">echo</span> 工作排程檔名 %0</span><br><span class="line">) &gt;%DATA_DEST_FILE_NAME%.<span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@rem =========================================</span><br><span class="line">@rem 擷取前 N 天日期</span><br><span class="line">@rem =========================================</span><br><span class="line">@<span class="built_in">echo</span> wscript.echo dateadd(<span class="string">&quot;d&quot;</span>,-5,<span class="built_in">date</span>) &gt; %tmp%\tmp.vbs</span><br><span class="line">@<span class="keyword">for</span> /f <span class="string">&quot;tokens=1,2,3 delims=/- &quot;</span> %%i <span class="keyword">in</span> (<span class="string">&#x27;cscript /nologo %tmp%\tmp.vbs&#x27;</span>) <span class="keyword">do</span> <span class="built_in">set</span> y=%%i</span><br><span class="line">@<span class="keyword">for</span> /f <span class="string">&quot;tokens=1,2,3 delims=/- &quot;</span> %%i <span class="keyword">in</span> (<span class="string">&#x27;cscript /nologo %tmp%\tmp.vbs&#x27;</span>) <span class="keyword">do</span> <span class="built_in">set</span> m=%%j</span><br><span class="line">@<span class="keyword">for</span> /f <span class="string">&quot;tokens=1,2,3 delims=/- &quot;</span> %%i <span class="keyword">in</span> (<span class="string">&#x27;cscript /nologo %tmp%\tmp.vbs&#x27;</span>) <span class="keyword">do</span> <span class="built_in">set</span> d=%%k</span><br><span class="line">@<span class="keyword">if</span> %m% LSS 9 <span class="built_in">set</span> m=0%m%</span><br><span class="line">@<span class="keyword">if</span> %d% LSS 9 <span class="built_in">set</span> d=0%d%</span><br><span class="line">@<span class="built_in">set</span> yesterday=%y%%m%%d%</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@rem =========================================</span><br><span class="line">@rem 釋放硬碟空間，進行刪除</span><br><span class="line">@rem LOCAL SERVER 保留五天資料</span><br><span class="line">@rem NAS          保留31天資料</span><br><span class="line">@rem =========================================</span><br><span class="line"><span class="built_in">rmdir</span> /s/q <span class="string">&quot;%DATA_DEST_ROOT_PATH%%d%&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="2-WEB-程式備份"><a href="#2-WEB-程式備份" class="headerlink" title="2. WEB 程式備份"></a>2. WEB 程式備份</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">chcp 65001</span><br><span class="line"></span><br><span class="line">@rem =========================================</span><br><span class="line">@rem 設定與備份</span><br><span class="line">@rem =========================================</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> CUR_DAY=%<span class="built_in">date</span>:~11,2%</span><br><span class="line"><span class="built_in">set</span> START_DATETIME=<span class="string">&quot;%date% %time%&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> DATA_SOURCE_PATH=C:/xampp/htdocs/exam2018*</span><br><span class="line"><span class="built_in">set</span> DATA_DEST_ROOT_PATH=D:/TQE_backup/TQE_SERVER/WEB_BAK/</span><br><span class="line"><span class="built_in">set</span> DATA_DEST_FOLDER_PATH=%DATA_DEST_ROOT_PATH%%CUR_DAY%/</span><br><span class="line"><span class="built_in">set</span> DATA_DEST_FILE_NAME=exam_web__D%<span class="built_in">date</span>:~11,2%</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /d %DATA_DEST_ROOT_PATH%</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> not exist <span class="string">&quot;%DATA_DEST_FOLDER_PATH%/&quot;</span> <span class="built_in">mkdir</span> %CUR_DAY%</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /d %DATA_DEST_FOLDER_PATH% &amp;&amp; <span class="string">&quot;C:\Program Files\7-Zip\7z&quot;</span> a -t7z -mx9 %DATA_DEST_FILE_NAME%.7z -p<span class="string">&quot;ej;2u,654yji4j06t/6vu;&quot;</span> -mhe <span class="string">&quot;%DATA_SOURCE_PATH%&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> END_DATETIME=<span class="string">&quot;%date% %time%&quot;</span></span><br><span class="line"></span><br><span class="line">@rem =========================================</span><br><span class="line">@rem 寫LOG</span><br><span class="line">@rem =========================================</span><br><span class="line">(	</span><br><span class="line">	<span class="built_in">echo</span> 應用程式名稱 exam2018*</span><br><span class="line">	<span class="built_in">echo</span> 檔案備份_來源路徑 %DATA_SOURCE_PATH%</span><br><span class="line">	<span class="built_in">echo</span> 檔案備份_目的路徑 %DATA_DEST_ROOT_PATH%</span><br><span class="line">	<span class="built_in">echo</span> 檔案備份_開始時間 %START_DATETIME%</span><br><span class="line">	<span class="built_in">echo</span> 檔案備份_結束時間 %END_DATETIME%	</span><br><span class="line">	<span class="built_in">echo</span> 工作排程檔名 %0</span><br><span class="line">) &gt;%DATA_DEST_FILE_NAME%.<span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@rem =========================================</span><br><span class="line">@rem 擷取前 N 天日期</span><br><span class="line">@rem =========================================</span><br><span class="line">@<span class="built_in">echo</span> wscript.echo dateadd(<span class="string">&quot;d&quot;</span>,-5,<span class="built_in">date</span>) &gt; %tmp%\tmp.vbs</span><br><span class="line">@<span class="keyword">for</span> /f <span class="string">&quot;tokens=1,2,3 delims=/- &quot;</span> %%i <span class="keyword">in</span> (<span class="string">&#x27;cscript /nologo %tmp%\tmp.vbs&#x27;</span>) <span class="keyword">do</span> <span class="built_in">set</span> y=%%i</span><br><span class="line">@<span class="keyword">for</span> /f <span class="string">&quot;tokens=1,2,3 delims=/- &quot;</span> %%i <span class="keyword">in</span> (<span class="string">&#x27;cscript /nologo %tmp%\tmp.vbs&#x27;</span>) <span class="keyword">do</span> <span class="built_in">set</span> m=%%j</span><br><span class="line">@<span class="keyword">for</span> /f <span class="string">&quot;tokens=1,2,3 delims=/- &quot;</span> %%i <span class="keyword">in</span> (<span class="string">&#x27;cscript /nologo %tmp%\tmp.vbs&#x27;</span>) <span class="keyword">do</span> <span class="built_in">set</span> d=%%k</span><br><span class="line">@<span class="keyword">if</span> %m% LSS 9 <span class="built_in">set</span> m=0%m%</span><br><span class="line">@<span class="keyword">if</span> %d% LSS 9 <span class="built_in">set</span> d=0%d%</span><br><span class="line">@<span class="built_in">set</span> yesterday=%y%%m%%d%</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@rem =========================================</span><br><span class="line">@rem 釋放硬碟空間，進行刪除</span><br><span class="line">@rem LOCAL SERVER 保留五天資料</span><br><span class="line">@rem NAS          保留31天資料</span><br><span class="line">@rem =========================================</span><br><span class="line"><span class="built_in">rmdir</span> /s/q <span class="string">&quot;%DATA_DEST_ROOT_PATH%%d%&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="3-檔案備份"><a href="#3-檔案備份" class="headerlink" title="3. 檔案備份"></a>3. 檔案備份</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">chcp 65001</span><br><span class="line">@rem =========================================</span><br><span class="line">@rem 設定與備份</span><br><span class="line">@rem =========================================</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> CUR_DAY=%<span class="built_in">date</span>:~11,2%</span><br><span class="line"><span class="built_in">set</span> START_DATETIME=<span class="string">&quot;%date% %time%&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> DATA_SOURCE_PATH=D:/掃描文件/</span><br><span class="line"><span class="built_in">set</span> DATA_DEST_ROOT_PATH=D:/TQE_backup/OES_DATA/掃描文件/</span><br><span class="line"><span class="built_in">set</span> DATA_DEST_FOLDER_PATH=%DATA_DEST_ROOT_PATH%%CUR_DAY%/</span><br><span class="line"><span class="built_in">set</span> DATA_DEST_FILE_NAME=掃描文件_data__D%CUR_DAY%</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /d %DATA_DEST_ROOT_PATH%</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> not exist <span class="string">&quot;%DATA_DEST_FOLDER_PATH%/&quot;</span> <span class="built_in">mkdir</span> %CUR_DAY%</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;C:\Program Files\7-Zip\7z&quot;</span> a -t7z -mx=0 -v1024m <span class="string">&quot;%DATA_DEST_FOLDER_PATH%%DATA_DEST_FILE_NAME%.7z&quot;</span> -p<span class="string">&quot;ej;2u,654yji4j06t/6vu;&quot;</span> -mhe <span class="string">&quot;%DATA_SOURCE_PATH%&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> END_DATETIME=<span class="string">&quot;%date% %time%&quot;</span></span><br><span class="line"></span><br><span class="line">@rem =========================================</span><br><span class="line">@rem 寫LOG</span><br><span class="line">@rem =========================================</span><br><span class="line">(	</span><br><span class="line">	<span class="built_in">echo</span> 檔案備份_來源路徑 %DATA_SOURCE_PATH%</span><br><span class="line">	<span class="built_in">echo</span> 檔案備份_目的路徑 %DATA_DEST_ROOT_PATH%</span><br><span class="line">	<span class="built_in">echo</span> 檔案備份_開始時間 %START_DATETIME%</span><br><span class="line">	<span class="built_in">echo</span> 檔案備份_結束時間 %END_DATETIME%	</span><br><span class="line">	<span class="built_in">echo</span> 工作排程檔名 %0</span><br><span class="line">) &gt;%DATA_DEST_FOLDER_PATH%%DATA_DEST_FILE_NAME%.<span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@rem =========================================</span><br><span class="line">@rem 擷取前 N 天日期</span><br><span class="line">@rem =========================================</span><br><span class="line">@<span class="built_in">echo</span> wscript.echo dateadd(<span class="string">&quot;d&quot;</span>,-5,<span class="built_in">date</span>) &gt; %tmp%\tmp.vbs</span><br><span class="line">@<span class="keyword">for</span> /f <span class="string">&quot;tokens=1,2,3 delims=/- &quot;</span> %%i <span class="keyword">in</span> (<span class="string">&#x27;cscript /nologo %tmp%\tmp.vbs&#x27;</span>) <span class="keyword">do</span> <span class="built_in">set</span> y=%%i</span><br><span class="line">@<span class="keyword">for</span> /f <span class="string">&quot;tokens=1,2,3 delims=/- &quot;</span> %%i <span class="keyword">in</span> (<span class="string">&#x27;cscript /nologo %tmp%\tmp.vbs&#x27;</span>) <span class="keyword">do</span> <span class="built_in">set</span> m=%%j</span><br><span class="line">@<span class="keyword">for</span> /f <span class="string">&quot;tokens=1,2,3 delims=/- &quot;</span> %%i <span class="keyword">in</span> (<span class="string">&#x27;cscript /nologo %tmp%\tmp.vbs&#x27;</span>) <span class="keyword">do</span> <span class="built_in">set</span> d=%%k</span><br><span class="line">@<span class="keyword">if</span> %m% LSS 9 <span class="built_in">set</span> m=0%m%</span><br><span class="line">@<span class="keyword">if</span> %d% LSS 9 <span class="built_in">set</span> d=0%d%</span><br><span class="line">@<span class="built_in">set</span> yesterday=%y%%m%%d%</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@rem =========================================</span><br><span class="line">@rem 釋放硬碟空間，進行刪除</span><br><span class="line">@rem LOCAL SERVER 保留五天資料</span><br><span class="line">@rem NAS          保留31天資料</span><br><span class="line">@rem =========================================</span><br><span class="line"><span class="built_in">rmdir</span> /s/q <span class="string">&quot;%DATA_DEST_ROOT_PATH%%d%&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="4-參考連結"><a href="#4-參考連結" class="headerlink" title="4. 參考連結"></a>4. 參考連結</h2><p><a href="https://www.youtube.com/watch?v=g7yTpi_u0Z8&list=PLWg9zacwOnweUO4gfbSUPMVguIz_ONIEF&index=1">初學者的命令行</a></p>
]]></content>
      <categories>
        <category>備份</category>
      </categories>
      <tags>
        <tag>備份</tag>
      </tags>
  </entry>
  <entry>
    <title>SASS筆記</title>
    <url>/2021/06/12/2021-06-12%20SASS%E7%AD%86%E8%A8%98/</url>
    <content><![CDATA[<h2 id="1-SASS原理"><a href="#1-SASS原理" class="headerlink" title="1. SASS原理"></a>1. SASS原理</h2><p><img src="https://i.imgur.com/Jmbx6B8.png"></p>
<span id="more"></span>


<h2 id="2-SASS-提供兩種寫法"><a href="#2-SASS-提供兩種寫法" class="headerlink" title="2. SASS 提供兩種寫法"></a>2. SASS 提供兩種寫法</h2><p><img src="https://i.imgur.com/fsy2z6E.png"></p>
<h3 id="2-1-SASS-與SCSS-差別"><a href="#2-1-SASS-與SCSS-差別" class="headerlink" title="2.1. SASS 與SCSS 差別"></a>2.1. SASS 與SCSS 差別</h3><p>SASS利用空白的方式縮行(2個空白或1個tab)，代表下一個階層的內容，跟python的程式風格一樣的概念<br><img src="https://i.imgur.com/9Oi0aC8.png"></p>
<h2 id="3-編譯軟體"><a href="#3-編譯軟體" class="headerlink" title="3. 編譯軟體"></a>3. 編譯軟體</h2><ol>
<li>軟體編譯<ul>
<li>Prepros</li>
</ul>
</li>
<li>gulp or webpack 打包工具<ul>
<li>使用command line方式打包，會用到js語法</li>
</ul>
</li>
<li>編輯器內鍵的插件<ul>
<li>VSCode<ul>
<li>Live Sass Complier</li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="3-1-符號使用"><a href="#3-1-符號使用" class="headerlink" title="3.1. &amp;符號使用"></a>3.1. <code>&amp;</code>符號使用</h3><p><img src="https://i.imgur.com/gmuuszx.png"></p>
<h3 id="3-2-變數"><a href="#3-2-變數" class="headerlink" title="3.2. 變數"></a>3.2. 變數</h3><h4 id="3-2-1-宣告變數在最前面"><a href="#3-2-1-宣告變數在最前面" class="headerlink" title="3.2.1. 宣告變數在最前面"></a>3.2.1. 宣告變數在最前面</h4><p><img src="https://i.imgur.com/Nr9ogba.png"></p>
<h4 id="3-2-2-Bootstrap也有在使用"><a href="#3-2-2-Bootstrap也有在使用" class="headerlink" title="3.2.2. Bootstrap也有在使用"></a>3.2.2. Bootstrap也有在使用</h4><p><img src="https://i.imgur.com/HVj7gpQ.png"></p>
<h4 id="3-2-3-自我練習"><a href="#3-2-3-自我練習" class="headerlink" title="3.2.3. 自我練習"></a>3.2.3. 自我練習</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$font-m:32px;</span><br><span class="line">$font-l:$font-m*1.2;</span><br><span class="line">$font-s:$font-m*0.8;</span><br><span class="line">.a&#123;</span><br><span class="line">    font-size: $font-m;</span><br><span class="line">&#125;</span><br><span class="line">.b&#123;</span><br><span class="line">    font-size: $font-s;</span><br><span class="line">&#125;</span><br><span class="line">.c&#123;</span><br><span class="line">    font-size: $font-l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-3-拆檔"><a href="#3-3-拆檔" class="headerlink" title="3.3. 拆檔"></a>3.3. 拆檔</h3><p>Bootstrap 使用拆檔功能<br><img src="https://i.imgur.com/3uS0Ts3.png"></p>
<p><img src="https://i.imgur.com/2hBrzCL.png"></p>
<h4 id="3-3-1-自我練習"><a href="#3-3-1-自我練習" class="headerlink" title="3.3.1. 自我練習"></a>3.3.1. 自我練習</h4><p><code>_index.scss</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$font-m:32px;</span><br><span class="line">$font-l:$font-m*1.2;</span><br><span class="line">$font-s:$font-m*0.8;</span><br><span class="line">.a&#123;</span><br><span class="line">    font-size: $font-m;</span><br><span class="line">&#125;</span><br><span class="line">.b&#123;</span><br><span class="line">    font-size: $font-s;</span><br><span class="line">&#125;</span><br><span class="line">.c&#123;</span><br><span class="line">    font-size: $font-l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>_reset.scss</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">body&#123;</span><br><span class="line">    margin:0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>all.sass</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@import &#x27;reset&#x27;;</span><br><span class="line">@import &#x27;index&#x27;;</span><br></pre></td></tr></table></figure>


<h3 id="3-4-mixin用法"><a href="#3-4-mixin用法" class="headerlink" title="3.4. mixin用法"></a>3.4. mixin用法</h3><p>將常用或記不起來的css包裝成<code>@mixin</code>方式宣告，接著在要用的地方使用<code>@include</code>，<br>當然在bootstrap有一個專門的mixin資料夾存放這些設定</p>
<h4 id="3-4-1-簡單include方式"><a href="#3-4-1-簡單include方式" class="headerlink" title="3.4.1. 簡單include方式"></a>3.4.1. 簡單include方式</h4><p><img src="https://imgur.com/vCWeEYA.png"></p>
<h4 id="3-4-2-函式方式"><a href="#3-4-2-函式方式" class="headerlink" title="3.4.2. 函式方式"></a>3.4.2. 函式方式</h4><p><img src="https://imgur.com/mPvWWcX.png"></p>
<h3 id="3-5-循序漸進優化網頁架構"><a href="#3-5-循序漸進優化網頁架構" class="headerlink" title="3.5. 循序漸進優化網頁架構"></a>3.5. 循序漸進優化網頁架構</h3><h4 id="3-5-1-第一次寫SCSS建議結構-all-scss"><a href="#3-5-1-第一次寫SCSS建議結構-all-scss" class="headerlink" title="3.5.1. 第一次寫SCSS建議結構(all.scss)"></a>3.5.1. 第一次寫SCSS建議結構(all.scss)</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@import &quot;mixin&quot;;//所有全域變數與mixin</span><br><span class="line">@import &quot;reset&quot;;//reset.css</span><br><span class="line">@import &quot;index&quot;;//首頁</span><br><span class="line">@import &quot;page/..&quot;;//內頁</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="3-5-2-接著可以這樣寫-all-scss"><a href="#3-5-2-接著可以這樣寫-all-scss" class="headerlink" title="3.5.2. 接著可以這樣寫(all.scss)"></a>3.5.2. 接著可以這樣寫(all.scss)</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@import &quot;mixin&quot;;//所有全域變數與mixin</span><br><span class="line">@import &quot;reset&quot;;//reset.css</span><br><span class="line">@import &quot;layout&quot;;//共同框架，第一層</span><br><span class="line">@import &quot;module&quot;;//button,form,table</span><br><span class="line">@import &quot;page/index,page1,page2&quot;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>舉例來說，將button 跟video 分開撰寫<br>然後在每一個頁面都有各自的css<br><img src="https://imgur.com/O2f4Zvy.png"></p>
<h4 id="3-5-3-mixin-cotent設計響應式網站超方便"><a href="#3-5-3-mixin-cotent設計響應式網站超方便" class="headerlink" title="3.5.3. @mixin+@cotent設計響應式網站超方便"></a>3.5.3. <code>@mixin+@cotent</code>設計響應式網站超方便</h4><p>先設計好每個裝置的斷點，內容部分填寫<code>@content</code><br><img src="https://i.imgur.com/9j1inP5.jpg"></p>
<p>在應用部分直接<code>@include()</code> 裡面內容填寫相關設定<br><img src="https://i.imgur.com/DbmfAic.jpg"></p>
]]></content>
      <categories>
        <category>SASS</category>
      </categories>
      <tags>
        <tag>SASS</tag>
      </tags>
  </entry>
  <entry>
    <title>無障礙網頁筆記</title>
    <url>/2021/06/15/2021-06-15%20%E7%84%A1%E9%9A%9C%E7%A4%99%E7%B6%B2%E9%A0%81%E7%AD%86%E8%A8%98/</url>
    <content><![CDATA[<ol>
<li>圖片加alt</li>
<li>導航磚(accesskey) 常見的有ULC</li>
<li>製作網站導覽頁，聲明有無障礙設計</li>
<li>影音影片配合文字說明</li>
<li><code>&lt;noscript&gt;使用&lt;/noscript&gt;</code></li>
<li>table th,td 用法</li>
<li>軟體檢測 freego</li>
<li>人工檢測  7-14天，審核是需要時間，不要一口答應可以馬上一個月就搞定</li>
<li>語音驗證碼</li>
<li>手機的無障礙 ios voice over</li>
<li>label 與 input 設計</li>
<li>須符合W3C 規格語句結構</li>
<li>政府、公家機關都會符合無障礙網站</li>
<li>A、AA、AAA 越來越難，比方說在AAA需要加入手語</li>
<li>通常大家都只做到A等級</li>
<li>H2 UL LI 結構</li>
<li>H1 每個網頁最重要的說明，且只能有一個</li>
<li>減少動畫效果，癲癇的人會發作</li>
</ol>
]]></content>
      <categories>
        <category>無障礙網頁</category>
      </categories>
      <tags>
        <tag>無障礙網頁</tag>
      </tags>
  </entry>
  <entry>
    <title>CCNA_13</title>
    <url>/2021/06/16/2021-06-16%20CCNA_13/</url>
    <content><![CDATA[<h2 id="1-Warm-Up-Packet-Tracer-and-IOS-Basic-2-配置line，Telnet，SSH，Message和Banner"><a href="#1-Warm-Up-Packet-Tracer-and-IOS-Basic-2-配置line，Telnet，SSH，Message和Banner" class="headerlink" title="1. Warm Up Packet Tracer and IOS Basic 2(配置line，Telnet，SSH，Message和Banner)"></a>1. Warm Up Packet Tracer and IOS Basic 2(配置line，Telnet，SSH，Message和Banner)</h2><h3 id="1-1-Line"><a href="#1-1-Line" class="headerlink" title="1.1. Line"></a>1.1. Line</h3><p>總類分別</p>
<ul>
<li>CTY(console port)</li>
<li>TTY</li>
<li>AUX</li>
<li>VTY(virtual terminal,telnet,SSH)</li>
</ul>
<p>目前只要學CTY、UTY<br>如果你從SSH登入，那LINE TYPE就是VTY<br>正常我們就只會有一個CTY，因為實際接了一條線<br>交換機允許多人登入，但是有上限的限制。<br><img src="https://i.imgur.com/UmJOrhS.png"></p>
<p>查當前用戶</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">show user</span><br></pre></td></tr></table></figure>

<p>查目前line狀況</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">show line</span><br></pre></td></tr></table></figure>
<span id="more"></span>


<h3 id="1-2-console-物理端口"><a href="#1-2-console-物理端口" class="headerlink" title="1.2. console(物理端口)"></a>1.2. console(物理端口)</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">line con 0</span><br><span class="line">password cisco</span><br><span class="line">login</span><br><span class="line">exec-timeout 0 0 --分 秒</span><br></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/s5t4LDc.png"></p>
<h3 id="1-3-telnet-VTY-遠程登入"><a href="#1-3-telnet-VTY-遠程登入" class="headerlink" title="1.3. telnet - VTY(遠程登入)"></a>1.3. telnet - VTY(遠程登入)</h3><p>設定可以有幾個vty使用者</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">line vty 0 4</span><br></pre></td></tr></table></figure>
<p>設定驗證機制三種方式</p>
<h4 id="1-3-1-no-login"><a href="#1-3-1-no-login" class="headerlink" title="1.3.1. no login"></a>1.3.1. no login</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">line vty 0 4</span><br><span class="line">no login</span><br><span class="line">n○ password abc123</span><br></pre></td></tr></table></figure>

<h4 id="1-3-2-login-僅密碼"><a href="#1-3-2-login-僅密碼" class="headerlink" title="1.3.2. login 僅密碼"></a>1.3.2. login 僅密碼</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">line vty 0 4</span><br><span class="line">password abc123</span><br><span class="line">login</span><br></pre></td></tr></table></figure>

<h4 id="1-3-3-login-帳號、密碼"><a href="#1-3-3-login-帳號、密碼" class="headerlink" title="1.3.3. login 帳號、密碼"></a>1.3.3. login 帳號、密碼</h4><p>創建帳號<br>回到config</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">username abc password abc123</span><br></pre></td></tr></table></figure>

<p>設定vty帳號密碼</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">line vty 0 4</span><br><span class="line">login local</span><br></pre></td></tr></table></figure>

<h3 id="1-4-SSH"><a href="#1-4-SSH" class="headerlink" title="1.4. SSH"></a>1.4. SSH</h3><p>RSA 演算法<br><img src="https://i.imgur.com/C7SBme4.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hostname sw -- 命名交換機的名稱</span><br><span class="line">conf t</span><br><span class="line">ip domain name ccna++.com</span><br><span class="line">crypto key generate rsa</span><br><span class="line">會問 How many bits in the modules [512]: 2048</span><br><span class="line">ip ssh version 2</span><br></pre></td></tr></table></figure>
<p>目前rsa 的bit 512 是默認，但不安全，可以填2048</p>
<h4 id="1-4-1-no-login"><a href="#1-4-1-no-login" class="headerlink" title="1.4.1. no login"></a>1.4.1. no login</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">line vty 0 4</span><br><span class="line">no login</span><br></pre></td></tr></table></figure>

<p>雖然在ssh 登入的時候會問你，但是你隨便key還是進得去</p>
<h4 id="1-4-2-無帳號有密碼"><a href="#1-4-2-無帳號有密碼" class="headerlink" title="1.4.2. 無帳號有密碼"></a>1.4.2. 無帳號有密碼</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">line vty 0 4</span><br><span class="line">password cisco</span><br><span class="line">login</span><br></pre></td></tr></table></figure>


<h4 id="1-4-3-有帳號有密碼"><a href="#1-4-3-有帳號有密碼" class="headerlink" title="1.4.3. 有帳號有密碼"></a>1.4.3. 有帳號有密碼</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">username cisco password cisco </span><br><span class="line">line vty 0 4</span><br><span class="line">password cisco </span><br><span class="line">login local</span><br></pre></td></tr></table></figure>

<p>但是未限制ssh</p>
<h4 id="1-4-4-限制ssh方式"><a href="#1-4-4-限制ssh方式" class="headerlink" title="1.4.4. 限制ssh方式"></a>1.4.4. 限制ssh方式</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">username cisco password cisco</span><br><span class="line">line vty 0 4 </span><br><span class="line">login local </span><br><span class="line">transport input ssh</span><br></pre></td></tr></table></figure>



<h3 id="1-5-Send-message"><a href="#1-5-Send-message" class="headerlink" title="1.5. Send message"></a>1.5. Send message</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">send *</span><br></pre></td></tr></table></figure>

<p>使用方法</p>
<ul>
<li>通知對方要重啟交換機</li>
<li>透過發訊息的方式，確認講的是同一台交換機</li>
</ul>
<p><img src="https://i.imgur.com/gqqRjRC.png"></p>
<h3 id="1-6-BANNER"><a href="#1-6-BANNER" class="headerlink" title="1.6. BANNER"></a>1.6. BANNER</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">banner motd ! --驚嘆號是一個起始符號，當然也可以是別的特殊符號，結束也要打這個</span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/mbUZyfn.png"></p>
]]></content>
      <categories>
        <category>CCNA</category>
      </categories>
      <tags>
        <tag>CCNA</tag>
      </tags>
  </entry>
  <entry>
    <title>CCNA_14</title>
    <url>/2021/06/19/2021-06-19%20CCNA_14/</url>
    <content><![CDATA[<h2 id="1-Warm-Up-Packet-Tracer-and-IOS-Basic3-配置密码，密码恢复，系统日志，IOS版本号意义和License）"><a href="#1-Warm-Up-Packet-Tracer-and-IOS-Basic3-配置密码，密码恢复，系统日志，IOS版本号意义和License）" class="headerlink" title="1. Warm Up Packet Tracer and IOS Basic3(配置密码，密码恢复，系统日志，IOS版本号意义和License）"></a>1. Warm Up Packet Tracer and IOS Basic3(配置密码，密码恢复，系统日志，IOS版本号意义和License）</h2><h3 id="1-1-Enable-Password-Secret"><a href="#1-1-Enable-Password-Secret" class="headerlink" title="1.1. Enable Password&#x2F;Secret"></a>1.1. Enable Password&#x2F;Secret</h3><p><img src="https://i.imgur.com/NSuTVPz.png"></p>
<ul>
<li><p>Type 0 </p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">enable password</span><br></pre></td></tr></table></figure>
<p>  是一個明文的文檔</p>
</li>
<li><p>Type 7</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service password-encryption</span><br></pre></td></tr></table></figure>
<p>  雖然有加密，但是其實是滿弱的<br>  可以上網找cisco type 7 decrypt 就可以破解了</p>
</li>
<li><p>Type 5</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">enable secret</span><br></pre></td></tr></table></figure></li>
<li><p>Type 4</p>
<ul>
<li>是一個失敗的開發，也不使用了</li>
</ul>
</li>
<li><p>Type 8 </p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">enable algorithm-type sha256</span><br></pre></td></tr></table></figure>
<ul>
<li>在模擬器上無法模擬</li>
</ul>
</li>
<li><p>Type 9 </p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">enable algorithm-type scrypt secret</span><br></pre></td></tr></table></figure>
<p>  建議都使用type9進行加密</p>
</li>
</ul>
<span id="more"></span>


<h3 id="1-2-Recovering-Passwords"><a href="#1-2-Recovering-Passwords" class="headerlink" title="1.2. Recovering Passwords"></a>1.2. Recovering Passwords</h3><p><img src="https://i.imgur.com/SUu5Hgd.png"></p>
<ul>
<li><p>設定空白config</p>
<ul>
<li>演示過程中，先將電源重啟，接著再command 按下<code>ctrl + c</code>，就會進入到 <code>rommon 1</code> 模式底下。設定 0x2142 是為了要設定一個空白的config，而不要加載startup config  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">confreg 0x2142</span><br><span class="line">reset</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>覆蓋running-conifg</p>
<ul>
<li>藉由這樣的覆蓋之後，再重新設定密碼，而且覆蓋命令執行完，是可以不用輸入密碼的狀況，再重新設置密碼  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">copy startup-config running-config</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>設定不需要密碼</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">no enable password</span><br></pre></td></tr></table></figure></li>
<li><p>改回0x2102</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">config-register 0x2102</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="1-3-Logging"><a href="#1-3-Logging" class="headerlink" title="1.3. Logging"></a>1.3. Logging</h3><p><img src="https://i.imgur.com/oLE9B1o.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show logging</span><br></pre></td></tr></table></figure>

<ul>
<li><p>Console logging</p>
<ul>
<li>使用console cable 連線的logging 記錄</li>
</ul>
</li>
<li><p>Terminal logging</p>
<ul>
<li>使用telnet,ssh 的連線記錄</li>
</ul>
</li>
<li><p>Buffered logging</p>
<ul>
<li>系統日誌，會寫到某個txt檔上，可以查看</li>
</ul>
</li>
<li><p>Syslog Server logging</p>
<ul>
<li>把系統日誌發送到遠端的server</li>
</ul>
</li>
</ul>
<p>開啟buffer logging</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">logging bufered</span><br></pre></td></tr></table></figure>

<p>關閉console日誌</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">no logging console</span><br></pre></td></tr></table></figure>

<p>設定系統日誌到遠端</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">logging 1.1.1.2</span><br><span class="line">do show logging</span><br></pre></td></tr></table></figure>

<p>logging 總開關</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">logging on</span><br><span class="line">no logging on</span><br></pre></td></tr></table></figure>


<h3 id="1-4-Logging-Level"><a href="#1-4-Logging-Level" class="headerlink" title="1.4. Logging Level"></a>1.4. Logging Level</h3><p>0<del>7 最嚴重到最輕<br>通常不會看debug(7)，因為這個訊息太多了<br>通常我們會希望日誌是顯示6</del>0的系統日誌<br>你想知道日誌裡有哪些等級或者等級裡面有哪些日誌，可以去cisco上找文件<br><img src="https://i.imgur.com/VhcD9Ty.png"></p>
<h3 id="1-5-Logging-Sync"><a href="#1-5-Logging-Sync" class="headerlink" title="1.5. Logging Sync"></a>1.5. Logging Sync</h3><p>主要說明了如果在敲打命令的時候，會因為日誌的輸入，而讓我們的打的字元被截斷，因此可以使用<br>logging synchronous 方式避免掉這個問題</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">logging synchronous</span><br></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/GdnM6eZ.png"></p>
<h3 id="1-6-CISCO-IOS-VERSION"><a href="#1-6-CISCO-IOS-VERSION" class="headerlink" title="1.6. CISCO IOS VERSION"></a>1.6. CISCO IOS VERSION</h3><p><img src="https://i.imgur.com/qlhllIE.png"></p>
<p>最優先請看major release<br>M 是穩定版<br>T 是測試版，沒問題之後，會再出個一穩定版<br>當然還有別的代號比如S、Y</p>
<h3 id="1-7-CISCO-IOS-Packaging-before-15-0"><a href="#1-7-CISCO-IOS-Packaging-before-15-0" class="headerlink" title="1.7. CISCO IOS Packaging - before 15.0"></a>1.7. CISCO IOS Packaging - before 15.0</h3><p>15.0以前的版本，每買一個功能，都需要安裝新的IOS檔，重新灌系統<br><img src="https://i.imgur.com/M28RTAO.png"></p>
<h3 id="1-8-CISCO-IOS-Packaging-after-15-0"><a href="#1-8-CISCO-IOS-Packaging-after-15-0" class="headerlink" title="1.8. CISCO IOS Packaging - after 15.0"></a>1.8. CISCO IOS Packaging - after 15.0</h3><p>15.0以後的版本，IOS檔已經包含所有功能了，只是個一function的開啟概念<br><img src="https://i.imgur.com/xGTjUUg.png"></p>
<h3 id="1-9-Unversal-Image"><a href="#1-9-Unversal-Image" class="headerlink" title="1.9. Unversal Image"></a>1.9. Unversal Image</h3><p>激活新購買的模組流程<br>先在router 打上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show license udi </span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/uAGNPPr.png"></p>
]]></content>
      <categories>
        <category>CCNA</category>
      </categories>
      <tags>
        <tag>CCNA</tag>
      </tags>
  </entry>
  <entry>
    <title>MYSQL 遠端連線</title>
    <url>/2021/07/22/2021-07-22%20MYSQL%20%E9%81%A0%E7%AB%AF%E9%80%A3%E7%B7%9A/</url>
    <content><![CDATA[<p>自己用VMware workstation pro run 了2個 win10 虛擬機進行實驗，跑以下流程來練習自己設定資料庫遠端連線的設定。</p>
<ol>
<li><p>開啟 Port 3306</p>
<p> MySQL 預設的 Port 是 3306，必須先開啟伺服器的連接埠，並確認防火牆的設定。尤其如果是建立在 GCP、AWS等雲端伺服器上，也要同時確認專案的防火牆設定。</p>
</li>
<li><p>建立使用者名稱及密碼</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;user&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;PASSWORD&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>給定使用者存取權限</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql <span class="operator">&gt;</span> <span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> database_name.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;user&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>重新載入使用者權限設定</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>
</li>
<li><p>改程式DB connection</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$GLOBALS[<span class="string">&#x27;db&#x27;</span>] <span class="operator">=</span> <span class="keyword">new</span> db(<span class="string">&#x27;mysql:host=192.168.152.128;dbname=exam2018&#x27;</span>,<span class="string">&#x27;kite&#x27;</span>,<span class="string">&#x27;0000&#x27;</span>);</span><br></pre></td></tr></table></figure></li>
</ol>
<p><img src="https://i.imgur.com/qlAcY4V.png"></p>
]]></content>
      <categories>
        <category>MYSQL</category>
      </categories>
      <tags>
        <tag>MYSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>VMware workstation Pro 與 windows server 2016 問題記錄</title>
    <url>/2021/07/22/2021-07-22%20VMware%20workstation%20Pro%20%E8%88%87%20windows%20server%202016%20%E5%95%8F%E9%A1%8C%E8%A8%98%E9%8C%84/</url>
    <content><![CDATA[<h2 id="1-任務"><a href="#1-任務" class="headerlink" title="1. 任務"></a>1. 任務</h2><p>將從ESXi 的windows server 2016 映像檔下載下來後還原到VMware workstation pro</p>
<p>接著利用switch 接上所有PC，能讓所有PC 訪問這台裝有VMware workstation pro 的PC</p>
<p>如圖所示，感謝JAVA_Mars 幫忙畫的圖</p>
<p><img src="https://i.imgur.com/KlHo6Jc.jpg"></p>
<span id="more"></span>


<h2 id="2-主機說明"><a href="#2-主機說明" class="headerlink" title="2. 主機說明"></a>2. 主機說明</h2><ul>
<li>PC_A<ul>
<li>有灌VMWare workstation pro</li>
</ul>
</li>
<li>PC_B<ul>
<li>扮演 client 端角色</li>
</ul>
</li>
<li>Guest OS<ul>
<li>windows server 2016</li>
</ul>
</li>
</ul>
<h2 id="3-背景"><a href="#3-背景" class="headerlink" title="3. 背景"></a>3. 背景</h2><p>我們嘗試努力了很久，始終發現無法讓PC_B去訪問Gest_OS系統(windos server 2016)</p>
<p>於是…我們做了假設，如果模擬一般的WIN10 會不會有問題</p>
<h2 id="4-實驗一"><a href="#4-實驗一" class="headerlink" title="4. 實驗一"></a>4. 實驗一</h2><p>我們實際測試如果是esxi 匯出的 win10 映像檔匯入 vmware workstation pro PC_A，</p>
<p>PC_B 是能 ping 到這個 vm win10 機器</p>
<p>什麼!!!</p>
<p><strong>PC_B 是能 ping 到這個 vm win10 機器</strong></p>
<p><strong>PC_B 是能 ping 到這個 vm win10 機器</strong></p>
<p><strong>PC_B 是能 ping 到這個 vm win10 機器</strong></p>
<h2 id="5-經由實驗一…得出一個假設問題"><a href="#5-經由實驗一…得出一個假設問題" class="headerlink" title="5. 經由實驗一…得出一個假設問題"></a>5. 經由實驗一…得出一個假設問題</h2><p>開始懷疑是作業系統有關的問題，找了文章關鍵字發現vmware 官網有一些跟windows server2016 有關的issue</p>
<blockquote>
<p><a href="https://communities.vmware.com/t5/VMware-Workstation-Pro/bridged-network-not-working-vmware-workstation-pro-14/m-p/470985">bridged network not working - vmware workstation pro 14</a></p>
</blockquote>
<h2 id="6-實驗步驟流程"><a href="#6-實驗步驟流程" class="headerlink" title="6. 實驗步驟流程"></a>6. 實驗步驟流程</h2><p>某個同事就開始試….以下是記錄實驗的流程</p>
<ol>
<li>我們的作法是先將 網卡裡面的vmware bridge protocol 移除</li>
</ol>
<p><img src="https://i.imgur.com/4acIEbK.png"></p>
<ol start="2">
<li><p>接著到控制台找到vmware,執行叫出repair,remove gui介面，我們選擇「repair」進行修復</p>
</li>
<li><p>這時候網卡剛剛移除的vmware bridge protocol 就恢復了</p>
</li>
<li><p>到Virtual Machine Settings 介面</p>
<p> Remove Network Adapter</p>
</li>
</ol>
<p><img src="https://i.imgur.com/CX9UtGU.png"></p>
<ol start="5">
<li>重新 add Network Adapter ,Network connection 選擇 Bridged</li>
</ol>
<p>以上這樣就成功惹，終於可以讓PC_B 連到PC_A 底下的VMware <strong>windows server 2016</strong></p>
]]></content>
      <tags>
        <tag>VMware</tag>
        <tag>windows server 2016</tag>
      </tags>
  </entry>
  <entry>
    <title>Phaser 教學</title>
    <url>/2021/08/12/2021-08-12%20Phaser%20%E6%95%99%E5%AD%B8/</url>
    <content><![CDATA[<h2 id="1-Phaser-是什麼"><a href="#1-Phaser-是什麼" class="headerlink" title="1. Phaser 是什麼"></a>1. Phaser 是什麼</h2><ul>
<li>一個快速、免費、開源的H5遊戲框架</li>
<li>支持WEBGL和Canvas兩種渲染方式，並支持桌面和移動web瀏覽器</li>
<li>甚至可以使用第三方工具編譯打包成ios、android和桌面app</li>
<li>phaser CE 與 phaser3</li>
</ul>
<span id="more"></span>


<h2 id="2-Phaser-可以做什麼"><a href="#2-Phaser-可以做什麼" class="headerlink" title="2. Phaser 可以做什麼"></a>2. Phaser 可以做什麼</h2><ul>
<li>2d遊戲開發</li>
<li>推廣活動</li>
</ul>
<h2 id="3-Phaser-特色"><a href="#3-Phaser-特色" class="headerlink" title="3. Phaser 特色"></a>3. Phaser 特色</h2><p><img src="https://i.imgur.com/CbcIrlz.png" alt="image-20210618124036875"></p>
<h2 id="4-Game"><a href="#4-Game" class="headerlink" title="4. Game"></a>4. Game</h2><h3 id="4-1-Game的創建"><a href="#4-1-Game的創建" class="headerlink" title="4.1. Game的創建"></a>4.1. Game的創建</h3><p><img src="https://i.imgur.com/xYE0xEB.png" alt="image-20210618124206803"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Game</span>(&#123;</span><br><span class="line">	<span class="attr">width</span>:<span class="number">375</span>,</span><br><span class="line">    <span class="attr">height</span>:<span class="number">667</span>,</span><br><span class="line">    <span class="attr">renderer</span>:<span class="title class_">Phaser</span>.<span class="property">AUTO</span>,</span><br><span class="line">    <span class="attr">parent</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">transparent</span>:<span class="literal">false</span>,</span><br><span class="line">    <span class="attr">antialias</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">physicsConfig</span>:<span class="literal">null</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h3 id="4-2-Game工作原理"><a href="#4-2-Game工作原理" class="headerlink" title="4.2. Game工作原理"></a>4.2. Game工作原理</h3><p><img src="https://i.imgur.com/WSS023c.png" alt="image-20210618131753257"></p>
<h3 id="4-3-Game中的子系統"><a href="#4-3-Game中的子系統" class="headerlink" title="4.3. Game中的子系統"></a>4.3. Game中的子系統</h3><ol>
<li>資源加載系統</li>
<li>場景系統</li>
<li>物理引擎</li>
<li>聲音系統</li>
<li>輸入系統</li>
<li>粒子系統</li>
</ol>
<h2 id="5-常見遊戲元素"><a href="#5-常見遊戲元素" class="headerlink" title="5. 常見遊戲元素"></a>5. 常見遊戲元素</h2><ul>
<li>視覺<ul>
<li>圖片</li>
<li>聲音</li>
</ul>
</li>
</ul>
<p>遊戲渲染方式</p>
<ul>
<li><p>可以通過DOM實現</p>
</li>
<li><p>CANVAS</p>
<p>中小型都可以</p>
</li>
<li><p>WEBGL</p>
<p>性能大約是CANVAS 3到5倍，可以使用到GPU，3D性</p>
</li>
<li><p>文字</p>
</li>
<li><p>事件</p>
</li>
</ul>
<h2 id="6-遊戲中的資源"><a href="#6-遊戲中的資源" class="headerlink" title="6. 遊戲中的資源"></a>6. 遊戲中的資源</h2><ol>
<li>圖片與圖片集</li>
<li>聲音</li>
<li>字體</li>
<li>視頻</li>
</ol>
<h3 id="6-1-圖片"><a href="#6-1-圖片" class="headerlink" title="6.1. 圖片"></a>6.1. 圖片</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">game.<span class="property">load</span>.<span class="title function_">image</span>(<span class="string">&#x27;logo&#x27;</span>,<span class="string">&#x27;logo.png&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="http://i.imgur.com/FgfF8SD.png"></p>
<h3 id="6-2-圖片集"><a href="#6-2-圖片集" class="headerlink" title="6.2. 圖片集"></a>6.2. 圖片集</h3><p>1維</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">game.<span class="property">load</span>.<span class="title function_">spritesheet</span>(<span class="string">&#x27;sheetImg&#x27;</span>,<span class="string">&#x27;s37x45.png&#x27;</span>,<span class="number">37</span>,<span class="number">45</span>,<span class="number">18</span>)</span><br></pre></td></tr></table></figure>

<p>變數名,路徑,寬,高,圖片數量</p>
<p>2維</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">game.<span class="property">load</span>.<span class="title function_">atlasXML</span>(<span class="string">&#x27;xmlimg&#x27;</span>,<span class="string">&#x27;/xml.png&#x27;</span>,<span class="string">&#x27;/data.xml&#x27;</span>)</span><br><span class="line">game.<span class="property">load</span>.<span class="title function_">atlasXML</span>(<span class="string">&#x27;jsonimg&#x27;</span>,<span class="string">&#x27;/json.png&#x27;</span>,<span class="string">&#x27;/data.json&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/VI8GfBn.png" alt="image-20210618132120289"></p>
<h3 id="6-3-字體"><a href="#6-3-字體" class="headerlink" title="6.3. 字體"></a>6.3. 字體</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">game.<span class="property">load</span>.<span class="title function_">bitmapFont</span>(<span class="string">&#x27;cedFont&#x27;</span>,<span class="string">&#x27;/cedFont.png&#x27;</span>,<span class="string">&#x27;/cedFont.xml&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="6-4-聲音"><a href="#6-4-聲音" class="headerlink" title="6.4. 聲音"></a>6.4. 聲音</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">game.<span class="property">load</span>.<span class="title function_">audio</span>(<span class="string">&#x27;cedmusic&#x27;</span>,<span class="string">&#x27;/music.mp3&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="6-5-視頻"><a href="#6-5-視頻" class="headerlink" title="6.5. 視頻"></a>6.5. 視頻</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">game.<span class="property">load</span>.<span class="title function_">video</span>(<span class="string">&#x27;cedvideo&#x27;</span>,<span class="string">&#x27;/video.mp4&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h2 id="7-遊戲資源加載原理"><a href="#7-遊戲資源加載原理" class="headerlink" title="7. 遊戲資源加載原理"></a>7. 遊戲資源加載原理</h2><p><img src="https://i.imgur.com/7ygJbj4.png" alt="image-20210618133243059"></p>
<h3 id="7-1-遊戲中資源加載回調事件"><a href="#7-1-遊戲中資源加載回調事件" class="headerlink" title="7.1. 遊戲中資源加載回調事件"></a>7.1. 遊戲中資源加載回調事件</h3><table>
<thead>
<tr>
<th>事件名稱</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td>onFileStart</td>
<td></td>
</tr>
<tr>
<td>onFileError</td>
<td></td>
</tr>
<tr>
<td>onFileComplete</td>
<td></td>
</tr>
<tr>
<td>onLoadStart</td>
<td></td>
</tr>
<tr>
<td>onBeforeLoadComplete</td>
<td>只會執行一次</td>
</tr>
<tr>
<td>onLoadComplete</td>
<td>只會執行一次</td>
</tr>
</tbody></table>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">preload</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//加载资源</span></span><br><span class="line">    game.<span class="property">load</span>.<span class="title function_">image</span>(<span class="string">&quot;logo&quot;</span>, <span class="string">&quot;/assets/images/logo.png&quot;</span>);</span><br><span class="line">    game.<span class="property">load</span>.<span class="title function_">image</span>(<span class="string">&quot;bgload&quot;</span>, <span class="string">&quot;/assets/images/bgload.jpg&quot;</span>);</span><br><span class="line">    game.<span class="property">load</span>.<span class="title function_">spritesheet</span>(<span class="string">&quot;s37x45&quot;</span>, <span class="string">&quot;/assets/learn/s37x45.png&quot;</span>, <span class="number">37</span>, <span class="number">45</span>, <span class="number">18</span>);</span><br><span class="line">    game.<span class="property">load</span>.<span class="title function_">atlasXML</span>(<span class="string">&#x27;xmlImg&#x27;</span>, <span class="string">&#x27;/assets/learn/xml.png&#x27;</span>, <span class="string">&#x27;/assets/learn/data.xml&#x27;</span>);</span><br><span class="line">    game.<span class="property">load</span>.<span class="title function_">atlas</span>(<span class="string">&#x27;jsonImg&#x27;</span>, <span class="string">&#x27;/assets/learn/json.png&#x27;</span>, <span class="string">&#x27;/assets/learn/data.json&#x27;</span>);</span><br><span class="line">    game.<span class="property">load</span>.<span class="title function_">audio</span>(<span class="string">&#x27;cedAudio&#x27;</span>, <span class="string">&#x27;/assets/learn/cedAudio.mp3&#x27;</span>);</span><br><span class="line">    game.<span class="property">load</span>.<span class="title function_">bitmapFont</span>(<span class="string">&#x27;cedFont&#x27;</span>, <span class="string">&#x27;/assets/learn/cedFont.png&#x27;</span>, <span class="string">&#x27;/assets/learn/cedFont.xml&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置并行下载个数</span></span><br><span class="line">    game.<span class="property">load</span>.<span class="property">maxParallelDownloads</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    game.<span class="property">load</span>.<span class="property">onFileStart</span>.<span class="title function_">add</span>(<span class="function">(<span class="params">progress, key, url</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ced--onFileStart--&quot;</span> + progress + <span class="string">&quot;--&quot;</span> + key + <span class="string">&quot;--&quot;</span> + url)</span><br><span class="line">    &#125;, <span class="variable language_">this</span>);</span><br><span class="line">    game.<span class="property">load</span>.<span class="property">onFileError</span>.<span class="title function_">add</span>(<span class="function">(<span class="params">key, file</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ced--onFileError--&quot;</span> + key + <span class="string">&quot;--&quot;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(file))</span><br><span class="line">    &#125;, <span class="variable language_">this</span>);</span><br><span class="line">    game.<span class="property">load</span>.<span class="property">onFileComplete</span>.<span class="title function_">add</span>(<span class="function">(<span class="params">progress, key, success, totalLoad, total</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ced--onFileComplete--&quot;</span> + progress + <span class="string">&quot;--&quot;</span> + key + <span class="string">&quot;--&quot;</span> + success + <span class="string">&quot;--&quot;</span> + total)</span><br><span class="line">    &#125;, <span class="variable language_">this</span>);</span><br><span class="line"></span><br><span class="line">    game.<span class="property">load</span>.<span class="property">onLoadStart</span>.<span class="title function_">add</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ced--onLoadStart--&quot;</span>)</span><br><span class="line">    &#125;, <span class="variable language_">this</span>);</span><br><span class="line">    game.<span class="property">load</span>.<span class="property">onBeforeLoadComplete</span>.<span class="title function_">add</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ced--onBeforeLoadComplete--&quot;</span>)</span><br><span class="line">    &#125;, <span class="variable language_">this</span>);</span><br><span class="line">    game.<span class="property">load</span>.<span class="property">onLoadComplete</span>.<span class="title function_">add</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ced--onLoadComplete--&quot;</span>)</span><br><span class="line">    &#125;, <span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="8-顯示對象"><a href="#8-顯示對象" class="headerlink" title="8. 顯示對象"></a>8. 顯示對象</h2><table>
<thead>
<tr>
<th align="left">類型</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td align="left">圖片</td>
<td>Image</td>
</tr>
<tr>
<td align="left">精靈</td>
<td>Sprite</td>
</tr>
<tr>
<td align="left">文本</td>
<td>Text</td>
</tr>
<tr>
<td align="left">圖形</td>
<td>Graphics</td>
</tr>
</tbody></table>
<h3 id="8-1-image"><a href="#8-1-image" class="headerlink" title="8.1. image"></a>8.1. image</h3><p><img src="https://i.imgur.com/WpD4B5f.png" alt="image-20210618134347670"></p>
<h4 id="8-1-1-坐標"><a href="#8-1-1-坐標" class="headerlink" title="8.1.1. 坐標"></a>8.1.1. 坐標</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cedImage = game.<span class="property">add</span>.<span class="title function_">image</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="string">&quot;s37x45&quot;</span>,<span class="number">1</span>);</span><br><span class="line">cedImage.<span class="property">position</span>.<span class="title function_">set</span>(game.<span class="property">world</span>.<span class="property">centerX</span>,<span class="number">30</span>);</span><br></pre></td></tr></table></figure>



<h4 id="8-1-2-大小"><a href="#8-1-2-大小" class="headerlink" title="8.1.2. 大小"></a>8.1.2. 大小</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cedImage.<span class="property">width</span> = <span class="number">200</span>;</span><br><span class="line">cedImage.<span class="property">height</span> = <span class="number">200</span>;</span><br></pre></td></tr></table></figure>



<h4 id="8-1-3-縮放"><a href="#8-1-3-縮放" class="headerlink" title="8.1.3. 縮放"></a>8.1.3. 縮放</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cedImage.<span class="property">scale</span>.<span class="title function_">set</span>(<span class="number">2</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure>



<h4 id="8-1-4-錨點"><a href="#8-1-4-錨點" class="headerlink" title="8.1.4. 錨點"></a>8.1.4. 錨點</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cedImage.<span class="property">anchor</span>.<span class="title function_">set</span>(<span class="number">0.3</span>,<span class="number">0.3</span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/G5nt7XB.png" alt="img"></p>
<p>0,0 </p>
<p>圖片的左上角</p>
<p>1,1</p>
<p>圖片的右下角</p>
<p>0.5,0.5</p>
<p>圖片的中心，也是比較常見的設法</p>
<h4 id="8-1-5-旋轉"><a href="#8-1-5-旋轉" class="headerlink" title="8.1.5. 旋轉"></a>8.1.5. 旋轉</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cedImage.<span class="property">rotation</span>  = <span class="number">200</span></span><br></pre></td></tr></table></figure>



<h4 id="8-1-6-透明度"><a href="#8-1-6-透明度" class="headerlink" title="8.1.6. 透明度"></a>8.1.6. 透明度</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cedImage.<span class="property">alpha</span> = <span class="number">0.5</span></span><br></pre></td></tr></table></figure>



<h4 id="8-1-7-遮照"><a href="#8-1-7-遮照" class="headerlink" title="8.1.7. 遮照"></a>8.1.7. 遮照</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gmask = game.<span class="property">add</span>.<span class="title function_">graphics</span>(<span class="number">130</span>,<span class="number">130</span>);</span><br><span class="line">gmask.<span class="title function_">beginFill</span>(<span class="number">0xffffff</span>,<span class="number">1</span>);</span><br><span class="line">gmask.<span class="title function_">drawRect</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">50</span>,<span class="number">50</span>);</span><br><span class="line">gmask.<span class="title function_">endFill</span>();</span><br><span class="line">cedImage.<span class="property">mask</span>=gmask;</span><br></pre></td></tr></table></figure>



<h4 id="8-1-8-事件"><a href="#8-1-8-事件" class="headerlink" title="8.1.8. 事件"></a>8.1.8. 事件</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cedImage.<span class="property">inputEnabled</span> = <span class="literal">true</span>;</span><br><span class="line">cedImage.<span class="property">events</span>.<span class="property">onInputDown</span>.<span class="title function_">add</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;in down&quot;</span>)</span><br><span class="line">&#125;,<span class="variable language_">this</span>);</span><br><span class="line"></span><br><span class="line">cedImage.<span class="property">events</span>.<span class="property">onInputUp</span>.<span class="title function_">add</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;in up&quot;</span>)</span><br><span class="line">&#125;,<span class="variable language_">this</span>);</span><br></pre></td></tr></table></figure>



<h3 id="8-2-Sprite"><a href="#8-2-Sprite" class="headerlink" title="8.2. Sprite"></a>8.2. Sprite</h3><p>image 的功能在sprite 都有，差在多了2個功能<code>動畫</code> <code>物理引擎</code></p>
<h4 id="8-2-1-何時該使用sprite-image"><a href="#8-2-1-何時該使用sprite-image" class="headerlink" title="8.2.1. 何時該使用sprite ? image?"></a>8.2.1. 何時該使用sprite ? image?</h4><p>不需要動畫的時候還是用image，在效能上使用資源較少</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cedImage = game.<span class="property">add</span>.<span class="title function_">sprite</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="string">&quot;s37x45&quot;</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<h3 id="8-3-Text"><a href="#8-3-Text" class="headerlink" title="8.3. Text"></a>8.3. Text</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> text = game.<span class="property">add</span>.<span class="title function_">text</span>(<span class="number">30</span>, <span class="number">125</span>, <span class="string">&quot;hello world webpack&quot;</span>,</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">fill</span>: <span class="string">&#x27;#fff&#x27;</span>,</span><br><span class="line">    <span class="attr">fontWeight</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="attr">fontSize</span>: <span class="string">&#x27;20px&#x27;</span>,</span><br><span class="line">    <span class="attr">backgroundColor</span>: <span class="string">&quot;red&quot;</span>,</span><br><span class="line">    <span class="attr">wordWrap</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">wordWrapWidth</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="attr">align</span>: <span class="string">&#x27;right&#x27;</span>,</span><br><span class="line">    <span class="attr">stroke</span>: <span class="string">&#x27;#00000&#x27;</span>,</span><br><span class="line">    <span class="attr">strokeThickness</span>: <span class="number">3</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h3 id="8-4-Graphics"><a href="#8-4-Graphics" class="headerlink" title="8.4. Graphics"></a>8.4. Graphics</h3><p><img src="https://i.imgur.com/zCdLgvY.png" alt="image-20210618141053352"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> graphics = game.<span class="property">add</span>.<span class="title function_">graphics</span>(<span class="number">150</span>, <span class="number">200</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**常用api</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * lineStyle(width, color, alpha);描边样式</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * beginFill(color, alpha);填充样式</span></span><br><span class="line"><span class="comment"> * endFill();</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * moveTo(x, y) 移动画笔到</span></span><br><span class="line"><span class="comment"> * lineTo(x, y) 直线</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * drawCircle(x, y, diameter);圆形</span></span><br><span class="line"><span class="comment"> * drawEllipse(x, x, halfWidth, halfHeight)椭圆</span></span><br><span class="line"><span class="comment"> * arc(x, y, radius) 弧形</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * drawRect(x, y, width, height)矩形</span></span><br><span class="line"><span class="comment"> * drawPolygon(path)多边形，参数是多边形顶点的数组</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line">graphics.<span class="title function_">moveTo</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">graphics.<span class="title function_">lineStyle</span>(<span class="number">2</span>, <span class="number">0xffffff</span>, <span class="number">1</span>);</span><br><span class="line">graphics.<span class="title function_">lineTo</span>(<span class="number">200</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//描边样式</span></span><br><span class="line">graphics.<span class="title function_">lineStyle</span>(<span class="number">2</span>, <span class="number">0x000000</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment">//填充样式</span></span><br><span class="line">graphics.<span class="title function_">beginFill</span>(<span class="number">0xffffff</span>, <span class="number">1</span>);</span><br><span class="line">graphics.<span class="title function_">drawCircle</span>(<span class="number">0</span>, <span class="number">30</span>, <span class="number">60</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//描边样式</span></span><br><span class="line">graphics.<span class="title function_">lineStyle</span>(<span class="number">2</span>, <span class="number">0xffffff</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment">//填充样式</span></span><br><span class="line">graphics.<span class="title function_">endFill</span>();</span><br><span class="line">graphics.<span class="title function_">beginFill</span>(<span class="number">0x000000</span>, <span class="number">1</span>);</span><br><span class="line">graphics.<span class="title function_">drawRect</span>(<span class="number">0</span>, <span class="number">60</span>, <span class="number">100</span>, <span class="number">80</span>)</span><br><span class="line">graphics.<span class="title function_">endFill</span>();</span><br></pre></td></tr></table></figure>



<h3 id="8-5-顯示對象容器"><a href="#8-5-顯示對象容器" class="headerlink" title="8.5. 顯示對象容器"></a>8.5. 顯示對象容器</h3><p><img src="https://i.imgur.com/8W7ZNnZ.png" alt="image-20210618141147334"></p>
<p>容器的好處，分組修改對象</p>
<h4 id="8-5-1-相關操作"><a href="#8-5-1-相關操作" class="headerlink" title="8.5.1. 相關操作"></a>8.5.1. 相關操作</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//组</span></span><br><span class="line"><span class="keyword">var</span> group = game.<span class="property">add</span>.<span class="title function_">group</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//组中添加元素</span></span><br><span class="line"><span class="keyword">var</span> gi1= game.<span class="property">add</span>.<span class="title function_">image</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="string">&quot;jsonImg&quot;</span>,<span class="number">21</span>,group)</span><br><span class="line"><span class="keyword">var</span> gi2= game.<span class="property">make</span>.<span class="title function_">image</span>(<span class="number">100</span>,<span class="number">0</span>,<span class="string">&quot;jsonImg&quot;</span>,<span class="number">2</span>);</span><br><span class="line">group.<span class="title function_">add</span>(gi2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> gs1 = group.<span class="title function_">create</span>(<span class="number">0</span>, <span class="number">300</span>, <span class="string">&quot;jsonImg&quot;</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">var</span> gs2 = group.<span class="title function_">create</span>(<span class="number">100</span>, <span class="number">300</span>, <span class="string">&quot;jsonImg&quot;</span>, <span class="number">22</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//调节顺序</span></span><br><span class="line">group.<span class="title function_">bringToTop</span>(gs1);</span><br><span class="line">group.<span class="title function_">swap</span>(gs1, gs2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除存在的对象</span></span><br><span class="line">group.<span class="title function_">remove</span>(gs1, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//整體調整 透明</span></span><br><span class="line">group.<span class="property">alpha</span> = <span class="number">0.5</span>;</span><br><span class="line"><span class="comment">//整體調整 坐標</span></span><br><span class="line">group.<span class="property">y</span> = <span class="number">100</span>;</span><br><span class="line"><span class="comment">//添加子组</span></span><br><span class="line"><span class="keyword">var</span> groupChild = game.<span class="property">add</span>.<span class="title function_">group</span>(group);</span><br><span class="line">groupChild.<span class="property">x</span> = <span class="number">100</span>;</span><br><span class="line">groupChild.<span class="property">y</span> = <span class="number">400</span>;</span><br><span class="line"><span class="keyword">var</span> gc2 = groupChild.<span class="title function_">create</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="string">&quot;jsonImg&quot;</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<h4 id="8-5-2-常用顯示對象容器"><a href="#8-5-2-常用顯示對象容器" class="headerlink" title="8.5.2. 常用顯示對象容器"></a>8.5.2. 常用顯示對象容器</h4><ul>
<li>Text</li>
<li>Image</li>
<li>Sprite</li>
<li>Group</li>
</ul>
<h4 id="8-5-3-世界坐標、組坐標"><a href="#8-5-3-世界坐標、組坐標" class="headerlink" title="8.5.3. 世界坐標、組坐標"></a>8.5.3. 世界坐標、組坐標</h4><p>當group 被加到world底下，那它的坐標自然就是世界坐標</p>
<p>group1下加了一個group2，那group2的坐標就是對應於group1底下的組坐標。而這個group2的世界坐標相當於group1世界坐標加上group2組坐標</p>
<h2 id="9-渲染對象列表"><a href="#9-渲染對象列表" class="headerlink" title="9. 渲染對象列表"></a>9. 渲染對象列表</h2><p><img src="https://i.imgur.com/HWzmTLP.png" alt="image-20210618164310716"></p>
<p>根容器 Stage</p>
<p>Game 遍歷所有元素</p>
<p>先渲染的就在圖層的最下面，後渲染的就會覆蓋在上一層</p>
<h4 id="9-0-1-stage是什麼"><a href="#9-0-1-stage是什麼" class="headerlink" title="9.0.1. stage是什麼"></a>9.0.1. stage是什麼</h4><ul>
<li>顯示對象容器</li>
<li>是有大小和顯示效果的</li>
</ul>
<h4 id="9-0-2-world是什麼"><a href="#9-0-2-world是什麼" class="headerlink" title="9.0.2. world是什麼"></a>9.0.2. world是什麼</h4><ul>
<li>顯示對象容器</li>
<li>是有大小，而且任意大小</li>
</ul>
<h4 id="9-0-3-圖解渲染"><a href="#9-0-3-圖解渲染" class="headerlink" title="9.0.3. 圖解渲染"></a>9.0.3. 圖解渲染</h4><p><img src="https://i.imgur.com/UWeLdnZ.png" alt="image-20210618164432662"></p>
<p><img src="https://i.imgur.com/2R7Y8a4.png" alt="image-20210618164441634"></p>
<p><img src="https://i.imgur.com/QecFqZ7.png" alt="image-20210618164450650"></p>
<p><img src="https://i.imgur.com/N4omwoN.png" alt="image-20210618164458787"></p>
<h4 id="9-0-4-世界很大，移動畫布問題"><a href="#9-0-4-世界很大，移動畫布問題" class="headerlink" title="9.0.4. 世界很大，移動畫布問題"></a>9.0.4. 世界很大，移動畫布問題</h4><p>如果每一次都要移動world 去到stage、canvas，那計算坐標肯定會瘋掉</p>
<p><img src="https://i.imgur.com/Et3Id9K.png" alt="image-20210618164515547"></p>
<p><img src="https://i.imgur.com/lAXlVZc.png" alt="image-20210618164537230"></p>
<h4 id="9-0-5-使用camera"><a href="#9-0-5-使用camera" class="headerlink" title="9.0.5. 使用camera"></a>9.0.5. 使用camera</h4><p>使用camera的概念去移動攝影機</p>
<p><img src="https://i.imgur.com/NOS3aNV.png" alt="image-20210618164556971"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置背景颜色</span></span><br><span class="line">game.<span class="property">stage</span>.<span class="property">backgroundColor</span> = <span class="string">&quot;#a8d4bf&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置世界的大小</span></span><br><span class="line">game.<span class="property">world</span>.<span class="title function_">setBounds</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1500</span>, <span class="number">667</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建两个图片</span></span><br><span class="line"><span class="keyword">var</span> gi1 = game.<span class="property">add</span>.<span class="title function_">image</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="string">&quot;jsonImg&quot;</span>, <span class="number">21</span>)</span><br><span class="line"><span class="keyword">var</span> gi2 = game.<span class="property">add</span>.<span class="title function_">image</span>(<span class="number">380</span>, <span class="number">0</span>, <span class="string">&quot;jsonImg&quot;</span>, <span class="number">21</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//移动摄像机</span></span><br><span class="line">game.<span class="property">camera</span>.<span class="property">x</span> = <span class="number">50</span>;</span><br></pre></td></tr></table></figure>



<h2 id="10-State"><a href="#10-State" class="headerlink" title="10. State"></a>10. State</h2><h3 id="10-1-state創建方式"><a href="#10-1-state創建方式" class="headerlink" title="10.1. state創建方式"></a>10.1. state創建方式</h3><p>共3種寫法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> state1=&#123;</span><br><span class="line">	<span class="attr">preload</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;,</span><br><span class="line">	<span class="attr">create</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;,</span><br><span class="line">	<span class="attr">update</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;,</span><br><span class="line">	<span class="attr">render</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;,    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> state2= <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="title function_">preload</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="title function_">create</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="title function_">update</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="title function_">render</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">state3 <span class="keyword">class</span> <span class="title class_">extends</span> <span class="title class_">Phaser</span>.<span class="property">State</span>&#123;</span><br><span class="line">	<span class="title function_">preload</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">	<span class="title function_">create</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">	<span class="title function_">update</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">	<span class="title function_">render</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="10-2-state使用方式"><a href="#10-2-state使用方式" class="headerlink" title="10.2. state使用方式"></a>10.2. state使用方式</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加state</span></span><br><span class="line">game.<span class="property">state</span>.<span class="title function_">add</span>(<span class="string">&quot;state1&quot;</span>,state1)</span><br><span class="line"></span><br><span class="line"><span class="comment">//啟動</span></span><br><span class="line"><span class="comment">//start(key,clearWorld,clearCache,param)</span></span><br><span class="line"><span class="comment">/* 參數說明</span></span><br><span class="line"><span class="comment">clearWorld default true</span></span><br><span class="line"><span class="comment">clearcache default false</span></span><br><span class="line"><span class="comment">param 傳遞參數給另一個state</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">game.<span class="property">state</span>.<span class="title function_">start</span>(<span class="string">&quot;state1&quot;</span>)</span><br></pre></td></tr></table></figure>





<h3 id="10-3-state使用與原理"><a href="#10-3-state使用與原理" class="headerlink" title="10.3. state使用與原理"></a>10.3. state使用與原理</h3><p>phaser 只有一個world</p>
<p>一個遊戲會有很多頁面，可以使用state來達成多頁面功能，</p>
<p>在unity 來說，就是多Scenes</p>
<p>將state 加入到state 管理器中</p>
<h3 id="10-4-state參數傳遞"><a href="#10-4-state參數傳遞" class="headerlink" title="10.4. state參數傳遞"></a>10.4. state參數傳遞</h3><p><code>BootState.js</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">create</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> text = game.<span class="property">add</span>.<span class="title function_">text</span>(game.<span class="property">world</span>.<span class="property">centerX</span>,<span class="number">25</span>,<span class="string">&quot;open preload&quot;</span>,&#123;<span class="attr">fill</span>:<span class="string">&#x27;#fff&#x27;</span>&#125;);</span><br><span class="line">    text.<span class="property">anchor</span>.<span class="title function_">set</span>(<span class="number">0.5</span>);</span><br><span class="line">    text.<span class="property">inputEnabled</span> = <span class="literal">true</span>;</span><br><span class="line">    text.<span class="property">events</span>.<span class="property">onInputDown</span>.<span class="title function_">add</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;onInputDown&quot;</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span>.<span class="title function_">start</span>(<span class="string">&quot;PreLoadState&quot;</span>,<span class="literal">true</span>,<span class="literal">false</span>,<span class="string">&quot;boot_test&quot;</span>);</span><br><span class="line">    &#125;,<span class="variable language_">this</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><code>PreLoadState.js</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">init</span>(<span class="params">p</span>)&#123;        </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;init p:&quot;</span>,p);    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="10-5-state生命週期與工作原理"><a href="#10-5-state生命週期與工作原理" class="headerlink" title="10.5. state生命週期與工作原理"></a>10.5. state生命週期與工作原理</h3><p>子系統的update會調用state的update</p>
<p>shutdown 是state 的生命週期的最後一個，通常來destory物件，比方說destory 監視器物件</p>
<p><img src="https://i.imgur.com/TgTqpLp.png" alt="image-20210618171944146"></p>
<h2 id="11-動畫"><a href="#11-動畫" class="headerlink" title="11. 動畫"></a>11. 動畫</h2><p>動畫分類</p>
<p>補間動畫</p>
<p>幀動畫</p>
<h3 id="11-1-補間動畫"><a href="#11-1-補間動畫" class="headerlink" title="11.1. 補間動畫"></a>11.1. 補間動畫</h3><ul>
<li><p>創建方式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> tween = game.<span class="property">add</span>.<span class="title function_">tween</span>(displayObject)</span><br><span class="line">tween.<span class="title function_">to</span>(properties,duration,ease,autoStart,delay,repeat,yoyo)</span><br><span class="line">tween.<span class="title function_">from</span>(properties,duration,ease,autoStart,delay,repeat,yoyo)</span><br></pre></td></tr></table></figure>

<p>在屬性的部分也可以多設定縮放、透明度等等功能</p>
<p> 動畫也有事件的類型</p>
<p><code>tween.onStart</code></p>
<p><code>tween.onLoop</code></p>
<p><code>tween.onComplete</code></p>
</li>
<li><p>代碼示例</p>
<p>  <code>preload</code></p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">preload () &#123;</span><br><span class="line">  game.<span class="property">load</span>.<span class="title function_">atlas</span>(<span class="string">&#x27;jsonImg&#x27;</span>, <span class="string">&#x27;/assets/images/json.png&#x27;</span>, <span class="string">&#x27;/assets/images/data.json&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  <code>create()</code></p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">create</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 補間動畫</span></span><br><span class="line">    <span class="comment">// tween.to(properties,duration,ease,autoStart,delay,repeat,yoyo)</span></span><br><span class="line">    <span class="comment">// tween.from(properties,duration,ease,autoStart,delay,repeat,yoyo)</span></span><br><span class="line">    <span class="comment">// var img = game.add.image(100, 100, &#x27;jsonImg&#x27;, 21)    </span></span><br><span class="line">    <span class="comment">// var tween = game.add.tween(img)</span></span><br><span class="line"></span><br><span class="line">    tween.<span class="property">onStart</span>.<span class="title function_">add</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;tween onStart&#x27;</span>)</span><br><span class="line">    &#125;, <span class="variable language_">this</span>)</span><br><span class="line">    tween.<span class="property">onLoop</span>.<span class="title function_">add</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;tween onLoop&#x27;</span>)</span><br><span class="line">    &#125;, <span class="variable language_">this</span>)</span><br><span class="line"></span><br><span class="line">    tween.<span class="property">onComplete</span>.<span class="title function_">add</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;oAnim onComplete&#x27;</span>)</span><br><span class="line">    &#125;, <span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="11-2-幀動畫"><a href="#11-2-幀動畫" class="headerlink" title="11.2. 幀動畫"></a>11.2. 幀動畫</h3><p>只有sprite 類型才能有幀動畫</p>
<ul>
<li><p>創建方式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = game.<span class="property">add</span>.<span class="title function_">sprite</span>(x,y,<span class="string">&quot;圖片集&quot;</span>)</span><br><span class="line">s.<span class="property">anamitions</span>.<span class="title function_">add</span>(name,[,frames],[,frameRate],[,loop],[,userNumericIndex])</span><br><span class="line">s.<span class="property">anamitions</span>.<span class="title function_">play</span>(<span class="string">&quot;name&quot;</span>,[,frameRate],[,loop])</span><br><span class="line">s.<span class="property">anamitions</span>.<span class="title function_">stop</span>(<span class="string">&quot;name&quot;</span>)</span><br></pre></td></tr></table></figure>


</li>
<li><p>代碼示例</p>
<p><code>preload()</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">preload () &#123;</span><br><span class="line">	game.<span class="property">load</span>.<span class="title function_">atlasXML</span>(<span class="string">&#x27;octopus&#x27;</span>, <span class="string">&#x27;/assets/images/octopus.png&#x27;</span>, <span class="string">&#x27;/assets/images/octopus.xml&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>create()</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> create () &#123;</span><br><span class="line"><span class="comment">// 幀動畫</span></span><br><span class="line">   <span class="keyword">var</span> octopus = game.<span class="property">add</span>.<span class="title function_">sprite</span>(<span class="number">100</span>, <span class="number">200</span>, <span class="string">&#x27;octopus&#x27;</span>)</span><br><span class="line">   <span class="keyword">var</span> oAnim = octopus.<span class="property">animations</span>.<span class="title function_">add</span>(<span class="string">&#x27;swim&#x27;</span>, <span class="literal">null</span>, <span class="number">60</span>, <span class="literal">false</span>)</span><br><span class="line">  </span><br><span class="line">   oAnim.<span class="property">onStart</span>.<span class="title function_">add</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;oAnim onStart&#x27;</span>)</span><br><span class="line">   &#125;, <span class="variable language_">this</span>)</span><br><span class="line">   oAnim.<span class="property">onLoop</span>.<span class="title function_">add</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;oAnim onLoop&#x27;</span>)</span><br><span class="line">   &#125;, <span class="variable language_">this</span>)</span><br><span class="line">  </span><br><span class="line">   oAnim.<span class="property">onComplete</span>.<span class="title function_">add</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;oAnim onComplete&#x27;</span>)</span><br><span class="line">   &#125;, <span class="variable language_">this</span>)</span><br><span class="line">  </span><br><span class="line">   octopus.<span class="property">animations</span>.<span class="title function_">play</span>(<span class="string">&#x27;swim&#x27;</span>, <span class="number">30</span>, <span class="literal">true</span>)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Phaser</category>
      </categories>
      <tags>
        <tag>Phaser</tag>
      </tags>
  </entry>
  <entry>
    <title>7zip 常用指令</title>
    <url>/2021/08/13/2021-08-13%207zip%20%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<h3 id="0-1-排除特定類型的檔案不要進壓縮檔"><a href="#0-1-排除特定類型的檔案不要進壓縮檔" class="headerlink" title="0.1. 排除特定類型的檔案不要進壓縮檔"></a>0.1. 排除特定類型的檔案不要進壓縮檔</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">7z a dir1.zip &quot;dir1\&quot; &quot;-xr!*.pdb&quot; &quot;-xr!web.config&quot;</span><br></pre></td></tr></table></figure>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">7z a &quot;dir1.zip&quot; &quot;dir1\&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">7z a &quot;dir1.zip&quot; &quot;dir1\dir2\*&quot;</span><br></pre></td></tr></table></figure>

<h3 id="0-2-指定壓縮檔案類型"><a href="#0-2-指定壓縮檔案類型" class="headerlink" title="0.2. 指定壓縮檔案類型"></a>0.2. 指定壓縮檔案類型</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">7z a &quot;dir1.zip&quot; &quot;dir1\&quot; -r &quot;dir1\*.aspx&quot;</span><br></pre></td></tr></table></figure>

<h3 id="0-3-指定多個壓縮檔案類型"><a href="#0-3-指定多個壓縮檔案類型" class="headerlink" title="0.3. 指定多個壓縮檔案類型"></a>0.3. 指定多個壓縮檔案類型</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">7z a &quot;dir1.zip&quot; &quot;dir1\&quot; -r &quot;dir1\*.aspx&quot; &quot;dir1\*.dll&quot;</span><br></pre></td></tr></table></figure>

<h3 id="0-4-加入密碼"><a href="#0-4-加入密碼" class="headerlink" title="0.4. 加入密碼"></a>0.4. 加入密碼</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">7z a &quot;dir1.zip&quot; &quot;dir1/&quot; -p&quot;1q2w3e4r&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">7z a &quot;dir1.7z&quot; &quot;dir1/&quot; -p&quot;1q2w3e4r&quot;  -mhe</span><br></pre></td></tr></table></figure>
<blockquote>
<p>檔名一起加密，必須輸入完密碼後，才能看到裡面檔案名稱</p>
</blockquote>
<h2 id="1-unzip"><a href="#1-unzip" class="headerlink" title="1. unzip"></a>1. unzip</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">7z x &quot;dir1.zip&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">7z x &quot;dir1.zip&quot; -o&quot;dir1&quot;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>此寫法可解決路徑有空白的問題</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">7z x &quot;dir1.zip&quot; -o&quot;C:\Program Files\&quot;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：在 -o 與 Path 中間不能有任何空白字元！</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">7z e &quot;dir1.zip&quot; -o&quot;dir1&quot; -r &quot;*.js&quot;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>解壓縮指定類型檔案</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">7z e &quot;dir1.zip&quot; -o&quot;dir1&quot; -r &quot;*.dll&quot; -y</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果不想提示直接覆蓋，可以加上 -y 參數</p>
</blockquote>
<h2 id="2-其它"><a href="#2-其它" class="headerlink" title="2. 其它"></a>2. 其它</h2><h3 id="2-1-列出所有檔案清單"><a href="#2-1-列出所有檔案清單" class="headerlink" title="2.1. 列出所有檔案清單"></a>2.1. 列出所有檔案清單</h3><p>我們在自動化的過程中可能會需要先知道壓縮檔中有什麼檔案，此時可以利用 7z 的 l (List) 命令達成這個目的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">7z l &quot;dir1.zip&quot;</span><br></pre></td></tr></table></figure>

<h2 id="3-參考連結"><a href="#3-參考連結" class="headerlink" title="3. 參考連結"></a>3. 參考連結</h2><p><a href="https://blog.miniasp.com/post/2021/07/07/Useful-7-Zip-7z-CLI-Command-Options?fbclid=IwAR0AF7VqcBB55W2P4jUy-X5rmciWIVIY9mWPa6XsM6FiJwAUvQDZ9uQ8UZ8">分享幾個常用的 7-Zip 壓縮與解壓縮命令</a></p>
]]></content>
      <categories>
        <category>7zip</category>
      </categories>
      <tags>
        <tag>7zip</tag>
      </tags>
  </entry>
  <entry>
    <title>Phaser 使用技巧整理</title>
    <url>/2021/08/13/2021-08-13%20Phaser%20%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<p>專案 載浮載沉</p>
<p>版本 phaser3.55.2.js</p>
<span id="more"></span>


<h2 id="1-資源"><a href="#1-資源" class="headerlink" title="1. 資源"></a>1. 資源</h2><p><a href="https://labs.phaser.io/index.html">phaser3官網 example</a></p>
<h2 id="2-閱讀"><a href="#2-閱讀" class="headerlink" title="2. 閱讀"></a>2. 閱讀</h2><p><a href="https://steemit.com/utopian-io/@onepice/move-objects-according-to-the-mouse-position-with-phaser-3">Move Objects According To The Mouse Position With Phaser 3</a></p>
<p><a href="https://www.codeandweb.com/texturepacker/tutorials/how-to-create-sprite-sheets-for-phaser3">how-to-create-sprite-sheets-for-phaser3</a></p>
<p><a href="https://ithelp.ithome.com.tw/users/20111617/ironman/1794">Phaser 幫我撐個 30 天</a></p>
<h2 id="3-圖層順序"><a href="#3-圖層順序" class="headerlink" title="3. 圖層順序"></a>3. 圖層順序</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">obj.<span class="title function_">setDepth</span>(<span class="number">2</span>);</span><br></pre></td></tr></table></figure>



<h2 id="4-圖片縮放"><a href="#4-圖片縮放" class="headerlink" title="4. 圖片縮放"></a>4. 圖片縮放</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">obj.<span class="title function_">setScale</span>(<span class="number">.2</span>,<span class="number">.2</span>)</span><br></pre></td></tr></table></figure>



<h2 id="5-設定container-包物件"><a href="#5-設定container-包物件" class="headerlink" title="5. 設定container 包物件"></a>5. 設定container 包物件</h2><p><img src="https://i.imgur.com/7UGOlow.png" alt="image-20210813124658109"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">preload</span> ()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">load</span>.<span class="title function_">image</span>(<span class="string">&#x27;buttonBG&#x27;</span>, <span class="string">&#x27;assets/sprites/button-bg.png&#x27;</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">load</span>.<span class="title function_">image</span>(<span class="string">&#x27;buttonText&#x27;</span>, <span class="string">&#x27;assets/sprites/button-text.png&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">create</span> ()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> bg = <span class="variable language_">this</span>.<span class="property">add</span>.<span class="title function_">image</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;buttonBG&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> text = <span class="variable language_">this</span>.<span class="property">add</span>.<span class="title function_">image</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;buttonText&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> container = <span class="variable language_">this</span>.<span class="property">add</span>.<span class="title function_">container</span>(<span class="number">400</span>, <span class="number">300</span>, [ bg, text ]);</span><br><span class="line"></span><br><span class="line">    container.<span class="title function_">setSize</span>(bg.<span class="property">width</span>, bg.<span class="property">height</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://labs.phaser.io/edit.html?src=src/game%20objects/container/draggable%20container.js">reference</a></p>
<h2 id="6-設定sprite切換"><a href="#6-設定sprite切換" class="headerlink" title="6. 設定sprite切換"></a>6. 設定sprite切換</h2><p><img src="https://i.imgur.com/c2ehBab.png" alt="img"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">preload</span> ()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">load</span>.<span class="title function_">spritesheet</span>(<span class="string">&#x27;aliens&#x27;</span>, <span class="string">&#x27;assets/sprites/bsquadron-enemies.png&#x27;</span>, &#123; <span class="attr">frameWidth</span>: <span class="number">192</span>, <span class="attr">frameHeight</span>: <span class="number">160</span> &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">create</span> ()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> alien = <span class="variable language_">this</span>.<span class="property">add</span>.<span class="title function_">sprite</span>(<span class="number">400</span>, <span class="number">300</span>, <span class="string">&#x27;aliens&#x27;</span>, <span class="number">0</span>).<span class="title function_">setInteractive</span>();</span><br><span class="line"></span><br><span class="line">    alien.<span class="title function_">on</span>(<span class="string">&#x27;pointerover&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setFrame</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    alien.<span class="title function_">on</span>(<span class="string">&#x27;pointerout&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setFrame</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://labs.phaser.io/edit.html?src=src/input%5Cgame%20object%5Csprite%20example.js">reference</a></p>
<h2 id="7-世界座標中心"><a href="#7-世界座標中心" class="headerlink" title="7. 世界座標中心"></a>7. 世界座標中心</h2><p><img src="https://i.imgur.com/l0Y7ybi.jpg" alt="Phaser 3 Center Text In Middle Of Screen"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> screenCenterX = <span class="variable language_">this</span>.<span class="property">cameras</span>.<span class="property">main</span>.<span class="property">worldView</span>.<span class="property">x</span> + <span class="variable language_">this</span>.<span class="property">cameras</span>.<span class="property">main</span>.<span class="property">width</span> / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> screenCenterY = <span class="variable language_">this</span>.<span class="property">cameras</span>.<span class="property">main</span>.<span class="property">worldView</span>.<span class="property">y</span> + <span class="variable language_">this</span>.<span class="property">cameras</span>.<span class="property">main</span>.<span class="property">height</span> / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> loadingText = <span class="variable language_">this</span>.<span class="property">add</span>.<span class="title function_">text</span>(screenCenterX, screenCenterY, <span class="string">&#x27;Loading: 0%&#x27;</span>).<span class="title function_">setOrigin</span>(<span class="number">0.5</span>);</span><br></pre></td></tr></table></figure>



<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 測試大量圖檔</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">200</span>; i++) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">load</span>.<span class="title function_">image</span>(<span class="string">&#x27;bg&#x27;</span> + i, <span class="string">&#x27;assets/undersea.jpg&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 創建 text</span></span><br><span class="line"><span class="keyword">let</span> percentText = <span class="variable language_">this</span>.<span class="property">add</span>.<span class="title function_">text</span>(<span class="variable language_">this</span>.<span class="property">cameras</span>.<span class="property">main</span>.<span class="property">width</span> / <span class="number">2</span>, <span class="variable language_">this</span>.<span class="property">cameras</span>.<span class="property">main</span>.<span class="property">height</span> / <span class="number">2</span>, <span class="string">&#x27;&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">font</span>: <span class="string">&#x27;52px Open Sans&#x27;</span>,</span><br><span class="line">    <span class="attr">fill</span>: <span class="string">&#x27;#ffffff&#x27;</span></span><br><span class="line">&#125;).<span class="title function_">setOrigin</span>(<span class="number">0.5</span>, <span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 偵聽處理檔案</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">load</span>.<span class="title function_">on</span>(<span class="string">&#x27;progress&#x27;</span>, <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    percentText.<span class="title function_">setText</span>(<span class="built_in">parseInt</span>(value * <span class="number">100</span>) + <span class="string">&#x27;%&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 偵聽載入檔案結束</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">load</span>.<span class="title function_">on</span>(<span class="string">&#x27;complete&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    percentText.<span class="title function_">destroy</span>()		<span class="comment">// 載入完，把它從畫面上清除</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>





<p><a href="https://www.stephengarside.co.uk/blog/phaser-3-center-text-in-middle-of-screen/">reference</a></p>
<h2 id="8-設定可拖曳"><a href="#8-設定可拖曳" class="headerlink" title="8. 設定可拖曳"></a>8. 設定可拖曳</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cube.<span class="title function_">setInteractive</span>();</span><br><span class="line">self.<span class="property">input</span>.<span class="title function_">setDraggable</span>(cube);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>必須先設定互動，才能使用draggable 功能</p>
</blockquote>
<h2 id="9-物件與物件之間-overlap"><a href="#9-物件與物件之間-overlap" class="headerlink" title="9. 物件與物件之間 overlap"></a>9. 物件與物件之間 overlap</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">create</span>(<span class="params"></span>)</span><br><span class="line">&#123;</span><br><span class="line">    self.<span class="property">RectangleToRectangle</span> = <span class="title class_">Phaser</span>.<span class="property">Geom</span>.<span class="property">Intersects</span>.<span class="property">RectangleToRectangle</span>;</span><br><span class="line">	self.<span class="property">GetBounds</span> = <span class="title class_">Phaser</span>.<span class="property">Display</span>.<span class="property">Bounds</span>.<span class="property">GetBounds</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">update</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">	<span class="variable language_">this</span>.<span class="title class_">GetBounds</span>(<span class="variable language_">this</span>.<span class="property">cube04</span>, <span class="variable language_">this</span>.<span class="property">rect1</span>);</span><br><span class="line">	<span class="variable language_">this</span>.<span class="title class_">GetBounds</span>(<span class="variable language_">this</span>.<span class="property">rect_water</span>, <span class="variable language_">this</span>.<span class="property">rect2</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title class_">RectangleToRectangle</span>(<span class="variable language_">this</span>.<span class="property">rect1</span>, <span class="variable language_">this</span>.<span class="property">rect2</span>)) &#123;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://phaser.io/examples/v3/category/geom/intersects">reference</a></p>
<h2 id="10-設定游標"><a href="#10-設定游標" class="headerlink" title="10. 設定游標"></a>10. 設定游標</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">systems</span>.<span class="property">game</span>.<span class="property">input</span>.<span class="title function_">setCursor</span>(&#123; <span class="attr">cursor</span>: <span class="string">&#x27;grabbing&#x27;</span> &#125;);</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">systems</span>.<span class="property">game</span>.<span class="property">input</span>.<span class="title function_">resetCursor</span>(&#123; <span class="attr">cursor</span>: <span class="string">&#x27;true&#x27;</span> &#125;);</span><br></pre></td></tr></table></figure>



<h2 id="11-設定物件透明度"><a href="#11-設定物件透明度" class="headerlink" title="11. 設定物件透明度"></a>11. 設定物件透明度</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">object.<span class="property">alpha</span> = <span class="number">0.5</span>;</span><br><span class="line">object.<span class="title function_">clearAlpha</span>();</span><br></pre></td></tr></table></figure>



<h2 id="12-設定物件顯示or隱藏"><a href="#12-設定物件顯示or隱藏" class="headerlink" title="12. 設定物件顯示or隱藏"></a>12. 設定物件顯示or隱藏</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">object.<span class="property">visible</span> = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure>



<h2 id="13-設定動畫"><a href="#13-設定動畫" class="headerlink" title="13. 設定動畫"></a>13. 設定動畫</h2><p><img src="https://i.imgur.com/iDgRMpU.png" alt="image-20210813133125039"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//回到原本水位位置</span></span><br><span class="line">self.<span class="property">tweens</span>.<span class="title function_">add</span>(&#123;</span><br><span class="line">    <span class="attr">targets</span>: [self.<span class="property">rect_water</span>, self.<span class="property">rect_water_ruler</span>],</span><br><span class="line">    <span class="attr">y</span>: self.<span class="property">gSetting</span>.<span class="property">water</span>.<span class="property">y</span>,</span><br><span class="line">    <span class="attr">ease</span>: <span class="string">&#x27;Power2&#x27;</span>,</span><br><span class="line">    <span class="attr">duration</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="attr">onComplete</span>: self.<span class="property">onCompleteHandler</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">onCompleteHandler = <span class="function">(<span class="params">tween, targets, myImage</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//console.log(&#x27;onCompleteHandler&#x27;);</span></span><br><span class="line"></span><br><span class="line">    tween.<span class="property">parent</span>.<span class="title function_">killTweensOf</span>(self.<span class="property">rect_water</span>);</span><br><span class="line">    tween.<span class="property">parent</span>.<span class="title function_">killTweensOf</span>(self.<span class="property">rect_water_ruler</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//增加水位</span></span><br><span class="line">self.<span class="property">tweens</span>.<span class="title function_">add</span>(&#123;</span><br><span class="line"></span><br><span class="line">    <span class="attr">targets</span>: [self.<span class="property">rect_water</span>, self.<span class="property">rect_water_ruler</span>],</span><br><span class="line">    <span class="attr">y</span>: self.<span class="title function_">add_water_height</span>(self, <span class="number">50</span>),</span><br><span class="line">    <span class="attr">ease</span>: <span class="string">&#x27;Power2&#x27;</span>,</span><br><span class="line">    <span class="attr">duration</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="attr">onComplete</span>: self.<span class="property">onCompleteHandler</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">add_water_height = <span class="function">(<span class="params">self, add_h</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> self.<span class="property">gSetting</span>.<span class="property">water</span>.<span class="property">y</span> - add_h;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="14-創建重力物件"><a href="#14-創建重力物件" class="headerlink" title="14. 創建重力物件"></a>14. 創建重力物件</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">scene.<span class="property">create</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 把物件賦予重力</span></span><br><span class="line">    <span class="keyword">let</span> ground = <span class="variable language_">this</span>.<span class="property">add</span>.<span class="title function_">sprite</span>(<span class="number">180</span>, <span class="number">400</span>, <span class="string">&#x27;tile&#x27;</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">physics</span>.<span class="property">add</span>.<span class="title function_">existing</span>(ground)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 直接創建重力物件</span></span><br><span class="line">    <span class="keyword">let</span> ground2 = <span class="variable language_">this</span>.<span class="property">physics</span>.<span class="property">add</span>.<span class="title function_">sprite</span>(<span class="number">180</span>, <span class="number">200</span>, <span class="string">&#x27;tile&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="15-設定重力"><a href="#15-設定重力" class="headerlink" title="15. 設定重力"></a>15. 設定重力</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">object.<span class="property">body</span>.<span class="title function_">setAllowGravity</span>(<span class="literal">false</span>);</span><br><span class="line">object.<span class="property">body</span>.<span class="title function_">setAllowGravity</span>(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure>



<h2 id="16-不受重力碰撞影響而變更位置"><a href="#16-不受重力碰撞影響而變更位置" class="headerlink" title="16. 不受重力碰撞影響而變更位置"></a>16. 不受重力碰撞影響而變更位置</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ground.<span class="property">body</span>.<span class="property">immovable</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/XMNk5zd.png"></p>
<h2 id="17-設定碰撞"><a href="#17-設定碰撞" class="headerlink" title="17. 設定碰撞"></a>17. 設定碰撞</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//讓兩個物件產生碰撞</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">physics</span>.<span class="property">add</span>.<span class="title function_">collider</span>(ground, ground2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//設定碰撞事件</span></span><br><span class="line">self.<span class="property">physics</span>.<span class="property">add</span>.<span class="title function_">collider</span>(cube, self.<span class="property">weigh</span>, weight_event, <span class="literal">null</span>, self);</span><br><span class="line">self.<span class="property">physics</span>.<span class="property">add</span>.<span class="title function_">collider</span>(cube, self.<span class="property">box_down_side</span>, boxDownSide_event, <span class="literal">null</span>, self);</span><br></pre></td></tr></table></figure>





<h2 id="18-切換場景"><a href="#18-切換場景" class="headerlink" title="18. 切換場景"></a>18. 切換場景</h2><p><img src="https://i.imgur.com/SBNmFo3.png" alt="image-20210813133839704"></p>
<p><code>index.js</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">MainScene</span> <span class="keyword">from</span> <span class="string">&#x27;./Scenes/MainScene.js&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">StartScene</span> <span class="keyword">from</span> <span class="string">&#x27;./Scenes/StartScene.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> config = &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Phaser</span>.<span class="property">AUTO</span>,</span><br><span class="line">    <span class="attr">scale</span>: &#123;</span><br><span class="line">        <span class="attr">mode</span>: <span class="title class_">Phaser</span>.<span class="property">Scale</span>.<span class="property">FIT</span>,        </span><br><span class="line">        <span class="attr">autoCenter</span>: <span class="title class_">Phaser</span>.<span class="property">Scale</span>.<span class="property">CENTER_BOTH</span>,</span><br><span class="line">        <span class="attr">width</span>: <span class="number">1500</span>,</span><br><span class="line">        <span class="attr">height</span>: <span class="number">700</span></span><br><span class="line">    &#125;,    </span><br><span class="line">    <span class="attr">physics</span>: &#123;</span><br><span class="line">        <span class="attr">default</span>: <span class="string">&#x27;arcade&#x27;</span>,</span><br><span class="line">        <span class="attr">arcade</span>: &#123;</span><br><span class="line">            <span class="attr">gravity</span>: &#123; <span class="attr">y</span>: <span class="number">800</span> &#125;,         </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">scene</span>: [<span class="title class_">StartScene</span>,<span class="title class_">MainScene</span>]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> game = <span class="keyword">new</span> <span class="title class_">Phaser</span>.<span class="title class_">Game</span>(config);</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><code>StartScene.js</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">create</span>(<span class="params"></span>) &#123;</span><br><span class="line">    btnStart.<span class="title function_">on</span>(<span class="string">&#x27;pointerover&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">scene</span>.<span class="property">sys</span>.<span class="property">game</span>.<span class="property">input</span>.<span class="title function_">setCursor</span>(&#123; <span class="attr">cursor</span>: <span class="string">&#x27;pointer&#x27;</span> &#125;);      </span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    btnStart.<span class="title function_">on</span>(<span class="string">&#x27;pointerout&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">scene</span>.<span class="property">sys</span>.<span class="property">game</span>.<span class="property">input</span>.<span class="title function_">resetCursor</span>(&#123; <span class="attr">cursor</span>: <span class="string">&#x27;true&#x27;</span> &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    btnStart.<span class="title function_">on</span>(<span class="string">&#x27;pointerdown&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;            </span><br><span class="line">        self.<span class="property">scene</span>.<span class="title function_">start</span>(<span class="string">&#x27;MainScene&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="19-放大鏡效果"><a href="#19-放大鏡效果" class="headerlink" title="19. 放大鏡效果"></a>19. 放大鏡效果</h2><p><img src="https://i.imgur.com/JGJ28cg.jpg" alt="img"></p>
<p><img src="https://i.imgur.com/X8PLFhx.png" alt="img"></p>
<p><img src="https://i.imgur.com/ESxkX97.png" alt="img"></p>
<p><img src="https://i.imgur.com/9vtpHfd.png" alt="image-20210813140836787"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Example</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Phaser.Scene</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="title function_">constructor</span> ()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    preload ()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">load</span>.<span class="title function_">image</span>(<span class="string">&#x27;pic&#x27;</span>, <span class="string">&#x27;assets/pics/sword-art-online.jpg&#x27;</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">load</span>.<span class="title function_">image</span>(<span class="string">&#x27;magnify-out&#x27;</span>, <span class="string">&#x27;assets/sprites/magnify-glass-outside.png&#x27;</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">load</span>.<span class="title function_">image</span>(<span class="string">&#x27;magnify-in&#x27;</span>, <span class="string">&#x27;assets/sprites/magnify-glass-inside.png&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    create ()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">add</span>.<span class="title function_">image</span>(<span class="number">400</span>, <span class="number">300</span>, <span class="string">&#x27;pic&#x27;</span>).<span class="title function_">setTint</span>(<span class="number">0x2d2d2d</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  The scale creates a slight magnification effect</span></span><br><span class="line">        <span class="keyword">const</span> pic = <span class="variable language_">this</span>.<span class="property">add</span>.<span class="title function_">image</span>(<span class="number">400</span>, <span class="number">300</span>, <span class="string">&#x27;pic&#x27;</span>).<span class="title function_">setScale</span>(<span class="number">1.05</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> lense = <span class="variable language_">this</span>.<span class="property">make</span>.<span class="title function_">sprite</span>(&#123;</span><br><span class="line">            <span class="attr">x</span>: <span class="number">400</span>,</span><br><span class="line">            <span class="attr">y</span>: <span class="number">300</span>,</span><br><span class="line">            <span class="attr">key</span>: <span class="string">&#x27;magnify-in&#x27;</span>,</span><br><span class="line">            <span class="attr">add</span>: <span class="literal">false</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        pic.<span class="property">mask</span> = <span class="keyword">new</span> <span class="title class_">Phaser</span>.<span class="property">Display</span>.<span class="property">Masks</span>.<span class="title class_">BitmapMask</span>(<span class="variable language_">this</span>, lense);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> magnify = <span class="variable language_">this</span>.<span class="property">add</span>.<span class="title function_">image</span>(<span class="number">400</span>, <span class="number">300</span>, <span class="string">&#x27;magnify-out&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">input</span>.<span class="title function_">on</span>(<span class="string">&#x27;pointermove&#x27;</span>, <span class="keyword">function</span> (<span class="params">pointer</span>) &#123;</span><br><span class="line"></span><br><span class="line">            lense.<span class="property">x</span> = pointer.<span class="property">x</span>;</span><br><span class="line">            lense.<span class="property">y</span> = pointer.<span class="property">y</span>;</span><br><span class="line"></span><br><span class="line">            magnify.<span class="property">x</span> = pointer.<span class="property">x</span>;</span><br><span class="line">            magnify.<span class="property">y</span> = pointer.<span class="property">y</span>;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Phaser</span>.<span class="property">WEBGL</span>,</span><br><span class="line">    <span class="attr">parent</span>: <span class="string">&#x27;phaser-example&#x27;</span>,</span><br><span class="line">    <span class="attr">width</span>: <span class="number">800</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="number">600</span>,</span><br><span class="line">    <span class="attr">scene</span>: [ <span class="title class_">Example</span> ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> game = <span class="keyword">new</span> <span class="title class_">Phaser</span>.<span class="title class_">Game</span>(config);</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><a href="https://labs.phaser.io/edit.html?src=src/display/masks/magnify%20glass.js&v=3.55.2">reference</a></p>
<h2 id="20-這裡開始跟專案無關"><a href="#20-這裡開始跟專案無關" class="headerlink" title="20. 這裡開始跟專案無關"></a>20. 這裡開始跟專案無關</h2><h2 id="21-工具"><a href="#21-工具" class="headerlink" title="21. 工具"></a>21. 工具</h2><ul>
<li>此工具可以編輯你想要的背景、放置圖像，最後導出 json，在 phaser 中再引入該 json。<a href="https://thorbjorn.itch.io/tiled">Tiled Map Edito</a></li>
</ul>
<p><img src="https://i.imgur.com/KD1Boy0.png"></p>
<h2 id="22-相機效果"><a href="#22-相機效果" class="headerlink" title="22. 相機效果"></a>22. 相機效果</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">scene.<span class="property">gameOver</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 500 ms 相機 shake 效果</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cameras</span>.<span class="property">main</span>.<span class="title function_">shake</span>(<span class="number">500</span>)					</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 偵聽 shake 動畫結束</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cameras</span>.<span class="property">main</span>.<span class="title function_">on</span>(<span class="string">&#x27;camerashakecomplete&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 500 ms 相機 fade 效果</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">cameras</span>.<span class="property">main</span>.<span class="title function_">fade</span>(<span class="number">500</span>)				</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 偵聽 fade out 動畫結束</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cameras</span>.<span class="property">main</span>.<span class="title function_">on</span>(<span class="string">&#x27;camerafadeoutcomplete&#x27;</span>, <span class="function">() =&gt;</span> &#123;	</span><br><span class="line">        <span class="comment">// 遊戲重新</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">scene</span>.<span class="title function_">restart</span>()						</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="23-設定動畫"><a href="#23-設定動畫" class="headerlink" title="23. 設定動畫"></a>23. 設定動畫</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">scene.<span class="property">create</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 把 man 物件的 origin 設在中間正下方，並設為可互動</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">man</span> = <span class="variable language_">this</span>.<span class="property">add</span>.<span class="title function_">sprite</span>(<span class="number">50</span>, <span class="number">310</span>, <span class="string">&#x27;man&#x27;</span>, <span class="number">0</span>).<span class="title function_">setOrigin</span>(<span class="number">0.5</span>, <span class="number">1</span>).<span class="title function_">setInteractive</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 對於 man 增加 tweens 動畫</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">man</span>.<span class="property">scaleTween</span> = <span class="variable language_">this</span>.<span class="property">tweens</span>.<span class="title function_">add</span>(&#123;</span><br><span class="line">        <span class="attr">targets</span>: <span class="variable language_">this</span>.<span class="property">man</span>,</span><br><span class="line">        <span class="attr">scaleX</span>: <span class="number">1.2</span>,</span><br><span class="line">        <span class="attr">scaleY</span>: <span class="number">1.2</span>,</span><br><span class="line">        <span class="attr">duration</span>: <span class="number">1000</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面一開始載入完時，就會自動執行動畫，所以可以多添加 paused: true</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">man</span>.<span class="property">scaleTween</span> = <span class="variable language_">this</span>.<span class="property">tweens</span>.<span class="title function_">add</span>(&#123;</span><br><span class="line">    <span class="attr">targets</span>: <span class="variable language_">this</span>.<span class="property">man</span>,</span><br><span class="line">    <span class="attr">scaleX</span>: <span class="number">1.2</span>,</span><br><span class="line">    <span class="attr">scaleY</span>: <span class="number">1.2</span>,</span><br><span class="line">    <span class="attr">duration</span>: <span class="number">1000</span>,</span><br><span class="line">    <span class="attr">paused</span>: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">man</span>.<span class="title function_">on</span>(<span class="string">&#x27;pointerdown&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">man</span>.<span class="property">scaleTween</span>.<span class="title function_">restart</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">scene.<span class="property">create</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">anims</span>.<span class="title function_">create</span>(&#123;</span><br><span class="line">        <span class="attr">key</span>: <span class="string">&#x27;walking&#x27;</span>,</span><br><span class="line">        <span class="attr">frames</span>: <span class="variable language_">this</span>.<span class="property">anims</span>.<span class="title function_">generateFrameNames</span>(<span class="string">&#x27;player&#x27;</span>, &#123; <span class="attr">frames</span>: [<span class="number">1</span>, <span class="number">2</span> ]&#125;),</span><br><span class="line">        <span class="attr">frameRate</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="attr">yoyo</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">repeat</span>: -<span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">scene.<span class="property">update</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 判斷鍵盤左鍵、右鍵</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">cursors</span>.<span class="property">left</span>.<span class="property">isDown</span>) &#123;</span><br><span class="line">        .....</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">player</span>.<span class="property">anims</span>.<span class="title function_">play</span>(<span class="string">&#x27;walking&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">cursors</span>.<span class="property">right</span>.<span class="property">isDown</span>) &#123;</span><br><span class="line">        .....</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">player</span>.<span class="property">anims</span>.<span class="title function_">play</span>(<span class="string">&#x27;walking&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        .....</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">player</span>.<span class="property">anims</span>.<span class="title function_">stop</span>(<span class="string">&#x27;walking&#x27;</span>)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">player</span>.<span class="title function_">setFrame</span>(<span class="number">0</span>)			<span class="comment">// 顯示在第一張圖片上</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h2 id="24-遊戲重新開始"><a href="#24-遊戲重新開始" class="headerlink" title="24. 遊戲重新開始"></a>24. 遊戲重新開始</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">registry</span>.<span class="title function_">destroy</span>(); <span class="comment">// destroy registry</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">events</span>.<span class="title function_">off</span>(); <span class="comment">// disable all active events</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">scene</span>.<span class="title function_">restart</span>(); <span class="comment">// restart current scene</span></span><br></pre></td></tr></table></figure>





<h2 id="25-加載進度"><a href="#25-加載進度" class="headerlink" title="25. 加載進度"></a>25. 加載進度</h2><p><img src="https://i.imgur.com/6PUe3Yp.png"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 測試大量圖檔</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">200</span>; i++) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">load</span>.<span class="title function_">image</span>(<span class="string">&#x27;bg&#x27;</span> + i, <span class="string">&#x27;assets/bg.png&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 創建 text</span></span><br><span class="line"><span class="keyword">let</span> percentText = <span class="variable language_">this</span>.<span class="property">add</span>.<span class="title function_">text</span>(<span class="number">320</span>, <span class="number">160</span>, <span class="string">&#x27;&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">font</span>: <span class="string">&#x27;24px Open Sans&#x27;</span>,</span><br><span class="line">    <span class="attr">fill</span>: <span class="string">&#x27;#ffffff&#x27;</span></span><br><span class="line">&#125;).<span class="title function_">setOrigin</span>(<span class="number">0.5</span>, <span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 偵聽處理檔案</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">load</span>.<span class="title function_">on</span>(<span class="string">&#x27;progress&#x27;</span>, <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    percentText.<span class="title function_">setText</span>(<span class="built_in">parseInt</span>(value * <span class="number">100</span>) + <span class="string">&#x27;%&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 偵聽載入檔案結束</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">load</span>.<span class="title function_">on</span>(<span class="string">&#x27;complete&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    percentText.<span class="title function_">destroy</span>()		<span class="comment">// 載入完，把它從畫面上清除</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>





<h2 id="26-Follow"><a href="#26-Follow" class="headerlink" title="26. Follow"></a>26. Follow</h2><p>有時候，我們希望不侷限在特定的區域內，而是隨著遊戲者的位置來進行遊戲的移動。這時候可以調整 camera 的設定來達到這個目的（ camera 跟隨著 player 的位置 ）。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 設定 camera 邊界，視角跟隨玩家</span></span><br><span class="line"><span class="comment">// 目前是依照 this.physics.world 來決定 360, 1000</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">physics</span>.<span class="property">world</span>.<span class="property">bounds</span>.<span class="property">width</span> = <span class="number">360</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">physics</span>.<span class="property">world</span>.<span class="property">bounds</span>.<span class="property">height</span> = <span class="number">1000</span></span><br><span class="line">.....</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">cameras</span>.<span class="property">main</span>.<span class="title function_">setBounds</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">360</span>, <span class="number">1000</span>)</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">cameras</span>.<span class="property">main</span>.<span class="title function_">startFollow</span>(<span class="variable language_">this</span>.<span class="property">player</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/6mXf1fH.png"></p>
<p>這次我們學到了，如何設定 camera，依照 player 的位置，去移動 camera 的位置。可以朝著 x 軸移動的遊戲（馬力歐）；或者 y 軸移動的遊戲（小朋友下樓梯）等遊戲劇本，來設定 camera 以及 physics.world 的邊界。</p>
<h2 id="27-燈光-light"><a href="#27-燈光-light" class="headerlink" title="27. 燈光 light"></a>27. 燈光 light</h2><p>首先你需要有 normal maps，可以使用工具來製作 <a href="https://www.codeandweb.com/spriteilluminator/tutorials/normal-map-painting-with-spriteilluminator">SpriteIlluminator</a> 工具來製作。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">scene.<span class="property">preload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">load</span>.<span class="title function_">setPath</span>(<span class="string">&#x27;assets/&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 加載圖像, 01.png 為一般圖像 ;  01_n.png 為 normal map</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">load</span>.<span class="title function_">image</span>(<span class="string">&#x27;character&#x27;</span>, [<span class="string">&#x27;01.png&#x27;</span>, <span class="string">&#x27;01_n.png&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">scene.<span class="property">create</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> capguy = <span class="variable language_">this</span>.<span class="property">add</span>.<span class="title function_">sprite</span>(<span class="number">250</span>, <span class="number">300</span>, <span class="string">&#x27;character&#x27;</span>)</span><br><span class="line">    capguy.<span class="title function_">setScale</span>(<span class="number">0.5</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 讓角色接受光源</span></span><br><span class="line">    capguy.<span class="title function_">setPipeline</span>(<span class="string">&#x27;Light2D&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在 (350, 250) 位置添加半徑 200 的光源</span></span><br><span class="line">    <span class="keyword">let</span> light = <span class="variable language_">this</span>.<span class="property">lights</span>.<span class="title function_">addLight</span>(<span class="number">350</span>, <span class="number">250</span>, <span class="number">200</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">lights</span>.<span class="title function_">enable</span>()</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 設定環境燈</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">lights</span>.<span class="title function_">setAmbientColor</span>(<span class="number">0x555555</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 滑鼠移動，變更燈光位置</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">input</span>.<span class="title function_">on</span>(<span class="string">&#x27;pointermove&#x27;</span>, <span class="keyword">function</span> (<span class="params">pointer</span>) &#123;</span><br><span class="line">        light.<span class="property">x</span> = pointer.<span class="property">x</span>;</span><br><span class="line">        light.<span class="property">y</span> = pointer.<span class="property">y</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如果載入 sprite sheet 的話，也必須有 normal map sheet，我們可以使用 TexturePack 工具產生 json 檔，使用 load.multiatlas() 載入兩種 sheet，將 normal 連結到 sprite sheet 上。</p>
]]></content>
      <categories>
        <category>Phaser</category>
      </categories>
      <tags>
        <tag>Phaser</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL Server 心得筆記</title>
    <url>/2021/08/13/2021-08-13%20SQL%20Server%20%E5%BF%83%E5%BE%97%E7%AD%86%E8%A8%98/</url>
    <content><![CDATA[<h2 id="1-Function"><a href="#1-Function" class="headerlink" title="1. Function"></a>1. Function</h2><span id="more"></span>


<h3 id="1-1-字串相加方法1"><a href="#1-1-字串相加方法1" class="headerlink" title="1.1. 字串相加方法1"></a>1.1. 字串相加方法1</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">function</span> Concat_Name </span><br><span class="line">go</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> Concat_Name(<span class="variable">@cs</span> <span class="type">varchar</span>(<span class="number">1000</span>))</span><br><span class="line"><span class="keyword">returns</span> <span class="type">varchar</span>(<span class="number">3000</span>)</span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">declare</span>   <span class="variable">@String</span> <span class="type">varchar</span>(<span class="number">8000</span>)<span class="operator">=</span><span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">select</span> <span class="variable">@String</span><span class="operator">=</span><span class="variable">@String</span> <span class="operator">+</span>name <span class="operator">+</span> <span class="string">&#x27;;&#x27;</span>  <span class="keyword">from</span> students <span class="keyword">where</span> class<span class="operator">=</span><span class="variable">@cs</span>	</span><br><span class="line"><span class="keyword">return</span> <span class="variable">@String</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">select</span> dbo.Concat_Name(<span class="string">&#x27;B&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/koXqtla.png" alt="image-20210809170549015"></p>
<p>![image-20210809170602581](E:\kite_project\SQLSERVER\SQL Server.assets\image-20210809170602581-16284999637694.png)</p>
<h3 id="1-2-字串相加方法2"><a href="#1-2-字串相加方法2" class="headerlink" title="1.2. 字串相加方法2"></a>1.2. 字串相加方法2</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">select</span> </span><br><span class="line">(</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="built_in">cast</span>(name <span class="keyword">AS</span> NVARCHAR ) <span class="operator">+</span> <span class="string">&#x27;,&#x27;</span> </span><br><span class="line">    <span class="keyword">from</span> students  	</span><br><span class="line">	<span class="keyword">where</span> class<span class="operator">=</span><span class="string">&#x27;A&#x27;</span>	<span class="comment">--把name一樣的加起來</span></span><br><span class="line">	<span class="keyword">FOR</span> XML PATH(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">) <span class="keyword">as</span> Concat_Name</span><br></pre></td></tr></table></figure>





<h2 id="2-Trigger"><a href="#2-Trigger" class="headerlink" title="2. Trigger"></a>2. Trigger</h2><h3 id="2-1-新增"><a href="#2-1-新增" class="headerlink" title="2.1. 新增"></a>2.1. 新增</h3><p>先創建LOG表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">as</span> op,<span class="operator">*</span> <span class="keyword">INTO</span> students_log <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span></span><br></pre></td></tr></table></figure>



<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/****** Object:  Trigger [dbo].[students_InsertTrigger]    Script Date: 2021/8/9 下午 05:36:40 ******/</span></span><br><span class="line"><span class="keyword">SET</span> ANSI_NULLS <span class="keyword">ON</span></span><br><span class="line">GO</span><br><span class="line"><span class="keyword">SET</span> QUOTED_IDENTIFIER <span class="keyword">ON</span></span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> [dbo].[students_InsertTrigger] <span class="keyword">ON</span> [dbo].[students]</span><br><span class="line"></span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">INSERT</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line">	<span class="keyword">DECLARE</span> <span class="variable">@op</span> <span class="type">char</span>(<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">DECLARE</span> <span class="variable">@create_date</span> datetime;</span><br><span class="line">	<span class="keyword">DECLARE</span> <span class="variable">@id</span> <span class="type">int</span>;	</span><br><span class="line">	<span class="keyword">DECLARE</span> <span class="variable">@student_name</span> nvarchar(<span class="number">50</span>);</span><br><span class="line">	<span class="keyword">DECLARE</span> <span class="variable">@age</span> <span class="type">int</span>;</span><br><span class="line">	<span class="keyword">DECLARE</span> <span class="variable">@cs</span> nvarchar(<span class="number">50</span>);</span><br><span class="line">	</span><br><span class="line">    <span class="comment">-- 取出新增紀錄</span></span><br><span class="line">    <span class="keyword">SELECT</span> </span><br><span class="line">	<span class="variable">@create_date</span><span class="operator">=</span>[create_date],<span class="variable">@id</span><span class="operator">=</span>[id],<span class="variable">@student_name</span><span class="operator">=</span>[student_name],<span class="variable">@age</span><span class="operator">=</span>[age],<span class="variable">@cs</span><span class="operator">=</span>[class]</span><br><span class="line">    <span class="keyword">FROM</span> inserted;</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- 存到 LOG 檔案內</span></span><br><span class="line">    <span class="keyword">INSERT</span> <span class="keyword">INTO</span> [students_log]([op],[create_date],[id],[student_name],[age],[class])</span><br><span class="line">	<span class="keyword">VALUES</span>(<span class="string">&#x27;I&#x27;</span>,<span class="variable">@create_date</span>,<span class="variable">@id</span>,<span class="variable">@student_name</span>,<span class="variable">@age</span>,<span class="variable">@cs</span>);</span><br><span class="line">GO</span><br></pre></td></tr></table></figure>



<p>test insert sql </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">INSERT</span> <span class="keyword">INTO</span> [students]([create_date],[id],[student_name],[age],[class])</span><br><span class="line"><span class="keyword">VALUES</span>(getdate(),<span class="number">15</span>,<span class="string">&#x27;aa&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;C&#x27;</span>);</span><br></pre></td></tr></table></figure>



<h3 id="2-2-修改"><a href="#2-2-修改" class="headerlink" title="2.2. 修改"></a>2.2. 修改</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> [dbo].[students_UpdateTrigger] <span class="keyword">ON</span> [dbo].[students]</span><br><span class="line"></span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">UPDATE</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line">	<span class="keyword">DECLARE</span> <span class="variable">@op</span> <span class="type">char</span>(<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">DECLARE</span> <span class="variable">@create_date</span> datetime;</span><br><span class="line">	<span class="keyword">DECLARE</span> <span class="variable">@id</span> <span class="type">int</span>;	</span><br><span class="line">	<span class="keyword">DECLARE</span> <span class="variable">@student_name</span> nvarchar(<span class="number">50</span>);</span><br><span class="line">	<span class="keyword">DECLARE</span> <span class="variable">@age</span> <span class="type">int</span>;</span><br><span class="line">	<span class="keyword">DECLARE</span> <span class="variable">@cs</span> nvarchar(<span class="number">50</span>);</span><br><span class="line">	</span><br><span class="line">    <span class="comment">-- 修改後</span></span><br><span class="line">    <span class="keyword">SELECT</span> </span><br><span class="line">	<span class="variable">@create_date</span><span class="operator">=</span>[create_date],<span class="variable">@id</span><span class="operator">=</span>[id],<span class="variable">@student_name</span><span class="operator">=</span>[student_name],<span class="variable">@age</span><span class="operator">=</span>[age],<span class="variable">@cs</span><span class="operator">=</span>[class]</span><br><span class="line">    <span class="keyword">FROM</span> inserted;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">-- 存到 LOG 檔案內</span></span><br><span class="line">    <span class="keyword">INSERT</span> <span class="keyword">INTO</span> [students_log]([op],[create_date],[id],[student_name],[age],[class])</span><br><span class="line">	<span class="keyword">VALUES</span>(<span class="string">&#x27;U&#x27;</span>,<span class="variable">@create_date</span>,<span class="variable">@id</span>,<span class="variable">@student_name</span>,<span class="variable">@age</span>,<span class="variable">@cs</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">--修改前</span></span><br><span class="line">    <span class="keyword">SELECT</span> </span><br><span class="line">	<span class="variable">@create_date</span><span class="operator">=</span>[create_date],<span class="variable">@id</span><span class="operator">=</span>[id],<span class="variable">@student_name</span><span class="operator">=</span>[student_name],<span class="variable">@age</span><span class="operator">=</span>[age],<span class="variable">@cs</span><span class="operator">=</span>[class]</span><br><span class="line">    <span class="keyword">FROM</span> deleted;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">-- 存到 LOG 檔案內</span></span><br><span class="line">    <span class="keyword">INSERT</span> <span class="keyword">INTO</span> [students_log]([op],[create_date],[id],[student_name],[age],[class])</span><br><span class="line">	<span class="keyword">VALUES</span>(<span class="string">&#x27;D&#x27;</span>,<span class="variable">@create_date</span>,<span class="variable">@id</span>,<span class="variable">@student_name</span>,<span class="variable">@age</span>,<span class="variable">@cs</span>);</span><br><span class="line"></span><br><span class="line">GO</span><br></pre></td></tr></table></figure>



<p>test update sql</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> students <span class="keyword">set</span> student_name <span class="operator">=</span> <span class="string">&#x27;溜爺&#x27;</span> </span><br></pre></td></tr></table></figure>



<p><img src="https://i.imgur.com/ArX7CDh.png" alt="image-20210811105333032"></p>
<h2 id="3-Store-Procedure"><a href="#3-Store-Procedure" class="headerlink" title="3. Store Procedure"></a>3. Store Procedure</h2><p>優點</p>
<ol>
<li>預存程式可封裝，並隱藏複雜的商業邏輯。增加其隱蔽性, 安全性。</li>
</ol>
<p>可以將資料邏輯和商務規則 (Business Rule) 加以封裝，如此使用者就只能以開發人員和資料庫系統管理員預期的方式來存取資料及物件。</p>
<ol start="2">
<li><p>Stored Procedure 是已經編譯過的, 所以執行效率快</p>
</li>
<li><p>減少程式與資料庫的連結次數</p>
</li>
<li><p>預存程式可以回傳值，並可以接受參數。</p>
</li>
<li><p>預存程式無法使用 SELECT 指令來執行，因為它是子程式，與檢視表，資料表或使用者定義函式不同。</p>
</li>
<li><p>預存程式可以用在資料檢驗，強制實行商業邏輯等。</p>
</li>
<li><p>可以使用會驗證所有使用者輸入的參數化預存程序來防堵 SQL 插入式攻擊(SQL Injection)。 如果有使用動態 SQL，請務必將命令參數化，也絕對不要在查詢字串中直接包含參數值。</p>
</li>
<li><p>可以拒絕臨機操作 (Ad Hoc) 的查詢和資料修改作業。 如此可避免使用者因惡意或不慎而損毀資料，或執行會降低伺服器或網路效能的查詢。</p>
</li>
<li><p>可以處理程序程式碼中的錯誤，而不必將錯誤直接傳遞至用戶端應用程式。 如此可避免傳回可能助長探查攻擊的錯誤訊息。 請在伺服器上記錄及處理錯誤。</p>
</li>
<li><p>預存程序只需寫入一次，即可由許多應用程式存取。</p>
</li>
<li><p>用戶端應用程式不需要對基礎資料結構有任何了解。 您可以對預存程序程式碼進行變更，而不需變更用戶端應用程式，只要這些變更不會影響參數清單或傳回的資料型別即可。</p>
</li>
<li><p>預存程序可以將多項作業結合成單一的程序呼叫，藉此降低網路流量。</p>
</li>
</ol>
<p>缺點</p>
<ol>
<li><p>移植性差。預存程式，往往客製化於特定的資料庫上，因為支援的程式語言不同。當切換到其他廠商的資料庫系統時，需要重寫原有的預存程式。</p>
</li>
<li><p>對Server的負擔較大</p>
</li>
<li><p>預存程式的效能調校與撰寫，受限於各種資料庫系統。</p>
</li>
</ol>
<p><img src="https://i.imgur.com/Vav8q5R.png" alt="img"></p>
<p>假設四個不同應用系統都在Local端 所運行的這區塊程式功能都是做一樣的事情時<br>當一有功能調整<br>此時你會有需要對四個地方去做同樣調整<br>共需要做四次更改</p>
<p>這是違背開發上降低重複動作<br>設計觀念的</p>
<h2 id="4-常見用法"><a href="#4-常見用法" class="headerlink" title="4. 常見用法"></a>4. 常見用法</h2><h3 id="4-1-暫存表功能"><a href="#4-1-暫存表功能" class="headerlink" title="4.1. 暫存表功能"></a>4.1. 暫存表功能</h3><p>待寫</p>
<h3 id="4-2-查詢"><a href="#4-2-查詢" class="headerlink" title="4.2. 查詢"></a>4.2. 查詢</h3><h4 id="4-2-1-從子查詢結果寫入新表"><a href="#4-2-1-從子查詢結果寫入新表" class="headerlink" title="4.2.1. 從子查詢結果寫入新表"></a>4.2.1. 從子查詢結果寫入新表</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">INTO</span> KITE </span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">(</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> ITEMS <span class="keyword">WHERE</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span> <span class="comment">/* condition */</span></span><br><span class="line">) <span class="keyword">AS</span> A </span><br></pre></td></tr></table></figure>

<blockquote>
<p>資料表較大時，可以先取出某一部分進行查詢數據，效能比較快</p>
</blockquote>
<h4 id="4-2-2-以客戶資料為主table，查詢最後一筆交易產品線記錄"><a href="#4-2-2-以客戶資料為主table，查詢最後一筆交易產品線記錄" class="headerlink" title="4.2.2. 以客戶資料為主table，查詢最後一筆交易產品線記錄"></a>4.2.2. 以客戶資料為主table，查詢最後一筆交易產品線記錄</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> AA001 <span class="keyword">AS</span> 客戶代號</span><br><span class="line">,(<span class="keyword">SELECT</span> TOP <span class="number">1</span> PRODUCT_DATE <span class="keyword">FROM</span> ORDER_BOM <span class="keyword">WHERE</span> OD_AA001<span class="operator">=</span>AA001 <span class="keyword">ORDER</span> <span class="keyword">BY</span> PRODUCT_DATE <span class="keyword">DESC</span>) 最後一次交易日</span><br><span class="line"><span class="keyword">FROM</span> CRMAA</span><br><span class="line"><span class="keyword">WHERE</span> AA013 <span class="keyword">IN</span>(<span class="string">&#x27;台北&#x27;</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>常見狀況以主表資料為主，再去撈取某一資訊，放在欄位上進行呈現</p>
<p>當然，如果有多個欄位，用一樣的語句結構，再多寫幾行子查詢</p>
</blockquote>
<h4 id="4-2-3-子表完成後，再進行第二次篩選"><a href="#4-2-3-子表完成後，再進行第二次篩選" class="headerlink" title="4.2.3. 子表完成後，再進行第二次篩選"></a>4.2.3. 子表完成後，再進行第二次篩選</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> A.<span class="operator">*</span></span><br><span class="line">,HC050 訂單合約起日,HC051  訂單合約迄日</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">(</span><br><span class="line">    <span class="keyword">SELECT</span> AA001 <span class="keyword">AS</span> 客戶代號,AA002 <span class="keyword">AS</span> 客戶名稱,OD004 <span class="keyword">AS</span> 出貨日期,OD005 <span class="keyword">AS</span> 出貨單號</span><br><span class="line">    <span class="keyword">FROM</span> ORDER_BOM</span><br><span class="line">    <span class="keyword">JOIN</span> CRMAA <span class="keyword">ON</span> AA001<span class="operator">=</span>OD_AA001</span><br><span class="line">    <span class="keyword">WHERE</span> </span><br><span class="line">    <span class="number">1</span><span class="operator">=</span><span class="number">1</span></span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> OD_AA001</span><br><span class="line">) <span class="keyword">AS</span> A </span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> CRMHC <span class="keyword">ON</span> HC002 <span class="operator">=</span> REPLACE(出貨單號,<span class="string">&#x27;DS2-&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> 出貨日期,客戶代號</span><br></pre></td></tr></table></figure>

<blockquote>
<p>縮限資料後，再進行第二次的篩選</p>
</blockquote>
<h4 id="4-2-4-子表完成後，進行第三次篩選"><a href="#4-2-4-子表完成後，進行第三次篩選" class="headerlink" title="4.2.4. 子表完成後，進行第三次篩選"></a>4.2.4. 子表完成後，進行第三次篩選</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> AR001,AR002,AR003,AR004,PE2.PE02,PE2.PE03,PE2.PE04 <span class="keyword">FROM</span> </span><br><span class="line">(</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> SERAR_KITE2</span><br><span class="line">	<span class="keyword">WHERE</span> RTRIM(AR001)<span class="operator">+</span>RTRIM(AR002)<span class="operator">+</span>RTRIM(AR003)<span class="operator">+</span>RTRIM(AR004) </span><br><span class="line">	<span class="keyword">IN</span></span><br><span class="line">	(</span><br><span class="line">	<span class="keyword">SELECT</span> RTRIM(AR001)<span class="operator">+</span>RTRIM(AR002)<span class="operator">+</span>RTRIM(AR003)<span class="operator">+</span>RTRIM(AR004) </span><br><span class="line">	<span class="keyword">FROM</span> SERAR_KITE2</span><br><span class="line">	<span class="keyword">GROUP</span>  <span class="keyword">BY</span> AR001,AR002,AR003,AR004 <span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(PE02) <span class="operator">&gt;</span><span class="number">1</span></span><br><span class="line">	) </span><br><span class="line">) <span class="keyword">AS</span> AR</span><br><span class="line"><span class="keyword">JOIN</span> DSCPE PE2 <span class="keyword">ON</span> AR.PE02<span class="operator">=</span>PE2.PE02 <span class="keyword">collate</span> database_default</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> AR001,AR002,AR003,AR004</span><br></pre></td></tr></table></figure>

<blockquote>
<p>同樣概念也可以包N層</p>
</blockquote>
<h4 id="4-2-5-縱向轉直向"><a href="#4-2-5-縱向轉直向" class="headerlink" title="4.2.5. 縱向轉直向"></a>4.2.5. 縱向轉直向</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line"><span class="built_in">COUNT</span>(<span class="keyword">CASE</span> class <span class="keyword">WHEN</span> <span class="string">&#x27;a&#x27;</span> <span class="keyword">THEN</span> class <span class="keyword">END</span>) <span class="keyword">as</span> A_CLASS_CNT</span><br><span class="line">,<span class="built_in">COUNT</span>(<span class="keyword">CASE</span> class <span class="keyword">WHEN</span> <span class="string">&#x27;b&#x27;</span> <span class="keyword">THEN</span> class <span class="keyword">END</span>) <span class="keyword">as</span> B_CLASS_CNT</span><br><span class="line"><span class="keyword">FROM</span> students </span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/It9Y6Ec.png" alt="image-20210809163459420"></p>
<p><img src="https://i.imgur.com/QPhMd95.png" alt="image-20210809163528735"></p>
<blockquote>
<p>同一個表統計時，如果有COUNT需求，要轉向，是可以這樣寫的</p>
</blockquote>
<h4 id="4-2-6-相乘"><a href="#4-2-6-相乘" class="headerlink" title="4.2.6. 相乘"></a>4.2.6. 相乘</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> student_name,subject_name </span><br><span class="line"><span class="keyword">FROM</span> students,subjects</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> student_name,subject_name</span><br></pre></td></tr></table></figure>



<p><img src="https://i.imgur.com/7ZvKwVo.png" alt="image-20210809171947986"></p>
<p><img src="https://i.imgur.com/ud4j7dU.png" alt="image-20210809172246152"></p>
<blockquote>
<p>自行想像需求</p>
</blockquote>
<h3 id="4-3-修改"><a href="#4-3-修改" class="headerlink" title="4.3. 修改"></a>4.3. 修改</h3><h4 id="4-3-1-參考table更新至目的table"><a href="#4-3-1-參考table更新至目的table" class="headerlink" title="4.3.1. 參考table更新至目的table"></a>4.3.1. 參考table更新至目的table</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> AR1 <span class="keyword">SET</span> AR1.AR005<span class="operator">=</span> AR2.PE02</span><br><span class="line"><span class="comment">--SELECT AR1.AR005,AR2.PE02</span></span><br><span class="line"><span class="keyword">FROM</span> SERAR_KITE AR1 <span class="keyword">JOIN</span> SERAR_KITE2 AR2 <span class="keyword">ON</span> AR1.AR001<span class="operator">=</span> AR2.AR001 <span class="keyword">AND</span> AR1.AR002<span class="operator">=</span>AR2.AR002 <span class="keyword">AND</span> AR1.AR003<span class="operator">=</span>AR2.AR003 <span class="keyword">AND</span> AR1.AR004<span class="operator">=</span>AR2.AR004</span><br><span class="line"><span class="keyword">WHERE</span> AR1.AR005 <span class="operator">!=</span>AR2.PE02</span><br></pre></td></tr></table></figure>



<h3 id="4-4-新增"><a href="#4-4-新增" class="headerlink" title="4.4. 新增"></a>4.4. 新增</h3><h4 id="4-4-1-批次新增資料，參考既有table，更新目的table"><a href="#4-4-1-批次新增資料，參考既有table，更新目的table" class="headerlink" title="4.4.1. 批次新增資料，參考既有table，更新目的table"></a>4.4.1. 批次新增資料，參考既有table，更新目的table</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--一般業務</span></span><br><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@JOB_ID</span> <span class="keyword">AS</span> <span class="type">VARCHAR</span>(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@UID</span> <span class="keyword">AS</span> <span class="type">VARCHAR</span>(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@JOB_ID</span><span class="operator">=</span><span class="string">&#x27;001&#x27;</span> <span class="comment">--一般業務</span></span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@UID</span><span class="operator">=</span><span class="string">&#x27;02944&#x27;</span>  <span class="comment">-- 參考工號</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> ADMML (ML001,ML002,ML003,ML004,ML005,ML006,ML007,ML008,ML009,ML010)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> <span class="variable">@JOB_ID</span> <span class="keyword">AS</span> ML001,MG002 <span class="keyword">AS</span> ML002, MG003 <span class="keyword">AS</span> ML003,MG004 <span class="keyword">AS</span> ML004,MG005 <span class="keyword">AS</span> ML005,MG006 <span class="keyword">AS</span> ML006,MG007 <span class="keyword">AS</span> ML007,<span class="string">&#x27;&#x27;</span> <span class="keyword">AS</span> ML008,MG009 <span class="keyword">AS</span> ML009,MG010 <span class="keyword">AS</span> ML010</span><br><span class="line"><span class="keyword">FROM</span> ADMMG_ACP <span class="keyword">WHERE</span> MG001<span class="operator">=</span><span class="variable">@UID</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> MG002</span><br></pre></td></tr></table></figure>

<blockquote>
<p>批次新增資料，再利用參數方式去當條件</p>
</blockquote>
<h4 id="4-4-2-批次新增資眼，excel-來源匯入，更新目的table"><a href="#4-4-2-批次新增資眼，excel-來源匯入，更新目的table" class="headerlink" title="4.4.2. 批次新增資眼，excel 來源匯入，更新目的table"></a>4.4.2. 批次新增資眼，excel 來源匯入，更新目的table</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> CRMHG(HG001,HG005,HG002,HG032,HG033,HG024,HG021,HG007,HG010,HG012,HG026,HG008,HG011)</span><br><span class="line"><span class="keyword">SELECT</span> 客戶代號,姓名,<span class="string">&#x27;8888&#x27;</span>,職稱,職能別,郵區,公司地址,電話<span class="number">1</span>,電話<span class="number">1</span>_分機,行動電話,行動電話<span class="number">2</span>,電話<span class="number">2</span>,電話<span class="number">2</span>_分機</span><br><span class="line"><span class="keyword">FROM</span> [dbo].[工作表_kite] </span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">是否匯入<span class="operator">=</span><span class="string">&#x27;Y&#x27;</span> </span><br><span class="line"><span class="keyword">AND</span> (客戶代號 <span class="keyword">collate</span> database_default <span class="operator">+</span> 姓名 <span class="keyword">collate</span> database_default) <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="keyword">SELECT</span> HG001<span class="operator">+</span>HG005 <span class="keyword">FROM</span> CRMHG)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>匯入EXCEL到SQLSERVER之後，要注意的是<code>定序</code>問題 </p>
</blockquote>
<h3 id="4-5-日期格式轉換"><a href="#4-5-日期格式轉換" class="headerlink" title="4.5. 日期格式轉換"></a>4.5. 日期格式轉換</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CONVERT</span>(<span class="type">VARCHAR</span>(<span class="number">12</span>),CRMCC.CREATE_DATE,<span class="number">112</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>常見YYYYMMDD格式</p>
</blockquote>
<h3 id="4-6-跨DB連線"><a href="#4-6-跨DB連線" class="headerlink" title="4.6. 跨DB連線"></a>4.6. 跨DB連線</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> OPENDATASOURCE(<span class="string">&#x27;SQLOLEDB&#x27;</span>,<span class="string">&#x27;Data Source = 10.40.40.232;User ID= xx; Password = xxx&#x27;</span>). db.table</span><br></pre></td></tr></table></figure>

<p>Link Server </p>
<p>待寫</p>
<h3 id="4-7-字元說明"><a href="#4-7-字元說明" class="headerlink" title="4.7. 字元說明"></a>4.7. 字元說明</h3><p>char(13) &#x3D; Enter</p>
<p>char(10) &#x3D; 折行</p>
<p>char(32) &#x3D; 空格</p>
<p>char(255) &#x3D; null</p>
<h2 id="5-維運相關"><a href="#5-維運相關" class="headerlink" title="5. 維運相關"></a>5. 維運相關</h2><p>sp_lock</p>
<p>sp_who</p>
<p>sp_who2</p>
<h3 id="5-1-效能語法"><a href="#5-1-效能語法" class="headerlink" title="5.1. 效能語法"></a>5.1. 效能語法</h3><h4 id="5-1-1-SQL-SERVER-2000"><a href="#5-1-1-SQL-SERVER-2000" class="headerlink" title="5.1.1. SQL SERVER 2000"></a>5.1.1. SQL SERVER 2000</h4><h5 id="5-1-1-1-列出最初導致一連串其它處理序被鎖住的起始源頭"><a href="#5-1-1-1-列出最初導致一連串其它處理序被鎖住的起始源頭" class="headerlink" title="5.1.1.1. 列出最初導致一連串其它處理序被鎖住的起始源頭"></a>5.1.1.1. 列出最初導致一連串其它處理序被鎖住的起始源頭</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">IF <span class="keyword">EXISTS</span>(<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> master.dbo.sysprocesses <span class="keyword">WHERE</span> spid <span class="keyword">in</span> (<span class="keyword">SELECT</span> blocked <span class="keyword">FROM</span> master.dbo.sysprocesses))</span><br><span class="line"> <span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">SELECT</span> spid 處理序, status 狀態</span><br><span class="line">  , 登入帳號<span class="operator">=</span><span class="built_in">SUBSTRING</span>(SUSER_SNAME(sid), <span class="number">1</span>, <span class="number">30</span>)</span><br><span class="line">  , 使用者機器名稱<span class="operator">=</span><span class="built_in">SUBSTRING</span>(hostname, <span class="number">1</span>, <span class="number">12</span>)</span><br><span class="line">  , 是否鎖住<span class="operator">=</span><span class="keyword">CONVERT</span>(<span class="type">char</span>(<span class="number">3</span>), blocked)</span><br><span class="line">  , 資料庫名稱<span class="operator">=</span><span class="built_in">SUBSTRING</span>(DB_NAME(dbid), <span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line">  , cmd 命令, waittype 等待類型</span><br><span class="line">  <span class="keyword">FROM</span> master.dbo.sysprocesses</span><br><span class="line">  <span class="comment">--找出鎖住別(自己未被鎖住(blocked=0) 但在別的處理序中blocked欄位出現的值)</span></span><br><span class="line">  <span class="keyword">WHERE</span> spid <span class="keyword">IN</span> (<span class="keyword">SELECT</span> blocked <span class="keyword">FROM</span> master.dbo.sysprocesses)</span><br><span class="line">  <span class="keyword">AND</span> blocked <span class="operator">=</span> <span class="number">0</span></span><br><span class="line"> <span class="keyword">END</span></span><br><span class="line"><span class="keyword">ELSE</span></span><br><span class="line"> <span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">SELECT</span> <span class="string">&#x27;沒有處理序被鎖住&#x27;</span></span><br><span class="line"> <span class="keyword">END</span></span><br></pre></td></tr></table></figure>



<h4 id="5-1-2-SQL-SERVER-2008"><a href="#5-1-2-SQL-SERVER-2008" class="headerlink" title="5.1.2. SQL SERVER 2008"></a>5.1.2. SQL SERVER 2008</h4><h5 id="5-1-2-1-找出最耗用IO的語法"><a href="#5-1-2-1-找出最耗用IO的語法" class="headerlink" title="5.1.2.1. 找出最耗用IO的語法"></a>5.1.2.1. 找出最耗用IO的語法</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TOP <span class="number">10</span></span><br><span class="line">total_logical_reads,</span><br><span class="line">total_logical_writes,</span><br><span class="line">execution_count,</span><br><span class="line">total_logical_reads<span class="operator">+</span>total_logical_writes <span class="keyword">AS</span> [IO_total],</span><br><span class="line">st.text <span class="keyword">AS</span> query_text,</span><br><span class="line">db_name(st.dbid) <span class="keyword">AS</span> database_name,</span><br><span class="line">st.objectid <span class="keyword">AS</span> object_id</span><br><span class="line"><span class="keyword">FROM</span> sys.dm_exec_query_stats qs</span><br><span class="line"><span class="keyword">CROSS</span> APPLY sys.dm_exec_sql_text(sql_handle) st</span><br><span class="line"><span class="keyword">WHERE</span> total_logical_reads<span class="operator">+</span>total_logical_writes<span class="operator">&gt;</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> [IO_total] <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure>



<h5 id="5-1-2-2-列出目前最耗用CPU的前50個查詢"><a href="#5-1-2-2-列出目前最耗用CPU的前50個查詢" class="headerlink" title="5.1.2.2. 列出目前最耗用CPU的前50個查詢"></a>5.1.2.2. 列出目前最耗用CPU的前50個查詢</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  TOP <span class="number">50</span></span><br><span class="line">qs.total_worker_time <span class="operator">/</span> qs.execution_count <span class="keyword">AS</span>[Avg CPU <span class="type">Time</span>],</span><br><span class="line"><span class="built_in">SUBSTRING</span>(qt.text, qs.statement_start_offset <span class="operator">/</span> <span class="number">2</span>,</span><br><span class="line">(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> qs.statement_end_offset <span class="operator">=</span> <span class="number">-1</span> <span class="keyword">THEN</span> len(<span class="keyword">CONVERT</span> (NVARCHAR (MAX), qt.text)) <span class="operator">*</span> <span class="number">2</span></span><br><span class="line"><span class="keyword">ELSE</span> qs.statement_end_offset <span class="keyword">END</span> <span class="operator">-</span> qs.statement_start_offset) <span class="operator">/</span> <span class="number">2</span>) <span class="keyword">AS</span> query_text,</span><br><span class="line">qt.dbid,</span><br><span class="line">qt.objectid</span><br><span class="line"><span class="keyword">FROM</span>     sys.dm_exec_query_stats <span class="keyword">AS</span> qs</span><br><span class="line"><span class="keyword">CROSS</span> APPLY sys.dm_exec_sql_text (qs.sql_handle) <span class="keyword">AS</span> qt</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> [Avg CPU <span class="type">Time</span>] <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>



<h5 id="5-1-2-3-列出目前最耗用Worker-Time的前50個查詢"><a href="#5-1-2-3-列出目前最耗用Worker-Time的前50個查詢" class="headerlink" title="5.1.2.3. 列出目前最耗用Worker Time的前50個查詢"></a>5.1.2.3. 列出目前最耗用Worker Time的前50個查詢</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>   TOP <span class="number">50</span> <span class="built_in">sum</span>(qs.total_worker_time) <span class="keyword">AS</span> total_cpu_time,</span><br><span class="line"><span class="built_in">sum</span>(qs.execution_count) <span class="keyword">AS</span> total_execution_count,</span><br><span class="line"><span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">AS</span> <span class="string">&#x27;#_statements&#x27;</span>,</span><br><span class="line">qt.dbid,</span><br><span class="line">qt.objectid,</span><br><span class="line">qs.sql_handle,</span><br><span class="line">qt.[text]</span><br><span class="line"><span class="keyword">FROM</span>     sys.dm_exec_query_stats <span class="keyword">AS</span> qs</span><br><span class="line"><span class="keyword">CROSS</span> APPLY sys.dm_exec_sql_text (qs.sql_handle) <span class="keyword">AS</span> qt</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> qt.dbid, qt.objectid, qs.sql_handle, qt.[text]</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="built_in">sum</span>(qs.total_worker_time) <span class="keyword">DESC</span>, qs.sql_handle;</span><br></pre></td></tr></table></figure>



<h5 id="5-1-2-4-取得-SQL-Server-資料庫正在執行的-T-SQL-指令與詳細資訊"><a href="#5-1-2-4-取得-SQL-Server-資料庫正在執行的-T-SQL-指令與詳細資訊" class="headerlink" title="5.1.2.4. 取得 SQL Server 資料庫正在執行的 T-SQL 指令與詳細資訊"></a>5.1.2.4. 取得 SQL Server 資料庫正在執行的 T-SQL 指令與詳細資訊</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>      r.scheduler_id <span class="keyword">as</span> 排程器識別碼,</span><br><span class="line">            status         <span class="keyword">as</span> 要求的狀態,</span><br><span class="line">            r.session_id   <span class="keyword">as</span> SPID,</span><br><span class="line">            r.blocking_session_id <span class="keyword">as</span> BlkBy,</span><br><span class="line">            <span class="built_in">substring</span>(</span><br><span class="line">				ltrim(q.text),</span><br><span class="line">				r.statement_start_offset<span class="operator">/</span><span class="number">2</span><span class="operator">+</span><span class="number">1</span>,</span><br><span class="line">				(<span class="keyword">CASE</span></span><br><span class="line">                 <span class="keyword">WHEN</span> r.statement_end_offset <span class="operator">=</span> <span class="number">-1</span></span><br><span class="line">                 <span class="keyword">THEN</span> LEN(<span class="keyword">CONVERT</span>(nvarchar(MAX), q.text)) <span class="operator">*</span> <span class="number">2</span></span><br><span class="line">                 <span class="keyword">ELSE</span> r.statement_end_offset</span><br><span class="line">                 <span class="keyword">END</span> <span class="operator">-</span> r.statement_start_offset)<span class="operator">/</span><span class="number">2</span>)</span><br><span class="line">                 <span class="keyword">AS</span> [正在執行的 T<span class="operator">-</span><span class="keyword">SQL</span> 命令],</span><br><span class="line">            r.cpu_time      <span class="keyword">as</span> [CPU <span class="type">Time</span>(ms)],</span><br><span class="line">            r.start_time    <span class="keyword">as</span> [開始時間],</span><br><span class="line">            r.total_elapsed_time <span class="keyword">as</span> [執行總時間],</span><br><span class="line">            r.reads              <span class="keyword">as</span> [讀取數],</span><br><span class="line">            r.writes             <span class="keyword">as</span> [寫入數],</span><br><span class="line">            r.logical_reads      <span class="keyword">as</span> [邏輯讀取數],</span><br><span class="line">            <span class="comment">-- q.text, /* 完整的 T-SQL 指令碼 */</span></span><br><span class="line">            d.name               <span class="keyword">as</span> [資料庫名稱]</span><br><span class="line"><span class="keyword">FROM</span>        sys.dm_exec_requests r </span><br><span class="line">			<span class="keyword">CROSS</span> APPLY sys.dm_exec_sql_text(sql_handle) <span class="keyword">AS</span> q</span><br><span class="line">			<span class="keyword">LEFT</span> <span class="keyword">JOIN</span> sys.databases d <span class="keyword">ON</span> (r.database_id<span class="operator">=</span>d.database_id)</span><br><span class="line"><span class="keyword">WHERE</span>       r.session_id <span class="operator">&gt;</span> <span class="number">50</span> <span class="keyword">AND</span> r.session_id <span class="operator">&lt;&gt;</span> @<span class="variable">@SPID</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span>    r.total_elapsed_time <span class="keyword">desc</span></span><br></pre></td></tr></table></figure>



<h5 id="5-1-2-5-找出來因為封鎖-Blocked-Lock-造成的等待時間、被封鎖的連線等等之相關資訊。"><a href="#5-1-2-5-找出來因為封鎖-Blocked-Lock-造成的等待時間、被封鎖的連線等等之相關資訊。" class="headerlink" title="5.1.2.5. 找出來因為封鎖(Blocked Lock)造成的等待時間、被封鎖的連線等等之相關資訊。"></a>5.1.2.5. 找出來因為封鎖(Blocked Lock)造成的等待時間、被封鎖的連線等等之相關資訊。</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> session_id N<span class="string">&#x27;工作階段識別碼&#x27;</span>,status N<span class="string">&#x27;要求的狀態&#x27;</span>,</span><br><span class="line">command N<span class="string">&#x27;目前所處理命令的類型&#x27;</span>,blocking_session_id N<span class="string">&#x27;封鎖要求之工作階段的識別碼&#x27;</span> ,</span><br><span class="line">wait_type N<span class="string">&#x27;被封鎖的等候類型&#x27;</span>,wait_time N<span class="string">&#x27;等候的持續時間&#x27;</span>,</span><br><span class="line">wait_resource N<span class="string">&#x27;目前等候的資源&#x27;</span>,transaction_id N<span class="string">&#x27;要求執行所在交易的識別碼&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> sys.dm_exec_requests</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="number">1</span> <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure>



<h3 id="5-2-踢掉所有用戶"><a href="#5-2-踢掉所有用戶" class="headerlink" title="5.2. 踢掉所有用戶"></a>5.2. 踢掉所有用戶</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use master</span><br><span class="line"><span class="keyword">ALTER</span> DATABASE YourDatabase <span class="keyword">SET</span> SINGLE_USER <span class="keyword">WITH</span> <span class="keyword">ROLLBACK</span> IMMEDIATE </span><br></pre></td></tr></table></figure>



<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> DATABASE YourDatabase <span class="keyword">SET</span> MULTI_USER</span><br></pre></td></tr></table></figure>



<h3 id="5-3-清LOG"><a href="#5-3-清LOG" class="headerlink" title="5.3. 清LOG"></a>5.3. 清LOG</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">BACKUP LOG DSC_CRM_SP <span class="keyword">WITH</span> TRUNCATE_ONLY</span><br><span class="line">DBCC SHRINKFILE (<span class="string">&#x27;DSC_CRM_SP_Log&#x27;</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">DBCC SHRINKFILE (<span class="string">&#x27;DSC_CRM_SP_Log&#x27;</span> ,<span class="number">0</span>,TRUNCATEONLY) </span><br><span class="line"></span><br><span class="line">USE DSC_CRM_TEST</span><br><span class="line">CHECKPOINT</span><br><span class="line">DBCC SHRINKFILE(<span class="number">2</span>, <span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">BACKUP LOG [DSC_CRM_TEST] <span class="keyword">WITH</span> TRUNCATE_ONLY;</span><br><span class="line">DBCC SHRINKFILE ([DSC_CRM_TEST_Log],<span class="number">500</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> DATABASE DSC_CRM_SP <span class="keyword">SET</span> RECOVERY SIMPLE <span class="keyword">WITH</span> NO_WAIT</span><br><span class="line">DBCC SHRINKFILE(DSC_CRM_SP_Log, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">ALTER</span> DATABASE DSC_CRM_SP <span class="keyword">SET</span> RECOVERY <span class="keyword">FULL</span> <span class="keyword">WITH</span> NO_WAIT</span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line">BACKUP LOG [Quiz] <span class="keyword">WITH</span> TRUNCATE_ONLY;</span><br><span class="line">DBCC SHRINKFILE ([Quiz_Log],<span class="number">500</span>);</span><br></pre></td></tr></table></figure>





<h3 id="5-4-查詢table使用空間"><a href="#5-4-查詢table使用空間" class="headerlink" title="5.4. 查詢table使用空間"></a>5.4. 查詢table使用空間</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> NOCOUNT <span class="keyword">ON</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">--http://msdn.microsoft.com/zh-tw/library/ms188414.aspx</span></span><br><span class="line"><span class="comment">--更新目前資料庫中之所有物件的頁面及 (或) 資料列計數</span></span><br><span class="line">DBCC UPDATEUSAGE(<span class="number">0</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">-- DB size.</span></span><br><span class="line"><span class="keyword">EXEC</span> sp_spaceused</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Table row counts and sizes.</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> #t </span><br><span class="line">( </span><br><span class="line">    [name] NVARCHAR(<span class="number">128</span>),</span><br><span class="line">    [<span class="keyword">rows</span>] <span class="type">CHAR</span>(<span class="number">11</span>),</span><br><span class="line">    reserved <span class="type">VARCHAR</span>(<span class="number">18</span>), </span><br><span class="line">    data <span class="type">VARCHAR</span>(<span class="number">18</span>), </span><br><span class="line">    index_size <span class="type">VARCHAR</span>(<span class="number">18</span>),</span><br><span class="line">    unused <span class="type">VARCHAR</span>(<span class="number">18</span>)</span><br><span class="line">) </span><br><span class="line"> </span><br><span class="line"><span class="comment">--把每個Table使用的資訊存到#t之中</span></span><br><span class="line"><span class="keyword">INSERT</span> #t <span class="keyword">EXEC</span> sys.sp_MSforeachtable <span class="string">&#x27;EXEC sp_spaceused &#x27;&#x27;?&#x27;&#x27;&#x27;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">--依使用空間較大的依序排列並顯示MB</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">, LTRIM(STR(<span class="built_in">CAST</span>(<span class="keyword">LEFT</span>(reserved,LEN(reserved)<span class="number">-3</span>) <span class="keyword">AS</span> <span class="type">NUMERIC</span>(<span class="number">18</span>,<span class="number">0</span>)) <span class="operator">/</span> <span class="number">1024</span>, <span class="number">18</span>)) <span class="operator">+</span> <span class="string">&#x27;MB&#x27;</span> <span class="keyword">AS</span> reservedSize_M</span><br><span class="line">, LTRIM(STR(<span class="built_in">CAST</span>(<span class="keyword">LEFT</span>(data,LEN(data)<span class="number">-3</span>) <span class="keyword">AS</span> <span class="type">NUMERIC</span>(<span class="number">18</span>,<span class="number">0</span>)) <span class="operator">/</span> <span class="number">1024</span>, <span class="number">18</span>)) <span class="operator">+</span> <span class="string">&#x27;MB&#x27;</span> <span class="keyword">AS</span> dataSize_M</span><br><span class="line">, LTRIM(STR(<span class="built_in">CAST</span>(<span class="keyword">LEFT</span>(index_size,LEN(index_size)<span class="number">-3</span>) <span class="keyword">AS</span> <span class="type">NUMERIC</span>(<span class="number">18</span>,<span class="number">0</span>)) <span class="operator">/</span> <span class="number">1024</span>, <span class="number">18</span>)) <span class="operator">+</span> <span class="string">&#x27;MB&#x27;</span> <span class="keyword">AS</span> indexSize_M</span><br><span class="line"><span class="keyword">FROM</span> #t</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="built_in">CAST</span>(<span class="keyword">LEFT</span>(data,LEN(data)<span class="number">-3</span>) <span class="keyword">AS</span> <span class="type">NUMERIC</span>(<span class="number">18</span>,<span class="number">0</span>)) <span class="keyword">DESC</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 顯示總共筆數及總共使用資訊</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(<span class="built_in">CAST</span>([<span class="keyword">rows</span>] <span class="keyword">AS</span> <span class="type">int</span>)) <span class="keyword">AS</span> [<span class="keyword">rows</span>]</span><br><span class="line">, LTRIM(STR(<span class="built_in">SUM</span>(<span class="built_in">CAST</span>(<span class="keyword">LEFT</span>(reserved,LEN(reserved)<span class="number">-3</span>) <span class="keyword">AS</span> <span class="type">NUMERIC</span>(<span class="number">18</span>,<span class="number">0</span>))) <span class="operator">/</span> <span class="number">1024</span>, <span class="number">18</span>)) <span class="operator">+</span> <span class="string">&#x27;MB&#x27;</span> <span class="keyword">AS</span> sumOfreservedSize_M</span><br><span class="line">, LTRIM(STR(<span class="built_in">SUM</span>(<span class="built_in">CAST</span>(<span class="keyword">LEFT</span>(data,LEN(data)<span class="number">-3</span>) <span class="keyword">AS</span> <span class="type">NUMERIC</span>(<span class="number">18</span>,<span class="number">0</span>))) <span class="operator">/</span> <span class="number">1024</span>, <span class="number">18</span>)) <span class="operator">+</span> <span class="string">&#x27;MB&#x27;</span> <span class="keyword">AS</span> sumOfdataSize_M</span><br><span class="line">, LTRIM(STR(<span class="built_in">SUM</span>(<span class="built_in">CAST</span>(<span class="keyword">LEFT</span>(index_size,LEN(index_size)<span class="number">-3</span>) <span class="keyword">AS</span> <span class="type">NUMERIC</span>(<span class="number">18</span>,<span class="number">0</span>))) <span class="operator">/</span> <span class="number">1024</span>, <span class="number">18</span>)) <span class="operator">+</span> <span class="string">&#x27;MB&#x27;</span> <span class="keyword">AS</span> sumOfindexSize_M</span><br><span class="line"><span class="keyword">FROM</span> #t</span><br><span class="line"> </span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> #t </span><br></pre></td></tr></table></figure>





<h2 id="6-複寫機制"><a href="#6-複寫機制" class="headerlink" title="6. 複寫機制"></a>6. 複寫機制</h2><h2 id="7-SQL-Profile"><a href="#7-SQL-Profile" class="headerlink" title="7. SQL Profile"></a>7. SQL Profile</h2><h2 id="8-效能ISSUE"><a href="#8-效能ISSUE" class="headerlink" title="8. 效能ISSUE"></a>8. 效能ISSUE</h2><h2 id="9-資料庫維護計劃"><a href="#9-資料庫維護計劃" class="headerlink" title="9. 資料庫維護計劃"></a>9. 資料庫維護計劃</h2><h2 id="10-SSDT"><a href="#10-SSDT" class="headerlink" title="10. SSDT"></a>10. SSDT</h2><h2 id="11-ETL"><a href="#11-ETL" class="headerlink" title="11. ETL"></a>11. ETL</h2><p><img src="https://i.imgur.com/flMV4Ze.png" alt="img"></p>
<p>ETL 真的沒啥好介紹的，概念真的太簡單好懂。</p>
<ul>
<li>Extract: 把資料從某個地方拿出來。</li>
<li>Transform: 將資料作轉換。</li>
<li>Load: 湊數的一步，把轉換完的資料丟到某個地方。</li>
</ul>
<p>ETL 之所以必要在於，原始資料通常不適合拿來直接使用的。原因在於：</p>
<ul>
<li>原始資料量太大：通常前端在收資料的時候，都會使用比較鬆散的事件格式，像是 JSON，也通常不會做壓縮。這樣在計算時需要消耗較多的資源，也會影響計算速度。所以通常在使用之前會做最基本的壓縮和格式最佳化。</li>
<li>資料不乾淨：通常資料前端收進來的時候，如果沒有處理好，會遇到很多奇怪的狀況，「Garbage in、garbase out」所以確保資料的品質非常重要。比較基本的像是格式、數值範圍，更複雜的一點包括欄位統計值甚至邏輯等等。</li>
<li>比較複雜的 Aggregation：資料是隨著事件進來，但是使用上可能會以每小時、每天為單位來進行分析或計算。如果每次畫報表都必須從最原始的資料開始算，會消耗大量計算資源，而且 SQL 或計算也會非常複雜，所以一般來說都會先將原始資料聚合成一些時間粒度稍微「粗」一點的資料，才會來做後續應用。</li>
</ul>
<p>以下從網路上找幾個應用範例：</p>
<h3 id="11-1-標準的清理資料流程"><a href="#11-1-標準的清理資料流程" class="headerlink" title="11.1. 標準的清理資料流程"></a>11.1. 標準的清理資料流程</h3><p><img src="https://i.imgur.com/FwDGYTJ.png" alt="img"></p>
<p>一般來說，資料在進入 Data Warehouse 前，都必須經過這幾個階段，才能供後續業務報表或是視覺化使用。算是基本起手式吧。</p>
<h3 id="11-2-在不同層（Layer）的資料之間作轉換"><a href="#11-2-在不同層（Layer）的資料之間作轉換" class="headerlink" title="11.2. 在不同層（Layer）的資料之間作轉換"></a>11.2. 在不同層（Layer）的資料之間作轉換</h3><p><img src="https://i.imgur.com/SD2FU05.png" alt="img"></p>
<p>資料傳送到後端後，會經過 ETL 放到 Staging 環境、再透過 ETL 放到 DW、再透過 ETL 整理到了 Data Mart 給 End User 使用。當原始資料越複雜、資料量越多，中間就更需要多層次的處理來確保資料品質以及使用上的效能。</p>
<h3 id="11-3-Streaming-ETL"><a href="#11-3-Streaming-ETL" class="headerlink" title="11.3. Streaming ETL"></a>11.3. Streaming ETL</h3><p><img src="https://i.imgur.com/b6qLKHt.jpg" alt="img"></p>
<p>當然除了 Batch ETL 外，Streaming ETL 也是有的。可以根據事件、或是 mini batch 的方式來處理原始資料，配合 Batch Process 來處理累積的資料。</p>
<p>總之 ETL 是個很廣泛的領域，不僅僅是「資料處理」四個字而已。還需要考量到軟硬體架構、商務邏輯、後續的使用才能設計最適合的 ETL 流程。</p>
<h2 id="12-參考連結"><a href="#12-參考連結" class="headerlink" title="12. 參考連結"></a>12. 參考連結</h2><p><a href="https://medium.com/bryanyang0528/data-data-pipeline-101-%E4%BA%8C-stage-%E5%92%8C-job-287d0e9be9f2?source=your_stories_page---------------------------">Data Data Pipeline 101（三）—ETL</a></p>
<p><a href="https://dotblogs.com.tw/mis2000lab/2014/06/12/sql-server-trigger">SQL ServerTrigger的簡單範例，以「訂單的流程系統」為例</a></p>
]]></content>
      <categories>
        <category>SQLSERVER</category>
      </categories>
      <tags>
        <tag>SQLSERVER</tag>
      </tags>
  </entry>
  <entry>
    <title>Neor Profile Sql</title>
    <url>/2021/08/17/2021-08-17%20Neor%20Profile%20Sql/</url>
    <content><![CDATA[<p><a href="https://www.profilesql.com/">Neor Profile Sql download</a></p>
<p>啟動之後的畫面如下<br><img src="https://i.imgur.com/fNbMr4m.png"></p>
<p>關係圖如下</p>
<p><img src="https://i.imgur.com/r7w57C3.png"></p>
<span id="more"></span>


<h2 id="1-軟體設定"><a href="#1-軟體設定" class="headerlink" title="1. 軟體設定"></a>1. 軟體設定</h2><p>通常MYSQL的預設PORT是3306<br>因此在這個軟體設為3306</p>
<h2 id="2-PHP的程式資料庫設定"><a href="#2-PHP的程式資料庫設定" class="headerlink" title="2. PHP的程式資料庫設定"></a>2. PHP的程式資料庫設定</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$GLOBALS[&#x27;db&#x27;] = new db(&#x27;mysql:host=localhost;dbname=exam2018;port=4040&#x27;,&#x27;root&#x27;,&#x27;1234&#x27;);</span><br></pre></td></tr></table></figure>

<h2 id="3-參考畫面"><a href="#3-參考畫面" class="headerlink" title="3. 參考畫面"></a>3. 參考畫面</h2><p><img src="https://i.imgur.com/UeJ2Mgy.png"></p>
<p><img src="https://i.imgur.com/fLdU9Lz.png"></p>
<p><img src="https://i.imgur.com/ymVWE6r.png"></p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>SQL Profile</tag>
        <tag>軟體工具</tag>
      </tags>
  </entry>
  <entry>
    <title>單元測試JEST</title>
    <url>/2021/08/20/2021-08-20%20%E5%96%AE%E5%85%83%E6%B8%AC%E8%A9%A6JEST/</url>
    <content><![CDATA[<h2 id="1-測試的差異"><a href="#1-測試的差異" class="headerlink" title="1. 測試的差異"></a>1. 測試的差異</h2><ul>
<li>Unit 測試成本最低、速度最快</li>
<li>UI測試成本最高、速度最慢</li>
<li>E2E test 看起來跟selumium 滿像的，它還有儲檔截圖的概念，屬於使用UI的方式進行測試</li>
</ul>
<p><img src="https://i.imgur.com/Twzvwe4.png" alt="image-20210715153138009"></p>
<span id="more"></span>



<p><code>puppeteer</code> 這個套件 是以UI的方式進行測試，要寫DOM元素來模擬填寫資料</p>
<p><img src="https://i.imgur.com/ND2kiHi.png" alt="image-20210715171502770"></p>
<h3 id="1-1-如何導入UNIT-TEST"><a href="#1-1-如何導入UNIT-TEST" class="headerlink" title="1.1. 如何導入UNIT TEST"></a>1.1. 如何導入UNIT TEST</h3><ul>
<li>情境描述</li>
<li><strong>測試的目標</strong>為何</li>
<li><strong>導入要測試的函式</strong></li>
<li><strong>測試的期望</strong>是什麼</li>
</ul>
<p><img src="https://i.imgur.com/1wl6idM.png" alt="image-20210715160413550"></p>
<h3 id="1-2-安裝JEST"><a href="#1-2-安裝JEST" class="headerlink" title="1.2. 安裝JEST"></a>1.2. 安裝JEST</h3><p>npm init ，建立一個空的package 管理</p>
<p><img src="https://i.imgur.com/rebkBba.png" alt="image-20210715164624123"></p>
<p>VSCode 套件，這個套件可以即時存檔的時候，在function 前面立即有綠勾或紅叉，告訴你這個測試結果是否通過。</p>
<p><img src="https://i.imgur.com/MvygGlJ.png" alt="image-20210715165151962"></p>
<h3 id="1-3-JEST-測試開發"><a href="#1-3-JEST-測試開發" class="headerlink" title="1.3. JEST 測試開發"></a>1.3. JEST 測試開發</h3><h4 id="1-3-1-測試流程"><a href="#1-3-1-測試流程" class="headerlink" title="1.3.1. 測試流程"></a>1.3.1. 測試流程</h4><ol>
<li>定義一段函式並匯出</li>
<li>定義.test測試檔案，並匯入上方函式</li>
<li>驗證結果</li>
</ol>
<p>筆記：使用node js 方式把 js export 出去</p>
<p><img src="https://i.imgur.com/ElQItBc.png" alt="image-20210715164712315"></p>
<p>筆記：再使用require 方式引入</p>
<p><img src="https://i.imgur.com/Tw37OVs.png" alt="image-20210715164747521"></p>
<p><img src="https://i.imgur.com/4LVAXFV.png" alt="image-20210715161350226"></p>
<h4 id="1-3-2-JEST-IO-Docs"><a href="#1-3-2-JEST-IO-Docs" class="headerlink" title="1.3.2. JEST IO Docs"></a>1.3.2. JEST IO Docs</h4><p><img src="https://i.imgur.com/b3tNzFI.png" alt="image-20210715161637847"></p>
<h4 id="1-3-3-相關測試函式"><a href="#1-3-3-相關測試函式" class="headerlink" title="1.3.3. 相關測試函式"></a>1.3.3. 相關測試函式</h4><p><img src="https://i.imgur.com/gH05LFE.png" alt="image-20210715165433056"></p>
<p><img src="https://i.imgur.com/QQRb6IA.png" alt="image-20210715165523555"></p>
<h5 id="1-3-3-1-驗證物件內容是否正確"><a href="#1-3-3-1-驗證物件內容是否正確" class="headerlink" title="1.3.3.1. 驗證物件內容是否正確"></a>1.3.3.1. 驗證物件內容是否正確</h5><p>物件本是是參考位置的概念，所以如果要驗證物件的內容是否相同可以使用<code>toEqual</code>方法，這個屬於深複製方式進行每一個key、value驗證</p>
<p><img src="https://i.imgur.com/1nRZOsJ.png" alt="image-20210715163557279"></p>
<h5 id="1-3-3-2-陣列是否包含特定值"><a href="#1-3-3-2-陣列是否包含特定值" class="headerlink" title="1.3.3.2. 陣列是否包含特定值"></a>1.3.3.2. 陣列是否包含特定值</h5><p><img src="https://i.imgur.com/VlThzeZ.png" alt="image-20210715163645518"></p>
<p><img src="https://i.imgur.com/YBzZAFR.png" alt="image-20210715163706990"></p>
<h5 id="1-3-3-3-數值必須大於300"><a href="#1-3-3-3-數值必須大於300" class="headerlink" title="1.3.3.3. 數值必須大於300"></a>1.3.3.3. 數值必須大於300</h5><p><img src="https://i.imgur.com/bpVPJ3w.png" alt="image-20210715163752310"></p>
<h5 id="1-3-3-4-正規表達式email-驗證"><a href="#1-3-3-4-正規表達式email-驗證" class="headerlink" title="1.3.3.4. 正規表達式email 驗證"></a>1.3.3.4. 正規表達式email 驗證</h5><p><img src="https://i.imgur.com/iaChTFI.png" alt="image-20210715163827033"></p>
<h5 id="1-3-3-5-describe-是一個群組的概念"><a href="#1-3-3-5-describe-是一個群組的概念" class="headerlink" title="1.3.3.5. describe 是一個群組的概念"></a>1.3.3.5. describe 是一個群組的概念</h5><p><img src="https://i.imgur.com/J2jbiHQ.png" alt="image-20210715163849282"></p>
<p>我們可以看到使用npm run test 有群組的訊息分類</p>
<p><img src="https://i.imgur.com/7W6Jc42.png" alt="image-20210715164302007"></p>
<h5 id="1-3-3-6-非同步測試"><a href="#1-3-3-6-非同步測試" class="headerlink" title="1.3.3.6. 非同步測試"></a>1.3.3.6. 非同步測試</h5><p><img src="https://i.imgur.com/xAzfBgj.png" alt="image-20210715170005601"></p>
<p><img src="https://i.imgur.com/8I1ZWRK.png" alt="image-20210715170654309"></p>
<p><img src="https://i.imgur.com/pXVZK7e.png" alt="image-20210715170552237"></p>
<p>以下兩個測試都是一樣的結果，使用<code>expct.assertions(1)</code> ，這個是一個斷言的東西，告訴程式非同步的等待會有幾個</p>
<p><img src="https://i.imgur.com/cOsufGR.png" alt="image-20210715171030792"></p>
<p>使用<code>await</code> 代表要等到拿到資料之後，才會往下執行<code>57</code>行程式</p>
<p><img src="https://i.imgur.com/GYnh3a8.png" alt="image-20210715171103015"></p>
]]></content>
      <categories>
        <category>JEST</category>
      </categories>
      <tags>
        <tag>單元測試</tag>
        <tag>JEST</tag>
      </tags>
  </entry>
  <entry>
    <title>軟體測試種類</title>
    <url>/2021/08/20/2021-08-20%20%E8%BB%9F%E9%AB%94%E6%B8%AC%E8%A9%A6%E7%A8%AE%E9%A1%9E/</url>
    <content><![CDATA[<p><img src="https://i.imgur.com/PMB1jqi.png"></p>
<p><img src="https://i.imgur.com/BJ6f941.png"></p>
<span id="more"></span>


<h2 id="1-單元測試"><a href="#1-單元測試" class="headerlink" title="1. 單元測試"></a>1. 單元測試</h2><p>最小單位、測試範圍小、測試速度快</p>
<ul>
<li>越是符合SOLID的架構則Unit Test越好寫</li>
</ul>
<h3 id="1-1-舉例"><a href="#1-1-舉例" class="headerlink" title="1.1. 舉例"></a>1.1. 舉例</h3><p>最小單位在實際的角度來說，不同場點嚴謹有不同做法。</p>
<p>舉例來說，以class為最小單位，那我們就針對每個method去做測試，看class method 是否符合他的文件(method comment)所說的功能</p>
<h2 id="2-整合測試"><a href="#2-整合測試" class="headerlink" title="2. 整合測試"></a>2. 整合測試</h2><p>測試範圍介於單元測試與E2E測試之間</p>
<p>測試速度慢</p>
<p>多個單元互相整合再一起做測試。主要針對不同模組互動下去做測試</p>
<p>需要準備更完整的模擬環境來完成測試工作</p>
<p>可以針對必要的咚咚去做整合測試即可</p>
<p><img src="https://i.imgur.com/sYNrj7s.png"></p>
<h3 id="2-1-舉例"><a href="#2-1-舉例" class="headerlink" title="2.1. 舉例"></a>2.1. 舉例</h3><p>資料庫連接的部分是一個模組</p>
<p>而讀取資料庫的資料進來說，做一些商業邏輯的部分又是另一個模組</p>
<p>我們想針對這兩個模組的互動去做測試，看看他們的互動後會不會產生各種奇琶結果。</p>
<p>測試案例成為整合測試的關鍵點是：<strong>測試案例是否包含與外部環境交互的邏輯</strong>，如時間、Session、Cookie、資料庫，硬體，網路等等不受程式控制的因素。</p>
<p>簡單來說，若測試案例無與外部環境交互的邏輯，則可以將測試案例視為單元測試：<br><img src="https://i.imgur.com/Ykr3j6R.png" alt="單元測試只與系統內部的程式交互"></p>
<p>反之，若測試案例中包含與外部環境交互的邏輯，那麼這個測試案例就是一個整合測試：<br><img src="https://i.imgur.com/oP4wsp4.png" alt="整合測試會與外部環境交互"></p>
<h2 id="3-端對端測試"><a href="#3-端對端測試" class="headerlink" title="3. 端對端測試"></a>3. 端對端測試</h2><p>測試範圍大</p>
<p>以USER的角度去做測試，通常需要模擬最完整的環境去做測試</p>
<p>對選各種我寫的功能，看看這些功能是不是做了他們應該要做的事情</p>
<p>也就是針對User Interface使用者介面去做測試</p>
<p>目前的End to End 的framework很多</p>
<p>比較流行的有<a href="https://www.selenium.dev/">https://www.selenium.dev/</a></p>
<h2 id="4-寫測試須知"><a href="#4-寫測試須知" class="headerlink" title="4. 寫測試須知"></a>4. 寫測試須知</h2><ul>
<li>不是所有的程式都可以測試</li>
<li>實際寫過測試，才知道之前寫的code能不能被測試</li>
</ul>
<h2 id="5-如何命名測試function名稱"><a href="#5-如何命名測試function名稱" class="headerlink" title="5. 如何命名測試function名稱"></a>5. 如何命名測試function名稱</h2><ul>
<li>要被測試的方法名稱</li>
<li>測試的情境(input)</li>
<li>預期行為(output)</li>
</ul>
<p><img src="https://i.imgur.com/ywokryS.png"></p>
<h2 id="6-測試function的內容架構"><a href="#6-測試function的內容架構" class="headerlink" title="6. 測試function的內容架構"></a>6. 測試function的內容架構</h2><ul>
<li>準備</li>
<li>執行</li>
<li>驗證</li>
</ul>
<p><img src="https://i.imgur.com/OpE9DBL.png"></p>
<h2 id="7-什麼是好的測試"><a href="#7-什麼是好的測試" class="headerlink" title="7. 什麼是好的測試"></a>7. 什麼是好的測試</h2><p><img src="https://i.imgur.com/obzWkZw.png"></p>
<h2 id="8-應該避免的測試寫法"><a href="#8-應該避免的測試寫法" class="headerlink" title="8. 應該避免的測試寫法"></a>8. 應該避免的測試寫法</h2><p><img src="https://i.imgur.com/5cODxhM.png"></p>
<p><img src="https://i.imgur.com/zeJ10rJ.png"></p>
<p><img src="https://i.imgur.com/4fBUyLp.png"></p>
<h2 id="9-再提升一點"><a href="#9-再提升一點" class="headerlink" title="9. 再提升一點"></a>9. 再提升一點</h2><ul>
<li>同一個測試，用不同參數組合測試-參數化測試<ul>
<li>每個assert都要執行到(parameterized,self.subTest())</li>
</ul>
</li>
<li>搭配面對面的code review勝過100% 覆蓋率</li>
</ul>
<h3 id="9-1-參數化測試案例"><a href="#9-1-參數化測試案例" class="headerlink" title="9.1. 參數化測試案例"></a>9.1. 參數化測試案例</h3><p><img src="https://i.imgur.com/po2rKf9.png"></p>
<p><img src="https://i.imgur.com/Z6bHOLe.png"></p>
<h2 id="10-軟體工具"><a href="#10-軟體工具" class="headerlink" title="10. 軟體工具"></a>10. 軟體工具</h2><p>市面上現有的 E2E 框架非常多，知名的有 <a href="http://www.protractortest.org/">Protractor</a>、<a href="http://casperjs.org/">CasperJS</a>、<a href="http://nightwatchjs.org/">Nightwatch.js</a>、<a href="https://devexpress.github.io/testcafe/">Testcafe</a>、<a href="https://www.cypress.io/">Cypress</a> 等等。</p>
<h2 id="11-問題"><a href="#11-問題" class="headerlink" title="11. 問題"></a>11. 問題</h2><h3 id="11-1-何謂最小單位"><a href="#11-1-何謂最小單位" class="headerlink" title="11.1. 何謂最小單位"></a>11.1. 何謂最小單位</h3><h3 id="11-2-撰寫測試程式的價值"><a href="#11-2-撰寫測試程式的價值" class="headerlink" title="11.2. 撰寫測試程式的價值"></a>11.2. 撰寫測試程式的價值</h3><h3 id="11-3-誰該學單元測試"><a href="#11-3-誰該學單元測試" class="headerlink" title="11.3. 誰該學單元測試?"></a>11.3. 誰該學單元測試?</h3><h2 id="12-參考連結"><a href="#12-參考連結" class="headerlink" title="12. 參考連結"></a>12. 參考連結</h2><ul>
<li><a href="https://www.youtube.com/watch?v=QoR8xBcxuQs">單元測試(unit test)的心法</a></li>
<li><a href="https://www.youtube.com/watch?v=0bLBv5KL7aE">【 .NET 測試入門】#1 什麼是單元測試 &amp; 整合測試 &amp; 端對端測試？ | HiSKIO 程式語言線上教學</a></li>
<li><a href="https://blog.miniasp.com/post/2019/02/18/Unit-testing-Integration-testing-e2e-testing">一次搞懂單元測試、整合測試、端對端測試之間的差異</a></li>
<li><a href="https://wadehuanglearning.blogspot.com/2020/01/blog-post.html">探討單元測試和整合測試的涵蓋範圍</a></li>
<li><a href="https://progressbar.tw/posts/11">軟體上線就等於今晚不用回家? 學”單元測試”可能有辦法挽救您的婚姻</a></li>
</ul>
<h3 id="12-1-未看"><a href="#12-1-未看" class="headerlink" title="12.1. 未看"></a>12.1. 未看</h3><p><a href="http://www.tw511.com/24/276/9932.html">http://www.tw511.com/24/276/9932.html</a><br><a href="https://www.cnblogs.com/Neeo/articles/11809457.html">https://www.cnblogs.com/Neeo/articles/11809457.html</a></p>
<p><a href="https://jchu.cc/2018/08/16-test.html">https://jchu.cc/2018/08/16-test.html</a></p>
<p>[Day 01] 自動化測試最簡單也最困難</p>
<p><a href="https://ithelp.ithome.com.tw/articles/10214329">https://ithelp.ithome.com.tw/articles/10214329</a></p>
]]></content>
      <categories>
        <category>軟體測試</category>
      </categories>
      <tags>
        <tag>單元測試</tag>
        <tag>整合測試</tag>
        <tag>端對對測試</tag>
      </tags>
  </entry>
  <entry>
    <title>TestCafe 筆記</title>
    <url>/2021/08/28/2021-08-28%20TestCafe%20%E7%AD%86%E8%A8%98/</url>
    <content><![CDATA[<h2 id="1-介紹"><a href="#1-介紹" class="headerlink" title="1. 介紹"></a>1. 介紹</h2><p>官方</p>
<blockquote>
<p>A node.js tool to automate end-to-end web testing Write tests in JS or TypeScript, run them and view results</p>
</blockquote>
<p>基於 node.js 的自動化端對端測試工具</p>
<ol>
<li>Write tests with ease</li>
<li>Test in every browser that matters</li>
<li>Deploy without fear<ol>
<li>CI&#x2F;CD-ready</li>
<li>Concurrent test runs</li>
<li>If something goes wrong…</li>
</ol>
</li>
</ol>
 <span id="more"></span>




<p><a href="https://ithelp.ithome.com.tw/articles/10221559">[Day 11] 看見 TestCafe，又簡單又完整的工具鍊</a></p>
<blockquote>
<p>TestCafe 是筆者用過框架裡，支援最多<strong>作業系統</strong> 和 <strong>瀏覽器</strong> 的測試框架</p>
</blockquote>
<p><a href="https://testcafe.io/">官網</a></p>
<p><a href="https://www.letswrite.tw/testcafe-member-login/">https://www.letswrite.tw/testcafe-member-login/</a></p>
<p><a href="https://partypeopleland.github.io/artblog/2019/06/24/%E4%BD%BF%E7%94%A8testCafe%E5%81%9AE2E%E6%B8%AC%E8%A9%A6/">https://partypeopleland.github.io/artblog/2019/06/24/%E4%BD%BF%E7%94%A8testCafe%E5%81%9AE2E%E6%B8%AC%E8%A9%A6/</a></p>
<p><a href="https://www.youtube.com/watch?v=D7BfL1x5T2M">https://www.youtube.com/watch?v=D7BfL1x5T2M</a></p>
<p><a href="http://testingpai.com/article/1619681368102">http://testingpai.com/article/1619681368102</a></p>
<p><a href="http://testingpai.com/article/1600914326318">http://testingpai.com/article/1600914326318</a></p>
<p><a href="https://www.letswrite.tw/testcafe-settings/">https://www.letswrite.tw/testcafe-settings/</a></p>
<h2 id="2-安裝"><a href="#2-安裝" class="headerlink" title="2. 安裝"></a>2. 安裝</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g testcafe</span><br></pre></td></tr></table></figure>



<h2 id="3-起手式"><a href="#3-起手式" class="headerlink" title="3. 起手式"></a>3. 起手式</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Selector</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;testcafe&#x27;</span>; </span><br><span class="line"></span><br><span class="line">fixture <span class="string">`Getting Started`</span> </span><br><span class="line">    .<span class="property">page</span> <span class="string">`http://devexpress.github.io/testcafe/example`</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;HelloWorld test&#x27;</span>, <span class="keyword">async</span> t =&gt; &#123; </span><br><span class="line">    <span class="keyword">await</span> t</span><br><span class="line">        .<span class="title function_">typeText</span>(<span class="string">&#x27;#developer-name&#x27;</span>, <span class="string">&#x27;HelloWorld&#x27;</span>) </span><br><span class="line">        .<span class="title function_">click</span>(<span class="string">&#x27;#submit-button&#x27;</span>) </span><br><span class="line">        .<span class="title function_">expect</span>(<span class="title class_">Selector</span>(<span class="string">&#x27;#article-header&#x27;</span>).<span class="property">innerText</span>).<span class="title function_">eql</span>(<span class="string">&#x27;Thank you, HelloWorld!&#x27;</span>);        </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>





<h2 id="4-安裝後的執行錯誤"><a href="#4-安裝後的執行錯誤" class="headerlink" title="4. 安裝後的執行錯誤"></a>4. 安裝後的執行錯誤</h2><p>執行 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">testcafe chrome day01.js</span><br></pre></td></tr></table></figure>

<p>因為這個系統上已停用指令碼執行，所以無法載入 C:\Users\RESH\AppData\Roaming\npm\testcafe.ps1 檔案。如需詳細資訊，請參閱 about_Execution_Policies，網址為 https:&#x2F;go.<br>microsoft.com&#x2F;fwlink&#x2F;?LinkID&#x3D;135170。</p>
<p>開啟powershell ，請使用「系統管理員身份」執行。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Set-ExecutionPolicy</span> RemoteSigned</span><br></pre></td></tr></table></figure>

<p><a href="https://hsiangfeng.github.io/other/20200510/1067127387/">解決 Windows 上輸入指令出現「因為這個系統上已停用指令碼執行，所以無法載入…」的問題</a></p>
<h2 id="5-截圖功能"><a href="#5-截圖功能" class="headerlink" title="5. 截圖功能"></a>5. 截圖功能</h2><h3 id="5-1-全屏截圖"><a href="#5-1-全屏截圖" class="headerlink" title="5.1. 全屏截圖"></a>5.1. 全屏截圖</h3><p>放在你想要截圖的流程上</p>
<p>takeScreenshot() </p>
<p><code>test_members.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;測試_登入&#x27;</span>, <span class="keyword">async</span> t =&gt; &#123; </span><br><span class="line">    <span class="keyword">await</span> t</span><br><span class="line">        .<span class="title function_">typeText</span>(<span class="title class_">Member</span>.<span class="property">txtAccount</span>, <span class="string">&#x27;kite&#x27;</span>)</span><br><span class="line">        .<span class="title function_">typeText</span>(<span class="title class_">Member</span>.<span class="property">txtPassword</span>, <span class="string">&#x27;123456&#x27;</span>)       </span><br><span class="line">        .<span class="title function_">click</span>(<span class="title class_">Member</span>.<span class="property">btnLogin</span>)</span><br><span class="line">        .<span class="title function_">expect</span>(<span class="title class_">Selector</span>(<span class="string">&#x27;.dropdown-toggle&#x27;</span>).<span class="property">innerText</span>).<span class="title function_">contains</span>(<span class="string">&#x27;kite&#x27;</span>)</span><br><span class="line">        .<span class="title function_">takeScreenshot</span>();  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h3 id="5-2-局部截圖"><a href="#5-2-局部截圖" class="headerlink" title="5.2. 局部截圖"></a>5.2. 局部截圖</h3><p>takeElementScreenshot()</p>
<p><code>test_members.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;測試_登入&#x27;</span>, <span class="keyword">async</span> t =&gt; &#123; </span><br><span class="line">    <span class="keyword">await</span> t</span><br><span class="line">        .<span class="title function_">typeText</span>(<span class="title class_">Member</span>.<span class="property">txtAccount</span>, <span class="string">&#x27;kite&#x27;</span>)</span><br><span class="line">        .<span class="title function_">typeText</span>(<span class="title class_">Member</span>.<span class="property">txtPassword</span>, <span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line">        .<span class="title function_">takeElementScreenshot</span>(<span class="string">&#x27;#divLoginForm&#x27;</span>)   </span><br><span class="line">        .<span class="title function_">click</span>(<span class="title class_">Member</span>.<span class="property">btnLogin</span>)</span><br><span class="line">        .<span class="title function_">expect</span>(<span class="title class_">Selector</span>(<span class="string">&#x27;.dropdown-toggle&#x27;</span>).<span class="property">innerText</span>).<span class="title function_">contains</span>(<span class="string">&#x27;kite&#x27;</span>)</span><br><span class="line">        .<span class="title function_">takeScreenshot</span>();  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="5-3-錯誤才截圖"><a href="#5-3-錯誤才截圖" class="headerlink" title="5.3. 錯誤才截圖"></a>5.3. 錯誤才截圖</h3><p>這份code 裡面已經沒有<code>takescreenshot()</code> 囉，當發生錯誤的時候，會自動儲存照片</p>
<p><code>test_members.js</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;測試_登入&#x27;</span>, <span class="keyword">async</span> t =&gt; &#123; </span><br><span class="line">    <span class="keyword">await</span> t</span><br><span class="line">        .<span class="title function_">typeText</span>(<span class="title class_">Member</span>.<span class="property">txtAccount</span>, <span class="string">&#x27;kite&#x27;</span>)</span><br><span class="line">        .<span class="title function_">typeText</span>(<span class="title class_">Member</span>.<span class="property">txtPassword</span>, <span class="string">&#x27;123456&#x27;</span>)       </span><br><span class="line">        .<span class="title function_">click</span>(<span class="title class_">Member</span>.<span class="property">btnLogin</span>)</span><br><span class="line">        .<span class="title function_">expect</span>(<span class="title class_">Selector</span>(<span class="string">&#x27;.dropdown-toggle&#x27;</span>).<span class="property">innerText</span>).<span class="title function_">contains</span>(<span class="string">&#x27;kite&#x27;</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>指令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">testcafe chrome tests/test_members.js -s takeOnFails=true</span><br></pre></td></tr></table></figure>





<h2 id="6-全螢幕功能"><a href="#6-全螢幕功能" class="headerlink" title="6. 全螢幕功能"></a>6. 全螢幕功能</h2><p><code>maximizeWindow()</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;測試_登入&#x27;</span>, <span class="keyword">async</span> t =&gt; &#123; </span><br><span class="line">    <span class="keyword">await</span> t</span><br><span class="line">        .<span class="title function_">maximizeWindow</span>()</span><br><span class="line">        .<span class="title function_">typeText</span>(<span class="title class_">Member</span>.<span class="property">txtAccount</span>, <span class="string">&#x27;kite&#x27;</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h2 id="7-參數說明"><a href="#7-參數說明" class="headerlink" title="7. 參數說明"></a>7. 參數說明</h2><h3 id="7-1-速度參數"><a href="#7-1-速度參數" class="headerlink" title="7.1. 速度參數"></a>7.1. 速度參數</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">testcafe chrome HelloWorld.js --speed 0.3</span><br></pre></td></tr></table></figure>

<blockquote>
<p>0.01 ~ 1 之間 1最快，0.01最慢</p>
</blockquote>
<h3 id="7-2-瀏覽器參數"><a href="#7-2-瀏覽器參數" class="headerlink" title="7.2. 瀏覽器參數"></a>7.2. 瀏覽器參數</h3><blockquote>
<p>對於 Web 自動化測試而言，一個瀏覽器還真解決不了所有事！<br>為了完成相容性測試和提高測試完整度，通常要在多的瀏覽器上測試過。</p>
</blockquote>
<h4 id="7-2-1-啟用chrome"><a href="#7-2-1-啟用chrome" class="headerlink" title="7.2.1. 啟用chrome"></a>7.2.1. 啟用chrome</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">testcafe chrome day02.js</span><br></pre></td></tr></table></figure>



<h4 id="7-2-2-啟用firefox"><a href="#7-2-2-啟用firefox" class="headerlink" title="7.2.2. 啟用firefox"></a>7.2.2. 啟用firefox</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">testcafe firefox day02.js</span><br></pre></td></tr></table></figure>



<h4 id="7-2-3-啟用edge"><a href="#7-2-3-啟用edge" class="headerlink" title="7.2.3. 啟用edge"></a>7.2.3. 啟用edge</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">testcafe edge day02.js</span><br></pre></td></tr></table></figure>



<h4 id="7-2-4-同時執行兩個瀏覽器"><a href="#7-2-4-同時執行兩個瀏覽器" class="headerlink" title="7.2.4. 同時執行兩個瀏覽器"></a>7.2.4. 同時執行兩個瀏覽器</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">testcafe chrome,firefox day02.js</span><br></pre></td></tr></table></figure>



<h4 id="7-2-5-本地端所有瀏覽器執行"><a href="#7-2-5-本地端所有瀏覽器執行" class="headerlink" title="7.2.5. 本地端所有瀏覽器執行"></a>7.2.5. 本地端所有瀏覽器執行</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">testcafe all day02.js</span><br></pre></td></tr></table></figure>



<h4 id="7-2-6-無頭模式"><a href="#7-2-6-無頭模式" class="headerlink" title="7.2.6. 無頭模式"></a>7.2.6. 無頭模式</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">testcafe chrome:headless day02.js</span><br></pre></td></tr></table></figure>



<h4 id="7-2-7-模擬iphone-or-android-device"><a href="#7-2-7-模擬iphone-or-android-device" class="headerlink" title="7.2.7. 模擬iphone or android device"></a>7.2.7. 模擬iphone or android device</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">testcafe &quot;chrome:emulation:device=iphone X&quot; day02.js</span><br><span class="line">testcafe &quot;chrome:emulation:device=pixel 2&quot; day02.js</span><br></pre></td></tr></table></figure>



<h4 id="7-2-8-模擬器-headless-mode"><a href="#7-2-8-模擬器-headless-mode" class="headerlink" title="7.2.8. 模擬器 + headless mode"></a>7.2.8. 模擬器 + headless mode</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">testcafe &quot;chrome:headless:emulation:device=iphone X&quot; day02.js</span><br><span class="line">testcafe &quot;chrome:headless:emulation:device=pixel 2&quot; day02.js</span><br></pre></td></tr></table></figure>



<h3 id="7-3-concurrent-參數"><a href="#7-3-concurrent-參數" class="headerlink" title="7.3. concurrent 參數"></a>7.3. concurrent 參數</h3><p>真正的平行測試，將<strong>多個測試案例</strong> 分散到 <strong>多個瀏覽器跑</strong><br>下例，若有 2 個測試案例，會開 2 個 Chrome 瀏覽器，各跑 1 個測試案例。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">testcafe -c 2 chrome day02.js --speed .5</span><br></pre></td></tr></table></figure>



<h3 id="7-4-遠端跑自動化測試"><a href="#7-4-遠端跑自動化測試" class="headerlink" title="7.4. 遠端跑自動化測試"></a>7.4. 遠端跑自動化測試</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">testcafe remote day02.js</span><br><span class="line">testcafe remote day02.js --qr-code</span><br></pre></td></tr></table></figure>





<h3 id="7-5-報表類型"><a href="#7-5-報表類型" class="headerlink" title="7.5. 報表類型"></a>7.5. 報表類型</h3><h4 id="7-5-1-spec"><a href="#7-5-1-spec" class="headerlink" title="7.5.1. spec"></a>7.5.1. spec</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">testcafe chrome day02.js -r spec</span><br></pre></td></tr></table></figure>



<h4 id="7-5-2-list"><a href="#7-5-2-list" class="headerlink" title="7.5.2. list"></a>7.5.2. list</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">testcafe chrome day02.js -r list</span><br></pre></td></tr></table></figure>



<h4 id="7-5-3-minimal"><a href="#7-5-3-minimal" class="headerlink" title="7.5.3. minimal"></a>7.5.3. minimal</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">testcafe chrome day02.js -r minimal</span><br></pre></td></tr></table></figure>



<h4 id="7-5-4-xunit-report-xml"><a href="#7-5-4-xunit-report-xml" class="headerlink" title="7.5.4. xunit:report.xml"></a>7.5.4. xunit:report.xml</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">testcafe chrome day02.js -r xunit:report.xml</span><br></pre></td></tr></table></figure>

<p><code>output結果</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">testsuite</span> <span class="attr">name</span>=<span class="string">&quot;TestCafe Tests: Chrome 92.0.4515.159 / Windows 10&quot;</span> <span class="attr">tests</span>=<span class="string">&quot;2&quot;</span> <span class="attr">failures</span>=<span class="string">&quot;0&quot;</span> <span class="attr">skipped</span>=<span class="string">&quot;0&quot;</span> <span class="attr">errors</span>=<span class="string">&quot;0&quot;</span> <span class="attr">time</span>=<span class="string">&quot;6.167&quot;</span> <span class="attr">timestamp</span>=<span class="string">&quot;Wed, 25 Aug 2021 01:28:00 GMT&quot;</span> &gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">testcase</span> <span class="attr">classname</span>=<span class="string">&quot;Getting Started&quot;</span> <span class="attr">name</span>=<span class="string">&quot;測試案例一&quot;</span> <span class="attr">time</span>=<span class="string">&quot;3.65&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">testcase</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">testcase</span> <span class="attr">classname</span>=<span class="string">&quot;Getting Started&quot;</span> <span class="attr">name</span>=<span class="string">&quot;測試案例二&quot;</span> <span class="attr">time</span>=<span class="string">&quot;2.502&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">testcase</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">testsuite</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="7-5-5-json-report-json"><a href="#7-5-5-json-report-json" class="headerlink" title="7.5.5. json:report.json"></a>7.5.5. json:report.json</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">testcafe chrome day02.js -r json:report.json</span><br></pre></td></tr></table></figure>

<p><code>output結果</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;startTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2021-08-25T03:15:25.322Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;endTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2021-08-25T03:15:32.590Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;userAgents&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;Chrome 92.0.4515.159 / Windows 10&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;passed&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;skipped&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;fixtures&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Getting Started&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;E:\\note\\test_cafe_project\\day02\\day02.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;meta&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;tests&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;測試案例一&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;meta&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;errs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;durationMs&quot;</span><span class="punctuation">:</span> <span class="number">4735</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;unstable&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;screenshotPath&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;skipped&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;測試案例二&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;meta&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;errs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;durationMs&quot;</span><span class="punctuation">:</span> <span class="number">2513</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;unstable&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;screenshotPath&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;skipped&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;warnings&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<h2 id="8-Debug說明"><a href="#8-Debug說明" class="headerlink" title="8. Debug說明"></a>8. Debug說明</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;測試_登出&#x27;</span>, <span class="keyword">async</span> t =&gt; &#123; <span class="comment">// 一個測試案例    </span></span><br><span class="line">    <span class="title class_">Member</span>.<span class="title function_">autoLogin</span>()    </span><br><span class="line">    <span class="keyword">await</span> t    </span><br><span class="line">    .<span class="title function_">click</span>(<span class="title class_">Member</span>.<span class="property">btnLogout</span>) <span class="comment">//按下送出按鈕      </span></span><br><span class="line">    .<span class="title function_">debug</span>()  </span><br><span class="line">    .<span class="title function_">expect</span>(<span class="title class_">Selector</span>(<span class="string">&#x27;#divLoginForm &gt; div &gt; h2&#x27;</span>).<span class="property">innerText</span>).<span class="title function_">contains</span>(<span class="string">&#x27;...&#x27;</span>);        </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h2 id="9-TestCafe-Config-說明"><a href="#9-TestCafe-Config-說明" class="headerlink" title="9. TestCafe Config 說明"></a>9. TestCafe Config 說明</h2><p>資料結架構如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├── 根目錄 // root </span><br><span class="line">├── .testcaferc.json // TestCafe Configuration File</span><br><span class="line">└── tests // 存放測試的資料夾</span><br><span class="line">    ├── TestFixture1.js </span><br><span class="line">    └── TestFixture2.js</span><br></pre></td></tr></table></figure>

<p>我們將要測試的腳本都放在<code>tests資料夾</code>底下</p>
<p>然後在這個的<code>根目錄</code>建立一個<code>.testcaferc.json</code>檔，還有另一種方式是建立<code>.js</code>檔可以參考<a href="https://testcafe.io/documentation/402638/reference/configuration-file">官網文件</a></p>
<p>註：記得testcaferc.json 前面有一個<code>.</code> ，踩到這個坑，想說怎麼照設定一直不會自動跑</p>
<p><code>testcaferc.json</code>文件</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;browsers&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;chrome&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span> </span><br><span class="line">    <span class="attr">&quot;speed&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> </span><br><span class="line">    <span class="attr">&quot;concurrency&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> </span><br><span class="line">    <span class="attr">&quot;src&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;tests&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span> </span><br><span class="line">    <span class="attr">&quot;reporter&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> </span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;spec&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;json&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;output&quot;</span><span class="punctuation">:</span> <span class="string">&quot;reports/report.json&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;screenshotPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;reports/screenshots&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;screenshots&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;fullPage&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;takeScreenshotsOnFails&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;videoPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;reports/videos&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;videoOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> </span><br><span class="line">      <span class="attr">&quot;singleFile&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> </span><br><span class="line">      <span class="attr">&quot;failedOnly&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span> </span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;selectorTimeout&quot;</span><span class="punctuation">:</span> <span class="number">3000</span><span class="punctuation">,</span> </span><br><span class="line">    <span class="attr">&quot;assertionTimeout&quot;</span><span class="punctuation">:</span> <span class="number">3000</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<p>接著就下指令試試囉</p>
<p>註：請在<code>根目錄</code>執行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">testcafe</span><br></pre></td></tr></table></figure>

<p>就會自動跑在tests資料夾底下所有的腳本囉</p>
<p><img src="https://i.imgur.com/X5HjnK5.png" alt="image-20210919150241430"></p>
<h2 id="10-測試資料"><a href="#10-測試資料" class="headerlink" title="10. 測試資料"></a>10. 測試資料</h2><blockquote>
<p>有規劃可控管的測試資料帶你上天堂，沒控管的測試資料會帶你下地獄。</p>
</blockquote>
<p>目前的資料結構</p>
<p><img src="https://i.imgur.com/j9P5soJ.png" alt="image-20210919165641400"></p>
<p><code>user_account.json</code></p>
<p><img src="https://i.imgur.com/MNk4JHx.png" alt="image-20210919170200827"></p>
<p><code>test_batch_members.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Selector</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;testcafe&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Member</span> <span class="keyword">from</span> <span class="string">&#x27;./model/Member&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> dataSet = <span class="built_in">require</span>(<span class="string">&quot;./dataset/user_account.json&quot;</span>)</span><br><span class="line"></span><br><span class="line">fixture <span class="string">`會員中心`</span>.<span class="property">page</span> <span class="string">`fill your website`</span>;</span><br><span class="line"></span><br><span class="line">dataSet.<span class="title function_">forEach</span>(<span class="function"><span class="params">data</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; account, password, name &#125; = data</span><br><span class="line">    <span class="title function_">test</span>(<span class="string">`測試_登入_<span class="subst">$&#123;account&#125;</span>_<span class="subst">$&#123;name&#125;</span>`</span>, <span class="keyword">async</span> t =&gt; &#123; </span><br><span class="line">        <span class="keyword">await</span> t</span><br><span class="line">            .<span class="title function_">maximizeWindow</span>()</span><br><span class="line">            .<span class="title function_">typeText</span>(<span class="title class_">Member</span>.<span class="property">txtAccount</span>, account)</span><br><span class="line">            .<span class="title function_">typeText</span>(<span class="title class_">Member</span>.<span class="property">txtPassword</span>, password)            </span><br><span class="line">            .<span class="title function_">click</span>(<span class="title class_">Member</span>.<span class="property">btnLogin</span>)</span><br><span class="line">            .<span class="title function_">expect</span>(<span class="title class_">Selector</span>(<span class="string">&#x27;.dropdown-toggle&#x27;</span>).<span class="property">innerText</span>).<span class="title function_">contains</span>(name);     </span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<p>結果</p>
<p><img src="https://i.imgur.com/17bzoQJ.png" alt="image-20210919170516212"></p>
<h2 id="11-技巧整理"><a href="#11-技巧整理" class="headerlink" title="11. 技巧整理"></a>11. 技巧整理</h2><p>三神器  Selectors, Actions, Assertions</p>
<p>在實作過程中，筆者認為在選取<code>elements</code>時儘量以中文字的方式選取對象。在mockdata階段，填中文字比較直覺。</p>
<h3 id="11-1-InputText"><a href="#11-1-InputText" class="headerlink" title="11.1. InputText"></a>11.1. InputText</h3><p><code>HTML</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">身份證：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;personal_id&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>testcafe js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Selectors</span></span><br><span class="line"><span class="keyword">const</span> txtID = <span class="title class_">Selector</span>(<span class="string">&#x27;#personal_id&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//Actions</span></span><br><span class="line"><span class="title function_">typeText</span>(<span class="title class_">MemberPage</span>.<span class="property">txtID</span>, <span class="string">&quot;A123456789&quot;</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">//Assertions</span></span><br><span class="line"><span class="title function_">expect</span>(<span class="title class_">MemberPage</span>.<span class="property">txtID</span>.<span class="property">value</span>).<span class="title function_">eql</span>(<span class="string">&quot;A123456789&quot;</span>)</span><br></pre></td></tr></table></figure>



<h3 id="11-2-SelectOption"><a href="#11-2-SelectOption" class="headerlink" title="11.2. SelectOption"></a>11.2. SelectOption</h3><p><code>HTML</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;super_user&quot;</span>&gt;</span>超級使用者<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;normal_user&quot;</span>&gt;</span>一般用戶<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>TesCafe</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Selectors</span></span><br><span class="line"><span class="keyword">const</span> selRole = <span class="title class_">Selector</span>(<span class="string">&quot;#selRole&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//Actions</span></span><br><span class="line"><span class="title function_">click</span>(selRole)</span><br><span class="line"><span class="title function_">click</span>(selRole.<span class="title function_">find</span>(<span class="string">&quot;option&quot;</span>).<span class="title function_">withText</span>(<span class="string">&quot;超級使用者&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//Assertions</span></span><br><span class="line"><span class="comment">//1. get value</span></span><br><span class="line"><span class="title function_">expect</span>(selRole.<span class="property">value</span>).<span class="title function_">eql</span>(<span class="string">&#x27;super_user&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. get text</span></span><br><span class="line"><span class="title function_">expect</span>(selRole.<span class="title function_">find</span>(<span class="string">&#x27;option:checked&#x27;</span>).<span class="property">innerText</span>).<span class="title function_">eql</span>(<span class="string">&quot;超級使用者&quot;</span>) </span><br></pre></td></tr></table></figure>

<h3 id="11-3-CheckBox"><a href="#11-3-CheckBox" class="headerlink" title="11.3. CheckBox"></a>11.3. CheckBox</h3><p>唯一ID</p>
<p><code>TesCafe</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Selectors</span></span><br><span class="line"><span class="keyword">const</span> checkbox = <span class="title class_">Selector</span>(<span class="string">&#x27;#testing-on-remote-devices&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Actions</span></span><br><span class="line"><span class="title function_">click</span>(checkbox)</span><br><span class="line"></span><br><span class="line"><span class="comment">//Assertions</span></span><br><span class="line"><span class="title function_">expect</span>(checkbox.<span class="property">checked</span>).<span class="title function_">ok</span>();</span><br></pre></td></tr></table></figure>

<p>多個ID</p>
<p>以這個為例取最外層的<code>selFruit</code>再用<code>withText</code>方式點擊<code>checkbox</code></p>
<p><code>HTML</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;selFruit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fruits&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-check&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;form-check-input&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;chkFruit[]&quot;</span> <span class="attr">id</span>=<span class="string">&quot;chkFruit_A&quot;</span> <span class="attr">value</span>=<span class="string">&quot;香蕉&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;form-check-label&quot;</span> <span class="attr">for</span>=<span class="string">&quot;chkFruit_A&quot;</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;selFruit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fruits&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-check&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;form-check-input&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;chkFruit[]&quot;</span> <span class="attr">id</span>=<span class="string">&quot;chkFruit_B&quot;</span> <span class="attr">value</span>=<span class="string">&quot;蘋果&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;form-check-label&quot;</span> <span class="attr">for</span>=<span class="string">&quot;chkFruit_B&quot;</span>&gt;</span>蘋果<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>TesCafe</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Selectors</span></span><br><span class="line"><span class="keyword">const</span> chkFruit = <span class="title class_">Selector</span>(<span class="string">&#x27;#selFruit&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//Actions</span></span><br><span class="line">chkFruit.<span class="title function_">withText</span>(<span class="string">&quot;香蕉&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//Assertions</span></span><br><span class="line"><span class="title function_">expect</span>(chkFruit.<span class="title function_">withText</span>(<span class="string">&#x27;香蕉&#x27;</span>).<span class="title function_">find</span>(<span class="string">&#x27;input[type=checkbox]&#x27;</span>).<span class="property">checked</span>).<span class="title function_">eql</span>(<span class="literal">true</span>)  </span><br></pre></td></tr></table></figure>

<h3 id="11-4-RadioButton"><a href="#11-4-RadioButton" class="headerlink" title="11.4. RadioButton"></a>11.4. RadioButton</h3><p><code>HTML</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-check-inline&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;difficulty&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-check-input&quot;</span> <span class="attr">id</span>=<span class="string">&quot;role_1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;form-check-label&quot;</span> <span class="attr">for</span>=<span class="string">&quot;role_1&quot;</span>&gt;</span>娜美<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-check-inline&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;difficulty&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-check-input&quot;</span> <span class="attr">id</span>=<span class="string">&quot;role_2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;form-check-label&quot;</span> <span class="attr">for</span>=<span class="string">&quot;role_2&quot;</span>&gt;</span>喬巴<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-check-inline&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;difficulty&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-check-input&quot;</span> <span class="attr">id</span>=<span class="string">&quot;role_3&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;form-check-label&quot;</span> <span class="attr">for</span>=<span class="string">&quot;role_3&quot;</span>&gt;</span>魯夫<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>以此為例，選<code>Label</code> click 等於直接選<code>radiobutton</code>，主要原因是有寫<strong>label for 對應id</strong>，這樣的寫法可以很簡單的抽換中文字就好囉。</p>
<p>下一關在mockdata階段就會比較彈性一點。</p>
<p><code>TestCafe</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Selectors</span></span><br><span class="line"><span class="keyword">const</span> rdoDiff = <span class="title class_">Selector</span>(<span class="string">&#x27;.form-check-label&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//Actions</span></span><br><span class="line"><span class="title function_">click</span>(rdoDiff.<span class="title function_">withText</span>(<span class="string">&#x27;娜美&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//Assertions</span></span><br><span class="line">未寫</span><br></pre></td></tr></table></figure>

<p>延伸主題：</p>
<blockquote>
<p>資料驅動測試 (Data-Driven Test) </p>
</blockquote>
<h2 id="12-安裝外掛"><a href="#12-安裝外掛" class="headerlink" title="12. 安裝外掛"></a>12. 安裝外掛</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save-dev @ffmpeg-installer/ffmpeg</span><br></pre></td></tr></table></figure>

<p>安裝外掛報表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">testcafe chrome day02.js -r html:report.html</span><br></pre></td></tr></table></figure>

<p>npm 市集</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://www.npmjs.com/search?q=testcafe-reporter-</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>E2E</category>
        <category>TestCafe</category>
      </categories>
      <tags>
        <tag>E2E</tag>
        <tag>TestCafe</tag>
      </tags>
  </entry>
  <entry>
    <title>Git</title>
    <url>/2021/09/11/2021-09-11%20Git%20%E7%AD%86%E8%A8%98/</url>
    <content><![CDATA[<p>Git flow 介紹</p>
<p><img src="https://i.imgur.com/nVQrs1t.png" alt="image-20210823100428940"></p>
<p>長期分支</p>
<ul>
<li><p>master</p>
<ul>
<li>主分支</li>
<li>主要是用來放穩定、隨時可上線的版本。這個分支的來源只能從別的分支合併過來，開發者不會直接 Commit 到這個分支。因為是穩定版本，所以通常也會在這個分支上的 Commit 上打上版本號標籤。</li>
</ul>
</li>
<li><p>develop</p>
<ul>
<li>開發分支</li>
<li>這個分支主要是所有開發的基礎分支，當要新增功能的時候，所有的 Feature 分支都是從這個分支切出去的。而 Feature 分支的功能完成後，也都會合併回來這個分支。</li>
</ul>
</li>
</ul>
<p>任務分支</p>
<p>由長期分支衍伸出來的分支</p>
<ul>
<li><p>feature</p>
<ul>
<li>新功能分支</li>
<li>當要開始新增功能的時候，就是使用 Feature 分支的時候了。Feature 分支都是從 Develop 分支來的，完成之後會再併回 Develop 分支。</li>
</ul>
</li>
<li><p>release</p>
<ul>
<li>發佈分支</li>
<li>當認為 Develop 分支夠成熟了，就可以把 Develop 分支合併到 Release 分支，在這邊進行算是上線前的最後測試。測試完成後，Release 分支將會同時合併到 Master 以及 Develop 這兩個分支上。Master 分支是上線版本，而合併回 Develop 分支的目的，是因為可能在 Release 分支上還會測到並修正一些問題，所以需要跟 Develop 分支同步，免得之後的版本又再度出現同樣的問題。</li>
</ul>
</li>
<li><p>hotfix</p>
<ul>
<li>熱修復分支</li>
<li>當線上產品發生緊急問題的時候，會從 Master 分支開一個 Hotfix 分支出來進行修復，Hotfix 分支修復完成之後，會合併回 Master 分支，也同時會合併一份到 Develop 分支。</li>
</ul>
</li>
<li><p>git pull 就是表示一個fetch 跟一個merge</p>
</li>
<li><p>git pull – rebase，它表示的是一個FETCH 以及一個rebase</p>
</li>
<li><p>git checkout 是移動head 位置</p>
</li>
<li><p>reset 移動分支到對應commit 位置</p>
</li>
<li><p>1個 commit 只做一件事</p>
</li>
<li><p>1個 feature 做一個功能 做好購物車 4~5 api 3 css</p>
</li>
<li><p>git cherry-pick c2 c4</p>
</li>
<li><p>git reset HEAD^   分支前往特定commit</p>
</li>
</ul>
<p>udemy</p>
<p>echo “blob 10\0hello git” | shasum</p>
<p>echo shasum -a 256 filename</p>
<p>新增檔案至stage後反悔<br>git rm –cached test.txt</p>
<p>修改既有檔案至stage後反悔</p>
<p>git ls-files -s<br>git restore –stage file1.txt<br>git ls-files -s<br>git restore file1.txt</p>
<p>git log<br>git log –oneline<br>git log -2<br>git log oneline -2<br>git log –after&#x3D;’2020-05-20’<br>git log –before&#x3D;’2020-05-21’<br>git shortlog<br>git log –stat</p>
<p>git init (initialize an empty git repository)<br>git status (show the working tree status)<br>git add (add file cntents to the index)<br>git rm (Remove files from the working tree and from the index)<br>git restore(Restore working tree files)<br>git commit (Records the changes to repository)<br>git log (show commit logs)</p>
<p>git ls-files<br>-s(Show staged contents’ mode bits,object name and stage number in the output)</p>
<p>git config –list</p>
<p>head is a special pointer<br>Related with current active branch<br>Always point to the latest commit</p>
<p>git checkout(change the current active branch)<br>git checkout -b <branch_name>(checkout a branch,will create that branch if it doesn’t exist)<br>git diff<br>git diff –cached</p>
<p>恢復文件的另一種方式<br>git checkout README.md</p>
<p>git rest HEAD^ –hard</p>
<p>git reset ORIG_HEAD –hard</p>
<p>git add remote origin URL</p>
<p>git push origin master<br>git clone URL<br>git clone URL rename</p>
<p>git remote remove origin<br>git remote add my-origin https:&#x2F;&#x2F;</p>
<p>列出遠程branch<br>git branch -a</p>
<p>git branch -r</p>
<p>git remote show origin</p>
<p>git fetch</p>
<p>git pull &#x3D; git fecth + git merge</p>
<p>git gc </p>
<p>壓縮物件</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Webpack</title>
    <url>/2021/09/11/2021-09-11%20Webpack/</url>
    <content><![CDATA[<h2 id="建立package-json-指令"><a href="#建立package-json-指令" class="headerlink" title="建立package.json 指令"></a>建立package.json 指令</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure>

<span id="more"></span>


<h2 id="安裝webpack-指令"><a href="#安裝webpack-指令" class="headerlink" title="安裝webpack 指令"></a>安裝webpack 指令</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install webpack webpack-cli --save</span><br><span class="line">npm install webpack webpack-cli --save-dev</span><br></pre></td></tr></table></figure>



<h2 id="建立src資料夾-dist資料夾"><a href="#建立src資料夾-dist資料夾" class="headerlink" title="建立src資料夾 dist資料夾"></a>建立<code>src資料夾</code> <code>dist資料夾</code></h2><h3 id="src"><a href="#src" class="headerlink" title="src"></a>src</h3><h4 id="helper-js"><a href="#helper-js" class="headerlink" title="helper.js"></a>helper.js</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    <span class="title function_">fn1</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;this is helper fn&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> helper <span class="keyword">from</span> <span class="string">&#x27;./helper&#x27;</span></span><br><span class="line"></span><br><span class="line">helper.<span class="title function_">fn1</span>()</span><br></pre></td></tr></table></figure>



<h3 id="dist"><a href="#dist" class="headerlink" title="dist"></a>dist</h3><h4 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;main.bundle.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h2 id="建立webpack-config-js"><a href="#建立webpack-config-js" class="headerlink" title="建立webpack.config.js"></a>建立webpack.config.js</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/main.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;main.bundle.js&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h2 id="修改package-json檔"><a href="#修改package-json檔" class="headerlink" title="修改package.json檔"></a>修改package.json檔</h2><h3 id="加入-build-設定"><a href="#加入-build-設定" class="headerlink" title="加入 build 設定"></a>加入 <code>build</code> 設定</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>



<h2 id="開始build"><a href="#開始build" class="headerlink" title="開始build"></a>開始build</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm build</span><br></pre></td></tr></table></figure>



<h2 id="支援打包css"><a href="#支援打包css" class="headerlink" title="支援打包css"></a>支援打包css</h2><h3 id="安裝指令"><a href="#安裝指令" class="headerlink" title="安裝指令"></a>安裝指令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install style-loader --save</span><br></pre></td></tr></table></figure>

<h3 id="加入-style-css"><a href="#加入-style-css" class="headerlink" title="加入 style.css"></a>加入 style.css</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="修改main-js"><a href="#修改main-js" class="headerlink" title="修改main.js"></a>修改main.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> helper <span class="keyword">from</span> <span class="string">&#x27;./helper&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./style.css&#x27;</span></span><br><span class="line">helper.<span class="title function_">fn1</span>()</span><br></pre></td></tr></table></figure>



<h3 id="修改webpack"><a href="#修改webpack" class="headerlink" title="修改webpack"></a>修改webpack</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">module.exports = <span class="punctuation">&#123;</span></span><br><span class="line">  ...</span><br><span class="line">  module<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    rules<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        test<span class="punctuation">:</span> /\.css$/i<span class="punctuation">,</span></span><br><span class="line">        use<span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;style-loader&quot;</span><span class="punctuation">,</span> <span class="string">&quot;css-loader&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span>  </span><br><span class="line"><span class="punctuation">&#125;</span>;</span><br></pre></td></tr></table></figure>



<h3 id="執行build"><a href="#執行build" class="headerlink" title="執行build"></a>執行build</h3><p>我們會發現在css的相關語法已經轉成js打包在main.bundle.js 裡面</p>
<p>參考：<a href="https://www.npmjs.com/package/css-loader">npm css loader</a></p>
<h2 id="支援打包scss"><a href="#支援打包scss" class="headerlink" title="支援打包scss"></a>支援打包scss</h2><h3 id="安裝指令-1"><a href="#安裝指令-1" class="headerlink" title="安裝指令"></a>安裝指令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install sass-loader sass webpack --save-dev</span><br></pre></td></tr></table></figure>

<h3 id="加入-all-scss"><a href="#加入-all-scss" class="headerlink" title="加入 all.scss"></a>加入 all.scss</h3><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$body-color</span>: red;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="variable">$body-color</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>修改webpack.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">  <span class="attr">rules</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">...</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.s[ac]ss$/i</span>,</span><br><span class="line">      <span class="attr">use</span>: [</span><br><span class="line">        <span class="comment">// Creates `style` nodes from JS strings</span></span><br><span class="line">        <span class="string">&quot;style-loader&quot;</span>,</span><br><span class="line">        <span class="comment">// Translates CSS into CommonJS</span></span><br><span class="line">        <span class="string">&quot;css-loader&quot;</span>,</span><br><span class="line">        <span class="comment">// Compiles Sass to CSS</span></span><br><span class="line">        <span class="string">&quot;sass-loader&quot;</span>,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,      </span><br><span class="line">  ],</span><br><span class="line">&#125;,  </span><br></pre></td></tr></table></figure>



<p>如果要找image ,  一樣的概念尋找 image loader 關鍵字進行安裝</p>
<h2 id="webpack-dev-server-安裝"><a href="#webpack-dev-server-安裝" class="headerlink" title="webpack dev server 安裝"></a>webpack dev server 安裝</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install webpack-dev-server --save</span><br></pre></td></tr></table></figure>



<h3 id="修改webpack-config-js"><a href="#修改webpack-config-js" class="headerlink" title="修改webpack.config.js"></a>修改webpack.config.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">static</span>: &#123;</span><br><span class="line">      <span class="attr">directory</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">compress</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">9000</span>,</span><br><span class="line">  &#125;,     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="修改package-json"><a href="#修改package-json" class="headerlink" title="修改package.json"></a>修改package.json</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack server --open&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<h2 id="mode差異"><a href="#mode差異" class="headerlink" title="mode差異"></a>mode差異</h2><p>mode:’development’</p>
<p>未壓縮</p>
<p>mode:’production’</p>
<p>壓縮過</p>
<p>執行指令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure>





<h2 id="html-webpack-plugin"><a href="#html-webpack-plugin" class="headerlink" title="html-webpack-plugin"></a>html-webpack-plugin</h2><h3 id="安裝指令-2"><a href="#安裝指令-2" class="headerlink" title="安裝指令"></a>安裝指令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save-dev html-webpack-plugin</span><br></pre></td></tr></table></figure>



<h3 id="修改webpack-config-js-1"><a href="#修改webpack-config-js-1" class="headerlink" title="修改webpack.config.js"></a>修改webpack.config.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  ... </span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;main.[hash].bundle.js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>()],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>我們可以透過這個插件，在dist資料夾底下自動產生index.html ，並且配上hash方法，讓每次js名稱都有所不同，避免每次佈署時的緩存問題</p>
<h3 id="樣版功能"><a href="#樣版功能" class="headerlink" title="樣版功能"></a>樣版功能</h3><p>修改webpack.config.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">plugins</span>: [<span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">  <span class="attr">template</span>:<span class="string">&#x27;./src/base.html&#x27;</span></span><br><span class="line">&#125;)],</span><br></pre></td></tr></table></figure>



<p>新增base.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>kite<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span>kite blog<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>npm run build 產生的index.html 會依照這份樣版進行複製產生，並加入index.bundle.js </p>
<h2 id="MiniCssExtractPlugin"><a href="#MiniCssExtractPlugin" class="headerlink" title="MiniCssExtractPlugin"></a>MiniCssExtractPlugin</h2><p>修改webpack.config.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">MiniCssExtractPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;mini-css-extract-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">	...</span><br><span class="line">    <span class="attr">plugins</span>: [<span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">        <span class="attr">template</span>:<span class="string">&#x27;./src/base.html&#x27;</span></span><br><span class="line">    &#125;),</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">MiniCssExtractPlugin</span>(&#123;</span><br><span class="line">    <span class="attr">filename</span>:<span class="string">&#x27;main.[hash].css&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">              </span><br><span class="line">    ...    </span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.css$/i</span>,</span><br><span class="line">            <span class="attr">use</span>: [<span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>, <span class="string">&quot;css-loader&quot;</span>],</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.s[ac]ss$/i</span>,</span><br><span class="line">            <span class="attr">use</span>: [</span><br><span class="line">              <span class="comment">// Creates `style` nodes from JS strings</span></span><br><span class="line">              <span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>,</span><br><span class="line">              <span class="comment">// Translates CSS into CommonJS</span></span><br><span class="line">              <span class="string">&quot;css-loader&quot;</span>,</span><br><span class="line">              <span class="comment">// Compiles Sass to CSS</span></span><br><span class="line">              <span class="string">&quot;sass-loader&quot;</span>,</span><br><span class="line">            ],</span><br><span class="line">          &#125;,      </span><br><span class="line">        ],</span><br><span class="line">    &#125;,   </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>透過這個外掛，可以讓css獨立打包成一個檔出來，不會轉譯成以js寫出的css</p>
<p>接續看</p>
<p><a href="https://youtu.be/uP6KTupfyIw?t=4204">https://youtu.be/uP6KTupfyIw?t=4204</a></p>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><p><a href="https://www.npmtrends.com/">npm trends</a></p>
<p>為什麼要webpack</p>
<p>轉譯套件成js、html、css</p>
<p>壓縮</p>
<p>用套件工具輕鬆達到不同瀏覽器的前綴語法</p>
]]></content>
      <tags>
        <tag>Webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>MYSQL 匯入資料庫亂碼問題</title>
    <url>/2021/09/14/2021-09-14%20MYSQL%20%E5%8C%AF%E5%85%A5%E8%B3%87%E6%96%99%E5%BA%AB%E4%BA%82%E7%A2%BC%E5%95%8F%E9%A1%8C/</url>
    <content><![CDATA[<h2 id="匯入資料庫亂碼問題"><a href="#匯入資料庫亂碼問題" class="headerlink" title="匯入資料庫亂碼問題"></a>匯入資料庫亂碼問題</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># mysql <span class="operator">-</span>uroot <span class="operator">-</span>p0000 <span class="comment">--default-character-set=utf8 database &lt; dump_file.sql</span></span><br></pre></td></tr></table></figure>
<p>-u後面接著帳號<br>-p後面接著密碼</p>
]]></content>
      <categories>
        <category>MYSQL</category>
        <category>編碥</category>
      </categories>
      <tags>
        <tag>MYSQL</tag>
        <tag>編碥</tag>
      </tags>
  </entry>
  <entry>
    <title>PIXI JS 超人門學習</title>
    <url>/2021/08/17/2021-09-19%20PIXI%20JS%20%E8%B6%85%E4%BA%BA%E9%96%80%E5%AD%B8%E7%BF%92/</url>
    <content><![CDATA[<h2 id="1-基礎結構"><a href="#1-基礎結構" class="headerlink" title="1. 基礎結構"></a>1. 基礎結構</h2><h3 id="1-1-HTML、JS載入"><a href="#1-1-HTML、JS載入" class="headerlink" title="1.1. HTML、JS載入"></a>1.1. HTML、JS載入</h3><p><img src="https://i.imgur.com/qEkGAMk.png" alt="image-20210716151529109"></p>
<span id="more"></span>


<h3 id="1-2-JS-基礎說明"><a href="#1-2-JS-基礎說明" class="headerlink" title="1.2. JS 基礎說明"></a>1.2. JS 基礎說明</h3><p><img src="https://i.imgur.com/OjBdFdH.png" alt="image-20210716151203957"></p>
<h4 id="1-2-1-初始化設定"><a href="#1-2-1-初始化設定" class="headerlink" title="1.2.1. 初始化設定"></a>1.2.1. 初始化設定</h4><p><img src="https://i.imgur.com/RM2houw.png" alt="image-20210716151434641"></p>
<h2 id="2-pixijs-container-概念說明"><a href="#2-pixijs-container-概念說明" class="headerlink" title="2. pixijs container 概念說明"></a>2. pixijs container 概念說明</h2><p>stage 可以想像成是一個body 元素</p>
<p>建議在實作內容的時候都使用container 來包裏相關物件，在移動座標的時候，會比較好管理<img src="https://i.imgur.com/S9uMLhm.png" alt="image-20210716151831794"></p>
<h3 id="2-1-container-實作範例"><a href="#2-1-container-實作範例" class="headerlink" title="2.1. container 實作範例"></a>2.1. container 實作範例</h3><p><img src="https://i.imgur.com/REkfxI7.png" alt="image-20210716152334949"></p>
<h2 id="3-滑鼠監聽實作"><a href="#3-滑鼠監聽實作" class="headerlink" title="3. 滑鼠監聽實作"></a>3. 滑鼠監聽實作</h2><p><img src="https://i.imgur.com/5s3T7rC.png" alt="image-20210716154419564"></p>
<h2 id="4-container-add-event-實作"><a href="#4-container-add-event-實作" class="headerlink" title="4. container add event 實作"></a>4. container add event 實作</h2><p><img src="https://i.imgur.com/n05cWzE.png" alt="image-20210716154548989"></p>
<p>如果要有事件記得開啟<code>interactive=true</code> ,</p>
<p>而<code>buttonMode</code> 是cursor變為手指頭符號</p>
<h2 id="5-遊戲循環說明"><a href="#5-遊戲循環說明" class="headerlink" title="5. 遊戲循環說明"></a>5. 遊戲循環說明</h2><p><code>app.ticker</code></p>
<p>這邊可以理解成unity 的update 遊戲循環(個人的理解，還是需要爬文看一下這個套件對於ticker 的詳細說明)</p>
<p><img src="https://i.imgur.com/AcRic7s.png" alt="image-20210716154314683"></p>
<h2 id="6-GUI-工具"><a href="#6-GUI-工具" class="headerlink" title="6. GUI 工具"></a>6. GUI 工具</h2><h3 id="6-1-載入dat-gui-min-js-套件"><a href="#6-1-載入dat-gui-min-js-套件" class="headerlink" title="6.1. 載入dat.gui.min.js 套件"></a>6.1. 載入<code>dat.gui.min.js</code> 套件</h3><p><img src="https://i.imgur.com/bJW8oiR.png" alt="image-20210716155239657"></p>
<h3 id="6-2-new-datGuiData"><a href="#6-2-new-datGuiData" class="headerlink" title="6.2. new datGuiData()"></a>6.2. <code>new datGuiData()</code></h3><p><img src="https://i.imgur.com/oYf83WR.png" alt="image-20210716155306960"></p>
<h3 id="6-3-set-app-ticker-add"><a href="#6-3-set-app-ticker-add" class="headerlink" title="6.3. set app.ticker.add()"></a>6.3. <code>set app.ticker.add()</code></h3><p><img src="https://i.imgur.com/ml3ih6m.png" alt="image-20210716155335874"></p>
<h3 id="6-4-預覽結果畫面"><a href="#6-4-預覽結果畫面" class="headerlink" title="6.4. 預覽結果畫面"></a>6.4. 預覽結果畫面</h3><p>可以即時調整相關坐標，進行調整</p>
<p><img src="https://i.imgur.com/jhJjkSL.png" alt="image-20210716155358346"></p>
<h2 id="7-FPS-偵測外掛"><a href="#7-FPS-偵測外掛" class="headerlink" title="7. FPS 偵測外掛"></a>7. FPS 偵測外掛</h2><h3 id="7-1-載入Stats-min-js"><a href="#7-1-載入Stats-min-js" class="headerlink" title="7.1. 載入Stats.min.js"></a>7.1. 載入<code>Stats.min.js</code></h3><p><img src="https://i.imgur.com/AkArx13.png" alt="image-20210716160004003"></p>
<h3 id="7-2-JS-實作寫法"><a href="#7-2-JS-實作寫法" class="headerlink" title="7.2. JS 實作寫法"></a>7.2. JS 實作寫法</h3><p><img src="https://i.imgur.com/0200hXi.png" alt="image-20210716160052516"></p>
<h3 id="7-3-預覽結果"><a href="#7-3-預覽結果" class="headerlink" title="7.3. 預覽結果"></a>7.3. 預覽結果</h3><p><img src="https://i.imgur.com/msX0CLs.png" alt="image-20210716160602185"></p>
<h2 id="8-幾何圖形"><a href="#8-幾何圖形" class="headerlink" title="8. 幾何圖形"></a>8. 幾何圖形</h2><h3 id="8-1-畫圓、畫矩形"><a href="#8-1-畫圓、畫矩形" class="headerlink" title="8.1. 畫圓、畫矩形"></a>8.1. 畫圓、畫矩形</h3><p><img src="https://i.imgur.com/3cLLjkb.png" alt="image-20210716161720950"></p>
<h2 id="9-PIXI-chrome-plugin-外掛"><a href="#9-PIXI-chrome-plugin-外掛" class="headerlink" title="9. PIXI chrome plugin 外掛"></a>9. PIXI chrome plugin 外掛</h2><p><img src="https://i.imgur.com/vbPJCsc.png" alt="image-20210716161524141"></p>
]]></content>
      <categories>
        <category>PIXIJS</category>
      </categories>
      <tags>
        <tag>PIXIJS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS Flex</title>
    <url>/2021/09/30/2021-09-30%20CSSFlex/</url>
    <content><![CDATA[<p><img src="https://i.imgur.com/H3FIvBL.jpg" alt="1"></p>
<span id="more"></span>



<h2 id="1-外層屬性"><a href="#1-外層屬性" class="headerlink" title="1. 外層屬性"></a>1. 外層屬性</h2><p>Flex 要加在父層上面，舉例</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">background-color</span>:<span class="number">#004466</span>;</span><br><span class="line">  <span class="attribute">padding</span>:<span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">display</span>:flex;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#00ffa2</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>:<span class="number">32px</span>;</span><br><span class="line">  <span class="attribute">margin</span>:<span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>:center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;container&quot;&gt;</span><br><span class="line">  &lt;<span class="selector-tag">div</span> class=&quot;item&quot;&gt;<span class="number">1</span>&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">  &lt;<span class="selector-tag">div</span> class=&quot;item&quot;&gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Facere ipsam accusantium totam maxime dolore est ad doloremque <span class="selector-tag">a</span> labore? Aliquid non consequatur nesciunt atque voluptas ea magni natus dolores cum?&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">  &lt;<span class="selector-tag">div</span> class=&quot;item&quot;&gt;<span class="number">3</span>&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">  &lt;<span class="selector-tag">div</span> class=&quot;item&quot;&gt;<span class="number">4</span>&lt;/<span class="selector-tag">div</span>&gt;  </span><br><span class="line">&lt;/<span class="selector-tag">div</span>&gt;</span><br></pre></td></tr></table></figure>

<p>以此為例要把display:flex 寫在container 上</p>
<p>如果container 有指定500px;</p>
<p>那子元素的width 超過這個大小會怎麼樣? 比如200px</p>
<p>某個子元小變高了，預設會一起等高</p>
<p><img src="https://i.imgur.com/rcsHAU2.png" alt="2"></p>
<p>區塊元素特性</p>
<p><img src="https://i.imgur.com/KQEUU2X.png" alt="3"></p>
<p>Flex 特性</p>
<p><img src="https://i.imgur.com/Fa1pZ61.png" alt="4"></p>
<h2 id="2-flex-direction"><a href="#2-flex-direction" class="headerlink" title="2. flex-direction"></a>2. flex-direction</h2><ul>
<li><p>row(default)</p>
</li>
<li><p>row-reverse</p>
</li>
<li><p>column</p>
</li>
<li><p>column-reverse</p>
<p><img src="https://i.imgur.com/wtUqlf8.jpg" alt="5"></p>
</li>
</ul>
<h2 id="3-justify-content"><a href="#3-justify-content" class="headerlink" title="3. justify-content"></a>3. justify-content</h2><ul>
<li><p>flex-start</p>
</li>
<li><p>flex-end</p>
</li>
<li><p>center</p>
</li>
<li><p>space-around</p>
</li>
<li><p>space-between</p>
<p>space-evenly</p>
<p><img src="https://i.imgur.com/0ADJzgz.jpg" alt="6"></p>
</li>
</ul>
<h2 id="4-align-items"><a href="#4-align-items" class="headerlink" title="4. align-items"></a>4. align-items</h2><ul>
<li>flex-start</li>
<li>flex-end</li>
<li>center</li>
<li>stretch</li>
<li>baseline</li>
</ul>
<p><img src="https://i.imgur.com/DZHWGRJ.jpg" alt="7"></p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 區塊元素</title>
    <url>/2021/09/30/2021-09-30%20CSS%E5%8D%80%E5%A1%8A%E5%85%83%E7%B4%A0/</url>
    <content><![CDATA[<p>CSS規範規定，每个元素都有display屬性，每個元素都有默認的display值，如div的display默認值为“block”，則為“區塊”元素；span默認display屬性值为“inline”，是“行内”元素。</p>
<span id="more"></span>

<h2 id="1-特性1"><a href="#1-特性1" class="headerlink" title="1. 特性1"></a>1. 特性1</h2><p>盡可能佔滿版本</p>
<h2 id="2-特性2"><a href="#2-特性2" class="headerlink" title="2. 特性2"></a>2. 特性2</h2><p>區塊元素會另起一行呈現</p>
<p>1.區塊(block)元素都會另起一行 2.高度，行高以及頂和底邊距都可控制； 3.默認情况下，其寬度自動填满其父元素寬度，即寬度100% 4.可以設置寬高 width hight 區塊元素常見包括 div、p、h1~h6、 ul、ol、li、 dl、dt、dd、 form、table、hr、 blockquote 、 address、menu、pre…..等等</p>
<p><img src="https://i.imgur.com/uK4POMJ.png" alt="https://miro.medium.com/max/245/1*WLuyoSotqmRdz2-2ZBsSHw.png"></p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 常用</title>
    <url>/2021/09/30/2021-09-30%20CSS%E5%B8%B8%E7%94%A8/</url>
    <content><![CDATA[<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*, *<span class="selector-pseudo">:after</span>, *<span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  -webkit-<span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">     -moz-<span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">          <span class="attribute">box-sizing</span>: border-box;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="圖片最大寬度"><a href="#圖片最大寬度" class="headerlink" title="圖片最大寬度"></a>圖片最大寬度</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span>&#123;</span><br><span class="line"><span class="attribute">max-width</span>:<span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="高滿版"><a href="#高滿版" class="headerlink" title="高滿版"></a>高滿版</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,<span class="selector-tag">body</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="attribute">height</span>: <span class="number">100%</span>; <span class="attribute">margin</span>: <span class="number">0</span>; <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">原文網址：https://kknews.cc/code/gznznay.html</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 常錯</title>
    <url>/2021/09/30/2021-09-30%20CSS%E5%B8%B8%E9%8C%AF/</url>
    <content><![CDATA[<p><img src="https://i.imgur.com/vub8VJB.png" alt="_2021_05_17_17_30_14_13"></p>
<ul>
<li>答案<ul>
<li>第一個的 one 和 two 中間沒有包含空格，這個的意思表示，某個區塊必須<strong>同時具有</strong> one 和 two 的 class 時，才能被 CSS 所選擇到到。</li>
<li>第二個的 one 和 two 中間包含空格，意思是指，我必須要是在 <strong>one 裡面</strong>的 two，才會被選擇到。</li>
<li>第三個的 one 和 two 中間包含逗號，意思是指 class 中有 one 或 two，都會被編輯器所選擇到。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 行內元素</title>
    <url>/2021/09/30/2021-09-30%20CSS%E8%A1%8C%E5%85%A7%E5%85%83%E7%B4%A0/</url>
    <content><![CDATA[<h2 id="特性1"><a href="#特性1" class="headerlink" title="特性1"></a>特性1</h2><p>沒辦法設定寬高</p>
<h2 id="特性2"><a href="#特性2" class="headerlink" title="特性2"></a>特性2</h2><p>比較常用在段落裡</p>
<h2 id="設計技巧"><a href="#設計技巧" class="headerlink" title="設計技巧"></a>設計技巧</h2><p>如果有a 標籤不好點，但又想要點擊區域變大，可以將display 設為block 後，再設定width,height</p>
<p><img src="https://i.imgur.com/LSYSjOI.png" alt="1_zO3u8tJjMOoo6XqcAmM5Uw"></p>
<h2 id="參考連結"><a href="#參考連結" class="headerlink" title="參考連結"></a>參考連結</h2><p><a href="https://medium.com/@small2883/%E5%8D%80%E5%A1%8A%E5%85%83%E7%B4%A0-%E8%A1%8C%E5%85%A7%E5%85%83%E7%B4%A0-%E7%A9%BA%E5%85%83%E7%B4%A0%E7%89%B9%E9%BB%9E%E5%88%86%E5%88%A5%E6%9C%89%E5%93%AA%E4%BA%9B-19f8c05f16f6">區塊元素 行內元素 空元素特點？分別有哪些？</a></p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>DBeaver</title>
    <url>/2021/09/30/2021-09-30%20DBeaver/</url>
    <content><![CDATA[<h2 id="1-說明"><a href="#1-說明" class="headerlink" title="1. 說明"></a>1. 說明</h2><p>這是一套windows、macos、linux都可安裝的資料庫管理軟體</p>
<p>目前有分community版跟enterprise 版。</p>
<span id="more"></span>


<h2 id="2-下載連結"><a href="#2-下載連結" class="headerlink" title="2. 下載連結"></a>2. 下載連結</h2><p><a href="https://dbeaver.io/download/">dbeaver</a></p>
<h2 id="3-安裝完成後畫面"><a href="#3-安裝完成後畫面" class="headerlink" title="3. 安裝完成後畫面"></a>3. 安裝完成後畫面</h2><p><img src="https://i.imgur.com/YgEVNtb.png" alt="image-20210930163404002"></p>
<h2 id="4-連線SQL-SERVER"><a href="#4-連線SQL-SERVER" class="headerlink" title="4. 連線SQL SERVER"></a>4. 連線SQL SERVER</h2><p><img src="https://i.imgur.com/0uwz5U8.png" alt="image-20210930163824203"></p>
<h2 id="5-安裝相關資料庫drive"><a href="#5-安裝相關資料庫drive" class="headerlink" title="5. 安裝相關資料庫drive"></a>5. 安裝相關資料庫drive</h2><p>當連線不同資料庫類型時，會自動提示下載相關的安裝包。</p>
<p>下載後自動安裝，就可以正常使用囉。</p>
<p><img src="https://i.imgur.com/ZPRL7vj.png" alt="image-20210930164001914"></p>
]]></content>
      <categories>
        <category>MYSQL</category>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>MYSQL</tag>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>Google Sheets Automatic Backups</title>
    <url>/2021/09/30/2021-09-30%20Google-Sheets-Automatic-Backups/</url>
    <content><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>目前專案階段已經進入到軟體功能驗收階段，在進行驗收時需要將問題一一的列出來。</p>
<p>為了溝通與協同作業方便，於是選用了google sheets 進行分享。但後續想想，如果哪天一不小心出現了傻瓜或者其它意外，這份資料就不見了…</p>
<p>於是開始研究如何自動備份google sheets 資料。以下是<code>問題管制表</code>：</p>
<p><img src="https://i.imgur.com/p6YMezX.png" alt="image-20210930203829852"></p>
<h2 id="2-流程說明"><a href="#2-流程說明" class="headerlink" title="2. 流程說明"></a>2. 流程說明</h2><h3 id="2-1-建立新資料夾"><a href="#2-1-建立新資料夾" class="headerlink" title="2.1. 建立新資料夾"></a>2.1. 建立新資料夾</h3><p>比方說在問題管制表底下建立個一名稱為<code>Backups</code>資料夾，接著點擊到<code>Backups</code>這一層，我們要取出紅色線條部份的ID字串，這個屬於<code>資料夾ID</code>，待會會用到。</p>
<p><img src="https://i.imgur.com/vGDICPQ.png" alt="image-20210930203614781"></p>
<h3 id="2-2-指令碼編輯器"><a href="#2-2-指令碼編輯器" class="headerlink" title="2.2. 指令碼編輯器"></a>2.2. 指令碼編輯器</h3><p>到你要備份的對象sheet 打開，接著找到<code>工具</code>→<code>指令碼編輯器</code> ，點擊它到下一步驟畫面</p>
<p><img src="https://i.imgur.com/qcphhpd.png" alt="image-20210930200414943"></p>
<h3 id="2-3-貼上程式碼"><a href="#2-3-貼上程式碼" class="headerlink" title="2.3. 貼上程式碼"></a>2.3. 貼上程式碼</h3><p>接著會看到右邊有程式碼可以貼，請貼上以下程式碼，這個畫面是貼完之後的結果。</p>
<p>重點在<code>第10行</code> code </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">DriveAPP</span>.<span class="title function_">getFolderById</span>(<span class="string">&#x27;your backup bolder id&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>有注意到嗎？其實就是要貼上剛剛在建立資料夾步驟要留意的資料夾ID，請貼到這裡。</p>
<p>之後請記得按下<code>儲存</code>，長的像磁片正方形的那個。</p>
<p><img src="https://i.imgur.com/aRKSUw9.png" alt="image-20210930200620937"></p>
<h3 id="2-4-程式碼"><a href="#2-4-程式碼" class="headerlink" title="2.4. 程式碼"></a>2.4. 程式碼</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">makeCopy</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// generates the timestamp and stores in variable formattedDate as year-month-date hour-minute-second</span></span><br><span class="line"><span class="keyword">var</span> formattedDate = <span class="title class_">Utilities</span>.<span class="title function_">formatDate</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(), <span class="string">&quot;GMT&quot;</span>, <span class="string">&quot;yyyy-MM-dd&#x27; &#x27;HH:mm:ss&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// gets the name of the original file and appends the word &quot;copy&quot; followed by the timestamp stored in formattedDate</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="title class_">SpreadsheetApp</span>.<span class="title function_">getActiveSpreadsheet</span>().<span class="title function_">getName</span>() + <span class="string">&quot; Copy &quot;</span> + formattedDate;</span><br><span class="line"></span><br><span class="line"><span class="comment">// gets the destination folder by their ID. REPLACE xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx with your folder&#x27;s ID that you can get by opening the folder in Google Drive and checking the URL in the browser&#x27;s address bar</span></span><br><span class="line"><span class="keyword">var</span> destination = <span class="title class_">DriveApp</span>.<span class="title function_">getFolderById</span>(<span class="string">&quot;your backup folder name&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// gets the current Google Sheet file</span></span><br><span class="line"><span class="keyword">var</span> file = <span class="title class_">DriveApp</span>.<span class="title function_">getFileById</span>(<span class="title class_">SpreadsheetApp</span>.<span class="title function_">getActiveSpreadsheet</span>().<span class="title function_">getId</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment">// makes copy of &quot;file&quot; with &quot;name&quot; at the &quot;destination&quot;</span></span><br><span class="line">file.<span class="title function_">makeCopy</span>(name, destination);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-5-設定觸發條件"><a href="#2-5-設定觸發條件" class="headerlink" title="2.5. 設定觸發條件"></a>2.5. 設定觸發條件</h3><p>左邊選單有一個小時鐘的就是我們的主角，要設定時間備份，就是在這裡</p>
<p><img src="https://i.imgur.com/s8ohZyd.png" alt="image-20210930201927739"></p>
<h3 id="2-6-選擇時間驅動"><a href="#2-6-選擇時間驅動" class="headerlink" title="2.6. 選擇時間驅動"></a>2.6. 選擇時間驅動</h3><p>因為我的目的是想要定時備份，所以這次是選<code>時間驅動</code>的選項</p>
<p><img src="https://i.imgur.com/dgHuwGh.png" alt="image-20210930202210516"></p>
<h3 id="2-7-定時顆粒度"><a href="#2-7-定時顆粒度" class="headerlink" title="2.7. 定時顆粒度"></a>2.7. 定時顆粒度</h3><p><img src="https://i.imgur.com/la7gpRy.png" alt="image-20210930202310015"></p>
<h3 id="2-8-最後完成的設定"><a href="#2-8-最後完成的設定" class="headerlink" title="2.8. 最後完成的設定"></a>2.8. 最後完成的設定</h3><p>設定完之後，按下<code>儲存</code></p>
<p><img src="https://i.imgur.com/G4Giboi.png" alt="image-20210930202358258"></p>
<h3 id="2-9-觸發條件清單"><a href="#2-9-觸發條件清單" class="headerlink" title="2.9. 觸發條件清單"></a>2.9. 觸發條件清單</h3><p>按下儲存後，這時候畫面會直接導向到這個清單，紅色部分就是我們剛剛設定的。</p>
<p>眼針的我們可以發現它多了一個觸發器，這個觸發器是設定在<code>文件開啟時</code>。</p>
<p>後來實測只要使用者有去開啟這個sheet，就會自動備一份，這也是不錯的備份方式，所以我就沒有刪掉它。</p>
<p><img src="https://i.imgur.com/f5Ughop.png" alt="image-20210930202803058"></p>
<h2 id="3-最後完成"><a href="#3-最後完成" class="headerlink" title="3. 最後完成"></a>3. 最後完成</h2><p>完成囉，在這個備份的資料夾，時間一到就會多一份囉。</p>
<p><img src="https://i.imgur.com/wJLEu5V.png" alt="image-20210930203214080"></p>
]]></content>
      <categories>
        <category>備份</category>
      </categories>
      <tags>
        <tag>備份</tag>
      </tags>
  </entry>
  <entry>
    <title>VMware 相關</title>
    <url>/2021/09/30/2021-09-30%20VMWare%E7%9B%B8%E9%97%9C/</url>
    <content><![CDATA[<h2 id="1-相關概念"><a href="#1-相關概念" class="headerlink" title="1. 相關概念"></a>1. 相關概念</h2><ol>
<li>服務器虛擬化(VM)</li>
<li>網路虛擬化(NSX)</li>
<li>存儲虛擬化(VSAN)</li>
<li>數據中心</li>
</ol>
<span id="more"></span>


<h2 id="2-虛擬化產品介紹"><a href="#2-虛擬化產品介紹" class="headerlink" title="2. 虛擬化產品介紹"></a>2. 虛擬化產品介紹</h2><h3 id="2-1-虛擬化產品線分類"><a href="#2-1-虛擬化產品線分類" class="headerlink" title="2.1. 虛擬化產品線分類"></a>2.1. 虛擬化產品線分類</h3><ul>
<li><p>企業級</p>
<ul>
<li>數據中心(服務器虛擬化)<ul>
<li>vSphere 6.7</li>
<li>ESXi</li>
<li>Hpervor</li>
</ul>
</li>
<li>網路連接與安全(NSX)<ul>
<li>NSX 軟體</li>
<li>輔助類openstack</li>
</ul>
</li>
<li>儲存與可用性(VSAN)<ul>
<li>vsphere 6.7</li>
</ul>
</li>
<li>雲計算管理平台<ul>
<li>vCloud</li>
<li>管理類工具</li>
</ul>
</li>
<li>物聯網<ul>
<li>IoT Center</li>
</ul>
</li>
<li>桌面虛擬化(VDC)<ul>
<li>hirzon7</li>
</ul>
</li>
</ul>
</li>
<li><p>個人級</p>
<ul>
<li>workstation</li>
</ul>
</li>
</ul>
<h3 id="2-2-虛擬化產品授權介紹"><a href="#2-2-虛擬化產品授權介紹" class="headerlink" title="2.2. 虛擬化產品授權介紹"></a>2.2. 虛擬化產品授權介紹</h3><ul>
<li>按照cpu的個數授權</li>
</ul>
]]></content>
      <categories>
        <category>VMware</category>
      </categories>
      <tags>
        <tag>VMware</tag>
      </tags>
  </entry>
  <entry>
    <title>壓力測試</title>
    <url>/2021/09/30/2021-09-30%20%E5%A3%93%E5%8A%9B%E6%B8%AC%E8%A9%A6/</url>
    <content><![CDATA[<p>可以找出內存泄漏、併發與同步</p>
<span id="more"></span>


<h2 id="1-性能指標"><a href="#1-性能指標" class="headerlink" title="1. 性能指標"></a>1. 性能指標</h2><ul>
<li>響應時間(Response Time:RT)<ul>
<li>響應時間指用戶從客戶端發起一個請求開始，到客戶端接收到服務器端返回的響應結束，整個過程所耗費的時間。</li>
</ul>
</li>
<li>HPS<ul>
<li>每秒點擊次數，單位是次&#x2F;秒</li>
</ul>
</li>
<li>TPS<ul>
<li>系統每秒處理交易數，單位是筆&#x2F;秒</li>
</ul>
</li>
<li>QPS<ul>
<li>系統每秒處理查詢次數，單位是次&#x2F;秒</li>
</ul>
</li>
</ul>
<p>無論TPS、QPS、HPS，此指標是衡量系統處理能力非常重要的指標，越大越好，根據經驗，一般情況下：</p>
<ul>
<li><p>金融行業</p>
<ul>
<li>1000TPS~50000TPS，不包括互聯網化的活動</li>
</ul>
</li>
<li><p>保險行業</p>
<ul>
<li>100TPS~100000TPS，不包括互聯網化的活動</li>
</ul>
</li>
<li><p>製造行業</p>
<ul>
<li>10TPS~5000TPS</li>
</ul>
</li>
<li><p>互聯網電子商務</p>
<ul>
<li>10000TPS~1000000TPS</li>
</ul>
</li>
<li><p>互聯網中型網站</p>
<ul>
<li>1000TPS~50000TPS</li>
</ul>
</li>
<li><p>互聯網小型網站</p>
<ul>
<li>500TPS~10000TPS</li>
</ul>
</li>
<li><p>最大響應時間</p>
<ul>
<li>指用戶發出請求或者指令到系統做出反應的最大時間，比如100萬個用戶請求，其中1個用戶反應時間為90秒，那這個就是最大響應時間</li>
</ul>
</li>
<li><p>最少響應時間</p>
<ul>
<li>同上，概念</li>
</ul>
</li>
<li><p>90%響應時間</p>
<ul>
<li>指所有用戶的響應時間進行排序，第90%響應時間為多少?</li>
</ul>
</li>
</ul>
<p>從外部看，性能測試主要關注如下三個指標</p>
<ul>
<li>吞吐量<ul>
<li>每秒鐘系統能夠處理的請求數、任務數</li>
</ul>
</li>
<li>響應時間<ul>
<li>服務處理一個請求或一個任務的耗時</li>
</ul>
</li>
<li>錯誤率<ul>
<li>一批請求中結果出錯的請求所占比例</li>
</ul>
</li>
</ul>
<p>影響性能考慮點包括：<br>數據庫、應用程序、中間件(tomcat、nginx)、網路和操作系統等方面<br>首先考慮自己的應用屬於CPU密集型還是IO密集型<br>是屬於哪一類型，可以監看效能，看哪一個部分使用常滿載,是CPU 還是IO</p>
<p>web service 性能測試計劃<br>高級web性能測試計劃<br>数据库访问性能测试计划</p>
]]></content>
      <categories>
        <category>壓力測試</category>
      </categories>
      <tags>
        <tag>壓力測試</tag>
      </tags>
  </entry>
  <entry>
    <title>網頁設計輔助工具</title>
    <url>/2021/09/30/2021-09-30%20%E7%B6%B2%E9%A0%81%E8%A8%AD%E8%A8%88%E8%BC%94%E5%8A%A9%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<h2 id="軟體工具"><a href="#軟體工具" class="headerlink" title="軟體工具"></a>軟體工具</h2><p><a href="http://www.getmarkman.com/#/download-modal">马克鳗</a></p>
<p><a href="https://www.fancynode.com.cn/pxcook">PxCook - 高效易用的自动标注工具,生成前端代码,设计研发协作利器</a></p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS tools</tag>
      </tags>
  </entry>
  <entry>
    <title>簡單批次CRUD測試MYSQL複寫機制</title>
    <url>/2021/09/30/2021-09-30%20%E7%B0%A1%E5%96%AE%E6%89%B9%E6%AC%A1CRUD%E6%B8%AC%E8%A9%A6MYSQL%E8%A4%87%E5%AF%AB%E6%A9%9F%E5%88%B6/</url>
    <content><![CDATA[<p>部門分工合作，同事架起了在centOS 系統下的HA架構。</p>
<p>資料庫也設定了複寫機制。</p>
<p>由我這邊寫個簡單的程式去跑跑看這個架構是否會出狀況，所以需要簡單的CRUD操作網頁介面。</p>
<p>於是這個簡單的CODE就產生了…</p>
<p><a href="https://github.com/kitefree/crud_test_sync_db">sample code</a></p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>資通安全數位教育訓練</title>
    <url>/2021/09/30/2021-09-30%20%E8%B3%87%E9%80%9A%E5%AE%89%E5%85%A8%E6%95%B8%E4%BD%8D%E6%95%99%E8%82%B2%E8%A8%93%E7%B7%B4/</url>
    <content><![CDATA[<h2 id="1-資安的問題不再是資安系統層面了"><a href="#1-資安的問題不再是資安系統層面了" class="headerlink" title="1. 資安的問題不再是資安系統層面了"></a>1. 資安的問題不再是資安系統層面了</h2><p>資料多樣性<br>很多的資料傳遞方式、來源、去向</p>
<p>即時性<br>比如金融服務</p>
<p>巨量<br>可能會同時影響到上萬筆資料</p>
<span id="more"></span>


<h2 id="2-個資隱私保護"><a href="#2-個資隱私保護" class="headerlink" title="2. 個資隱私保護"></a>2. 個資隱私保護</h2><p>資訊應用的方式、管道、媒介<br>隱私保護如何去做到告知、同意、保密<br>避免資料盜用等</p>
<h2 id="3-健身記錄app-意外洩全球軍「跡」"><a href="#3-健身記錄app-意外洩全球軍「跡」" class="headerlink" title="3. 健身記錄app 意外洩全球軍「跡」"></a>3. 健身記錄app 意外洩全球軍「跡」</h2><h2 id="4-全球資安恐慌-恐懼為哪樁"><a href="#4-全球資安恐慌-恐懼為哪樁" class="headerlink" title="4. 全球資安恐慌 恐懼為哪樁?"></a>4. 全球資安恐慌 恐懼為哪樁?</h2><p>國家在製成手機時準備的後門，蒐集資料<br>在購買前可以上網了解一下該產品的狀況</p>
<h2 id="5-檢視手機使用全"><a href="#5-檢視手機使用全" class="headerlink" title="5. 檢視手機使用全"></a>5. 檢視手機使用全</h2><p>是否設定自動密碼鎖定?<br>應限制分鐘數自動鎖定<br>行動裝置本身是否信任?<br>廠商、製造商可信任?<br>是否連線至可信任的網路?<br>無線網路是否可信任??</p>
<p>是否安裝不可信任的APP軟體?<br>檢視方法 惡意程式上網查是否有公告,google play app store,網路查詢<br>繪圖、製圖、小說、閱讀、遊戲軟體等</p>
<p>是否存取不可信任的內容?<br>資料同步儲存與雲端備份是否安全?<br>是否揭露行動裝置GPS定位?</p>
<h2 id="6-手機安全步驟"><a href="#6-手機安全步驟" class="headerlink" title="6. 手機安全步驟"></a>6. 手機安全步驟</h2><p>常期更改密碼<br>將不同等級、不同安全性設定不同的密碼</p>
<h2 id="7-勤索軟體防護"><a href="#7-勤索軟體防護" class="headerlink" title="7. 勤索軟體防護"></a>7. 勤索軟體防護</h2><p>通常都是攻擊你重要的資料庫系統<br>比如核心業務或核心系統<br>要考慮如何有一個共同的方法進行備份</p>
<p>備份的安排<br>備份的週期<br>備份的方式<br>備份恢復測試<br>安裝防毒軟體<br>定期安裝修補軟體，也就是像patch的更新檔<br>可以設定自動安裝</p>
<p>如果是伺服器級的修補，要先經過測試後，再上線</p>
<h2 id="8-資訊安全管理制度"><a href="#8-資訊安全管理制度" class="headerlink" title="8. 資訊安全管理制度"></a>8. 資訊安全管理制度</h2><p>ISO 27001 是常見的制度<br>核心三要素<br>機密性<br>完整性<br>可用性</p>
]]></content>
      <categories>
        <category>資訊安全</category>
      </categories>
      <tags>
        <tag>資訊安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Git筆記part2</title>
    <url>/2021/10/02/2021-10-02%20Git%E7%AD%86%E8%A8%98part2/</url>
    <content><![CDATA[<h2 id="1-檢查版號指令"><a href="#1-檢查版號指令" class="headerlink" title="1. 檢查版號指令"></a>1. 檢查版號指令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure>
<span id="more"></span>


<h2 id="2-使用者設定指令"><a href="#2-使用者設定指令" class="headerlink" title="2. 使用者設定指令"></a>2. 使用者設定指令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;kite&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;kite@hotmail.com&quot;</span></span><br></pre></td></tr></table></figure>

<p>如果不小心設定錯誤名稱，再執行同樣的指令，就可以接做修改囉。</p>
<h2 id="3-查看config"><a href="#3-查看config" class="headerlink" title="3. 查看config"></a>3. 查看config</h2><p>如果要找到實際檔案的修改位置以<code>windows</code>來說在使用者目錄底下的<code>.gitconfig</code>檔</p>
<p><img src="https://i.imgur.com/fgFioSm.png" alt="image-20211002191613907"></p>
<p>或者下指令也是可以的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure>

<h2 id="4-縮短指令"><a href="#4-縮短指令" class="headerlink" title="4. 縮短指令"></a>4. 縮短指令</h2><p>可以把常用的指令進行縮寫設定</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global alias.co checkout</span><br><span class="line">git config --global alias.br branch</span><br><span class="line">git config --global alias.st status</span><br></pre></td></tr></table></figure>

<p>設定完之後，之後就打指令<code>git co</code> 就可以代表<code>git checkout</code>。這些設定儲存在<code>.gitconfig</code>裡哦。</p>
<h2 id="5-刪除指令"><a href="#5-刪除指令" class="headerlink" title="5. 刪除指令"></a>5. 刪除指令</h2><p>以指令方式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global --<span class="built_in">unset</span> alias.co</span><br></pre></td></tr></table></figure>

<p>或者去打開<code>.gitconfig</code>t檔進行編輯也是可以的</p>
<h2 id="6-小技巧"><a href="#6-小技巧" class="headerlink" title="6. 小技巧"></a>6. 小技巧</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="built_in">alias</span>]</span><br><span class="line">st = status</span><br><span class="line">sample_code = <span class="built_in">clone</span> https://github.com/kitefree/crud_test_sync_db.git</span><br><span class="line">code = !code</span><br></pre></td></tr></table></figure>

<p>可以用 sample_code 的方式去抓一個固定的git 內容</p>
<p>code &#x3D; !code ，只要前面加驚嘆號就是呼叫外部程式的方式</p>
<h3 id="6-1-常用指令參考"><a href="#6-1-常用指令參考" class="headerlink" title="6.1. 常用指令參考"></a>6.1. 常用指令參考</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="built_in">alias</span>]</span><br><span class="line">    s = status</span><br><span class="line">    co = checkout</span><br><span class="line">    cob = checkout -b</span><br><span class="line">    del = branch -D    </span><br><span class="line">    br = branch --format=<span class="string">&#x27;%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(contents:subject) %(color:green)(%(committerdate:relative)) [%(authorname)]&#x27;</span> --<span class="built_in">sort</span>=-committerdate</span><br><span class="line">    save = !git add -A &amp;&amp; git commit -m <span class="string">&#x27;chore: savepoint&#x27;</span></span><br><span class="line">    undo = reset HEAD~1 --mixed</span><br><span class="line">    res = !git reset --hard</span><br><span class="line">    <span class="keyword">done</span> = !git push origin HEAD</span><br><span class="line">    lg = !git <span class="built_in">log</span> --pretty=format:\&quot;%C(magenta)%h%Creset -%C(red)%d%Creset %s %C(dim green)(%cr) [%an]\&quot; --abbrev-commit -30</span><br></pre></td></tr></table></figure>

<h2 id="7-也可以在系統層級自創指令"><a href="#7-也可以在系統層級自創指令" class="headerlink" title="7. 也可以在系統層級自創指令"></a>7. 也可以在系統層級自創指令</h2><p><code>~/.bash_profile</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> hello=<span class="string">&quot;echo Hello Boudhayan!! How are you?&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/K00OeUZ.png" alt="img"></p>
<h2 id="8-也可以使用shell-function-包裝git-指令"><a href="#8-也可以使用shell-function-包裝git-指令" class="headerlink" title="8. 也可以使用shell function 包裝git 指令"></a>8. 也可以使用shell function 包裝git 指令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">gcp</span></span>() &#123;</span><br><span class="line">     git commit -am <span class="string">&quot;<span class="variable">$1</span>&quot;</span> &amp;&amp; git push</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcp <span class="string">&quot;initial commit&quot;</span></span><br></pre></td></tr></table></figure>

<p>可以參考 <a href="https://www.freecodecamp.org/news/an-intro-to-git-aliases-a-faster-way-of-working-with-git-b1eda81c7747/">An intro to Git Aliases: a faster way of working with Git</a> 這篇</p>
<h2 id="9-依專案設定使用者指令"><a href="#9-依專案設定使用者指令" class="headerlink" title="9. 依專案設定使用者指令"></a>9. 依專案設定使用者指令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --<span class="built_in">local</span> user.name Snow</span><br><span class="line">git config --<span class="built_in">local</span> user.email Snow@gmail.com</span><br></pre></td></tr></table></figure>

<p>我們可以看到在專案底下的<code>.git\config</code> 檔案打開，這邊就多一個<code>user</code>設定</p>
<p><img src="https://i.imgur.com/TkWqgrZ.png" alt="image-20211003100029940"></p>
<h2 id="10-全新開始"><a href="#10-全新開始" class="headerlink" title="10. 全新開始"></a>10. 全新開始</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>

<h2 id="11-⽬錄不想再被-Git-控制？"><a href="#11-⽬錄不想再被-Git-控制？" class="headerlink" title="11. ⽬錄不想再被 Git 控制？"></a>11. ⽬錄不想再被 Git 控制？</h2><p>砍掉<code>.git</code>資料夾就好囉</p>
<h2 id="12-確認目錄的狀態"><a href="#12-確認目錄的狀態" class="headerlink" title="12. 確認目錄的狀態"></a>12. 確認目錄的狀態</h2><p>這張圖有助於了解後續指令的相關概念</p>
<p><img src="https://i.imgur.com/Irbf6oA.png" alt="查看來源圖片"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>

<p>增加或修改檔案預設會在<code>Unstaged files</code>狀態</p>
<h2 id="13-追蹤檔案-stage-file"><a href="#13-追蹤檔案-stage-file" class="headerlink" title="13. 追蹤檔案(stage file)"></a>13. 追蹤檔案(stage file)</h2><h3 id="13-1-所有檔"><a href="#13-1-所有檔" class="headerlink" title="13.1. 所有檔"></a>13.1. 所有檔</h3><p>把目前所有更新的檔案都加入到<code>Staged files</code> 狀態可使用以下指令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add -A</span><br></pre></td></tr></table></figure>

<p>或者是</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add --all</span><br></pre></td></tr></table></figure>

<p>其實 <code>git add .</code> 跟 <code>git add -A</code> 效果是不同的</p>
<h3 id="13-2-單個檔"><a href="#13-2-單個檔" class="headerlink" title="13.2. 單個檔"></a>13.2. 單個檔</h3><p>git add  <code>file name</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add index.html</span><br></pre></td></tr></table></figure>

<h3 id="13-3-多個檔"><a href="#13-3-多個檔" class="headerlink" title="13.3. 多個檔"></a>13.3. 多個檔</h3><p>git add <code>file1</code> <code>file2</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add index.html readme.md</span><br></pre></td></tr></table></figure>

<h3 id="13-4-針對副檔名批次追蹤"><a href="#13-4-針對副檔名批次追蹤" class="headerlink" title="13.4. 針對副檔名批次追蹤"></a>13.4. 針對副檔名批次追蹤</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add *.html</span><br></pre></td></tr></table></figure>

<h2 id="14-提交到倉庫"><a href="#14-提交到倉庫" class="headerlink" title="14. 提交到倉庫"></a>14. 提交到倉庫</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;message&quot;</span></span><br></pre></td></tr></table></figure>

<p>下完這個指令之後是提交到local repo 倉庫</p>
<h2 id="15-歷史記錄"><a href="#15-歷史記錄" class="headerlink" title="15. 歷史記錄"></a>15. 歷史記錄</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/DoAASdc.png" alt="image-20211003213017296"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --graph</span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/tzEs4Ds.png" alt="image-20211003212950939"></p>
<h2 id="16-如何自定指令"><a href="#16-如何自定指令" class="headerlink" title="16. 如何自定指令"></a>16. 如何自定指令</h2><p>比如hexo 這樣</p>
<h2 id="17-git-重要四個物件"><a href="#17-git-重要四個物件" class="headerlink" title="17. git 重要四個物件"></a>17. git 重要四個物件</h2><p><code>blob</code>、<code>tree</code>、<code>commit</code>、<code>tag</code></p>
<p>blob(binary large object)</p>
<p>查閱物件常用指令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git cat-file&lt;SHA1&gt;</span><br><span class="line">-t (git object <span class="built_in">type</span>)</span><br><span class="line">-s (git object size)</span><br><span class="line">-p (git object contnet)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git cat-file -t </span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git cat-file -p</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git cat-file -s</span><br></pre></td></tr></table></figure>



<h3 id="17-1-commit-物件"><a href="#17-1-commit-物件" class="headerlink" title="17.1. commit 物件"></a>17.1. commit 物件</h3><p>舉例來說：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kite-nb@DESKTOP-ORUP4EV MINGW64 ~/Downloads/gitTest/.git/objects (GIT_DIR!)</span><br><span class="line">$ git cat-file -t ef81</span><br><span class="line">commit</span><br><span class="line"></span><br><span class="line">kite-nb@DESKTOP-ORUP4EV MINGW64 ~/Downloads/gitTest/.git/objects (GIT_DIR!)</span><br><span class="line">$ git cat-file -p ef81</span><br><span class="line">tree 8151fedb3b9ed570e97ec2c51a878b717c446343</span><br><span class="line">author kite &lt;kitefree@gmail.com&gt; 1686465526 +0800</span><br><span class="line">committer kite &lt;kitefree@gmail.com&gt; 1686465526 +0800</span><br><span class="line"></span><br><span class="line">first commit</span><br></pre></td></tr></table></figure>



<h3 id="17-2-tree-物件"><a href="#17-2-tree-物件" class="headerlink" title="17.2. tree 物件"></a>17.2. tree 物件</h3><p>舉例來說：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kite-nb@DESKTOP-ORUP4EV MINGW64 ~/Downloads/gitTest/.git/objects (GIT_DIR!)</span><br><span class="line">$ git cat-file -t 8151</span><br><span class="line">tree</span><br><span class="line"></span><br><span class="line">kite-nb@DESKTOP-ORUP4EV MINGW64 ~/Downloads/gitTest/.git/objects (GIT_DIR!)</span><br><span class="line">$ git cat-file -p 8151</span><br><span class="line">100644 blob b5b9ef6c6a00ef52d45f5e557c6a71e4d1367681    file.txt</span><br><span class="line">100644 blob e69de29bb2d1d6434b8b29ae775ad8c2e48c5391    file02.txt</span><br></pre></td></tr></table></figure>



<h2 id="18-目前GIT-使用的是sha1的雜湊演算法"><a href="#18-目前GIT-使用的是sha1的雜湊演算法" class="headerlink" title="18. 目前GIT 使用的是sha1的雜湊演算法"></a>18. 目前GIT 使用的是sha1的雜湊演算法</h2><p>檔案內容碰撞的實例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ shasum shattered-*</span><br><span class="line">38762cf7f55934b34d179ae6a4c80cadccbb7f0a *shattered-1.pdf</span><br><span class="line">38762cf7f55934b34d179ae6a4c80cadccbb7f0a *shattered-2.pdf</span><br></pre></td></tr></table></figure>

<p>如果用 <code>sha256</code> 就不會碰撞</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ shasum -a 256 shattered-*</span><br><span class="line">2bb787a73e37352f92383abe7e2902936d1059ad9f1ba6daaa9c1e58ee6970d0 *shattered-1.pdf</span><br><span class="line">d4488775d29bdef7993367d541064dbdda50d383f89f0aa13a6ff2e0894ba5ff *shattered-2.pdf</span><br></pre></td></tr></table></figure>

<p>檔案名稱沒有碰撞</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git ls-files -s</span><br><span class="line">100644 ba9aaa145ccd24ef760cf31c74d8f7ca1a2e47b0 0       shattered-1.pdf</span><br><span class="line">100644 b621eeccd5c7edac9b7dcba35a8d5afd075e24f2 0       shattered-2.pdf</span><br></pre></td></tr></table></figure>



<p>參考網站：<a href="https://shattered.io/">https://shattered.io/</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git cat-file 8982 -p</span><br><span class="line">tree 2b3149179c8e3ecf0bbedf6816141cd4c6fe03c9</span><br><span class="line">parent 98322f878cfa4ca296318fe55f03483555a7e40c</span><br><span class="line">author DESKTOP-I40U13Q\kite &lt;kitefree@gmail.com&gt; 1686837812 +0800</span><br><span class="line">committer DESKTOP-I40U13Q\kite &lt;kitefree@gmail.com&gt; 1686837812 +0800</span><br><span class="line"></span><br><span class="line">add folder01</span><br></pre></td></tr></table></figure>



<h2 id="19-Git-裡的四種物件的關係"><a href="#19-Git-裡的四種物件的關係" class="headerlink" title="19. Git 裡的四種物件的關係"></a>19. Git 裡的四種物件的關係</h2><p><img src="https://i.imgur.com/vyf5jGf.png" alt="image-20230616085021570"></p>
<ol>
<li>把檔案加入 Git 之後，檔案的內容會被轉成 Blob 物件儲存。</li>
<li>⽬錄以及檔名會存放在 Tree 物件內，Tree 物件會指向 Blob 物件，或是其它的 Tree 物<br> 件。</li>
<li>Commit 物件會指向某個 Tree 物件。除了第⼀個 Commit 之外，其它的 Commit 都會指向<br> 前⼀次的 Commit 物件。</li>
<li>Tag 物件（Annotated Tag）會指向某個 Commit 物件。</li>
<li>分⽀雖然不屬於這四個物件之⼀，但它會指向某個 Commit 物件。</li>
<li>當開始往 Git Server 上推送之後，在 .git&#x2F;refs 底下就會多出⼀個 remote 的⽬錄，裡⾯<br> 放的是遠端的分⽀，基本上跟本地的分⽀是差不多的概念，同樣也會指向某個 Commit 物<br> 件。</li>
<li>HEAD 也不屬於這四個物件之⼀，它會指向某個分⽀。</li>
</ol>
<h2 id="20-垃圾回收機制"><a href="#20-垃圾回收機制" class="headerlink" title="20. 垃圾回收機制"></a>20. 垃圾回收機制</h2><p><img src="https://i.imgur.com/sMN3ypp.png" alt="image-20230616102934912"><br>當每次使⽤ git add 指令把檔案加到暫存 區的時候，即使檔案的內容只改了⼀個字，因為算出來的 SHA-1 值不同，所以 Git 也會為它做 出⼀顆全新的 Blob 物件，⽽不是只記錄「差異」。也因為 Git 在切換 Commit 的時候會像「拎 葡萄」⼀樣整串抽出來，不需要⼀個⼀個去拼湊歷史紀錄，所以在做 Checkout 的時候效能相對 的比較好。有些⼈也會⽤快照（Snapshot）來形容這個「拎葡萄」的概念。</p>
<p>我們來了解一下目前的檔案狀況：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git ls-files -s</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kite@DESKTOP-I40U13Q MINGW64 /d/kite/tmp/test (master)</span><br><span class="line">$ git ls-files -s</span><br><span class="line">100644 5bbd493e709d6f1d06c653ef6cc0df91f1b3a065 0       index.html</span><br></pre></td></tr></table></figure>

<p>使用<code>git gc</code>指令，進行手動回收垃圾，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kite@DESKTOP-I40U13Q MINGW64 /d/kite/tmp/test (master)</span><br><span class="line">$ git gc</span><br><span class="line">Enumerating objects: 6, <span class="keyword">done</span>.</span><br><span class="line">Counting objects: 100% (6/6), <span class="keyword">done</span>.</span><br><span class="line">Delta compression using up to 8 threads</span><br><span class="line">Compressing objects: 100% (3/3), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (6/6), <span class="keyword">done</span>.</span><br><span class="line">Total 6 (delta 1), reused 6 (delta 1), pack-reused 0</span><br></pre></td></tr></table></figure>

<p>透過<code>git verify-pack -v</code>查閱路徑<code>objects/pack/</code>底下打包好的壓縮物件內容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git verify-pack -v</span><br></pre></td></tr></table></figure>

<p>執行如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kite@DESKTOP-I40U13Q MINGW64 /d/kite/tmp/test (master)</span><br><span class="line">$ git verify-pack -v .git/objects/pack/pack-e1c18eef9de03245886714260e8358ee3fe255e5.idx</span><br><span class="line">cd61bd77fbdcfb74ff2b4121b95bcb49481e49b9 commit 254 179 12</span><br><span class="line">31473df02f02abb405e1263288cb80f3f2f21844 commit 202 143 191</span><br><span class="line">5bbd493e709d6f1d06c653ef6cc0df91f1b3a065 blob   267 191 334</span><br><span class="line">c4711c95748c9bc71663450934fff3ad296c245b tree   38 49 525</span><br><span class="line">7f4709e94455b029ee72933dce31e517ae196806 tree   38 49 574</span><br><span class="line">56efbdba61ff12f90f864930b9a85eac0259666d blob   18 30 623 1 5bbd493e709d6f1d06c653ef6cc0df91f1b3a065</span><br><span class="line">non delta: 5 objects</span><br><span class="line">chain length = 1: 1 object</span><br><span class="line">.git/objects/pack/pack-e1c18eef9de03245886714260e8358ee3fe255e5.pack: ok</span><br></pre></td></tr></table></figure>

<p>我們看這行<code>56efbdba61ff12f90f864930b9a85eac0259666d blob   18 30 623 1 5bbd493e709d6f1d06c653ef6cc0df91f1b3a065</code></p>
<p>這個blob只有18btyes 檔案大小，原因是因為它參照了<code>5bbd</code>這個blob 物件進行儲存，做到了類似差異備份的機制，因此檔案變小了。</p>
<p>最後，說明什麼時機點git 會自動執行gc的機制：</p>
<ol>
<li><p>當在 .git&#x2F;objects ⽬錄的物件或是打包過的 packfile 數量過多的時候，Git 會⾃動觸發資源回收指令。</p>
</li>
<li><p>當執⾏ git push 指令把內容推⾄遠端伺服器時（如果你有仔細觀察過 Push 指令的訊息的話…）。</p>
</li>
</ol>
<blockquote>
<p>話說回來，其實 Git 也不是真的很在意浪費空間這回事，反正現在硬碟這麼便宜，能夠快速、<br>有效率的操作才是 Git 關切的重點。</p>
</blockquote>
<h2 id="21-git-branch"><a href="#21-git-branch" class="headerlink" title="21. git branch"></a>21. git branch</h2><p>git branch(list and branches we have)<br>git branch <branch_name>(create a branch with branch_name,if there already have branch with the name you want to create,it will return error)</p>
<p>git branch -D <branch_name>(delete branch,can’t delete current active branch or branch not existing)<br>git branch –delete dev</p>
<p>git branch -m <old_name> <new_name>(rename branch with new name)</p>
<h3 id="21-1-刪除分支"><a href="#21-1-刪除分支" class="headerlink" title="21.1. 刪除分支"></a>21.1. 刪除分支</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -d &lt;branch_name&gt;</span><br></pre></td></tr></table></figure>

<h3 id="21-2-強制刪除分支"><a href="#21-2-強制刪除分支" class="headerlink" title="21.2. 強制刪除分支"></a>21.2. 強制刪除分支</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -D &lt;branch_name&gt;</span><br></pre></td></tr></table></figure>



<h2 id="22-git-merge"><a href="#22-git-merge" class="headerlink" title="22. git merge"></a>22. git merge</h2><p>先切換到<code>master</code>分支，再下指令進行合併：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git merge <span class="built_in">cat</span></span><br></pre></td></tr></table></figure>

<p>如果在master分支上都未做變動，進行merge時，會是<code>fast-forward</code>(快轉)</p>
<p>如果在master分支上有做變動，進行merge時，會是<code>3 ways merge</code></p>
<p>以<code>sourcetree</code>進行操作</p>
<p><img src="https://i.imgur.com/B6bqPdf.png" alt="image-20230616165944213"></p>
<h3 id="22-1-快轉模式-fast-forward-情況下，還是想要有小耳朵"><a href="#22-1-快轉模式-fast-forward-情況下，還是想要有小耳朵" class="headerlink" title="22.1. 快轉模式(fast-forward)情況下，還是想要有小耳朵"></a>22.1. 快轉模式(fast-forward)情況下，還是想要有小耳朵</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git merge <span class="built_in">cat</span> --no-ff</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kite@DESKTOP-I40U13Q MINGW64 /d/kite/tmp/test (master)</span><br><span class="line">$ git merge <span class="built_in">cat</span> --no-ff</span><br><span class="line">hint: Waiting <span class="keyword">for</span> your editor to close the file...</span><br><span class="line">[1612:0616/212512.631:ERROR:service_worker_storage.cc(1933)] Failed to delete the database: Database IO error</span><br><span class="line">Merge made by the <span class="string">&#x27;recursive&#x27;</span> strategy.</span><br><span class="line"> cat4.html | 0</span><br><span class="line"> cat5.html | 0</span><br><span class="line"> 2 files changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line"> create mode 100644 cat4.html</span><br><span class="line"> create mode 100644 cat5.html</span><br></pre></td></tr></table></figure>

<p><code>sourcetree</code>方式</p>
<p><img src="https://i.imgur.com/yBQFUVZ.png" alt="image-20230616213033199"></p>
<p><img src="https://i.imgur.com/nlQuCKV.png" alt="image-20230616213205677"></p>
<p><code>merge</code>、<code>rebase</code>發生衝突時，具體步驟如下：</p>
<p>1.優先解決衝突檔案的內容修正</p>
<ol start="2">
<li>接著進行<code>git add</code>指令</li>
</ol>
<p>3-1 git merge 的情境，則繼續下<code>git commit</code>指令</p>
<p>3-2 git rebase的情境，指令為<code> git rebase --continue</code></p>
<h2 id="ORIG-HEAD"><a href="#ORIG-HEAD" class="headerlink" title="ORIG_HEAD"></a>ORIG_HEAD</h2><p>Git 有另⼀個特別的紀錄點叫做 ORIG_HEAD ，當你在做⼀些比較「危險」的操作（例如像 merge 、 rebase 或 reset 之類的），Git 就會把 HEAD 的狀態存放在這裡，讓你隨時可以跳回危險動作之前的狀態。</p>
<h2 id="git-rebase"><a href="#git-rebase" class="headerlink" title="git rebase"></a>git rebase</h2><p>互動模式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rebase -i &lt;commit_sha1&gt;</span><br></pre></td></tr></table></figure>

<p><code>pick</code>：預設都是這個指令，代表會使用這個 Commit。<br><code>reword</code>：使用這個 Commit，但是執行到此 Commit 時會開啟 vim 供更改 Commit 訊息。<br><code>edit</code>：使用這個 Commit，但是執行到此 Commit 時會暫停，直到執行 git rebase –continue。<br><code>squash</code>：將這個 Commit 與前一個 Commit 合併，訊息也會合併。<br><code>fixup</code>：與 squash 相同，但會捨棄這個 Commit 的訊息。<br><code>drop</code>：刪除這個 Commit，結果同直接刪除行。</p>
<h2 id="23-狀況題"><a href="#23-狀況題" class="headerlink" title="23. 狀況題"></a>23. 狀況題</h2><h3 id="23-1-如果在-git-add-之後⼜修改了那個檔案-的內容？"><a href="#23-1-如果在-git-add-之後⼜修改了那個檔案-的內容？" class="headerlink" title="23.1. 如果在 git add 之後⼜修改了那個檔案 的內容？"></a>23.1. 如果在 git add 之後⼜修改了那個檔案 的內容？</h3><h3 id="23-2-我想要找某個⼈或某些⼈的-Commit"><a href="#23-2-我想要找某個⼈或某些⼈的-Commit" class="headerlink" title="23.2. 我想要找某個⼈或某些⼈的 Commit"></a>23.2. 我想要找某個⼈或某些⼈的 Commit</h3>   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --oneline --author=<span class="string">&quot;Sherly&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="23-3-想找commit罵髒話"><a href="#23-3-想找commit罵髒話" class="headerlink" title="23.3. 想找commit罵髒話"></a>23.3. 想找commit罵髒話</h3>   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --oneline --grep=<span class="string">&quot;WTF&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="23-4-想找commit-提到ruby"><a href="#23-4-想找commit-提到ruby" class="headerlink" title="23.4. 想找commit 提到ruby"></a>23.4. 想找commit 提到ruby</h3>   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> -S <span class="string">&quot;Ruby&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="23-5-看你早上commit-了什麼"><a href="#23-5-看你早上commit-了什麼" class="headerlink" title="23.5. 看你早上commit 了什麼"></a>23.5. 看你早上commit 了什麼</h3>   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --oneline --since-=<span class="string">&quot;9am&quot;</span> --<span class="keyword">until</span>=<span class="string">&quot;12am&quot;</span> --after=<span class="string">&quot;2017-01&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="23-6-我不是真的想把這個檔案刪掉，只是不想讓這個檔案再被Git控管了"><a href="#23-6-我不是真的想把這個檔案刪掉，只是不想讓這個檔案再被Git控管了" class="headerlink" title="23.6. 我不是真的想把這個檔案刪掉，只是不想讓這個檔案再被Git控管了"></a>23.6. 我不是真的想把這個檔案刪掉，只是不想讓這個檔案再被Git控管了</h3>   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">rm</span> welcome.html --cached</span><br></pre></td></tr></table></figure>

<h3 id="23-7-修改Commit紀錄"><a href="#23-7-修改Commit紀錄" class="headerlink" title="23.7. 修改Commit紀錄"></a>23.7. 修改Commit紀錄</h3><p>   要修改Commit紀錄有好幾種⽅法：</p>
<ol>
<li><p>把.git⽬錄整個刪除（誤）。</p>
</li>
<li><p>使⽤<code>git rebase</code>來修改歷史。</p>
</li>
<li><p>先把Commit⽤<code>git reset</code>拆掉，整理後再重新Commit。</p>
</li>
<li><p>使⽤<code>--amend</code>參數來修改最後⼀次的Commit。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit --amend -m <span class="string">&quot;Welcome To Facebook&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/MNcYYqA.png" alt="image-20211004171011513"></p>
<p>雖然在commit 數上沒有變動，訊息上也更改了，但注意觀查其實在sha值上已經換過了，畢竟已經有做<code>修改</code>動作</p>
</li>
</ol>
<h3 id="23-8-追加檔案到最近⼀次的Commit"><a href="#23-8-追加檔案到最近⼀次的Commit" class="headerlink" title="23.8. 追加檔案到最近⼀次的Commit"></a>23.8. 追加檔案到最近⼀次的Commit</h3><p>   先將目前的檔案加入到<code>staged</code>狀態</p>
   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure>

<p>   接著下這個指令就會合併到最後一次commit 囉</p>
   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit --amend --no-edit</span><br></pre></td></tr></table></figure>

<p>   在<code>sourcetree</code>軟體部分，一樣使用<code>amend last commit</code>，可以達到同樣的效果，合併到最後一次commit<br>   <img src="https://i.imgur.com/Pkmo2L7.png" alt="image-20211005093726530"></p>
<h3 id="23-9-新增目錄卻沒有被追蹤"><a href="#23-9-新增目錄卻沒有被追蹤" class="headerlink" title="23.9. 新增目錄卻沒有被追蹤?"></a>23.9. 新增目錄卻沒有被追蹤?</h3><p>請記得⼀件很重要的觀念，就是Git在計算、產⽣物件的時候，是根據「檔案的內容」去做計算的，所以光是新增⼀個⽬錄，Git是沒辦法處理它的。</p>
<p>如果需要git追蹤這個目錄的話可以在目錄底下加上<code>.gitkeep</code>檔案</p>
<h3 id="23-10-有些檔案我不想放在Git裡⾯"><a href="#23-10-有些檔案我不想放在Git裡⾯" class="headerlink" title="23.10. 有些檔案我不想放在Git裡⾯"></a>23.10. 有些檔案我不想放在Git裡⾯</h3><p>可能的狀況</p>
<ol>
<li><p>資料庫存取密碼</p>
</li>
<li><p>AWS伺服器的存取金鑰</p>
</li>
<li><p>程式編譯的中間檔或暫存檔(因為每次的編譯都會產生新檔，對於專案來說沒有利用價值)</p>
</li>
</ol>
<p>要做到忽略追蹤要新增<code>.gitignore</code>檔，填寫忽略規則</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="params">#</span>忽略secret.yml檔案</span><br><span class="line">secret.yml</span><br><span class="line"></span><br><span class="line"><span class="params">#</span>忽略config⽬錄下的database.yml檔案</span><br><span class="line">config/database.yml</span><br><span class="line"></span><br><span class="line"><span class="params">#</span>忽略所有db⽬錄下附檔名是.sqlite3的檔案</span><br><span class="line">/db/*.sqlite3</span><br><span class="line"></span><br><span class="line"><span class="params">#</span>忽略所有附檔名是.tmp的檔案</span><br><span class="line">*.tmp</span><br></pre></td></tr></table></figure>

<h3 id="23-11-可以忽略這個忽略嗎？"><a href="#23-11-可以忽略這個忽略嗎？" class="headerlink" title="23.11. 可以忽略這個忽略嗎？"></a>23.11. 可以忽略這個忽略嗎？</h3><p>直接硬闖關</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add -f 檔案名稱</span><br></pre></td></tr></table></figure>

<h3 id="23-12-為什麼-gitignore-沒效果？"><a href="#23-12-為什麼-gitignore-沒效果？" class="headerlink" title="23.12. 為什麼.gitignore 沒效果？"></a>23.12. 為什麼.gitignore 沒效果？</h3><p>有一種狀況你先建了index.html 也commit 了。</p>
<p>之後再新增.gitignore 說忽略index.html，</p>
<p>這時如果去異動index.html，會發現還是會被追蹤。</p>
<p>如果是這樣的話，可以使用指令停止追蹤</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">rm</span> --cached index.html</span><br></pre></td></tr></table></figure>

<p>對應<code>sourcetree</code>軟體 是<code>Stop Tracking</code>功能</p>
<p><img src="https://i.imgur.com/7c5lJHB.png" alt="image-20211005101224894"></p>
<h3 id="23-13-一口形清除忽略的檔案"><a href="#23-13-一口形清除忽略的檔案" class="headerlink" title="23.13. 一口形清除忽略的檔案"></a>23.13. 一口形清除忽略的檔案</h3><p>如果想要⼀⼝氣清除那些已經被忽略的檔案，可以使⽤ git clean 指令並配合 -X 參數：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git clean -fX</span><br></pre></td></tr></table></figure>

<p>那個額外加上的 -f 參數是指強制刪除的意思，這樣⼀來就可清除那些被忽略的檔案。</p>
<h3 id="23-14-新增檔案時，檔案還沒加入追蹤，想清空工作目錄"><a href="#23-14-新增檔案時，檔案還沒加入追蹤，想清空工作目錄" class="headerlink" title="23.14. 新增檔案時，檔案還沒加入追蹤，想清空工作目錄"></a>23.14. 新增檔案時，檔案還沒加入追蹤，想清空工作目錄</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git clean -f</span><br></pre></td></tr></table></figure>



<h3 id="23-15-檢視特定檔案的commit-記錄"><a href="#23-15-檢視特定檔案的commit-記錄" class="headerlink" title="23.15. 檢視特定檔案的commit 記錄"></a>23.15. 檢視特定檔案的commit 記錄</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit index.html</span><br></pre></td></tr></table></figure>

<p>如果要看更詳細的可以加上<code>p</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -p index.html</span><br></pre></td></tr></table></figure>

<p>使用<code>sourcetree</code>查看的方式，在檔案上右鍵找<code>Log selected</code></p>
<p><img src="https://i.imgur.com/TFa4XzT.png" alt="image-20230614220428502"></p>
<h3 id="23-16-這行程式是誰寫的？"><a href="#23-16-這行程式是誰寫的？" class="headerlink" title="23.16. 這行程式是誰寫的？"></a>23.16. 這行程式是誰寫的？</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git blame index.html</span><br></pre></td></tr></table></figure>

<p>如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">$ git blame index.html</span><br><span class="line">7fe12367 (DESKTOP-I40U13Q\kite 2023-06-14 21:53:04 +0800 1) hello</span><br><span class="line">5a85a883 (DESKTOP-I40U13Q\kite 2023-06-14 21:57:35 +0800 2) this 2 line</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如果行數太多，加上<code>L</code>參數</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git blame -L 1,1 index.html</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kite@DESKTOP-I40U13Q MINGW64 /d/kite/tmp/test (main)</span><br><span class="line">$ git blame -L 1,1 index.html</span><br><span class="line">7fe12367 (DESKTOP-I40U13Q\kite 2023-06-14 21:53:04 +0800 1) hello</span><br></pre></td></tr></table></figure>

<p>在<code>sourcetree</code>上的操作</p>
<p><img src="https://i.imgur.com/rtebxcV.png" alt="image-20230614221304355"></p>
<h3 id="23-17-不小心把檔案或目錄刪掉了…"><a href="#23-17-不小心把檔案或目錄刪掉了…" class="headerlink" title="23.17. 不小心把檔案或目錄刪掉了…"></a>23.17. 不小心把檔案或目錄刪掉了…</h3><p>刪除檔案指令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> *.html</span><br></pre></td></tr></table></figure>

<p>指令過程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kite@DESKTOP-I40U13Q MINGW64 /d/kite/tmp/test (main)</span><br><span class="line">$ <span class="built_in">rm</span> *.html</span><br><span class="line"></span><br><span class="line">kite@DESKTOP-I40U13Q MINGW64 /d/kite/tmp/test (main)</span><br><span class="line">$ git st</span><br><span class="line">On branch main</span><br><span class="line">Your branch is ahead of <span class="string">&#x27;origin/main&#x27;</span> by 3 commits.</span><br><span class="line">  (use <span class="string">&quot;git push&quot;</span> to publish your <span class="built_in">local</span> commits)</span><br><span class="line"></span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add/rm &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git restore &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line">        deleted:    home.html</span><br><span class="line">        deleted:    index.html</span><br></pre></td></tr></table></figure>

<p>單一檔案救回指令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout index.html</span><br></pre></td></tr></table></figure>

<p>全數救回指令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout .</span><br></pre></td></tr></table></figure>

<p><code>sourcetree</code></p>
<p><img src="https://i.imgur.com/lkXHIw2.png" alt="image-20230614222305610"></p>
<p>還原某個檔案至前面的版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout HEAD~2 index.html	</span><br></pre></td></tr></table></figure>

<p><code>index.html</code>檔距離現今前二次的版本</p>
<blockquote>
<p>距離現在兩個版本以前的那個 welcome.html 檔案來覆蓋現在的⼯作⽬錄裡的 welcome.html 檔案</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout HEAD~2 .</span><br></pre></td></tr></table></figure>

<p>目前<code>工作區</code>檔案距離現今前二次的版本</p>
<blockquote>
<p>拿距離現在兩個版本以前的檔案來覆蓋現在⼯作⽬錄的檔案，同時也更 新暫存區裡的狀態</p>
</blockquote>
<h3 id="23-18-剛才的commit-後悔了，想拆掉重做…"><a href="#23-18-剛才的commit-後悔了，想拆掉重做…" class="headerlink" title="23.18. 剛才的commit 後悔了，想拆掉重做…"></a>23.18. 剛才的commit 後悔了，想拆掉重做…</h3><p>相對的作法</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset e12d8ef^</span><br></pre></td></tr></table></figure>

<p>以這個object位置前往<code>一次</code></p>
<p>如果要前往<code>二次</code>以上，舉例來說五次的寫法如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset e12d8ef~5</span><br></pre></td></tr></table></figure>

<p>以上的寫法也可以成寫</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset <span class="built_in">head</span>~5</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset master~5</span><br></pre></td></tr></table></figure>

<p><code>HEAD</code>、<code>master</code>指針指向<code>e12d8ef</code>情況下，效果是一樣的。</p>
<p><code>sourcetree</code></p>
<p><img src="https://i.imgur.com/o4Mlt9S.png" alt="image-20230615091430499"></p>
<p><img src="https://i.imgur.com/iK0lb3W.png" alt="image-20230615091503830"></p>
<p>reset 三種模式</p>
<table>
<thead>
<tr>
<th>模式</th>
<th>mixed模式</th>
<th>soft模式</th>
<th>hard模式</th>
</tr>
</thead>
<tbody><tr>
<td>commit 拆出來的檔案</td>
<td>丟回工作目錄</td>
<td>丟至暫存區</td>
<td>直接丟掉</td>
</tr>
</tbody></table>
<h3 id="23-19-不小心使用hard模式reset了某個commit救得回來嗎？"><a href="#23-19-不小心使用hard模式reset了某個commit救得回來嗎？" class="headerlink" title="23.19. 不小心使用hard模式reset了某個commit救得回來嗎？"></a>23.19. 不小心使用hard模式reset了某個commit救得回來嗎？</h3><p>git reset 之前的sha1 值就可以了，舉例來說：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset a95148f --hard</span><br></pre></td></tr></table></figure>

<p>如果忘記、甚至沒記當時的sha1值，怎麼辦？</p>
<p>使用<code>reflog</code>指令，執行如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kite@DESKTOP-I40U13Q MINGW64 /d/kite/tmp/test (master)</span><br><span class="line">$ git reflog</span><br><span class="line">ae90fda (HEAD -&gt; master) HEAD@&#123;0&#125;: reset: moving to <span class="built_in">head</span>~2</span><br><span class="line">a95148f HEAD@&#123;1&#125;: reset: moving to a95148f</span><br><span class="line">ae90fda (HEAD -&gt; master) HEAD@&#123;2&#125;: reset: moving to <span class="built_in">head</span>~2</span><br><span class="line">a95148f HEAD@&#123;3&#125;: reset: moving to a95148f</span><br><span class="line">ae90fda (HEAD -&gt; master) HEAD@&#123;4&#125;: reset: moving to <span class="built_in">head</span>~2</span><br><span class="line">a95148f HEAD@&#123;5&#125;: reset: moving to a95148f</span><br><span class="line">ae90fda (HEAD -&gt; master) HEAD@&#123;6&#125;: reset: moving to <span class="built_in">head</span>~2</span><br><span class="line">a95148f HEAD@&#123;7&#125;: reset: moving to a95148f</span><br><span class="line">ae90fda (HEAD -&gt; master) HEAD@&#123;8&#125;: reset: moving to <span class="built_in">head</span>~2</span><br><span class="line">a95148f HEAD@&#123;9&#125;: reset: moving to a95148f</span><br><span class="line">ae90fda (HEAD -&gt; master) HEAD@&#123;10&#125;: reset: moving to <span class="built_in">head</span>~2</span><br><span class="line">a95148f HEAD@&#123;11&#125;: reset: moving to a95148f</span><br><span class="line">ae90fda (HEAD -&gt; master) HEAD@&#123;12&#125;: reset: moving to <span class="built_in">head</span>~2</span><br><span class="line">a95148f HEAD@&#123;13&#125;: commit: file03</span><br><span class="line">f1e0d52 HEAD@&#123;14&#125;: commit: file02</span><br><span class="line">ae90fda (HEAD -&gt; master) HEAD@&#123;15&#125;: commit (initial): add file01</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>試了很多次，所以會看到很多次reset資料，</p>
<p>當 <code>HEAD</code> 有移動的時候（例如切換分⽀或是 reset 都會造成 <code>HEAD</code> 移動），Git 就會在 <code>Reflog</code> 裡記上⼀筆。</p>
<blockquote>
<p>git log 如果加上 -g 參數，也可以看到 Reflog 喔！</p>
</blockquote>
<p>可以只commit 一個檔案的部分內容嗎？</p>
<p>使用 <code>git add -p</code>方式，舉例如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kite@DESKTOP-I40U13Q MINGW64 /d/kite/tmp/test (master)</span><br><span class="line">$ git add file03  -p</span><br><span class="line">diff --git a/file03 b/file03</span><br><span class="line">index e69de29..0eb7e4c 100644</span><br><span class="line">--- a/file03</span><br><span class="line">+++ b/file03</span><br><span class="line">@@ -0,0 +1,3 @@</span><br><span class="line">+123</span><br><span class="line">+456</span><br><span class="line">+789</span><br><span class="line">\ No newline at end of file</span><br><span class="line">(1/1) Stage this hunk [y,n,q,a,d,e,?]? e</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>這時候會開啟檔案，再將要刪掉的行數刪掉，儲存關掉即可。</p>
<p><code>sourcetree</code></p>
<p><img src="https://i.imgur.com/3JIRdt1.png" alt="image-20230615104916492"></p>
<p><img src="https://i.imgur.com/U4tPJi3.png" alt="image-20230615104949216"></p>
<h3 id="23-20-那如果改⼀半切換分⽀會發⽣什麼事？"><a href="#23-20-那如果改⼀半切換分⽀會發⽣什麼事？" class="headerlink" title="23.20. 那如果改⼀半切換分⽀會發⽣什麼事？"></a>23.20. 那如果改⼀半切換分⽀會發⽣什麼事？</h3><p>舉例來說，在<code>cat</code>分支時，新增了<code>cat3.html</code>、修改<code>index.html</code>檔案，這時切換分支至<code>master</code>，結果仍保留之前在<code>工作區</code>的更新檔案。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kite@DESKTOP-I40U13Q MINGW64 /d/kite/tmp/test (<span class="built_in">cat</span>)</span><br><span class="line">$ <span class="built_in">touch</span> cat3.html</span><br><span class="line"></span><br><span class="line">kite@DESKTOP-I40U13Q MINGW64 /d/kite/tmp/test (<span class="built_in">cat</span>)</span><br><span class="line">$ vim index.html</span><br><span class="line"></span><br><span class="line">kite@DESKTOP-I40U13Q MINGW64 /d/kite/tmp/test (<span class="built_in">cat</span>)</span><br><span class="line">$ git checkout master</span><br><span class="line">Switched to branch <span class="string">&#x27;master&#x27;</span></span><br><span class="line">M       index.html</span><br><span class="line"></span><br><span class="line">kite@DESKTOP-I40U13Q MINGW64 /d/kite/tmp/test (master)</span><br><span class="line">$ git st</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git restore &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line">        modified:   index.html</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to include <span class="keyword">in</span> what will be committed)</span><br><span class="line">        cat3.html</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="不⼩⼼把還沒合併的分⽀砍掉了，救得回來嗎？"><a href="#不⼩⼼把還沒合併的分⽀砍掉了，救得回來嗎？" class="headerlink" title="不⼩⼼把還沒合併的分⽀砍掉了，救得回來嗎？"></a>不⼩⼼把還沒合併的分⽀砍掉了，救得回來嗎？</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kite@DESKTOP-I40U13Q MINGW64 /d/kite/tmp/test (master)</span><br><span class="line">$ git branch -D <span class="built_in">cat</span></span><br><span class="line">Deleted branch <span class="built_in">cat</span> (was 6e34a6f).</span><br><span class="line"></span><br><span class="line">kite@DESKTOP-I40U13Q MINGW64 /d/kite/tmp/test (master)</span><br><span class="line">$ git branch <span class="built_in">cat</span> 6e34a</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>當在刪除的時候，我們會看到後面有一個當時的sha1值。</p>
<p>如果真的不小心誤砍了，可以透過以下指令進行回復：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch <span class="built_in">cat</span> 6e34a</span><br></pre></td></tr></table></figure>

<p>如果真的連sha1值都記不下來，其實還是可以用<code>git reflog</code>指令找出重要操作的log。(Reflog 預設會保留 30 天，所以 30 天內應該都還找得到)</p>
<h2 id="24-問題"><a href="#24-問題" class="headerlink" title="24. 問題"></a>24. 問題</h2><h3 id="24-1-其實-git-add-跟-git-add-A-效果是不同的"><a href="#24-1-其實-git-add-跟-git-add-A-效果是不同的" class="headerlink" title="24.1. 其實 git add . 跟 git add -A 效果是不同的"></a>24.1. 其實 <code>git add .</code> 跟 <code>git add -A</code> 效果是不同的</h3><p>   <code>git add .</code></p>
<blockquote>
<p>這個指令會把⽬前當下這個⽬錄，以及它的⼦⽬錄、⼦⼦⽬錄、⼦⼦⼦⽬ 錄…裡的異動全部加到暫存區，但在這個⽬錄的以外的就不歸它管了。</p>
</blockquote>
<p>   <code>git add --all</code></p>
<blockquote>
<p>就沒這個問題，這個指令不管在專案的哪⼀層⽬錄執⾏，效果都是⼀樣的，在這個專案裡所有 的異動都會被加⾄暫存區。</p>
</blockquote>
<h3 id="24-2-⼀定要⼆段式嗎？"><a href="#24-2-⼀定要⼆段式嗎？" class="headerlink" title="24.2. ⼀定要⼆段式嗎？"></a>24.2. ⼀定要⼆段式嗎？</h3>   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -a -m <span class="string">&quot;update content&quot;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>這樣即使沒有先 add 也可以完成 Commit。但要注意的是這個 -a 參數只對已經存在<br>Repository 的檔案有效，對還是新加入的檔案（也就是 Untracked file）是無效的。</p>
</blockquote>
<h2 id="25-參考網站"><a href="#25-參考網站" class="headerlink" title="25. 參考網站"></a>25. 參考網站</h2><p><a href="https://www.freecodecamp.org/news/an-intro-to-git-aliases-a-faster-way-of-working-with-git-b1eda81c7747/">An intro to Git Aliases: a faster way of working with Git</a></p>
<p><a href="https://snyk.io/blog/10-git-aliases-for-faster-and-productive-git-workflow/">10 git aliases for a faster and productive git workflow</a></p>
<p><a href="https://sdwh.dev/posts/2020/05/Git-100/">Git 的 100 個情境應用</a></p>
<p><a href="https://dev.to/lydiahallie/cs-visualized-useful-git-commands-37p1#merge">https://dev.to/lydiahallie/cs-visualized-useful-git-commands-37p1#merge</a></p>
<p>How to Animate Your Git Commit History with git-story</p>
<p><a href="https://www.freecodecamp.org/news/animate-your-git-repo-with-git-story/">https://www.freecodecamp.org/news/animate-your-git-repo-with-git-story/</a></p>
<p><a href="https://www.youtube.com/watch?v=3o_01F04bZ4&ab_channel=VisualStudioCode">https://www.youtube.com/watch?v=3o_01F04bZ4&amp;ab_channel=VisualStudioCode</a></p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP Laravel 系列 - (1) Windows 安裝php</title>
    <url>/2021/10/11/2021-10-11%20PHP%20Laravel%20%E7%B3%BB%E5%88%97%20-%20(1)%20Windows%20%E5%AE%89%E8%A3%9Dphp/</url>
    <content><![CDATA[<p><a href="https://www.php.net/">官網</a>下載stable 版之後</p>
<p>放置於c槽</p>
<span id="more"></span>


<p><img src="https://i.imgur.com/k1oLAQN.png" alt="image-20211011173713765"></p>
<p>接著在環境變數設定上相關路徑</p>
<p><img src="https://i.imgur.com/FXMY3KN.png" alt="image-20211011173314068"></p>
<p>命令提示字元確認</p>
<p><img src="https://i.imgur.com/EaK93EV.png" alt="image-20211011173244580"></p>
]]></content>
      <categories>
        <category>PHP</category>
        <category>Laravel</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Laravel</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP Laravel 系列 - (2) VSCode</title>
    <url>/2021/10/11/2021-10-11%20PHP%20Laravel%20%E7%B3%BB%E5%88%97%20-%20(2)%20VScode/</url>
    <content><![CDATA[<p>找檔案</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ctrl + p</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<p>開啟終端機</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ctrl + `</span><br></pre></td></tr></table></figure>



<p>more …</p>
]]></content>
      <categories>
        <category>PHP</category>
        <category>Laravel</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Laravel</tag>
        <tag>VSCode</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP Laravel 系列 - (3) 資料結構，資料量一多，正規的儲存方式</title>
    <url>/2021/10/12/2021-10-12%20PHP%20Laravel%20%E7%B3%BB%E5%88%97%20-%20(3)%20%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B%EF%BC%8C%E8%B3%87%E6%96%99%E9%87%8F%E4%B8%80%E5%A4%9A%EF%BC%8C%E6%AD%A3%E8%A6%8F%E7%9A%84%E5%84%B2%E5%AD%98%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="1-陣列"><a href="#1-陣列" class="headerlink" title="1. 陣列"></a>1. 陣列</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$people</span> = [<span class="string">&#x27;john&#x27;</span>,<span class="string">&#x27;may&#x27;</span>,<span class="string">&#x27;tim&#x27;</span>];</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Array</span></span><br><span class="line"><span class="comment">(</span></span><br><span class="line"><span class="comment">    [name] =&gt; john</span></span><br><span class="line"><span class="comment">    [age] =&gt; 55   </span></span><br><span class="line"><span class="comment">)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h2 id="2-字典式陣列"><a href="#2-字典式陣列" class="headerlink" title="2. 字典式陣列"></a>2. 字典式陣列</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$student</span> = [<span class="string">&#x27;name&#x27;</span>=&gt;<span class="string">&#x27;john&#x27;</span>,<span class="string">&#x27;age&#x27;</span>=&gt; <span class="number">55</span>];</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Array</span></span><br><span class="line"><span class="comment">(</span></span><br><span class="line"><span class="comment">    [name] =&gt; john</span></span><br><span class="line"><span class="comment">    [age] =&gt; 55</span></span><br><span class="line"><span class="comment">)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="3-迴圈操作"><a href="#3-迴圈操作" class="headerlink" title="3. 迴圈操作"></a>3. 迴圈操作</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$students</span> = [</span><br><span class="line">    [<span class="string">&#x27;name&#x27;</span>=&gt; <span class="string">&#x27;kite&#x27;</span> , <span class="string">&#x27;grade&#x27;</span>=&gt; <span class="number">100</span>]</span><br><span class="line">    ,[<span class="string">&#x27;name&#x27;</span>=&gt; <span class="string">&#x27;snow&#x27;</span> , <span class="string">&#x27;grade&#x27;</span>=&gt; <span class="number">85</span>]</span><br><span class="line"></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$students</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$student</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> (<span class="string">&#x27;第&#x27;</span>.<span class="variable">$key</span>.<span class="string">&#x27;個學生&#x27;</span>.<span class="variable">$student</span>[<span class="string">&#x27;name&#x27;</span>]. <span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">第0個學生kite</span></span><br><span class="line"><span class="comment">第1個學生snow</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>PHP</category>
        <category>Laravel</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Laravel</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP Laravel 系列 - (4) 常見函式</title>
    <url>/2021/10/14/2021-10-14%20PHP%20Laravel%20%E7%B3%BB%E5%88%97%20-%20(4)%20%E5%B8%B8%E8%A6%8B%E5%87%BD%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="1-array-column"><a href="#1-array-column" class="headerlink" title="1. array_column"></a>1. array_column</h2><p>依照指定<code>欄位名稱(key)</code>取出陣列</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$records</span> =[</span><br><span class="line">	[<span class="string">&#x27;id&#x27;</span> =&gt; <span class="number">1</span>, <span class="string">&#x27;first_name&#x27;</span> =&gt; <span class="string">&#x27;kite&#x27;</span>],</span><br><span class="line">	[<span class="string">&#x27;id&#x27;</span> =&gt; <span class="number">2</span>, <span class="string">&#x27;first_name&#x27;</span> =&gt; <span class="string">&#x27;snow&#x27;</span>],</span><br><span class="line">	[<span class="string">&#x27;id&#x27;</span> =&gt; <span class="number">3</span>, <span class="string">&#x27;first_name&#x27;</span> =&gt; <span class="string">&#x27;bubu&#x27;</span>],    </span><br><span class="line">];</span><br><span class="line">    </span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">array_column</span>(<span class="variable">$records</span>,<span class="string">&#x27;first_name&#x27;</span>));</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h2 id="2-array-keys"><a href="#2-array-keys" class="headerlink" title="2. array_keys"></a>2. array_keys</h2><p>回傳指定陣列的<code>key</code>  </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$records</span> =[</span><br><span class="line">	[<span class="string">&#x27;id&#x27;</span> =&gt; <span class="number">1</span>, <span class="string">&#x27;first_name&#x27;</span> =&gt; <span class="string">&#x27;kite&#x27;</span>],</span><br><span class="line">	[<span class="string">&#x27;id&#x27;</span> =&gt; <span class="number">2</span>, <span class="string">&#x27;first_name&#x27;</span> =&gt; <span class="string">&#x27;snow&#x27;</span>],</span><br><span class="line">	[<span class="string">&#x27;id&#x27;</span> =&gt; <span class="number">3</span>, <span class="string">&#x27;first_name&#x27;</span> =&gt; <span class="string">&#x27;bubu&#x27;</span>],    </span><br><span class="line">];   </span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">array_keys</span>(<span class="variable">$records</span>[<span class="number">0</span>]));</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Array</span></span><br><span class="line"><span class="comment">(</span></span><br><span class="line"><span class="comment">	[0] =&gt; id</span></span><br><span class="line"><span class="comment">	[1] =&gt; first_name</span></span><br><span class="line"><span class="comment">)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="3-array-values"><a href="#3-array-values" class="headerlink" title="3. array_values"></a>3. array_values</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$records</span> =[</span><br><span class="line">	[<span class="string">&#x27;id&#x27;</span> =&gt; <span class="number">1</span>, <span class="string">&#x27;first_name&#x27;</span> =&gt; <span class="string">&#x27;kite&#x27;</span>],</span><br><span class="line">	[<span class="string">&#x27;id&#x27;</span> =&gt; <span class="number">2</span>, <span class="string">&#x27;first_name&#x27;</span> =&gt; <span class="string">&#x27;snow&#x27;</span>],</span><br><span class="line">	[<span class="string">&#x27;id&#x27;</span> =&gt; <span class="number">3</span>, <span class="string">&#x27;first_name&#x27;</span> =&gt; <span class="string">&#x27;bubu&#x27;</span>],    </span><br><span class="line">];  </span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">array_values</span>(<span class="variable">$records</span>[<span class="number">0</span>]));</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Array</span></span><br><span class="line"><span class="comment">(</span></span><br><span class="line"><span class="comment">	[0] =&gt; 1</span></span><br><span class="line"><span class="comment">	[1] =&gt; kite</span></span><br><span class="line"><span class="comment">)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">array_values</span>(<span class="variable">$records</span>));</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Array</span></span><br><span class="line"><span class="comment">(</span></span><br><span class="line"><span class="comment">	[0] =&gt; 0</span></span><br><span class="line"><span class="comment">	[1] =&gt; 1</span></span><br><span class="line"><span class="comment">	[2] =&gt; 2	</span></span><br><span class="line"><span class="comment">)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="4-array-map"><a href="#4-array-map" class="headerlink" title="4. array_map"></a>4. array_map</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$newRecords</span> = <span class="title function_ invoke__">array_map</span>(function(<span class="variable">$record</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$record</span>[<span class="string">&#x27;id&#x27;</span>] = <span class="variable">$record</span>[<span class="string">&#x27;id&#x27;</span>] * <span class="number">5</span>;</span><br><span class="line">              &#125;,<span class="variable">$records</span>);</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$newRecords</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Array</span></span><br><span class="line"><span class="comment">(</span></span><br><span class="line"><span class="comment">    [0] =&gt; 5</span></span><br><span class="line"><span class="comment">    [1] =&gt; 10</span></span><br><span class="line"><span class="comment">    [2] =&gt; 15</span></span><br><span class="line"><span class="comment">)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="5-array-filter"><a href="#5-array-filter" class="headerlink" title="5. array_filter"></a>5. array_filter</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$newRecords</span> = <span class="title function_ invoke__">array_filter</span>(</span><br><span class="line">    <span class="variable">$records</span>,</span><br><span class="line">    function(<span class="variable">$record</span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="variable">$record</span>[<span class="string">&#x27;id&#x27;</span>] &gt;=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$newRecords</span>);</span><br></pre></td></tr></table></figure>

<h2 id="6-array-push"><a href="#6-array-push" class="headerlink" title="6. array_push"></a>6. array_push</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$num</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="title function_ invoke__">array_push</span>(<span class="variable">$nums</span>,<span class="number">8</span>);</span><br></pre></td></tr></table></figure>

<h2 id="7-array-pop"><a href="#7-array-pop" class="headerlink" title="7. array_pop"></a>7. array_pop</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$num</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="title function_ invoke__">array_pop</span>(<span class="variable">$num</span>);</span><br></pre></td></tr></table></figure>

<h2 id="8-array-merge"><a href="#8-array-merge" class="headerlink" title="8. array_merge"></a>8. array_merge</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$person</span> = [<span class="string">&#x27;id&#x27;</span> =&gt; <span class="number">5</span>, <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;kite&#x27;</span>];</span><br><span class="line"><span class="variable">$person</span> = <span class="title function_ invoke__">array_merge</span>(</span><br><span class="line">	<span class="variable">$person</span>,</span><br><span class="line">	[<span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;bubu&#x27;</span>, <span class="string">&#x27;age&#x27;</span> =&gt; <span class="number">10</span>]</span><br><span class="line">);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Array</span></span><br><span class="line"><span class="comment">(</span></span><br><span class="line"><span class="comment">    [id] =&gt; 5</span></span><br><span class="line"><span class="comment">    [name] =&gt; bubu</span></span><br><span class="line"><span class="comment">    [age] =&gt; 10</span></span><br><span class="line"><span class="comment">)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="9-asort"><a href="#9-asort" class="headerlink" title="9. asort"></a>9. asort</h2><p>value排序</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$arr</span> = [<span class="string">&#x27;d&#x27;</span> =&gt;<span class="string">&#x27;bubu&#x27;</span> ,<span class="string">&#x27;c&#x27;</span> =&gt; <span class="string">&#x27;snow&#x27;</span>,<span class="string">&#x27;b&#x27;</span>=&gt; <span class="string">&#x27;kite&#x27;</span> , <span class="string">&#x27;a&#x27;</span> =&gt;<span class="string">&#x27;apple&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">sort</span>(<span class="variable">$arr</span>);</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$arr</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Array</span></span><br><span class="line"><span class="comment">(</span></span><br><span class="line"><span class="comment">    [0] =&gt; apple</span></span><br><span class="line"><span class="comment">    [1] =&gt; bubu</span></span><br><span class="line"><span class="comment">    [2] =&gt; kite</span></span><br><span class="line"><span class="comment">    [3] =&gt; snow</span></span><br><span class="line"><span class="comment">)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="10-ksort"><a href="#10-ksort" class="headerlink" title="10. ksort"></a>10. ksort</h2><p>key排序</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$arr</span> = [<span class="string">&#x27;d&#x27;</span> =&gt;<span class="string">&#x27;bubu&#x27;</span> ,<span class="string">&#x27;c&#x27;</span> =&gt; <span class="string">&#x27;snow&#x27;</span>,<span class="string">&#x27;b&#x27;</span>=&gt; <span class="string">&#x27;kite&#x27;</span> , <span class="string">&#x27;a&#x27;</span> =&gt;<span class="string">&#x27;apple&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">ksort</span>(<span class="variable">$arr</span>);</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$arr</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Array</span></span><br><span class="line"><span class="comment">(</span></span><br><span class="line"><span class="comment">    [0] =&gt; apple</span></span><br><span class="line"><span class="comment">    [1] =&gt; bubu</span></span><br><span class="line"><span class="comment">    [2] =&gt; kite</span></span><br><span class="line"><span class="comment">    [3] =&gt; snow</span></span><br><span class="line"><span class="comment">)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="11-array-search"><a href="#11-array-search" class="headerlink" title="11. array_search"></a>11. array_search</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$people</span> = [<span class="string">&#x27;john&#x27;</span>,<span class="string">&#x27;tim&#x27;</span>,<span class="string">&#x27;tim&#x27;</span>,<span class="string">&#x27;kite&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span>(<span class="title function_ invoke__">array_search</span>(<span class="string">&#x27;kite&#x27;</span>,<span class="variable">$people</span>));</span><br><span class="line"><span class="comment">//3</span></span><br></pre></td></tr></table></figure>

<h2 id="12-array-unique"><a href="#12-array-unique" class="headerlink" title="12. array_unique"></a>12. array_unique</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$people</span> = [<span class="string">&#x27;john&#x27;</span>,<span class="string">&#x27;tim&#x27;</span>,<span class="string">&#x27;tim&#x27;</span>,<span class="string">&#x27;kite&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">array_unique</span>(<span class="variable">$people</span>));</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Array</span></span><br><span class="line"><span class="comment">(</span></span><br><span class="line"><span class="comment">    [0] =&gt; john</span></span><br><span class="line"><span class="comment">    [1] =&gt; tim</span></span><br><span class="line"><span class="comment">    [3] =&gt; kite</span></span><br><span class="line"><span class="comment">)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="13-array-sum"><a href="#13-array-sum" class="headerlink" title="13. array_sum"></a>13. array_sum</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$nums</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>];</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">array_sum</span>(<span class="variable">$nums</span>));</span><br></pre></td></tr></table></figure>

<h2 id="14-count"><a href="#14-count" class="headerlink" title="14. count"></a>14. count</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$nums</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>];</span><br><span class="line"><span class="keyword">echo</span>(<span class="title function_ invoke__">count</span>(<span class="variable">$nums</span>));</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>PHP</category>
        <category>Laravel</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Laravel</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP Laravel 系列 - (5) Composer 套件安裝與介紹</title>
    <url>/2021/10/14/2021-10-14%20PHP%20Laravel%20%E7%B3%BB%E5%88%97%20-%20(5)%20Composer%20%E5%A5%97%E4%BB%B6%E5%AE%89%E8%A3%9D%E8%88%87%E4%BB%8B%E7%B4%B9/</url>
    <content><![CDATA[<h2 id="1-召喚composer"><a href="#1-召喚composer" class="headerlink" title="1. 召喚composer"></a>1. 召喚composer</h2><p>它是一個php的套件管理工具，可以讓composer去召喚<code>third party</code>套件。</p>
<p>角色類似於<code>c#</code> 的<code>nuget</code>、<code>nodejs</code> 的<code>npm</code>、<code>python</code> 的 <code>pip</code></p>
<span id="more"></span>


<h2 id="2-到官網下載安裝檔"><a href="#2-到官網下載安裝檔" class="headerlink" title="2. 到官網下載安裝檔"></a>2. 到官網下載安裝檔</h2><p><a href="https://getcomposer.org/download/">官網</a></p>
<h3 id="2-1-下載"><a href="#2-1-下載" class="headerlink" title="2.1. 下載"></a>2.1. 下載</h3><p><img src="https://i.imgur.com/aKPL0Bs.png" alt="image-20211014222904333"></p>
<h3 id="2-2-安裝畫面"><a href="#2-2-安裝畫面" class="headerlink" title="2.2. 安裝畫面"></a>2.2. 安裝畫面</h3><p>過程中會問php檔在哪裡，筆者是放在c槽</p>
<p><img src="https://i.imgur.com/xnfVLDW.png" alt="image-20211014223118594"></p>
<h2 id="3-將-php-ini-development-更名為php-ini"><a href="#3-將-php-ini-development-更名為php-ini" class="headerlink" title="3. 將 php.ini-development 更名為php.ini"></a>3. 將 php.ini-development 更名為php.ini</h2><p>在之前安裝的時候就裝在c槽底下</p>
<p>路徑參考</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">C:\php-7.4.15\php.ini-development</span><br></pre></td></tr></table></figure>

<p>複製一份<code>php.ini-development</code> 更名為<code>php.ini</code></p>
<h2 id="4-啟用fileinfo-extension"><a href="#4-啟用fileinfo-extension" class="headerlink" title="4. 啟用fileinfo extension"></a>4. 啟用fileinfo extension</h2><p>編輯<code>php.ini</code> 尋找<code>fileinfo</code>，分號為註解，請解開註解</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">extension</span>=fileinfo</span><br></pre></td></tr></table></figure>

<h2 id="5-確認是否安裝成功"><a href="#5-確認是否安裝成功" class="headerlink" title="5. 確認是否安裝成功"></a>5. 確認是否安裝成功</h2><p>打開command line 輸入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">composer -v</span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/UZuCcjk.png" alt="image-20211014223256919"></p>
<p>總算這次的召喚沒有白消耗<code>魔法寶石*3</code>，魅力值夠，ㄏㄏ。(天堂迷…誤)</p>
<h2 id="6-召喚主角Laravel"><a href="#6-召喚主角Laravel" class="headerlink" title="6. 召喚主角Laravel"></a>6. 召喚主角Laravel</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">composer global require &quot;laravel/installer&quot;</span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/FqBWXeK.png" alt="image-20211014224410769"></p>
<p>我們可以看到綠色字中有描述到安裝路徑</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\kite\AppData\Roaming\Composer</span><br></pre></td></tr></table></figure>

<p>好奇看一下</p>
<p><img src="https://i.imgur.com/sdLV2hE.png" alt="image-20211014224621076"></p>
<p>打開<code>composer.json</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;require&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;laravel/installer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.2&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>這是一個全域的安裝，跟<code>npm</code> 的<code>package.json</code> 87像</p>
<p>我們的召喚獸在這個底下</p>
<p><img src="https://i.imgur.com/jD9iK8T.png" alt="image-20211014224818954"></p>
<h2 id="7-建立Laravel專案"><a href="#7-建立Laravel專案" class="headerlink" title="7. 建立Laravel專案"></a>7. 建立Laravel專案</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">laravel new laravel_blog</span><br></pre></td></tr></table></figure>

<p>會跑一陣子</p>
<h2 id="8-啟動Larvael專案"><a href="#8-啟動Larvael專案" class="headerlink" title="8. 啟動Larvael專案"></a>8. 啟動Larvael專案</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">php artisan serve</span><br></pre></td></tr></table></figure>

<p>輸入完指令後，可以看到服務已經run起來囉</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.0.1:8000</span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/d0vIcqK.png" alt="image-20211014234857214"></p>
<p><img src="https://i.imgur.com/kdGZZgU.png" alt="image-20211014234936195"></p>
]]></content>
      <categories>
        <category>PHP</category>
        <category>Laravel</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Laravel</tag>
        <tag>Composer</tag>
      </tags>
  </entry>
  <entry>
    <title>五個必須知道的命名規則</title>
    <url>/2021/10/15/2021-10-15%20%E4%BA%94%E5%80%8B%E5%BF%85%E9%A0%88%E7%9F%A5%E9%81%93%E7%9A%84%E5%91%BD%E5%90%8D%E8%A6%8F%E5%89%87/</url>
    <content><![CDATA[<h2 id="變數命名規則"><a href="#變數命名規則" class="headerlink" title="變數命名規則"></a>變數命名規則</h2><h3 id="變數使用駝峰式命名-Camel-Case"><a href="#變數使用駝峰式命名-Camel-Case" class="headerlink" title="變數使用駝峰式命名(Camel Case)"></a><code>變數</code>使用駝峰式命名(Camel Case)</h3><p>第一個單字首小寫，第二個單字首大寫。例如：name、firstName</p>
<h3 id="類別使用巴斯卡命名-Pascal-Case"><a href="#類別使用巴斯卡命名-Pascal-Case" class="headerlink" title="類別使用巴斯卡命名(Pascal Case)"></a><code>類別</code>使用巴斯卡命名(Pascal Case)</h3><p>每個單字首都為大寫。例如：Server、CreatePerson。</p>
<h3 id="常數使用全大寫命名"><a href="#常數使用全大寫命名" class="headerlink" title="常數使用全大寫命名"></a><code>常數</code>使用全大寫命名</h3><p>每個單字使用底線連接。例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="variable constant_">PI</span> = <span class="number">3.13</span> ; </span><br><span class="line"><span class="keyword">var</span> <span class="variable constant_">MAX_WIDTH</span> = <span class="number">800</span>;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>設計規範</category>
      </categories>
      <tags>
        <tag>設計規範</tag>
      </tags>
  </entry>
  <entry>
    <title>正則表達式</title>
    <url>/2021/10/15/2021-10-15%20%E6%AD%A3%E5%89%87%E8%A1%A8%E9%81%94%E5%BC%8F/</url>
    <content><![CDATA[<p><a href="https://regex101.com/">https://regex101.com/</a></p>
<blockquote>
<p>在不同程式語言的特殊符號在正則表達式時會遇到吃掉效能或造成無窮迴圈的問題，保哥遇到了很多次這種狀況</p>
</blockquote>
<blockquote>
<p>反向表列的用法比較危險一點</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\w \W</span><br><span class="line">\d \D</span><br></pre></td></tr></table></figure>
<p><a href="https://www.youtube.com/watch?v=Ex6cCWDwNJU">https://www.youtube.com/watch?v=Ex6cCWDwNJU</a><br>26:29<br>重要技巧</p>
<p>36:20</p>
<p><a href="https://regexone.com/">https://regexone.com/</a></p>
]]></content>
      <categories>
        <category>正則表達式</category>
      </categories>
      <tags>
        <tag>正則表達式</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP Laravel 系列 - (7) Route and Controller</title>
    <url>/2021/10/16/2021-10-16%20PHP%20Laravel%20%E7%B3%BB%E5%88%97%20-%20(7)%20Route%20and%20Controller/</url>
    <content><![CDATA[<h2 id="1-簡單介紹-Http-Methods"><a href="#1-簡單介紹-Http-Methods" class="headerlink" title="1. 簡單介紹 Http Methods"></a>1. 簡單介紹 Http Methods</h2><p><img src="https://i.imgur.com/kgK29WP.png" alt="image-20211016115313736"></p>
<span id="more"></span>


<p>可以做到<code>url相同</code>因<code>方法不同</code>，執行不同的程式區段</p>
<p><img src="https://i.imgur.com/94uUqWE.png" alt="image-20211016115542702"></p>
<h2 id="2-加入route規則"><a href="#2-加入route規則" class="headerlink" title="2. 加入route規則"></a>2. 加入route規則</h2><p>請打開<code>routes\web.php</code>檔案加入以下規則</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//個別指定方法 controller@m</span></span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">post</span>(<span class="string">&#x27;/&#x27;</span>,<span class="string">&#x27;ProductController@create&#x27;</span>);</span><br><span class="line"><span class="comment">//這樣的寫法是CRUD</span></span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">resource</span>(<span class="string">&#x27;products&#x27;</span>,<span class="string">&#x27;ProductController&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="3-使用artisan指令建立controller"><a href="#3-使用artisan指令建立controller" class="headerlink" title="3. 使用artisan指令建立controller"></a>3. 使用artisan指令建立controller</h2><p>在這個project的根路徑下執行以下指令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">php artisan make:controller ProductController</span><br></pre></td></tr></table></figure>

<p>接著我們會看到在<code>app\Http\Controllers</code>底下產生了一個<code>PorductController.php</code>檔案</p>
<p><img src="https://i.imgur.com/GEVE9tg.png" alt="image-20211016160637461"></p>
<p><code>ProductController.php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">App</span>\<span class="title class_">Http</span>\<span class="title class_">Controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="4-使用artisan指令建立常見的CRUD-Controller-範本"><a href="#4-使用artisan指令建立常見的CRUD-Controller-範本" class="headerlink" title="4. 使用artisan指令建立常見的CRUD Controller 範本"></a>4. 使用artisan指令建立常見的CRUD Controller 範本</h2><p>先把剛剛的檔案刪掉，再執行以下指令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">php artisan make:controller ProductController --resource</span><br></pre></td></tr></table></figure>

<p><code>ProductController.php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">App</span>\<span class="title class_">Http</span>\<span class="title class_">Controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Display a listing of the resource.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> \Illuminate\Http\Response</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Show the form for creating a new resource.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> \Illuminate\Http\Response</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Store a newly created resource in storage.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  \Illuminate\Http\Request  $request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> \Illuminate\Http\Response</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span>(<span class="params">Request <span class="variable">$request</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Display the specified resource.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  int  $id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> \Illuminate\Http\Response</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"><span class="variable">$id</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Show the form for editing the specified resource.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  int  $id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> \Illuminate\Http\Response</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">edit</span>(<span class="params"><span class="variable">$id</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Update the specified resource in storage.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  \Illuminate\Http\Request  $request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  int  $id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> \Illuminate\Http\Response</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params">Request <span class="variable">$request</span>, <span class="variable">$id</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Remove the specified resource from storage.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  int  $id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> \Illuminate\Http\Response</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">destroy</span>(<span class="params"><span class="variable">$id</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>ctrl + 左鍵</code> 點擊<code>Request</code>就會跳到該程式碼囉</p>
<p><img src="https://i.imgur.com/BFL1ZHK.png" alt="image-20211016161352536"></p>
<p>use 是使用這個物件</p>
<h2 id="5-使用artisan指令查看目前的route-list"><a href="#5-使用artisan指令查看目前的route-list" class="headerlink" title="5. 使用artisan指令查看目前的route list"></a>5. 使用artisan指令查看目前的route list</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php artisan route:list</span><br></pre></td></tr></table></figure>

<h3 id="5-1-出錯啦"><a href="#5-1-出錯啦" class="headerlink" title="5.1. 出錯啦"></a>5.1. 出錯啦</h3><p><code>Illuminate\Contracts\Container\BindingResolutionException</code></p>
<p><img src="https://i.imgur.com/36U0dK2.png" alt="image-20211016161916118"></p>
<p>我們去<code>app\Providers\RouteServiceProvider.php</code>編輯一下，加入下一行程式</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="variable">$namespace</span> = <span class="string">&#x27;App\Http\Controllers&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/MucE74w.png" alt="image-20211016162209726"></p>
<p>接著再執行一次</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">php artisan route:list</span><br></pre></td></tr></table></figure>

<p>就正常啦，我們可以看到出現了跟products有關的route囉</p>
<p><img src="https://i.imgur.com/JPKpc6a.png" alt="image-20211016163954265"></p>
<h2 id="6-執行更新"><a href="#6-執行更新" class="headerlink" title="6. 執行更新"></a>6. 執行更新</h2><p>當有新增檔案之後，有時候會讀取不到，所以下這個指令是進行更新的意思</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">composer dump-autoload</span><br></pre></td></tr></table></figure>

<h2 id="7-簡單瀏覽"><a href="#7-簡單瀏覽" class="headerlink" title="7. 簡單瀏覽"></a>7. 簡單瀏覽</h2><h3 id="7-1-index"><a href="#7-1-index" class="headerlink" title="7.1. index"></a>7.1. index</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8000/products</span><br></pre></td></tr></table></figure>

<h3 id="7-2-create"><a href="#7-2-create" class="headerlink" title="7.2. create"></a>7.2. create</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8000/products/create</span><br></pre></td></tr></table></figure>

<h3 id="7-3-show"><a href="#7-3-show" class="headerlink" title="7.3. show"></a>7.3. show</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8000/products/1</span><br></pre></td></tr></table></figure>



<h2 id="8-問題"><a href="#8-問題" class="headerlink" title="8. 問題"></a>8. 問題</h2><h3 id="8-1-如何添加artisan"><a href="#8-1-如何添加artisan" class="headerlink" title="8.1. 如何添加artisan"></a>8.1. 如何添加artisan</h3><h3 id="8-2-php-namespace"><a href="#8-2-php-namespace" class="headerlink" title="8.2. php namespace"></a>8.2. php namespace</h3>]]></content>
      <categories>
        <category>PHP</category>
        <category>Laravel</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Laravel</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP Laravel 系列 - (6) 專案架構介紹</title>
    <url>/2021/10/16/2021-10-16%20PHP%20Laravel%20%E7%B3%BB%E5%88%97%20-%20(6)%20%E5%B0%88%E6%A1%88%E6%9E%B6%E6%A7%8B%E4%BB%8B%E7%B4%B9/</url>
    <content><![CDATA[<h2 id="1-完整專案架構截圖"><a href="#1-完整專案架構截圖" class="headerlink" title="1. 完整專案架構截圖"></a>1. 完整專案架構截圖</h2><p><img src="https://i.imgur.com/JkAghTK.png" alt="image-20211016113510041"></p>
<span id="more"></span>


<h2 id="2-app-structure"><a href="#2-app-structure" class="headerlink" title="2. app structure"></a>2. app structure</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+---app</span><br><span class="line">|   +---Console</span><br><span class="line">|   |       Kernel.php</span><br><span class="line">|   |       </span><br><span class="line">|   +---Exceptions</span><br><span class="line">|   |       Handler.php</span><br><span class="line">|   |       </span><br><span class="line">|   +---Http</span><br><span class="line">|   |   |   Kernel.php</span><br><span class="line">|   |   |   </span><br><span class="line">|   |   +---Controllers</span><br><span class="line">|   |   |       Controller.php</span><br><span class="line">|   |   |       </span><br><span class="line">|   |   \---Middleware</span><br><span class="line">|   |           Authenticate.php</span><br><span class="line">|   |           EncryptCookies.php</span><br><span class="line">|   |           PreventRequestsDuringMaintenance.php</span><br><span class="line">|   |           RedirectIfAuthenticated.php</span><br><span class="line">|   |           TrimStrings.php</span><br><span class="line">|   |           TrustHosts.php</span><br><span class="line">|   |           TrustProxies.php</span><br><span class="line">|   |           VerifyCsrfToken.php</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在windows 要輸出這樣的結構可以使用cmd指令產出</p>
<p>tree &gt; dir.txt &#x2F;a &#x2F;f</p>
</blockquote>
<h2 id="3-app"><a href="#3-app" class="headerlink" title="3. app"></a>3. app</h2><p>程式最常修改的地方</p>
<h3 id="3-1-Console"><a href="#3-1-Console" class="headerlink" title="3.1. Console"></a>3.1. Console</h3><p>可以寫一些指令相關的檔案，前期暫時不會使用到它</p>
<h3 id="3-2-Exceptions"><a href="#3-2-Exceptions" class="headerlink" title="3.2. Exceptions"></a>3.2. Exceptions</h3><p>做一些除錯相關的檔案，前期暫時不會使用到它</p>
<h3 id="3-3-http"><a href="#3-3-http" class="headerlink" title="3.3. http"></a>3.3. http</h3><p>這是一個很重要的folder</p>
<h4 id="3-3-1-controllers"><a href="#3-3-1-controllers" class="headerlink" title="3.3.1. controllers"></a>3.3.1. controllers</h4><p>使用者進入程式的進入點設定</p>
<h4 id="3-3-2-Middleware"><a href="#3-3-2-Middleware" class="headerlink" title="3.3.2. Middleware"></a>3.3.2. Middleware</h4><p>比較進階的模塊</p>
<h3 id="3-4-Models"><a href="#3-4-Models" class="headerlink" title="3.4. Models"></a>3.4. Models</h3><p>擺放一些資料模塊</p>
<h3 id="3-5-Providers"><a href="#3-5-Providers" class="headerlink" title="3.5. Providers"></a>3.5. Providers</h3><p>有些邏輯可以包成一些服務，可以放在這兒。</p>
<p>或者是套件的一些使用方式都會在這邊</p>
<h2 id="4-bootstrap"><a href="#4-bootstrap" class="headerlink" title="4. bootstrap"></a>4. bootstrap</h2><p>是比較進階的，跟程式運作有關，很少會碰到它</p>
<h2 id="5-config"><a href="#5-config" class="headerlink" title="5. config"></a>5. config</h2><p>可以去設定一些參數，比方說要連到哪個資料庫、email要發到哪個server ip</p>
<h2 id="6-database"><a href="#6-database" class="headerlink" title="6. database"></a>6. database</h2><p>跟資料庫操作有關的，或者是要做一些假資料，或者是啟動server時預設產生的資料等等</p>
<h2 id="7-public"><a href="#7-public" class="headerlink" title="7. public"></a>7. public</h2><p>放的是靜態檔案 比方說圖片或pdf等等</p>
<h2 id="8-resource-structure"><a href="#8-resource-structure" class="headerlink" title="8. resource structure"></a>8. resource structure</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+---resources</span><br><span class="line">|   +---css</span><br><span class="line">|   |       app.css</span><br><span class="line">|   |       </span><br><span class="line">|   +---js</span><br><span class="line">|   |       app.js</span><br><span class="line">|   |       bootstrap.js</span><br><span class="line">|   |       </span><br><span class="line">|   +---lang</span><br><span class="line">|   |   \---en</span><br><span class="line">|   |           auth.php</span><br><span class="line">|   |           pagination.php</span><br><span class="line">|   |           passwords.php</span><br><span class="line">|   |           validation.php</span><br><span class="line">|   |           </span><br><span class="line">|   \---views</span><br><span class="line">|           welcome.blade.php</span><br></pre></td></tr></table></figure>

<h3 id="8-1-css"><a href="#8-1-css" class="headerlink" title="8.1. css"></a>8.1. css</h3><p>可以放一些前端必備的檔案</p>
<h3 id="8-2-js"><a href="#8-2-js" class="headerlink" title="8.2. js"></a>8.2. js</h3><p>可以放一些前端必備的檔案</p>
<h3 id="8-3-views"><a href="#8-3-views" class="headerlink" title="8.3. views"></a>8.3. views</h3><p>view有關的程式碼</p>
<h2 id="9-routes"><a href="#9-routes" class="headerlink" title="9. routes"></a>9. routes</h2><p>使用者透過網址拜訪網站，透過路由決定要執行哪一段程式，下一章節會介紹</p>
<h2 id="10-storage"><a href="#10-storage" class="headerlink" title="10. storage"></a>10. storage</h2><p>使用者上傳檔案，或者是你要產生暫時檔案，都在這邊哦</p>
<h2 id="11-tests"><a href="#11-tests" class="headerlink" title="11. tests"></a>11. tests</h2><p>進行程式測試使用的</p>
<h2 id="12-vendor"><a href="#12-vendor" class="headerlink" title="12. vendor"></a>12. vendor</h2><p>這個專案用到的套件</p>
]]></content>
      <categories>
        <category>PHP</category>
        <category>Laravel</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Laravel</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP Laravel 系列 - (8) request與response</title>
    <url>/2021/10/16/2021-10-16%20PHP%20Laravel%20%E7%B3%BB%E5%88%97%20-%20(8)%20request%E8%88%87response/</url>
    <content><![CDATA[<h2 id="1-dump"><a href="#1-dump" class="headerlink" title="1. dump"></a>1. dump</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params">Request <span class="variable">$request</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="title function_ invoke__">dump</span>(<span class="variable">$request</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>


<p><img src="https://i.imgur.com/9kgXgjs.png" alt="image-20211016172425590"></p>
<p>加入參數</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8000/products?name=kite</span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/Qf23pLH.png" alt="image-20211016172520072"></p>
<h3 id="1-1-query"><a href="#1-1-query" class="headerlink" title="1.1. query"></a>1.1. query</h3><p>相關get參數會在這兒</p>
<h3 id="1-2-server"><a href="#1-2-server" class="headerlink" title="1.2. server"></a>1.2. server</h3><p>本身這台server的info</p>
<p><img src="https://i.imgur.com/QSh3Wed.png" alt="image-20211016172835394"></p>
<h3 id="1-3-files"><a href="#1-3-files" class="headerlink" title="1.3. files"></a>1.3. files</h3><p>有上傳檔案的話，會在這邊出現</p>
<h3 id="1-4-cookies"><a href="#1-4-cookies" class="headerlink" title="1.4. cookies"></a>1.4. cookies</h3><p>暫存資料會用cookies，或者一些廣告的功能，其實也是用cookies方式在記錄。</p>
<h3 id="1-5-headers"><a href="#1-5-headers" class="headerlink" title="1.5. headers"></a>1.5. headers</h3><p>http 的協議header </p>
<p>記載比如chrome 瀏覽器等等訊息</p>
<p><img src="https://i.imgur.com/wgUreWk.png" alt="image-20211016173158410"></p>
<h2 id="2-request-基本用法"><a href="#2-request-基本用法" class="headerlink" title="2. request 基本用法"></a>2. request 基本用法</h2><h3 id="2-1-request-all"><a href="#2-1-request-all" class="headerlink" title="2.1. $request-&gt;all()"></a>2.1. $request-&gt;all()</h3><p>列出所有傳遞過來的參數</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params">Request <span class="variable">$request</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">dump</span>(<span class="variable">$request</span>-&gt;<span class="title function_ invoke__">all</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/oge5BXt.png" alt="image-20211016173355573"></p>
<h3 id="2-2-request-path"><a href="#2-2-request-path" class="headerlink" title="2.2. $request-&gt;path()"></a>2.2. $request-&gt;path()</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params">Request <span class="variable">$request</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">dump</span>(<span class="variable">$request</span>-&gt;<span class="title function_ invoke__">path</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/6TEs0Hp.png" alt="image-20211016191655577"></p>
<h3 id="2-3-request-input"><a href="#2-3-request-input" class="headerlink" title="2.3. $request-&gt;input()"></a>2.3. $request-&gt;input()</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params">Request <span class="variable">$request</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">dump</span>(<span class="variable">$request</span>-&gt;<span class="title function_ invoke__">input</span>(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/eZPCpq2.png" alt="image-20211016191802383"></p>
<h4 id="2-3-1-如果取了一個沒有的值如何預設？"><a href="#2-3-1-如果取了一個沒有的值如何預設？" class="headerlink" title="2.3.1. 如果取了一個沒有的值如何預設？"></a>2.3.1. 如果取了一個沒有的值如何預設？</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params">Request <span class="variable">$request</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">dump</span>(<span class="variable">$request</span>-&gt;<span class="title function_ invoke__">input</span>(<span class="string">&quot;age&quot;</span>,<span class="number">20</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-4-request-query"><a href="#2-4-request-query" class="headerlink" title="2.4. $request-&gt;query()"></a>2.4. $request-&gt;query()</h3><p>取得網址列的參數，如果是post method使用這個方式是取不到的。</p>
<h2 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h2><h2 id="4-response-基本用法"><a href="#4-response-基本用法" class="headerlink" title="4. response 基本用法"></a>4. response 基本用法</h2><h3 id="4-1-回傳字串"><a href="#4-1-回傳字串" class="headerlink" title="4.1. 回傳字串"></a>4.1. 回傳字串</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params">Request <span class="variable">$request</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">response</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">    <span class="comment">// return &#x27;hello&#x27;;//效果一樣</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-2-loadview"><a href="#4-2-loadview" class="headerlink" title="4.2. loadview"></a>4.2. loadview</h3><p>載入在<code>resources\views</code>底下的view頁面</p>
<p><img src="https://i.imgur.com/xy7B6hl.png" alt="image-20211016193028804"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params">Request <span class="variable">$request</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">response</span>()-&gt;<span class="title function_ invoke__">view</span>(<span class="string">&#x27;welcome&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-3-http-status"><a href="#4-3-http-status" class="headerlink" title="4.3. http status"></a>4.3. http status</h3><p>定義回傳http狀態</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params">Request <span class="variable">$request</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">response</span>(<span class="string">&#x27;hello&#x27;</span>,<span class="number">400</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/26q21dS.png" alt="image-20211016192758858"></p>
<h3 id="4-4-redirect"><a href="#4-4-redirect" class="headerlink" title="4.4. redirect"></a>4.4. redirect</h3><p>導回首頁</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params">Request <span class="variable">$request</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">redirect</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>PHP</category>
        <category>Laravel</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Laravel</tag>
        <tag>POSTMAN</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP Laravel 系列 - (10) API開發_Read</title>
    <url>/2021/10/17/2021-10-17%20PHP%20Laravel%20%E7%B3%BB%E5%88%97%20-%20(10)%20API%E9%96%8B%E7%99%BC_Read/</url>
    <content><![CDATA[<h2 id="1-簡易API"><a href="#1-簡易API" class="headerlink" title="1. 簡易API"></a>1. 簡易API</h2><p>當前後端配合的時候，可以利用這種方式提供資料給前端去call</p>
<span id="more"></span>


<h2 id="2-簡單建一個假資料"><a href="#2-簡單建一個假資料" class="headerlink" title="2. 簡單建一個假資料"></a>2. 簡單建一個假資料</h2><p>我們新增一個<code>getData()</code>函式</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        [</span><br><span class="line">            <span class="string">&#x27;title&#x27;</span> =&gt; <span class="string">&#x27;A&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;content&#x27;</span> =&gt; <span class="string">&#x27;aaa&#x27;</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="string">&#x27;title&#x27;</span> =&gt; <span class="string">&#x27;B&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;content&#x27;</span> =&gt; <span class="string">&#x27;bbb&#x27;</span>,</span><br><span class="line">        ]            </span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然後在加在<code>index function</code>裡</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params">Request <span class="variable">$request</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">response</span>(<span class="variable">$this</span>-&gt;<span class="title function_ invoke__">getData</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>ProductController.php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">App</span>\<span class="title class_">Http</span>\<span class="title class_">Controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Display a listing of the resource.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> \Illuminate\Http\Response</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params">Request <span class="variable">$request</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$data</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getData</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">response</span>(<span class="variable">$data</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            [</span><br><span class="line">                <span class="string">&#x27;title&#x27;</span> =&gt; <span class="string">&#x27;A&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;content&#x27;</span> =&gt; <span class="string">&#x27;aaa&#x27;</span>,</span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">                <span class="string">&#x27;title&#x27;</span> =&gt; <span class="string">&#x27;B&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;content&#x27;</span> =&gt; <span class="string">&#x27;bbb&#x27;</span>,</span><br><span class="line">            ]            </span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="3-POSTMAN測試"><a href="#3-POSTMAN測試" class="headerlink" title="3. POSTMAN測試"></a>3. POSTMAN測試</h2><p>測試url</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//localhost:8000/products</span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/JFTg5iQ.png" alt="image-20211017013907351"></p>
]]></content>
      <categories>
        <category>PHP</category>
        <category>Laravel</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Laravel</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP Laravel 系列 - (11) API開發_Create</title>
    <url>/2021/10/17/2021-10-17%20PHP%20Laravel%20%E7%B3%BB%E5%88%97%20-%20(11)%20API%E9%96%8B%E7%99%BC_Create/</url>
    <content><![CDATA[<h2 id="1-假設需求背景"><a href="#1-假設需求背景" class="headerlink" title="1. 假設需求背景"></a>1. 假設需求背景</h2><p>使用者POST上來資料之後，給使用者看目前的所有資料內容。以下說明模擬建立假資料的流程…</p>
<span id="more"></span>


<h2 id="2-為了方便測試關掉CSRF驗證機制"><a href="#2-為了方便測試關掉CSRF驗證機制" class="headerlink" title="2. 為了方便測試關掉CSRF驗證機制"></a>2. 為了方便測試關掉CSRF驗證機制</h2><p><code>ctrl +p</code> 關鍵字<code>verifyCsrf</code>如下圖，並且請在<code>except</code>加上<code>*</code> 這樣就代表不用檢查傳過來的資料。</p>
<p>如果在正式的server請不要這樣使用</p>
<p><img src="https://i.imgur.com/9cDKU3Z.png" alt="image-20211017015427462"></p>
<h2 id="3-說明route中的create與store的差異"><a href="#3-說明route中的create與store的差異" class="headerlink" title="3. 說明route中的create與store的差異"></a>3. 說明route中的create與store的差異</h2><p><img src="https://i.imgur.com/50sN493.png" alt="image-20211017020125921"></p>
<p>當我們在填基本的表單的時候是使用<code>get</code>method去取得網頁，對應的是<code>products.create</code></p>
<p>而填完之後的送出使用的是<code>post</code>method，對應的是<code>products.store</code></p>
<h2 id="4-在store加上程式碼"><a href="#4-在store加上程式碼" class="headerlink" title="4. 在store加上程式碼"></a>4. 在store加上程式碼</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span>(<span class="params">Request <span class="variable">$request</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$data</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getData</span>();</span><br><span class="line">    <span class="variable">$newData</span> = <span class="variable">$request</span>-&gt;<span class="title function_ invoke__">all</span>();</span><br><span class="line">    <span class="title function_ invoke__">array_push</span>(<span class="variable">$data</span>,<span class="variable">$newData</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">response</span>(<span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-POSTMAN測試"><a href="#5-POSTMAN測試" class="headerlink" title="5. POSTMAN測試"></a>5. POSTMAN測試</h2><p><img src="https://i.imgur.com/TfMeZEn.png" alt="image-20211017020902333"></p>
]]></content>
      <categories>
        <category>PHP</category>
        <category>Laravel</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Laravel</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP Laravel 系列 - (12) Collection</title>
    <url>/2021/10/17/2021-10-17%20PHP%20Laravel%20%E7%B3%BB%E5%88%97%20-%20(12)%20Collection/</url>
    <content><![CDATA[<h2 id="1-簡介"><a href="#1-簡介" class="headerlink" title="1. 簡介"></a>1. 簡介</h2><p><code>collection</code>提供一個流暢、便利的封裝來操控<strong>陣列資料</strong>，比原本的array提供更多功能，</p>
<p>相關可用的方法可以參考<a href="https://laravel.tw/docs/5.2/collections">台灣官網</a>，記得只有Laravel才有哦。</p>
<blockquote>
<p>有些第三方的套件使用的方法還是array 型別，所以千萬別覺得array就不重要了</p>
</blockquote>
<span id="more"></span>


<h2 id="2-動手改寫getData"><a href="#2-動手改寫getData" class="headerlink" title="2. 動手改寫getData()"></a>2. 動手改寫getData()</h2><p>原本我們的<code>getData()</code>  array object to collection object</p>
<h3 id="2-1-Code"><a href="#2-1-Code" class="headerlink" title="2.1. Code"></a>2.1. Code</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        [</span><br><span class="line">            <span class="string">&#x27;title&#x27;</span> =&gt; <span class="string">&#x27;A&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;content&#x27;</span> =&gt; <span class="string">&#x27;aaa&#x27;</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="string">&#x27;title&#x27;</span> =&gt; <span class="string">&#x27;B&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;content&#x27;</span> =&gt; <span class="string">&#x27;bbb&#x27;</span>,</span><br><span class="line">        ]            </span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>改寫成</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">collect</span>([</span><br><span class="line">        <span class="title function_ invoke__">collect</span>([</span><br><span class="line">            <span class="string">&#x27;title&#x27;</span> =&gt; <span class="string">&#x27;A&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;content&#x27;</span> =&gt; <span class="string">&#x27;aaa&#x27;</span>,</span><br><span class="line">        ]),</span><br><span class="line">        <span class="title function_ invoke__">collect</span>([</span><br><span class="line">            <span class="string">&#x27;title&#x27;</span> =&gt; <span class="string">&#x27;B&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;content&#x27;</span> =&gt; <span class="string">&#x27;bbb&#x27;</span>,</span><br><span class="line">        ])            </span><br><span class="line">    ]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>順便把<code>index()</code>改一下，讓我們來觀查狀況</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params">Request <span class="variable">$request</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">dump</span>(<span class="variable">$this</span>-&gt;<span class="title function_ invoke__">getData</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-2-Result"><a href="#2-2-Result" class="headerlink" title="2.2. Result"></a>2.2. Result</h3><p>我們再啟用服務之後，瀏覽</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8000/products</span><br></pre></td></tr></table></figure>

<p>改前</p>
<p><img src="https://i.imgur.com/uDYKt5W.png" alt="image-20211017195023070"></p>
<p>改後</p>
<p><img src="https://i.imgur.com/kIK3gAX.png" alt="image-20211017194944275"></p>
<h2 id="3-動手改寫store"><a href="#3-動手改寫store" class="headerlink" title="3. 動手改寫store()"></a>3. 動手改寫store()</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span>(<span class="params">Request <span class="variable">$request</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$data</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getData</span>();</span><br><span class="line">    <span class="variable">$newData</span> = <span class="variable">$request</span>-&gt;<span class="title function_ invoke__">all</span>();</span><br><span class="line">    <span class="title function_ invoke__">array_push</span>(<span class="variable">$data</span>,<span class="variable">$newData</span>);<span class="comment">//原生php array_push 方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">response</span>(<span class="variable">$data</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span>(<span class="params">Request <span class="variable">$request</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$data</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getData</span>();</span><br><span class="line">    <span class="variable">$newData</span> = <span class="variable">$request</span>-&gt;<span class="title function_ invoke__">all</span>();</span><br><span class="line">    <span class="variable">$data</span>-&gt;<span class="title function_ invoke__">push</span>(<span class="variable">$newData</span>);<span class="comment">//改寫</span></span><br><span class="line">    <span class="title function_ invoke__">dump</span>(<span class="variable">$data</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">response</span>(<span class="variable">$data</span>);        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/5pP81Ij.png" alt="image-20211017200729624"></p>
<p>我們可以看到在最後一個的型別還是array，所以我們可以再這邊改寫一下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span>(<span class="params">Request <span class="variable">$request</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$data</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getData</span>();</span><br><span class="line">    <span class="variable">$newData</span> = <span class="variable">$request</span>-&gt;<span class="title function_ invoke__">all</span>();</span><br><span class="line">    <span class="variable">$data</span>-&gt;<span class="title function_ invoke__">push</span>(<span class="title function_ invoke__">collect</span>(<span class="variable">$newData</span>));</span><br><span class="line">    <span class="title function_ invoke__">dump</span>(<span class="variable">$data</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">response</span>(<span class="variable">$data</span>);        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/T8Gw2dv.png" alt="image-20211017200937848"></p>
]]></content>
      <categories>
        <category>PHP</category>
        <category>Laravel</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Laravel</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP Laravel 系列 - (13) API開發_Update_and_Delete</title>
    <url>/2021/10/17/2021-10-17%20PHP%20Laravel%20%E7%B3%BB%E5%88%97%20-%20(13)%20API%E9%96%8B%E7%99%BC_Update_and_Delete/</url>
    <content><![CDATA[<p>這篇講的是如何修改更刪除資料</p>
<span id="more"></span>


<h2 id="1-Update"><a href="#1-Update" class="headerlink" title="1. Update"></a>1. Update</h2><p>在更新資料時使用的是<code>put method</code>，最後一個參數是<code>id</code></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">http://localhost:8000/products/1</span><br><span class="line">//http://localhost:8000/products/id</span><br></pre></td></tr></table></figure>

<p>此url對應的是<code>update function()</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params">Request <span class="variable">$request</span>, <span class="variable">$id</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">dd</span>(<span class="variable">$request</span>-&gt;<span class="title function_ invoke__">all</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-1-使用POSTMAN測試"><a href="#1-1-使用POSTMAN測試" class="headerlink" title="1.1. 使用POSTMAN測試"></a>1.1. 使用POSTMAN測試</h3><p>在使用<code>Laravel</code>時，測試<code>PUT</code>方法記得要選用的是<code>x-www-form-urlencoded</code></p>
<p><img src="https://i.imgur.com/x2X5Mjj.png" alt="image-20211017232406618"></p>
<h3 id="1-2-修改update-function"><a href="#1-2-修改update-function" class="headerlink" title="1.2. 修改update function()"></a>1.2. 修改update function()</h3><p>網址上的id對應<code>parameter</code> 的<code>$id</code>，試著模擬從資料庫取得資料後進行更新，並使用collect相關方法。</p>
<p>寫起來有點像<code>c#</code>的<code>LINQ</code>。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params">Request <span class="variable">$request</span>, <span class="variable">$id</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//取得所有request資料</span></span><br><span class="line">    <span class="variable">$form</span> = <span class="variable">$request</span>-&gt;<span class="title function_ invoke__">all</span>();</span><br><span class="line">    <span class="comment">//取得假資料並以where方式指定id，接著取第一筆資料</span></span><br><span class="line">    <span class="variable">$data</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getData</span>()-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;id&#x27;</span>,<span class="variable">$id</span>)-&gt;<span class="title function_ invoke__">first</span>();</span><br><span class="line">    <span class="comment">//合併二個陣列，記得要先將$form轉型為collect</span></span><br><span class="line">    <span class="variable">$data</span> = <span class="variable">$data</span>-&gt;<span class="title function_ invoke__">merge</span>(<span class="title function_ invoke__">collect</span>(<span class="variable">$form</span>));</span><br><span class="line">    <span class="comment">//print訊息</span></span><br><span class="line">    <span class="title function_ invoke__">dd</span>(<span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">collect</span>([</span><br><span class="line">        <span class="title function_ invoke__">collect</span>([</span><br><span class="line">            <span class="string">&#x27;id&#x27;</span> =&gt; <span class="number">1</span>,</span><br><span class="line">            <span class="string">&#x27;title&#x27;</span> =&gt; <span class="string">&#x27;A&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;content&#x27;</span> =&gt; <span class="string">&#x27;aaa&#x27;</span>,</span><br><span class="line">        ]),</span><br><span class="line">        <span class="title function_ invoke__">collect</span>([</span><br><span class="line">            <span class="string">&#x27;id&#x27;</span> =&gt; <span class="number">2</span>,</span><br><span class="line">            <span class="string">&#x27;title&#x27;</span> =&gt; <span class="string">&#x27;B&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;content&#x27;</span> =&gt; <span class="string">&#x27;bbb&#x27;</span>,</span><br><span class="line">        ])            </span><br><span class="line">    ]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> emp = Employee.GetAllEmp().Where(x =&gt; x.Name == <span class="string">&quot;Rahul&quot;</span>).First();  </span><br></pre></td></tr></table></figure>



<p>用POSTMAN測試我們看到<strong>id &#x3D; 1</strong> 這筆的確被更新成功了。</p>
<p><img src="https://i.imgur.com/m6heW3u.png" alt="image-20211017233957238"></p>
<h3 id="1-3-在API常見的作法"><a href="#1-3-在API常見的作法" class="headerlink" title="1.3. 在API常見的作法"></a>1.3. 在API常見的作法</h3><p>將更新好的資料回傳回去，再稍微改一下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params">Request <span class="variable">$request</span>, <span class="variable">$id</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$form</span> = <span class="variable">$request</span>-&gt;<span class="title function_ invoke__">all</span>();</span><br><span class="line">    <span class="variable">$data</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getData</span>()-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;id&#x27;</span>,<span class="variable">$id</span>)-&gt;<span class="title function_ invoke__">first</span>();</span><br><span class="line">    <span class="variable">$data</span> = <span class="variable">$data</span>-&gt;<span class="title function_ invoke__">merge</span>(<span class="title function_ invoke__">collect</span>(<span class="variable">$form</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">response</span>(<span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>前端就正常拿到JSON格式囉</p>
<p><img src="https://i.imgur.com/2ktRTZ0.png" alt="image-20211017234653585"></p>
<h3 id="1-4-dd-與dump差異"><a href="#1-4-dd-與dump差異" class="headerlink" title="1.4. dd 與dump差異"></a>1.4. dd 與dump差異</h3><p>使用<code>dd</code>的效果跟<code>dump</code>是一樣的，不過<code>dd</code>會中止之後程式碼執行</p>
<h2 id="2-Delete"><a href="#2-Delete" class="headerlink" title="2. Delete"></a>2. Delete</h2><p>在刪除資料時使用的是<code>delete method</code>，最後一個參數是<code>id</code></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">http://localhost:8000/products/1</span><br><span class="line">//http://localhost:8000/products/id</span><br></pre></td></tr></table></figure>

<h3 id="2-1-修改destroy-function"><a href="#2-1-修改destroy-function" class="headerlink" title="2.1. 修改destroy function()"></a>2.1. 修改destroy function()</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">destroy</span>(<span class="params"><span class="variable">$id</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//先取得假資料</span></span><br><span class="line">    <span class="variable">$data</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getData</span>();</span><br><span class="line">    <span class="comment">//利用filter函式留下此id以外的資料</span></span><br><span class="line">    <span class="comment">//closure要傳入外部參數要使用use</span></span><br><span class="line">    <span class="variable">$data</span> = <span class="variable">$data</span>-&gt;<span class="title function_ invoke__">filter</span>(function (<span class="variable">$product</span>) <span class="keyword">use</span> ($<span class="title">id</span>)&#123;</span><br><span class="line">        <span class="title">return</span> $<span class="title">product</span>[&#x27;<span class="title">id</span>&#x27;] != $<span class="title">id</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">response</span>(<span class="variable">$data</span>);        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>跟js的狀況有一些像，都是需要經過特別的寫法去做到這件事情</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;abcd&quot;</span>, <span class="string">&quot;abcde&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> string = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;abc&quot;</span>&#125;;</span><br><span class="line">arr.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">item, index, array</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> item == <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">&#125;,string)</span><br></pre></td></tr></table></figure>

<h3 id="2-2-使用POSTMAN測試"><a href="#2-2-使用POSTMAN測試" class="headerlink" title="2.2. 使用POSTMAN測試"></a>2.2. 使用POSTMAN測試</h3><p>經由<code>filter function()</code>操作後，資料被重新整理了，因此會看到會多一層<code>&quot;1&quot;</code></p>
<p><img src="https://i.imgur.com/fRlkNj3.png" alt="image-20211018002311594"></p>
<h3 id="2-3-讓資料結構變好看"><a href="#2-3-讓資料結構變好看" class="headerlink" title="2.3. 讓資料結構變好看"></a>2.3. 讓資料結構變好看</h3><p>改寫一下在具有<code>collect</code>型別的<code>$data物件</code>加上<code>values()</code> ，資料結構就變乾淨囉</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">destroy</span>(<span class="params"><span class="variable">$id</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$data</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getData</span>();</span><br><span class="line">    <span class="variable">$data</span> = <span class="variable">$data</span>-&gt;<span class="title function_ invoke__">filter</span>(function (<span class="variable">$product</span>) <span class="keyword">use</span> ($<span class="title">id</span>)&#123;</span><br><span class="line">        <span class="title">return</span> $<span class="title">product</span>[&#x27;<span class="title">id</span>&#x27;] != $<span class="title">id</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">response</span>(<span class="variable">$data</span>-&gt;<span class="title function_ invoke__">values</span>());<span class="comment">//加上values()   </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/OTamD7K.png" alt="image-20211018002538390"></p>
]]></content>
      <categories>
        <category>PHP</category>
        <category>Laravel</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Laravel</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP Laravel 系列 - (9) POSTMAN</title>
    <url>/2021/10/17/2021-10-17%20PHP%20Laravel%20%E7%B3%BB%E5%88%97%20-%20(9)%20POSTMAN/</url>
    <content><![CDATA[<h2 id="1-POSTMAN介紹"><a href="#1-POSTMAN介紹" class="headerlink" title="1. POSTMAN介紹"></a>1. POSTMAN介紹</h2><p>測試API的好工具，業界非常主流的測試API工具</p>
<span id="more"></span>


<h2 id="2-測試網址"><a href="#2-測試網址" class="headerlink" title="2. 測試網址"></a>2. 測試網址</h2><figure class="highlight http"><table><tr><td class="code"><pre><span class="line">https://dog.ceo/api/breeds/image/random</span><br></pre></td></tr></table></figure>

<h2 id="3-可以產生簡易的code"><a href="#3-可以產生簡易的code" class="headerlink" title="3. 可以產生簡易的code"></a>3. 可以產生簡易的code</h2><p><img src="https://i.imgur.com/g7VdQlt.png" alt="image-20211017012203995"></p>
<p>比方說選JS的fetch方法</p>
<p><img src="https://i.imgur.com/pdUZbrb.png" alt="image-20211017012242986"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> requestOptions = &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">  <span class="attr">redirect</span>: <span class="string">&#x27;follow&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&quot;https://dog.ceo/api/breeds/image/random&quot;</span>, requestOptions)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">text</span>())</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(result))</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;error&#x27;</span>, error));</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>PHP</category>
        <category>Laravel</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Laravel</tag>
        <tag>POSTMAN</tag>
      </tags>
  </entry>
  <entry>
    <title>Ionic 系列 - (1) 介紹與安裝</title>
    <url>/2021/10/24/2021-10-24%20Ionic%20%E7%B3%BB%E5%88%97%20-%20(1)%20%E4%BB%8B%E7%B4%B9%E8%88%87%E5%AE%89%E8%A3%9D/</url>
    <content><![CDATA[<h2 id="1-介紹"><a href="#1-介紹" class="headerlink" title="1. 介紹"></a>1. 介紹</h2><p><code>ionic</code> 是一個開源的移動應用程序開發框架，它可以讓我們快速的使用web技術構建高質量的移動應用。它不僅可以開發跨平台移動app還可以開發移動端web頁面，桌面應用程序(結合<code>electron</code>)、混合appweb頁面等。</p>
<p><code>ionic</code> 經過很多年的發展已經非常成熟了。最新的ionic4.x、ionic5.x基于<code>web componets</code>，具有更好的運行速度，相比以前版本的ionic框架性能提升很多。</p>
<blockquote>
<p>ionic4.x 和ionic5.x用法是一樣的</p>
</blockquote>
<span id="more"></span>


<p>ionic 4.x 以後在<code>angular</code>、<code>vue</code>、<code>react</code>基礎上面做了一些封裝，讓我們可以更快速和容易的開發跨平台的移動應用。<code>ionic</code>調用原生的功能是基于<code>cordova</code>，cordova提供了使用javascript調用native功能，ionic自己也封裝了一套漂亮的CSS UI庫。</p>
<h2 id="2-ionic的安裝運行"><a href="#2-ionic的安裝運行" class="headerlink" title="2. ionic的安裝運行"></a>2. ionic的安裝運行</h2><h3 id="2-1-學習前準備工作"><a href="#2-1-學習前準備工作" class="headerlink" title="2.1. 學習前準備工作"></a>2.1. 學習前準備工作</h3><ul>
<li><p>必須得安裝nodejs</p>
</li>
<li><p>必須有angular基礎</p>
</li>
</ul>
<h3 id="2-2-安裝cordova-ionic"><a href="#2-2-安裝cordova-ionic" class="headerlink" title="2.2. 安裝cordova ionic"></a>2.2. 安裝cordova ionic</h3><p>這樣的指令是代表cordova與ionic一起安裝</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install -g cordova ionic</span><br></pre></td></tr></table></figure>

<h3 id="2-3-檢查安裝"><a href="#2-3-檢查安裝" class="headerlink" title="2.3. 檢查安裝"></a>2.3. 檢查安裝</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ionic -v</span><br><span class="line">cordova -v</span><br></pre></td></tr></table></figure>



<h3 id="2-4-創建項目"><a href="#2-4-創建項目" class="headerlink" title="2.4. 創建項目"></a>2.4. 創建項目</h3><h3 id="2-5-ionic-start"><a href="#2-5-ionic-start" class="headerlink" title="2.5. ionic start [&lt;name&gt;] [&lt;template&gt;]"></a>2.5. <code>ionic start [&lt;name&gt;] [&lt;template&gt;]</code></h3><p><code>&lt;name&gt;</code> 專案名稱</p>
<p><code>&lt;template&gt;</code>版型名稱，Ionic 目前提供的版型有：<strong>blank</strong>、<strong>sidemenu</strong>、<strong>tutorial</strong>、<strong>tabs</strong>、<strong>super</strong></p>
<p>輸入以下指令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ionic start crm sidemenu</span><br></pre></td></tr></table></figure>

<p>輸入指令後會問要用哪個框架開發，選用<code>angular</code></p>
<p><img src="https://i.imgur.com/WFUxlyk.png" alt="image-20211024191204739"></p>
<p>創建完之後結構如圖</p>
<p><img src="https://i.imgur.com/7s56egp.png" alt="image-20211024182019339"></p>
<h2 id="3-使用vscode開發"><a href="#3-使用vscode開發" class="headerlink" title="3. 使用vscode開發"></a>3. 使用vscode開發</h2><p>打開剛剛的路徑</p>
<p>比方說在d槽的<code>ionic_app</code>資料夾底下</p>
<p>接著再輸入指令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ionic serve</span><br></pre></td></tr></table></figure>

<p>以瀏覽器打開，用手機模擬模式看到的畫面如下，這樣就簡單的創建了一個有sidebar的template囉</p>
<p><img src="https://i.imgur.com/cvkxdOp.png" alt="image-20211024182300460"></p>
<p><img src="https://i.imgur.com/KZmfiuB.png" alt="image-20211024182323701"></p>
<h3 id="3-1-安裝extension"><a href="#3-1-安裝extension" class="headerlink" title="3.1. 安裝extension"></a>3.1. 安裝extension</h3><h4 id="3-1-1-angluar"><a href="#3-1-1-angluar" class="headerlink" title="3.1.1. angluar"></a>3.1.1. angluar</h4><p><img src="https://i.imgur.com/rkeMjJI.png" alt="image-20211024190506737"></p>
<h4 id="3-1-2-ionic"><a href="#3-1-2-ionic" class="headerlink" title="3.1.2. ionic"></a>3.1.2. ionic</h4><p><img src="https://i.imgur.com/Wmvc7i7.png" alt="image-20211024190533505"></p>
<p><img src="https://i.imgur.com/WkdgiSI.png" alt="image-20211024190641416"></p>
<p>自動產生程式碼片段</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;<span class="tag">&lt;<span class="name">ion-button</span> (<span class="attr">click</span>)=<span class="string">&quot;onClick()&quot;</span> <span class="attr">expand</span>=<span class="string">&quot;block&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;clear&quot;</span> <span class="attr">shape</span>=<span class="string">&quot;round&quot;</span>&gt;</span></span><br><span class="line">  Click me</span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-button</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="4-學習資源"><a href="#4-學習資源" class="headerlink" title="4. 學習資源"></a>4. 學習資源</h2><p><a href="https://www.bilibili.com/video/BV1Ub41117q5?from=search&seid=16222549152627740100&spm_id_from=333.337.0.0">Ionic4 Ionic5视频教程_Ionic4.x Ionic5.x入门实战教程</a></p>
]]></content>
      <categories>
        <category>Ionic</category>
      </categories>
      <tags>
        <tag>Ionic</tag>
        <tag>HybridApp</tag>
      </tags>
  </entry>
  <entry>
    <title>Ionic 系列 - (2) 目錄結構分析</title>
    <url>/2021/10/24/2021-10-24%20Ionic%20%E7%B3%BB%E5%88%97%20-%20(2)%20%E7%9B%AE%E9%8C%84%E7%B5%90%E6%A7%8B%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="1-目錄結構分析"><a href="#1-目錄結構分析" class="headerlink" title="1. 目錄結構分析"></a>1. 目錄結構分析</h2><h2 id="2-crm-e2e"><a href="#2-crm-e2e" class="headerlink" title="2. crm\e2e"></a>2. crm\e2e</h2><p>端對端測試</p>
<span id="more"></span>


<h2 id="3-crm-src"><a href="#3-crm-src" class="headerlink" title="3. crm\src"></a>3. crm\src</h2><p>開發工作目錄，頁面、樣式、腳本和圖片都放在這個目錄下</p>
<p><img src="https://i.imgur.com/RIEtsKg.png" alt="image-20211024194852908"></p>
<h3 id="3-1-crm-src-app"><a href="#3-1-crm-src-app" class="headerlink" title="3.1. crm\src\app"></a>3.1. crm\src\app</h3><p>開發的程式基本上都在這裡</p>
<p><img src="https://i.imgur.com/SCDIp5A.png" alt="image-20211024192314367"></p>
<h3 id="3-2-crm-src-assets"><a href="#3-2-crm-src-assets" class="headerlink" title="3.2. crm\src\assets"></a>3.2. crm\src\assets</h3><p>靜態文件</p>
<p><img src="https://i.imgur.com/DOom4mR.png" alt="image-20211024192336055"></p>
<h3 id="3-3-crm-src-environments"><a href="#3-3-crm-src-environments" class="headerlink" title="3.3. crm\src\environments"></a>3.3. crm\src\environments</h3><p>配置運行環境</p>
<p><img src="https://i.imgur.com/6VnM212.png" alt="image-20211024192355935"></p>
<h3 id="3-4-crm-src-theme"><a href="#3-4-crm-src-theme" class="headerlink" title="3.4. crm\src\theme"></a>3.4. crm\src\theme</h3><p>主題相關文件，可以針對這個文件再進行擴展</p>
<p><code>crm\src\theme\variables.scss</code></p>
<p>跟bootstrap一樣的概念去描述主題中的相關色系定義</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Ionic Variables and Theming. For more info, please see:</span></span><br><span class="line"><span class="comment">// http://ionicframework.com/docs/theming/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** Ionic CSS Variables **/</span></span><br><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="comment">/** primary **/</span></span><br><span class="line">  <span class="attr">--ion-color-primary</span>: <span class="number">#3880ff</span>;</span><br><span class="line">  <span class="attr">--ion-color-primary-rgb</span>: <span class="number">56</span>, <span class="number">128</span>, <span class="number">255</span>;</span><br><span class="line">  <span class="attr">--ion-color-primary-contrast</span>: <span class="number">#ffffff</span>;</span><br><span class="line">  <span class="attr">--ion-color-primary-contrast-rgb</span>: <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>;</span><br><span class="line">  <span class="attr">--ion-color-primary-shade</span>: <span class="number">#3171e0</span>;</span><br><span class="line">  <span class="attr">--ion-color-primary-tint</span>: <span class="number">#4c8dff</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** secondary **/</span></span><br><span class="line">  <span class="attr">--ion-color-secondary</span>: <span class="number">#3dc2ff</span>;</span><br><span class="line">  <span class="attr">--ion-color-secondary-rgb</span>: <span class="number">61</span>, <span class="number">194</span>, <span class="number">255</span>;</span><br><span class="line">  <span class="attr">--ion-color-secondary-contrast</span>: <span class="number">#ffffff</span>;</span><br><span class="line">  <span class="attr">--ion-color-secondary-contrast-rgb</span>: <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>;</span><br><span class="line">  <span class="attr">--ion-color-secondary-shade</span>: <span class="number">#36abe0</span>;</span><br><span class="line">  <span class="attr">--ion-color-secondary-tint</span>: <span class="number">#50c8ff</span>;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<h2 id="4-crm-src-index-html"><a href="#4-crm-src-index-html" class="headerlink" title="4. crm\src\index.html"></a>4. crm\src\index.html</h2><p>入口文件</p>
<h2 id="5-crm-karma-conf-js"><a href="#5-crm-karma-conf-js" class="headerlink" title="5. crm\karma.conf.js"></a>5. crm\karma.conf.js</h2><p>測試文件設定，稍微查一下<code>karma</code>是一個單元測試的軟體，</p>
<h2 id="6-crm-src-main-ts"><a href="#6-crm-src-main-ts" class="headerlink" title="6. crm\src\main.ts"></a>6. crm\src\main.ts</h2><p>主入口文件</p>
<h2 id="7-crm-src-polyfills-ts"><a href="#7-crm-src-polyfills-ts" class="headerlink" title="7. crm\src\polyfills.ts"></a>7. crm\src\polyfills.ts</h2><p>在ionic 加載之前執行</p>
<h2 id="8-crm-src-test-ts"><a href="#8-crm-src-test-ts" class="headerlink" title="8. crm\src\test.ts"></a>8. crm\src\test.ts</h2><p>跟<code>karma</code>一樣用於測試使時用</p>
<h2 id="9-學習資源"><a href="#9-學習資源" class="headerlink" title="9. 學習資源"></a>9. 學習資源</h2><p><a href="https://www.bilibili.com/video/BV1Ub41117q5?from=search&seid=16222549152627740100&spm_id_from=333.337.0.0">Ionic4 Ionic5视频教程_Ionic4.x Ionic5.x入门实战教程</a></p>
]]></content>
      <categories>
        <category>Ionic</category>
      </categories>
      <tags>
        <tag>Ionic</tag>
        <tag>HybridApp</tag>
      </tags>
  </entry>
  <entry>
    <title>Ionic 系列 - (3) 建立頁面及頁面跳轉</title>
    <url>/2021/10/25/2021-10-25%20Ionic%20%E7%B3%BB%E5%88%97%20-%20(3)%20%E5%BB%BA%E7%AB%8B%E9%A0%81%E9%9D%A2%E5%8F%8A%E9%A0%81%E9%9D%A2%E8%B7%B3%E8%BD%89/</url>
    <content><![CDATA[<h2 id="1-新增tab頁面"><a href="#1-新增tab頁面" class="headerlink" title="1. 新增tab頁面"></a>1. 新增tab頁面</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ionic g --<span class="built_in">help</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>



<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ionic g page tab4</span><br></pre></td></tr></table></figure>

<p>下完指令後可以看到終端機的訊息如下</p>
<p><img src="https://i.imgur.com/O8I2VWS.png" alt="image-20211025002626677"></p>
<p>產生了一個tab4的資料夾</p>
<p><img src="https://i.imgur.com/8ICsqEL.png" alt="image-20211024203326193"></p>
<h3 id="1-1-修改路由"><a href="#1-1-修改路由" class="headerlink" title="1.1. 修改路由"></a>1.1. 修改路由</h3><p>在<code>crm\src\app\tabs\tabs-routing.module.ts</code>加上tab4</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NgModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">RouterModule</span>, <span class="title class_">Routes</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">TabsPage</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./tabs.page&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Routes</span> = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;tabs&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">TabsPage</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;tab1&#x27;</span>,</span><br><span class="line">        <span class="attr">loadChildren</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../tab1/tab1.module&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">m</span> =&gt;</span> m.<span class="property">Tab1PageModule</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;tab2&#x27;</span>,</span><br><span class="line">        <span class="attr">loadChildren</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../tab2/tab2.module&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">m</span> =&gt;</span> m.<span class="property">Tab2PageModule</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;tab3&#x27;</span>,</span><br><span class="line">        <span class="attr">loadChildren</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../tab3/tab3.module&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">m</span> =&gt;</span> m.<span class="property">Tab3PageModule</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;tab4&#x27;</span>,</span><br><span class="line">        <span class="attr">loadChildren</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../tab4/tab4.module&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">m</span> =&gt;</span> m.<span class="property">Tab4PageModule</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">redirectTo</span>: <span class="string">&#x27;/tabs/tab1&#x27;</span>,</span><br><span class="line">        <span class="attr">pathMatch</span>: <span class="string">&#x27;full&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">redirectTo</span>: <span class="string">&#x27;/tabs/tab1&#x27;</span>,</span><br><span class="line">    <span class="attr">pathMatch</span>: <span class="string">&#x27;full&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">RouterModule</span>.<span class="title function_">forChild</span>(routes)],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">TabsPageRoutingModule</span> &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="1-2-修改頁面"><a href="#1-2-修改頁面" class="headerlink" title="1.2. 修改頁面"></a>1.2. 修改頁面</h3><p><code>crm\src\app\tabs\tabs.page.html</code>加上tab4</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ion-tabs</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">ion-tab-bar</span> <span class="attr">slot</span>=<span class="string">&quot;bottom&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-tab-button</span> <span class="attr">tab</span>=<span class="string">&quot;tab1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ion-icon</span> <span class="attr">name</span>=<span class="string">&quot;triangle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ion-icon</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ion-label</span>&gt;</span>Tab 1<span class="tag">&lt;/<span class="name">ion-label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ion-tab-button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-tab-button</span> <span class="attr">tab</span>=<span class="string">&quot;tab2&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ion-icon</span> <span class="attr">name</span>=<span class="string">&quot;ellipse&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ion-icon</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ion-label</span>&gt;</span>Tab 2<span class="tag">&lt;/<span class="name">ion-label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ion-tab-button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-tab-button</span> <span class="attr">tab</span>=<span class="string">&quot;tab3&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ion-icon</span> <span class="attr">name</span>=<span class="string">&quot;square&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ion-icon</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ion-label</span>&gt;</span>Tab 3<span class="tag">&lt;/<span class="name">ion-label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ion-tab-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-tab-button</span> <span class="attr">tab</span>=<span class="string">&quot;tab4&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ion-icon</span> <span class="attr">name</span>=<span class="string">&quot;square&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ion-icon</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ion-label</span>&gt;</span>Tab 4<span class="tag">&lt;/<span class="name">ion-label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ion-tab-button</span>&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;/<span class="name">ion-tab-bar</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-tabs</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>crm\src\app\app-routing.module.ts</code></p>
<p>可以移除剛剛自動產生的 tab4 path</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NgModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">PreloadAllModules</span>, <span class="title class_">RouterModule</span>, <span class="title class_">Routes</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/router&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Routes</span> = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">loadChildren</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./tabs/tabs.module&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">m</span> =&gt;</span> m.<span class="property">TabsPageModule</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">    <span class="comment">//這個部分可以移掉↓</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;tab4&#x27;</span>,</span><br><span class="line">    <span class="attr">loadChildren</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./tab4/tab4.module&#x27;</span>).<span class="title function_">then</span>( <span class="function"><span class="params">m</span> =&gt;</span> m.<span class="property">Tab4PageModule</span>)</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="comment">//這個部分可以移掉↑</span></span><br><span class="line">];</span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    <span class="title class_">RouterModule</span>.<span class="title function_">forRoot</span>(routes, &#123; <span class="attr">preloadingStrategy</span>: <span class="title class_">PreloadAllModules</span> &#125;)</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">exports</span>: [<span class="title class_">RouterModule</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppRoutingModule</span> &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="2-新增news頁面"><a href="#2-新增news頁面" class="headerlink" title="2. 新增news頁面"></a>2. 新增news頁面</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ionic g page news</span><br></pre></td></tr></table></figure>

<p>動手玩一些實驗</p>
<h3 id="2-1-建立假數據"><a href="#2-1-建立假數據" class="headerlink" title="2.1. 建立假數據"></a>2.1. 建立假數據</h3><p><code>crm\src\app\news\news.page.ts</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span>, <span class="title class_">OnInit</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-news&#x27;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./news.page.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./news.page.scss&#x27;</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">NewsPage</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line">    <span class="comment">//加入list變數</span></span><br><span class="line">  <span class="keyword">public</span> <span class="attr">list</span>:<span class="built_in">any</span>=[];</span><br><span class="line">  <span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">//造假數據</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i &lt;<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">push</span>(<span class="string">`這是第<span class="subst">$&#123;i&#125;</span>條數據`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-2-讀取數據和加入返回鍵"><a href="#2-2-讀取數據和加入返回鍵" class="headerlink" title="2.2. 讀取數據和加入返回鍵"></a>2.2. 讀取數據和加入返回鍵</h3><p><code>crm\src\app\news\news.page.html</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ion-header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ion-toolbar</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 返回鍵 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-buttons</span> <span class="attr">slot</span>=<span class="string">&quot;start&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ion-back-button</span>&gt;</span><span class="tag">&lt;/<span class="name">ion-back-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ion-buttons</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-title</span>&gt;</span>news<span class="tag">&lt;/<span class="name">ion-title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ion-toolbar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-header</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ion-content</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ion-list</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- for loop --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-item</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let item of list&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ion-label</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">ion-label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ion-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ion-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-content</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-3-在頁籤4上加入按鍵導向到news頁面"><a href="#2-3-在頁籤4上加入按鍵導向到news頁面" class="headerlink" title="2.3. 在頁籤4上加入按鍵導向到news頁面"></a>2.3. 在頁籤4上加入按鍵導向到news頁面</h3><p><code>crm\src\app\tab4\tab4.page.html</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ion-header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ion-toolbar</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-title</span>&gt;</span>tab4<span class="tag">&lt;/<span class="name">ion-title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ion-toolbar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-header</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ion-content</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 點擊按鈕 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ion-button</span> <span class="attr">shape</span>=<span class="string">&quot;round&quot;</span> <span class="attr">color</span>=<span class="string">&quot;primary&quot;</span> [<span class="attr">routerLink</span>]=<span class="string">&quot;[&#x27;/news&#x27;]&quot;</span>&gt;</span></span><br><span class="line">    Click me</span><br><span class="line">  <span class="tag">&lt;/<span class="name">ion-button</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-content</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-4-結果截圖-頁籤4"><a href="#2-4-結果截圖-頁籤4" class="headerlink" title="2.4. 結果截圖-頁籤4"></a>2.4. 結果截圖-頁籤4</h3><p><img src="https://i.imgur.com/CpMPiLO.png" alt="image-20211025012231219"></p>
<h3 id="2-5-結果截圖-news頁"><a href="#2-5-結果截圖-news頁" class="headerlink" title="2.5. 結果截圖-news頁"></a>2.5. 結果截圖-news頁</h3><p><img src="https://i.imgur.com/plsXQNt.png" alt="image-20211025012246995"></p>
<h2 id="3-學習資源"><a href="#3-學習資源" class="headerlink" title="3. 學習資源"></a>3. 學習資源</h2><p><a href="https://www.bilibili.com/video/BV1Ub41117q5?from=search&seid=16222549152627740100&spm_id_from=333.337.0.0">Ionic4 Ionic5视频教程_Ionic4.x Ionic5.x入门实战教程</a></p>
]]></content>
      <categories>
        <category>Ionic</category>
      </categories>
      <tags>
        <tag>Ionic</tag>
        <tag>HybridApp</tag>
      </tags>
  </entry>
  <entry>
    <title>Ionic 系列 - (4) 自定義公用模塊</title>
    <url>/2021/10/25/2021-10-25%20Ionic%20%E7%B3%BB%E5%88%97%20-%20(4)%20%E8%87%AA%E5%AE%9A%E7%BE%A9%E5%85%AC%E7%94%A8%E6%A8%A1%E5%A1%8A/</url>
    <content><![CDATA[<h2 id="1-自定義公用模塊"><a href="#1-自定義公用模塊" class="headerlink" title="1. 自定義公用模塊"></a>1. 自定義公用模塊</h2><p>ionic4.x中頁面是模塊(module)組成的，多個模塊沒法用共一個組件(component)。</p>
<p>可以把<code>component</code> 封裝成<code>module</code>,讓<code>module</code>引入<code>module</code>。</p>
<span id="more"></span>


<p>以下來做實驗</p>
<p>新增module</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ionic g module module/slide</span><br></pre></td></tr></table></figure>
<p>新增componet</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ionic g component module/slide</span><br></pre></td></tr></table></figure>

<h3 id="1-1-調整module內容"><a href="#1-1-調整module內容" class="headerlink" title="1.1. 調整module內容"></a>1.1. 調整module內容</h3><p><code>crm\src\app\module\slide\slide.module.ts</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NgModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CommonModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/common&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">SlideComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./slide.component&#x27;</span>;<span class="comment">//加入</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">declarations</span>: [<span class="title class_">SlideComponent</span>],<span class="comment">//加入</span></span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    <span class="title class_">CommonModule</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">exports</span>:[</span><br><span class="line">    <span class="title class_">SlideComponent</span></span><br><span class="line">  ]<span class="comment">//加入</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">SlideModule</span> &#123; &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="1-2-調整tab1-module-ts"><a href="#1-2-調整tab1-module-ts" class="headerlink" title="1.2. 調整tab1.module.ts"></a>1.2. 調整tab1.module.ts</h3><p><code>crm\src\app\tab1\tab1.module.ts</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">IonicModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@ionic/angular&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NgModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CommonModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">FormsModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/forms&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Tab1Page</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./tab1.page&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ExploreContainerComponentModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../explore-container/explore-container.module&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Tab1PageRoutingModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./tab1-routing.module&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">SlideModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../module/slide/slide.module&#x27;</span>;<span class="comment">//加入</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    <span class="title class_">IonicModule</span>,</span><br><span class="line">    <span class="title class_">CommonModule</span>,</span><br><span class="line">    <span class="title class_">FormsModule</span>,</span><br><span class="line">    <span class="title class_">ExploreContainerComponentModule</span>,</span><br><span class="line">    <span class="title class_">Tab1PageRoutingModule</span>,</span><br><span class="line">    <span class="title class_">SlideModule</span><span class="comment">//加入</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">declarations</span>: [<span class="title class_">Tab1Page</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Tab1PageModule</span> &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="1-3-調整tab-page-html"><a href="#1-3-調整tab-page-html" class="headerlink" title="1.3. 調整tab.page.html"></a>1.3. 調整tab.page.html</h3><p><code>crm\src\app\tab1\tab1.page.html</code></p>
<p>加入<code>app-slide</code>，就成功囉。至於怎麼定義這個名稱可以去<code>crm\src\app\module\slide\slide.component.ts</code>調整</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">&lt;ion-header [translucent]=<span class="string">&quot;true&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">ion-toolbar</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">ion-title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      Tab 1</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ion-title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">ion-toolbar</span>&gt;</span></span></span><br><span class="line">&lt;/ion-header&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ion-content</span> [<span class="attr">fullscreen</span>]=<span class="string">&quot;true&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">ion-header</span> <span class="attr">collapse</span>=<span class="string">&quot;condense&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">ion-toolbar</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ion-title</span> <span class="attr">size</span>=<span class="string">&quot;large&quot;</span>&gt;</span>Tab 1<span class="tag">&lt;/<span class="name">ion-title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ion-toolbar</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">ion-header</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">app-slide</span>&gt;</span><span class="tag">&lt;/<span class="name">app-slide</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!-- &lt;app-explore-container name=&quot;Tab 1 page&quot;&gt;&lt;/app-explore-container&gt; --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">ion-content</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/Q7H3MGG.png" alt="image-20211025021854454"></p>
<h2 id="2-公用模塊如何使用ionic本身的component？"><a href="#2-公用模塊如何使用ionic本身的component？" class="headerlink" title="2. 公用模塊如何使用ionic本身的component？"></a>2. 公用模塊如何使用ionic本身的component？</h2><p>比方說<code>&lt;ion-item&gt;</code>等等的component用在自建的component如何做，實驗如下</p>
<p><code>crm\src\app\module\slide\slide.module.ts</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">IonicModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@ionic/angular&#x27;</span>;<span class="comment">//加入</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NgModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CommonModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">SlideComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./slide.component&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">declarations</span>: [<span class="title class_">SlideComponent</span>],</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    <span class="title class_">CommonModule</span>,</span><br><span class="line">    <span class="title class_">IonicModule</span><span class="comment">//加入</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">exports</span>:[</span><br><span class="line">    <span class="title class_">SlideComponent</span></span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">SlideModule</span> &#123; &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>crm\src\app\module\slide\slide.component.html</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  slide works!</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ion-list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ion-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-label</span>&gt;</span>Awesome Label<span class="tag">&lt;/<span class="name">ion-label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ion-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ion-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-label</span>&gt;</span>Awesome Label<span class="tag">&lt;/<span class="name">ion-label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ion-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-list</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/EMhq65Z.png" alt="image-20211025025042015"></p>
<h2 id="3-學習資源"><a href="#3-學習資源" class="headerlink" title="3. 學習資源"></a>3. 學習資源</h2><p><a href="https://www.bilibili.com/video/BV1Ub41117q5?from=search&seid=16222549152627740100&spm_id_from=333.337.0.0">Ionic4 Ionic5视频教程_Ionic4.x Ionic5.x入门实战教程</a></p>
]]></content>
      <categories>
        <category>Ionic</category>
      </categories>
      <tags>
        <tag>Ionic</tag>
        <tag>HybridApp</tag>
      </tags>
  </entry>
  <entry>
    <title>Ionic 系列 - (5) components</title>
    <url>/2021/11/09/2021-11-09%20Ionic%20%E7%B3%BB%E5%88%97%20-%20(5)%20components/</url>
    <content><![CDATA[<h2 id="1-color-內置顏色"><a href="#1-color-內置顏色" class="headerlink" title="1. color 內置顏色"></a>1. color 內置顏色</h2><p><a href="https://ionicframework.com/docs/theming/basics">官方文件</a></p>
<p>可以在元素上加上<code>color</code> 再填寫對應的色系，這個作法跟bs是一樣的</p>
<span id="more"></span>


<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ion-button</span> <span class="attr">color</span>=<span class="string">&quot;primary&quot;</span>&gt;</span> primary <span class="tag">&lt;/<span class="name">ion-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ion-button</span> <span class="attr">color</span>=<span class="string">&quot;secondary&quot;</span>&gt;</span> secondary <span class="tag">&lt;/<span class="name">ion-button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/NAdJHIL.png" alt="image-20211109183956490"></p>
<h2 id="2-學習資源"><a href="#2-學習資源" class="headerlink" title="2. 學習資源"></a>2. 學習資源</h2><p><a href="https://www.bilibili.com/video/BV1Ub41117q5?from=search&seid=16222549152627740100&spm_id_from=333.337.0.0">Ionic4 Ionic5视频教程_Ionic4.x Ionic5.x入门实战教程</a></p>
]]></content>
      <categories>
        <category>Ionic</category>
      </categories>
      <tags>
        <tag>Ionic</tag>
        <tag>HybridApp</tag>
      </tags>
  </entry>
  <entry>
    <title>Veeam Backup &amp; Replication v11 全新強化型 Linux 儲存庫</title>
    <url>/2021/11/10/2021-11-10%20Veeam%20Backup%20&amp;%20Replication%20v11%20%E5%85%A8%E6%96%B0%E5%BC%B7%E5%8C%96%E5%9E%8B%20Linux%20%E5%84%B2%E5%AD%98%E5%BA%AB/</url>
    <content><![CDATA[<h2 id="1-說明"><a href="#1-說明" class="headerlink" title="1. 說明"></a>1. 說明</h2><p>以下內容是看veeam youtube 影片的心得整理，詳細資料請參考連結</p>
<span id="more"></span>


<h2 id="2-杜絕勤索體軟-消除資料遺失的風險"><a href="#2-杜絕勤索體軟-消除資料遺失的風險" class="headerlink" title="2. 杜絕勤索體軟 消除資料遺失的風險"></a>2. 杜絕勤索體軟 消除資料遺失的風險</h2><p>比過去多了1個1，這個1是指離線備份或者不可變動，後面會講到</p>
<p><img src="https://i.imgur.com/yfNpVqV.png" alt="image-20211110141615038"></p>
<h2 id="3-兼顧高可用性的資料保護策略"><a href="#3-兼顧高可用性的資料保護策略" class="headerlink" title="3. 兼顧高可用性的資料保護策略"></a>3. 兼顧高可用性的資料保護策略</h2><p>可以試著以<code>32110</code>策略來以下的資料保護策略實施方法。當發生各種不一樣的情境(災難)時，可以用不同的對應方式來還原回來。可以檢視一下有沒有做到。</p>
<p><img src="https://i.imgur.com/5mwZe6K.png" alt="image-20211110141824224"></p>
<h2 id="4-提供多種安全的備份儲存"><a href="#4-提供多種安全的備份儲存" class="headerlink" title="4. 提供多種安全的備份儲存"></a>4. 提供多種安全的備份儲存</h2><p>veeam 提供了多種的備份儲存方式</p>
<p><img src="https://i.imgur.com/aCVxJis.png" alt="image-20211110144026062"></p>
<h2 id="5-強化型-Linux-儲存庫"><a href="#5-強化型-Linux-儲存庫" class="headerlink" title="5. 強化型 Linux 儲存庫"></a>5. 強化型 Linux 儲存庫</h2><p>v11 特別強調這個新的功能，這個部分也是所以稍早講的<code>1</code>的部分，不可修改部分。</p>
<p>Linux base 的解決方案，裝在linux 的儲存空間，確保資料放進去之後，進入了不可修改、刪除的狀態。</p>
<p><img src="https://i.imgur.com/r29Ktwl.png" alt="image-20211110142333716"></p>
<h2 id="6-通過第三方娛構合規性評估測試"><a href="#6-通過第三方娛構合規性評估測試" class="headerlink" title="6. 通過第三方娛構合規性評估測試"></a>6. 通過第三方娛構合規性評估測試</h2><p>強化型linux 儲存庫經過第三方機構的認證</p>
<p><img src="https://i.imgur.com/lJeQ8sM.png" alt="image-20211110142410567"></p>
<h2 id="7-不可修改儲存庫架構-Immutable"><a href="#7-不可修改儲存庫架構-Immutable" class="headerlink" title="7. 不可修改儲存庫架構(Immutable)"></a>7. 不可修改儲存庫架構(Immutable)</h2><ul>
<li><p>跟備份主機是分開佈署</p>
</li>
<li><p>一次性憑證</p>
<ul>
<li>設置時使用一次性憑證，備份主機不存留憑證。避免再一次機會取得憑證之後，有權可以進入這個空間。</li>
</ul>
</li>
<li><p>對外連線關掉</p>
<ul>
<li>可以關閉SSH服務</li>
<li>就算當時檔案是我建立的，我也無法用遠端的方式登入，才能確保即使是駭客才不會有任何機會</li>
</ul>
</li>
<li><p>不可修改記號</p>
<ul>
<li>採用root 權限設定不可修改記號，只會在設定的期間到期時解除</li>
</ul>
</li>
</ul>
<p><img src="https://i.imgur.com/mEfdySH.png" alt="image-20211110142617416"></p>
<h2 id="8-只有限制備份資料變動權"><a href="#8-只有限制備份資料變動權" class="headerlink" title="8. 只有限制備份資料變動權"></a>8. 只有限制備份資料變動權</h2><p>我當時設定是1個月，只要在這1個月內，誰都沒有變動的權利，當時間到了才能修改。我不能動，駭客也不能動</p>
<p><img src="https://i.imgur.com/2DmBLhC.png" alt="image-20211110143020331"></p>
<h2 id="9-備份是資訊安全防護"><a href="#9-備份是資訊安全防護" class="headerlink" title="9. 備份是資訊安全防護"></a>9. 備份是資訊安全防護</h2><p>最後一道防線也是啟動的第一道程式</p>
<p><img src="https://i.imgur.com/IgVgKXV.png" alt="image-20211110143157724"></p>
<h2 id="10-參考資料"><a href="#10-參考資料" class="headerlink" title="10. 參考資料"></a>10. 參考資料</h2><p><a href="https://www.youtube.com/watch?v=TLTwdwBm89U">Veeam Backup &amp; Replication v11 全新強化型 Linux 儲存庫</a></p>
]]></content>
      <categories>
        <category>資訊安全</category>
      </categories>
      <tags>
        <tag>Veeam</tag>
        <tag>backup</tag>
      </tags>
  </entry>
  <entry>
    <title>Veeam 即刻救援之地表最強還原</title>
    <url>/2021/11/10/2021-11-10%20Veeam%E5%8D%B3%E5%88%BB%E6%95%91%E6%8F%B4%E4%B9%8B%E5%9C%B0%E8%A1%A8%E6%9C%80%E5%BC%B7%E9%82%84%E5%8E%9F/</url>
    <content><![CDATA[<h2 id="1-說明"><a href="#1-說明" class="headerlink" title="1. 說明"></a>1. 說明</h2><p>以下內容是看veeam youtube 影片的心得整理，詳細資料請參考連結</p>
<span id="more"></span>


<h2 id="2-資料恢復的時間軸"><a href="#2-資料恢復的時間軸" class="headerlink" title="2. 資料恢復的時間軸"></a>2. 資料恢復的時間軸</h2><p><img src="https://i.imgur.com/wcGfMoe.png" alt="image-20211110132542102"></p>
<h2 id="3-營運不間斷的關鍵"><a href="#3-營運不間斷的關鍵" class="headerlink" title="3. 營運不間斷的關鍵"></a>3. 營運不間斷的關鍵</h2><p><img src="https://i.imgur.com/wufaIFN.png" alt="image-20211110132635150"></p>
<h2 id="4-3-2-1-0法則"><a href="#4-3-2-1-0法則" class="headerlink" title="4. 3-2-1-0法則"></a>4. 3-2-1-0法則</h2><p><img src="https://i.imgur.com/FDTr6aK.png" alt="image-20211110132703429"></p>
<h2 id="5-符合3-2-1-0？"><a href="#5-符合3-2-1-0？" class="headerlink" title="5. 符合3-2-1-0？"></a>5. 符合3-2-1-0？</h2><p><img src="https://i.imgur.com/W44OLE1.png" alt="image-20211110132802389"></p>
<h2 id="6-產品介紹"><a href="#6-產品介紹" class="headerlink" title="6. 產品介紹"></a>6. 產品介紹</h2><h3 id="6-1-Instant-VM-Recovery-即時還原"><a href="#6-1-Instant-VM-Recovery-即時還原" class="headerlink" title="6.1. Instant VM Recovery(即時還原)"></a>6.1. Instant VM Recovery(即時還原)</h3><p><img src="https://i.imgur.com/uyg05qd.png" alt="image-20211110133000037"></p>
<h3 id="6-2-快速移轉資料到不同平台"><a href="#6-2-快速移轉資料到不同平台" class="headerlink" title="6.2. 快速移轉資料到不同平台"></a>6.2. 快速移轉資料到不同平台</h3><p><img src="https://i.imgur.com/NJezqbO.png" alt="image-20211110133123535"></p>
<h3 id="6-3-Instant-VM-Recovery"><a href="#6-3-Instant-VM-Recovery" class="headerlink" title="6.3. Instant VM Recovery"></a>6.3. Instant VM Recovery</h3><p>只要透過veeam備份(多種來源，下圖所示)，都可以在vmware 還原</p>
<p><img src="https://i.imgur.com/gxiB09B.png" alt="image-20211110133356180"></p>
<h3 id="6-4-雲端備份"><a href="#6-4-雲端備份" class="headerlink" title="6.4. 雲端備份"></a>6.4. 雲端備份</h3><p><img src="https://i.imgur.com/o1Q3kqL.png" alt="image-20211110133816275"></p>
<h4 id="6-4-1-完整還原-精細還原"><a href="#6-4-1-完整還原-精細還原" class="headerlink" title="6.4.1. 完整還原&#x2F;精細還原"></a>6.4.1. 完整還原&#x2F;精細還原</h4><p>備份丟到雲端時是完整備份，要還原的時候可以透過veeam挑出您要的檔案進行還原，這個就是所謂的<code>精細還原</code>，下圖綠框清單舉例了精細還原的應用對象</p>
<p><img src="https://i.imgur.com/Ebhqpfp.png" alt="image-20211110133927651"></p>
<h3 id="6-5-將服務搬上雲端"><a href="#6-5-將服務搬上雲端" class="headerlink" title="6.5. 將服務搬上雲端"></a>6.5. 將服務搬上雲端</h3><p>不是只是把檔案搬上去而已，可以做到把服務放到雲端，服務營運在雲端</p>
<p><img src="https://i.imgur.com/JRmOSBK.png" alt="image-20211110134207012"></p>
<h3 id="6-6-將Cloud服務快速還原至地端"><a href="#6-6-將Cloud服務快速還原至地端" class="headerlink" title="6.6. 將Cloud服務快速還原至地端"></a>6.6. 將Cloud服務快速還原至地端</h3><p><img src="https://i.imgur.com/4nfm5Ae.png" alt="image-20211110134426166"></p>
<h3 id="6-7-AWS-marketplace"><a href="#6-7-AWS-marketplace" class="headerlink" title="6.7. AWS marketplace"></a>6.7. AWS marketplace</h3><p>可以在 marketplace 點選這個服務，將這個服務打開。可以在雲端上面備份雲端上面的虛擬機，備份到雲端的Storage Service(S3)</p>
<p><img src="https://i.imgur.com/rjVkisU.png" alt="image-20211110134515310"></p>
<p><img src="https://i.imgur.com/RrhhLKV.png" alt="image-20211110134808002"></p>
<h3 id="6-8-Azure-marketplace"><a href="#6-8-Azure-marketplace" class="headerlink" title="6.8. Azure marketplace"></a>6.8. Azure marketplace</h3><p><img src="https://i.imgur.com/SAk1xdJ.png" alt="image-20211110134854369"></p>
<p><img src="https://i.imgur.com/3K0i43s.png" alt="image-20211110134919266"></p>
<h3 id="6-9-還原至地端服務"><a href="#6-9-還原至地端服務" class="headerlink" title="6.9. 還原至地端服務"></a>6.9. 還原至地端服務</h3><p>先將object copy 到地端的backup server ，再透過veeam 工具佈署到你要的環境上，比如vmware 等等。</p>
<p><img src="https://i.imgur.com/kTDonI7.png" alt="image-20211110135402815"></p>
<h3 id="6-10-快速還原到地端"><a href="#6-10-快速還原到地端" class="headerlink" title="6.10. 快速還原到地端"></a>6.10. 快速還原到地端</h3><p>也支援快速還原到地端的功能</p>
<p><img src="https://i.imgur.com/2LlBBLX.png" alt="image-20211110135537151"></p>
<h3 id="6-11-雲跟雲之間互換"><a href="#6-11-雲跟雲之間互換" class="headerlink" title="6.11. 雲跟雲之間互換"></a>6.11. 雲跟雲之間互換</h3><p>從AWS 或 Azure 備份檔案透過地端的Veeam 還原到其它的cloud上</p>
<p><img src="https://i.imgur.com/Tvm163J.png" alt="image-20211110135703752"></p>
<h3 id="6-12-平台移轉支援表列"><a href="#6-12-平台移轉支援表列" class="headerlink" title="6.12. 平台移轉支援表列"></a>6.12. 平台移轉支援表列</h3><p><img src="https://i.imgur.com/NOcz7UC.png" alt="image-20211110140258117"></p>
<h2 id="7-參考資料"><a href="#7-參考資料" class="headerlink" title="7. 參考資料"></a>7. 參考資料</h2><p><a href="https://www.youtube.com/watch?v=oLS7EN0R4cc">Veeam 即刻救援之地表最強還原</a></p>
]]></content>
      <categories>
        <category>資訊安全</category>
      </categories>
      <tags>
        <tag>Veeam</tag>
        <tag>backup</tag>
      </tags>
  </entry>
  <entry>
    <title>CICD好自動</title>
    <url>/2021/11/15/2021-11-15%20CICD%20%E5%A5%BD%E8%87%AA%E5%8B%95/</url>
    <content><![CDATA[<h2 id="1-CI-CD-運作流程"><a href="#1-CI-CD-運作流程" class="headerlink" title="1. CI&#x2F;CD 運作流程"></a>1. CI&#x2F;CD 運作流程</h2><p><img src="https://i.imgur.com/tTOyZLE.png" alt="image-20211115101210773"></p>
<span id="more"></span>


<h2 id="2-CI-CD-優缺點"><a href="#2-CI-CD-優缺點" class="headerlink" title="2. CI&#x2F;CD 優缺點"></a>2. CI&#x2F;CD 優缺點</h2><p><img src="https://i.imgur.com/B16BKW2.png" alt="image-20211115101254784"></p>
<h2 id="3-CI-CD-Pipeline"><a href="#3-CI-CD-Pipeline" class="headerlink" title="3. CI&#x2F;CD Pipeline"></a>3. CI&#x2F;CD Pipeline</h2><p><img src="https://i.imgur.com/QXqF4Rt.png" alt="image-20211115101501789"></p>
<h2 id="4-CI-CD-節省成本"><a href="#4-CI-CD-節省成本" class="headerlink" title="4. CI&#x2F;CD 節省成本"></a>4. CI&#x2F;CD 節省成本</h2><p><img src="https://i.imgur.com/olraQ4a.png" alt="image-20211115101831573"></p>
<h2 id="5-工具介紹"><a href="#5-工具介紹" class="headerlink" title="5. 工具介紹"></a>5. 工具介紹</h2><h3 id="5-1-自動化測試工具"><a href="#5-1-自動化測試工具" class="headerlink" title="5.1. 自動化測試工具"></a>5.1. 自動化測試工具</h3><p><img src="https://i.imgur.com/R6L43yV.png" alt="image-20211115102145172"></p>
<h3 id="5-2-程式碼掃描工具"><a href="#5-2-程式碼掃描工具" class="headerlink" title="5.2. 程式碼掃描工具"></a>5.2. 程式碼掃描工具</h3><p><img src="https://i.imgur.com/y5aA4tG.png" alt="image-20211115102211301"></p>
<p><img src="https://i.imgur.com/uG1okKZ.png" alt="image-20211115111548577"></p>
<h3 id="5-3-Jenkins-Blue-Ocean"><a href="#5-3-Jenkins-Blue-Ocean" class="headerlink" title="5.3. Jenkins Blue Ocean"></a>5.3. Jenkins Blue Ocean</h3><p>可以利用這套系統來建立pipeline</p>
<p><img src="https://i.imgur.com/V52qAdY.png" alt="image-20211115111304523"></p>
<h3 id="5-4-Maven-打包工具"><a href="#5-4-Maven-打包工具" class="headerlink" title="5.4. Maven 打包工具"></a>5.4. Maven 打包工具</h3><p><img src="https://i.imgur.com/zVPN6MA.png" alt="image-20211115111404216"></p>
<h2 id="6-Jenkins-CI-CD-flow"><a href="#6-Jenkins-CI-CD-flow" class="headerlink" title="6. Jenkins CI&#x2F;CD flow"></a>6. Jenkins CI&#x2F;CD flow</h2><p><img src="https://i.imgur.com/oIAdmuD.png" alt="image-20211115110732177"></p>
<p><img src="https://i.imgur.com/obOTo7U.png" alt="image-20211115112231538"></p>
<h2 id="7-參考資料"><a href="#7-參考資料" class="headerlink" title="7. 參考資料"></a>7. 參考資料</h2><p><a href="https://www.youtube.com/watch?v=62OkCmn90Lk">技術小聚｜CICD 好自動！你準備好 CICD 了嗎？</a></p>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>CICD</tag>
      </tags>
  </entry>
  <entry>
    <title>50Days WebProject - Day01</title>
    <url>/2021/12/14/2021-12-14%2050Days%20WebProject%20-%20Day01/</url>
    <content><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>希望透過50個project 練習，從中學習與發現有趣的知識。實現做中學目標</p>
<span id="more"></span>


<h2 id="2-題目"><a href="#2-題目" class="headerlink" title="2. 題目"></a>2. 題目</h2><p>Expanding Cards</p>
<h2 id="3-Wireframe"><a href="#3-Wireframe" class="headerlink" title="3. Wireframe"></a>3. Wireframe</h2><p><img src="https://i.imgur.com/mbIgDO2.png" alt="wireframes.drawio"></p>
<h2 id="4-成品效果"><a href="#4-成品效果" class="headerlink" title="4. 成品效果"></a>4. 成品效果</h2><p><img src="https://i.imgur.com/HXF2Dem.png" alt="image-20211214134552321"></p>
<h2 id="5-考考自己"><a href="#5-考考自己" class="headerlink" title="5. 考考自己"></a>5. 考考自己</h2><h3 id="第一題"><a href="#第一題" class="headerlink" title="第一題"></a>第一題</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">90vw</span>;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="第二題"><a href="#第二題" class="headerlink" title="第二題"></a>第二題</h3><p><code>background-size:cover</code>若改成<code>contain</code> 預期會是什麼效果，動手試試。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.panel</span>&#123;</span><br><span class="line">    <span class="attribute">background-size</span>: cover;</span><br><span class="line">    <span class="attribute">background-position</span>: center;</span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">80vh</span>;    </span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">cursor</span>:pointer;</span><br><span class="line">    <span class="attribute">flex</span>:<span class="number">0.5</span>;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">transition</span>: flex <span class="number">0.7s</span> ease-in;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="第三題"><a href="#第三題" class="headerlink" title="第三題"></a>第三題</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.panel</span> <span class="selector-tag">h3</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">color</span>:white;</span><br><span class="line">    <span class="attribute">bottom</span>:<span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">right</span>:<span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="第四題"><a href="#第四題" class="headerlink" title="第四題"></a>第四題</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.panel</span><span class="selector-class">.active</span>&#123;</span><br><span class="line">    <span class="attribute">flex</span>:<span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.panel</span><span class="selector-class">.active</span> <span class="selector-tag">h3</span>&#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-知識點"><a href="#6-知識點" class="headerlink" title="6. 知識點"></a>6. 知識點</h2><ol>
<li>利用<code>active</code>class 搭配js進行狀態切換</li>
<li>利用<code>flex</code> 調整佔比</li>
<li>利用<code>transition</code> 做出展開動畫</li>
</ol>
<h2 id="7-github"><a href="#7-github" class="headerlink" title="7. github"></a>7. github</h2><ul>
<li><p><a href="https://kitefree.github.io/50-Projects-In-50-Days---HTML-CSS-JavaScript/Day01/index.html">Day01 Demo</a></p>
</li>
<li><p><a href="https://github.com/kitefree/50-Projects-In-50-Days---HTML-CSS-JavaScript.git">50days Web Project repo</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>SideProject</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>HTML</tag>
        <tag>Course</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP Laravel 系列 - (14) Request Lifecycle</title>
    <url>/2022/01/10/2022-01-10%20PHP%20Laravel%20%E7%B3%BB%E5%88%97%20-%20(14)%20Request%20Lifecycle/</url>
    <content><![CDATA[<p>了解Laravel的運作基礎</p>
<span id="more"></span>


<p><img src="https://i.imgur.com/DZAoI79.png" alt="image-20220110093817201"></p>
<p><img src="https://i.imgur.com/ZW41HCM.png" alt="image-20220110093843474"></p>
<p><img src="https://i.imgur.com/qkzU8ys.png" alt="image-20220110094643658"></p>
<p><img src="https://i.imgur.com/bIFZqR2.png" alt="image-20220110100445090"></p>
<p><img src="https://i.imgur.com/8eWiKyg.png" alt="image-20220110100505948"></p>
<p><img src="https://i.imgur.com/1kX77aE.png" alt="image-20220110102143036"></p>
<p><img src="https://i.imgur.com/QKd59we.png" alt="image-20220110102154457"></p>
<p><img src="https://i.imgur.com/PoX9nJZ.png" alt="image-20220110102218691"></p>
]]></content>
      <categories>
        <category>PHP</category>
        <category>Laravel</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Laravel</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP Laravel 系列 - (16) 資料驗證</title>
    <url>/2022/01/10/2022-01-10%20PHP%20Laravel%20%E7%B3%BB%E5%88%97%20-%20(16)%20%E8%B3%87%E6%96%99%E9%A9%97%E8%AD%89/</url>
    <content><![CDATA[<p>什麼是資料驗證呢？檢查使用者傳過來的資料是否符合要求。</p>
<span id="more"></span>


<p><img src="https://i.imgur.com/vNx6mjV.png" alt="image-20220110134427966"></p>
<p><img src="https://i.imgur.com/JJRzB02.png" alt="image-20220110134614068"></p>
<p><img src="https://i.imgur.com/ypWu3hN.png" alt="image-20220110134718359"></p>
<p><img src="https://i.imgur.com/x9hbVJD.png" alt="image-20220110134807188"></p>
<p><img src="https://i.imgur.com/BhtwGNd.png" alt="image-20220110134821109"></p>
<p><img src="https://i.imgur.com/w6Uy9gb.png" alt="image-20220110134905461"></p>
<p><img src="https://i.imgur.com/hSZUI4P.png" alt="image-20220110134915037"></p>
<p><img src="https://i.imgur.com/0va2Pha.png" alt="image-20220110135143019"></p>
<p><img src="https://i.imgur.com/SsZoLHX.png" alt="image-20220110135618587"></p>
<p><img src="https://i.imgur.com/IB21DYd.png" alt="image-20220110135553636"></p>
<p><img src="https://i.imgur.com/9Di1hrf.png" alt="image-20220110135643915"></p>
<p><img src="https://i.imgur.com/n1chYv5.png" alt="image-20220110135749668"></p>
<p><img src="https://i.imgur.com/3ArID5P.png" alt="image-20220110135800933"></p>
]]></content>
      <categories>
        <category>PHP</category>
        <category>Laravel</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Laravel</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP Laravel 系列 - (15) 如何建立Middleware</title>
    <url>/2022/01/10/2022-01-10%20PHP%20Laravel%20%E7%B3%BB%E5%88%97%20-%20(15)%20%E5%A6%82%E4%BD%95%E8%A3%BD%E4%BD%9CMiddleware/</url>
    <content><![CDATA[<h2 id="1-建立middleware"><a href="#1-建立middleware" class="headerlink" title="1. 建立middleware"></a>1. 建立middleware</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">php artisan make:middleware CheckDirtyWord</span><br></pre></td></tr></table></figure>

<span id="more"></span>


<p>路徑</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app/http/Middleware</span><br></pre></td></tr></table></figure>

<p>底下會多出一個<code>CheckDirtyWord.php</code></p>
<p><img src="https://i.imgur.com/Ezp5TnT.png" alt="image-20220110132249158"></p>
<h2 id="2-撰寫dirtyword檢查"><a href="#2-撰寫dirtyword檢查" class="headerlink" title="2. 撰寫dirtyword檢查"></a>2. 撰寫dirtyword檢查</h2><p>打開 <code>CheckDirtyWord.php</code> 我們會看到有一個function 名稱為<code>handle</code>，試著改成以下的程式碼：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params">Request <span class="variable">$request</span>, <span class="built_in">Closure</span> <span class="variable">$next</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$dirtyWords</span> = [</span><br><span class="line">        <span class="string">&#x27;apple&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;orange&#x27;</span></span><br><span class="line">    ];</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$parameters</span> = <span class="variable">$request</span>-&gt;<span class="title function_ invoke__">all</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$parameters</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$key</span> == <span class="string">&#x27;content&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">foreach</span>(<span class="variable">$dirtyWords</span> <span class="keyword">as</span> <span class="variable">$dirtyWord</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="title function_ invoke__">strpos</span>(<span class="variable">$value</span>,<span class="variable">$dirtyWord</span>) !== <span class="literal">false</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="title function_ invoke__">response</span>(<span class="string">&#x27;dirty!&#x27;</span>,<span class="number">400</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$next</span>(<span class="variable">$request</span>);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-kernel-php-加上middleware"><a href="#3-kernel-php-加上middleware" class="headerlink" title="3. kernel.php 加上middleware"></a>3. kernel.php 加上middleware</h2><p>在<code>$routeMiddleware</code>加上一個，名稱可以自己取：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;check.kite&#x27;</span> =&gt; <span class="title class_">\App\Http\Middleware\CheckDirtyWord</span>::<span class="variable language_">class</span>,</span><br></pre></td></tr></table></figure>

<p>如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">protected $routeMiddleware = [</span><br><span class="line">    &#x27;auth&#x27; =&gt; \App\Http\Middleware\Authenticate::class,</span><br><span class="line">    &#x27;auth.basic&#x27; =&gt; \Illuminate\Auth\Middleware\AuthenticateWithBasicAuth::class,</span><br><span class="line">    &#x27;cache.headers&#x27; =&gt; \Illuminate\Http\Middleware\SetCacheHeaders::class,</span><br><span class="line">    &#x27;can&#x27; =&gt; \Illuminate\Auth\Middleware\Authorize::class,</span><br><span class="line">    &#x27;guest&#x27; =&gt; \App\Http\Middleware\RedirectIfAuthenticated::class,</span><br><span class="line">    &#x27;password.confirm&#x27; =&gt; \Illuminate\Auth\Middleware\RequirePassword::class,</span><br><span class="line">    &#x27;signed&#x27; =&gt; \Illuminate\Routing\Middleware\ValidateSignature::class,</span><br><span class="line">    &#x27;throttle&#x27; =&gt; \Illuminate\Routing\Middleware\ThrottleRequests::class,</span><br><span class="line">    &#x27;verified&#x27; =&gt; \Illuminate\Auth\Middleware\EnsureEmailIsVerified::class,</span><br><span class="line">    &#x27;check.kite&#x27; =&gt; \App\Http\Middleware\CheckDirtyWord::class,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<h2 id="4-修改router"><a href="#4-修改router" class="headerlink" title="4. 修改router"></a>4. 修改router</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">group</span>([<span class="string">&#x27;middleware&#x27;</span> =&gt;<span class="string">&#x27;check.kite&#x27;</span>],function()&#123;</span><br><span class="line">    <span class="title class_">Route</span>::<span class="title function_ invoke__">resource</span>(<span class="string">&#x27;main&#x27;</span>,<span class="string">&#x27;MainController&#x27;</span>);    </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="5-POSTMAN-測試"><a href="#5-POSTMAN-測試" class="headerlink" title="5. POSTMAN 測試"></a>5. POSTMAN 測試</h2><figure class="highlight http"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8000/main</span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/MfNHcHn.png" alt="image-20220110133608558"></p>
]]></content>
      <categories>
        <category>PHP</category>
        <category>Laravel</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Laravel</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP Laravel 系列 - (17) 資料驗證 定義</title>
    <url>/2022/01/10/2022-01-10%20PHP%20Laravel%20%E7%B3%BB%E5%88%97%20-%20(17)%20%E8%B3%87%E6%96%99%E9%A9%97%E8%AD%89%20%E5%AE%9A%E7%BE%A9/</url>
    <content><![CDATA[<h2 id="1-建立-Request-Validation"><a href="#1-建立-Request-Validation" class="headerlink" title="1. 建立 Request Validation"></a>1. 建立 Request Validation</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">php artisan make:request UpdateCartItem</span><br></pre></td></tr></table></figure>

<span id="more"></span>


<p><img src="https://i.imgur.com/iW4Iu2H.png" alt="image-20220110140938139"></p>
<p><img src="https://i.imgur.com/g8a6sEn.png" alt="image-20220110141106874"></p>
<p><img src="https://i.imgur.com/OSSyhRw.png" alt="image-20220110141229871"></p>
<p><img src="https://i.imgur.com/xO8iuUn.png" alt="image-20220110141322200"></p>
<p><img src="https://i.imgur.com/mONlvPh.png" alt="image-20220110141334438"></p>
<p><img src="https://i.imgur.com/z34AP8i.png" alt="image-20220110141401481"></p>
]]></content>
      <categories>
        <category>PHP</category>
        <category>Laravel</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Laravel</tag>
      </tags>
  </entry>
  <entry>
    <title>python 虛擬環境</title>
    <url>/2022/01/25/2022-01-25%20python%20%E8%99%9B%E6%93%AC%E7%92%B0%E5%A2%83/</url>
    <content><![CDATA[<p>在撰寫相關專案文件的時候，重跑一次專案的安裝流程，覺得很費時…剛好記得之前有看過<code>virtualenv</code>這套處擬環境套件，就來試試看啦~</p>
<h2 id="1-系統環境"><a href="#1-系統環境" class="headerlink" title="1. 系統環境"></a>1. 系統環境</h2><p>ubuntu</p>
<span id="more"></span>


<h2 id="2-第一步，安裝virtualenv"><a href="#2-第一步，安裝virtualenv" class="headerlink" title="2. 第一步，安裝virtualenv"></a>2. 第一步，安裝virtualenv</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install python3-virtualenv</span><br></pre></td></tr></table></figure>



<h2 id="3-第二步，創建目錄"><a href="#3-第二步，創建目錄" class="headerlink" title="3. 第二步，創建目錄"></a>3. 第二步，創建目錄</h2><p>在<code>home/kite/</code> 底下建立 <code>python_workspace</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir python_workspace</span><br></pre></td></tr></table></figure>



<h2 id="4-第三步，建立虛擬環境"><a href="#4-第三步，建立虛擬環境" class="headerlink" title="4. 第三步，建立虛擬環境"></a>4. 第三步，建立虛擬環境</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 -m venv ven03</span><br></pre></td></tr></table></figure>

<p>下完指令後，我們會看到生出了<code>venv03</code> 資料夾</p>
<p><img src="https://i.imgur.com/hkR40v7.png" alt="image-20220125155729454"></p>
<h2 id="5-第四步，進入虛擬環境"><a href="#5-第四步，進入虛擬環境" class="headerlink" title="5. 第四步，進入虛擬環境"></a>5. 第四步，進入虛擬環境</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source ./venv03/bin/activate</span><br></pre></td></tr></table></figure>

<p>下完指令後，我們會發現在最前面會多出(venv03) 文字，代表你目前使用的是這個代號的環境底下運行python，當你執行python時，相關路徑都會改指向這個資料夾底下的套件</p>
<p><img src="https://i.imgur.com/0QuClvC.png" alt="image-20220125155951712"></p>
<h2 id="6-第五步，確認目前的套件環境"><a href="#6-第五步，確認目前的套件環境" class="headerlink" title="6. 第五步，確認目前的套件環境"></a>6. 第五步，確認目前的套件環境</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip list</span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/KhqNR9E.png" alt="image-20220125160149542"></p>
<h2 id="7-如何匯出依賴套件清單"><a href="#7-如何匯出依賴套件清單" class="headerlink" title="7. 如何匯出依賴套件清單"></a>7. 如何匯出依賴套件清單</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure>



<h2 id="8-如何匯入依賴套件清單"><a href="#8-如何匯入依賴套件清單" class="headerlink" title="8. 如何匯入依賴套件清單"></a>8. 如何匯入依賴套件清單</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>



<h2 id="9-如何退出虛擬環境"><a href="#9-如何退出虛擬環境" class="headerlink" title="9. 如何退出虛擬環境"></a>9. 如何退出虛擬環境</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>virtualenv</tag>
      </tags>
  </entry>
  <entry>
    <title>抽獎系統設計分享心得筆記</title>
    <url>/2022/02/11/2022-02-11%20%E6%8A%BD%E7%8D%8E%E7%B3%BB%E7%B5%B1%E8%A8%AD%E8%A8%88%E5%88%86%E4%BA%AB%E5%BF%83%E5%BE%97%E7%AD%86%E8%A8%98/</url>
    <content><![CDATA[<p>心得來自保哥的youtube影片 &gt;&gt; <a href="https://www.youtube.com/watch?v=e3DDXSMWr5w">那些年我們實作過的抽獎系統</a></p>
<h2 id="1-一、抽獎在業務跟系統扮演什麼角色"><a href="#1-一、抽獎在業務跟系統扮演什麼角色" class="headerlink" title="1. 一、抽獎在業務跟系統扮演什麼角色"></a>1. 一、抽獎在業務跟系統扮演什麼角色</h2><p>抽獎是一個常見的工具</p>
<p>拉新 dau 日活躍人數 月活躍人數</p>
<p>拉活 有帳號的人，但是太久沒有用</p>
<p>透過活動拉新、拉活。達到預期收益<br>pm、markting人員 模型要確定下來<br>行銷預算 + 函式  &#x3D; 預期收益</p>
<span id="more"></span>


<h2 id="2-二、機率設計"><a href="#2-二、機率設計" class="headerlink" title="2. 二、機率設計"></a>2. 二、機率設計</h2><h3 id="2-1-五個維度"><a href="#2-1-五個維度" class="headerlink" title="2.1. 五個維度"></a>2.1. 五個維度</h3><h4 id="2-1-1-抽獎活動的週期"><a href="#2-1-1-抽獎活動的週期" class="headerlink" title="2.1.1. 抽獎活動的週期"></a>2.1.1. 抽獎活動的週期</h4><p>確定、不確定<br>確定的：比如某兩個禮拜。<br>不確定的：比如每消費金額之後，小小抽。</p>
<h4 id="2-1-2-開獎方式"><a href="#2-1-2-開獎方式" class="headerlink" title="2.1.2. 開獎方式"></a>2.1.2. 開獎方式</h4><p>立即開獎、一段時間開獎<br>立即：馬上知道有沒有中獎</p>
<p>一段時間：一段時間公布，會需要有公證的操作或證人</p>
<h4 id="2-1-3-抽獎人數"><a href="#2-1-3-抽獎人數" class="headerlink" title="2.1.3. 抽獎人數"></a>2.1.3. 抽獎人數</h4><p>確定、不確定<br>確定：通常來說公司尾牙就是確定人數<br>不確定：街口的雙11活動，參加人就不是確定</p>
<h4 id="2-1-4-抽獎次數"><a href="#2-1-4-抽獎次數" class="headerlink" title="2.1.4. 抽獎次數"></a>2.1.4. 抽獎次數</h4><p>確定、不確定<br>確定：公司尾牙就是確定的<br>不確定：街口雙11或百貨公司活動就是不確定的。</p>
<h4 id="2-1-5-獎品數量"><a href="#2-1-5-獎品數量" class="headerlink" title="2.1.5. 獎品數量"></a>2.1.5. 獎品數量</h4><p>確定、不確定<br>確定：ps5 1台，就是確定<br>不確定：ubereats 新人首單 100元，就是不確定的</p>
<h3 id="2-2-獎項設計"><a href="#2-2-獎項設計" class="headerlink" title="2.2. 獎項設計"></a>2.2. 獎項設計</h3><p>0 ~ 0.5 中iphone ，隨機random<br>rand seed 常用 block chain hash</p>
<h4 id="2-2-1-大獎設計"><a href="#2-2-1-大獎設計" class="headerlink" title="2.2.1. 大獎設計"></a>2.2.1. 大獎設計</h4><p>10 台iphone 在1個禮拜內送完，但需要跟行銷討論想要的效果<br>有可能是每1最多抽到1台，在雙11當天活動高潮 就送5台之類。</p>
<h4 id="2-2-2-小獎設計"><a href="#2-2-2-小獎設計" class="headerlink" title="2.2.2. 小獎設計"></a>2.2.2. 小獎設計</h4><p>常見作法：機率獎品對照表</p>
<h2 id="3-三、業務風險的控管及系統的風險控制與注意事項"><a href="#3-三、業務風險的控管及系統的風險控制與注意事項" class="headerlink" title="3. 三、業務風險的控管及系統的風險控制與注意事項"></a>3. 三、業務風險的控管及系統的風險控制與注意事項</h2><ol>
<li><p>一定要限制抽獎次數 30次，怕有bug，這個次數可以很大，但不能是無限。</p>
</li>
<li><p>獎品送的狀況超出預期，需要有緊急狀況的計劃</p>
</li>
<li><p>限制次數</p>
<ol>
<li>業務層限制次數</li>
<li>在nginx module 限制來自某個ip的流量等等<br>業務層或網管層限制某個用戶id 做限流，防止用戶大量請求。</li>
</ol>
</li>
<li><p>攔截一些無效流量</p>
<p>無效流量的效果大神說很有感</p>
<p>比如momo幣 10點搶，10點01分進來1000個用戶，前面10個做完業務邏輯，後面990個可以都不做一些邏輯判斷，減輕系統的負擔，直接return。</p>
</li>
<li><p>前端的部分</p>
<p>按了請求之後馬上disable按鈕，10秒後再解開之類的</p>
</li>
<li><p>redis使用</p>
<p>如果做一個select update 或一個很大的trasaction 基本上系統就等著掛掉。流量尖鋒的資料庫壓力，超時原因都是各式各樣的資料庫鎖，很大呈度可以減少這個問題。</p>
<p>因此，要搶秒殺或福袋建議大家可以看redis 的<code>lua腳本</code>來實現扣減庫存的方案，把需要資料庫完成的強一致性減庫存操作轉換為redis 的記憶體操作<br>之後再透過某種方式再同步回資料庫，去實際做減庫存的工作。可以非常有效減緩系統壓力。</p>
<p>QPS說明</p>
<p>資料庫：QPS 20 左右<br>redis ：QPS 幾千沒問題</p>
</li>
</ol>
<h2 id="4-問題時間"><a href="#4-問題時間" class="headerlink" title="4. 問題時間"></a>4. 問題時間</h2><h3 id="4-1-Q1-資訊架構的錢怎麼預估"><a href="#4-1-Q1-資訊架構的錢怎麼預估" class="headerlink" title="4.1. Q1 資訊架構的錢怎麼預估"></a>4.1. Q1 資訊架構的錢怎麼預估</h3><p>可以先探討是在地端還是雲端。(我們電資(電商)不能上雲)</p>
<p>另外就是核心關鍵業務指標來評量，比方說<br>日活躍人數多少?( Daily Active User，DAU )<br>月活躍人數多少?<br>小活動的用戶活動參與度多少?<br>手機的nofication ，用戶點擊會是多少?(街口這項是滿高的)</p>
<p>街口案例(假設)：</p>
<p>假設日活10萬、月活30萬，大型活動 日活 拉到2~3倍。</p>
<p>以雙11為例，11整點 抓30萬 request 流量，鋒直流量可能再用反推maybe可能是需要1000qps</p>
<p>1000qps 再往下分解，可能需要5台、6台機器 可能在nginx 流量截取層需不需要做一些其它節點的配置</p>
<p>雙11時大概20幾分鐘不能work，原因是因為我們的防火牆被打爆了，流量最大，內部系統風平浪靜<br>ap節點 做到 stateless 水平擴容</p>
<h2 id="5-閒聊"><a href="#5-閒聊" class="headerlink" title="5. 閒聊"></a>5. 閒聊</h2><h3 id="5-1-壓測工具討論"><a href="#5-1-壓測工具討論" class="headerlink" title="5.1. 壓測工具討論"></a>5.1. 壓測工具討論</h3><ul>
<li>k6 javascript 寫script壓測工具 保哥推薦 ，底層是用go</li>
<li>jmeter</li>
</ul>
<p>壓測有分為單點壓測、情境壓測</p>
<p>cpu 超過90%沒意義，講師想糾正大家對於壓測的觀念，不是說壓測一定要把系統搞到爆才叫壓測。<br>cpu 50%、60% 就已經有點不穩定的感覺。</p>
<p>比如在cpu 20%、30% 使用率，已經有達標需求了，這樣也是壓測的很好結果。</p>
]]></content>
      <categories>
        <category>系統架構</category>
      </categories>
      <tags>
        <tag>系統架構</tag>
      </tags>
  </entry>
  <entry>
    <title>docker 系列 - (1) 容器快速上手</title>
    <url>/2022/02/15/2022-02-14%20Docker%20%E7%B3%BB%E5%88%97%20-%20(1)%20%E5%AE%B9%E5%99%A8%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/</url>
    <content><![CDATA[<h2 id="1-docker命令行的基本使用"><a href="#1-docker命令行的基本使用" class="headerlink" title="1. docker命令行的基本使用"></a>1. docker命令行的基本使用</h2><p>docker + 管理的對象(比如容器、鏡像)  + 具體操作(比如創建、啟動、停止、刪除)</p>
<ul>
<li><code>docker image pull nginx</code> 拉取一个叫nginx的docker image鏡像</li>
<li><code>docker container stop web</code> 停止一个叫web的docker container容器</li>
</ul>
<span id="more"></span>


<h2 id="2-Image-vs-Container-鏡像-vs-容器"><a href="#2-Image-vs-Container-鏡像-vs-容器" class="headerlink" title="2. Image vs Container 鏡像 vs 容器"></a>2. Image vs Container 鏡像 vs 容器</h2><h3 id="2-1-image鏡像"><a href="#2-1-image鏡像" class="headerlink" title="2.1. image鏡像"></a>2.1. image鏡像</h3><ul>
<li>docker image 是一個 <code>read-only</code>文件</li>
<li>這個文件包含文件系統、源碼、庫文件、依賴、工具等一些運行application所需要的文件</li>
<li>可以理解成一個模板</li>
<li>docker image具有分層的概念</li>
</ul>
<h3 id="2-2-container容器"><a href="#2-2-container容器" class="headerlink" title="2.2. container容器"></a>2.2. container容器</h3><ul>
<li><p>“一個運行中的docker image”</p>
</li>
<li><p>實質是複製image全在image最上層加上一層<code>read-write</code>的層(稱之為&#96;container layer，容器層)</p>
</li>
<li><p>基於同一個image可以創建多個container</p>
<p><img src="https://i.imgur.com/NVZ3BEv.png" alt="docker-image-vs-container"></p>
</li>
</ul>
<h2 id="3-docker-image的獲取方式"><a href="#3-docker-image的獲取方式" class="headerlink" title="3. docker image的獲取方式"></a>3. docker image的獲取方式</h2><ul>
<li>自己製作</li>
<li>從registry拉取(比如docker hub)</li>
</ul>
<h2 id="4-容器的基本操作"><a href="#4-容器的基本操作" class="headerlink" title="4. 容器的基本操作"></a>4. 容器的基本操作</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">docker 版本</span></span><br><span class="line">dcoker version</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">docker 相關資訊，比如目前有幾個container、images、container運行狀態</span></span><br><span class="line">docker info</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">可以以看到列出了managment commands 、commands</span> </span><br><span class="line">docker</span><br><span class="line"></span><br><span class="line">Management Commands:</span><br><span class="line">  builder     Manage builds</span><br><span class="line">  buildx*     Docker Buildx (Docker Inc., v0.7.1)</span><br><span class="line">  compose*    Docker Compose (Docker Inc., v2.2.1)</span><br><span class="line">  config      Manage Docker configs</span><br><span class="line">  container   Manage containers</span><br><span class="line">  context     Manage contexts</span><br><span class="line">  image       Manage images</span><br><span class="line">  manifest    Manage Docker image manifests and manifest lists</span><br><span class="line">  network     Manage networks</span><br><span class="line">  node        Manage Swarm nodes</span><br><span class="line">  plugin      Manage plugins</span><br><span class="line">  scan*       Docker Scan (Docker Inc., 0.9.0)</span><br><span class="line">  secret      Manage Docker secrets</span><br><span class="line">  service     Manage services</span><br><span class="line">  stack       Manage Docker stacks</span><br><span class="line">  swarm       Manage Swarm</span><br><span class="line">  system      Manage Docker</span><br><span class="line">  trust       Manage trust on Docker images</span><br><span class="line">  volume      Manage volumes</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  attach      Attach local standard input, output, and error streams to a running container</span><br><span class="line">  build       Build an image from a Dockerfile</span><br><span class="line">  commit      Create a new image from a container&#x27;s changes</span><br><span class="line">  cp          Copy files/folders between a container and the local filesystem</span><br><span class="line">  create      Create a new container</span><br><span class="line">  diff        Inspect changes to files or directories on a container&#x27;s filesystem</span><br><span class="line">  events      Get real time events from the server</span><br><span class="line">  exec        Run a command in a running container</span><br><span class="line">  export      Export a container&#x27;s filesystem as a tar archive</span><br><span class="line">  history     Show the history of an image</span><br><span class="line">  images      List images</span><br><span class="line">  import      Import the contents from a tarball to create a filesystem image</span><br><span class="line">  info        Display system-wide information</span><br><span class="line">  inspect     Return low-level information on Docker objects</span><br><span class="line">  kill        Kill one or more running containers</span><br><span class="line">  load        Load an image from a tar archive or STDIN</span><br><span class="line">  login       Log in to a Docker registry</span><br><span class="line">  logout      Log out from a Docker registry</span><br><span class="line">  logs        Fetch the logs of a container</span><br><span class="line">  pause       Pause all processes within one or more containers</span><br><span class="line">  port        List port mappings or a specific mapping for the container</span><br><span class="line">  ps          List containers</span><br><span class="line">  pull        Pull an image or a repository from a registry</span><br><span class="line">  push        Push an image or a repository to a registry</span><br><span class="line">  rename      Rename a container</span><br><span class="line">  restart     Restart one or more containers</span><br><span class="line">  rm          Remove one or more containers</span><br><span class="line">  rmi         Remove one or more images</span><br><span class="line">  run         Run a command in a new container</span><br><span class="line">  save        Save one or more images to a tar archive (streamed to STDOUT by default)</span><br><span class="line">  search      Search the Docker Hub for images</span><br><span class="line">  start       Start one or more stopped containers</span><br><span class="line">  stats       Display a live stream of container(s) resource usage statistics</span><br><span class="line">  stop        Stop one or more running containers</span><br><span class="line">  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE</span><br><span class="line">  top         Display the running processes of a container</span><br><span class="line">  unpause     Unpause all processes within one or more containers</span><br><span class="line">  update      Update configuration of one or more containers</span><br><span class="line">  version     Show the Docker version information</span><br><span class="line">  wait        Block until one or more containers stop, then print their exit codes</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">針對container 指令查看</span></span><br><span class="line">docker container --help</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">針對image 指令查看</span></span><br><span class="line">docker image --help</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">列出image</span></span><br><span class="line">docker image ls</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">刪除image</span></span><br><span class="line">docker image rm docker/getting-started</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">創建container</span></span><br><span class="line">docker container run </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">創建container nginx ,本地沒有找到直接去找docker hub 下載 並直接運行，並且是前台運行的container</span></span><br><span class="line">docker container run nginx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">列出container ，ps 為較舊版本的命令 ，<span class="built_in">ls</span>、ps效果是一樣的</span></span><br><span class="line">docker container ls</span><br><span class="line">docker container ps</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">列出container 包含stop的container</span></span><br><span class="line"></span><br><span class="line">docker container ps -a</span><br><span class="line">docker container ls -a</span><br><span class="line">docker ps -a</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">docker run 省略container 是較舊的寫法</span></span><br><span class="line">docker container run nginx </span><br><span class="line">docker run nginx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">停止容器</span></span><br><span class="line">docker container stop [NAMES] or [Container id]</span><br><span class="line">docker stop [NAMES] or [Container id]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">刪除容器</span></span><br><span class="line">docker container rm [NAMES] or [Container id]</span><br><span class="line">docker rm  [NAMES] or [Container id]</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="4-1-Demo"><a href="#4-1-Demo" class="headerlink" title="4.1. Demo"></a>4.1. Demo</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker container run nginx</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS         PORTS     NAMES</span><br><span class="line">343fd4031609   nginx     &quot;/docker-entrypoint.…&quot;   6 seconds ago   Up 5 seconds   80/tcp    xenodochial_clarke</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker container <span class="built_in">ls</span></span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS     NAMES</span><br><span class="line">343fd4031609   nginx     &quot;/docker-entrypoint.…&quot;   14 seconds ago   Up 13 seconds   80/tcp    xenodochial_clarke</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker container stop 34</span></span><br><span class="line">34</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker container <span class="built_in">ls</span> -a</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS                      PORTS     NAMES</span><br><span class="line">343fd4031609   nginx     &quot;/docker-entrypoint.…&quot;   29 seconds ago   Exited (0) 5 seconds ago              xenodochial_clarke</span><br><span class="line">d9095daa8bcf   nginx     &quot;/docker-entrypoint.…&quot;   28 minutes ago   Exited (0) 28 minutes ago             suspicious_shamir</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker container <span class="built_in">rm</span> 34</span></span><br><span class="line">34</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker container <span class="built_in">ls</span> -a</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS                      PORTS     NAMES</span><br><span class="line">d9095daa8bcf   nginx     &quot;/docker-entrypoint.…&quot;   28 minutes ago   Exited (0) 28 minutes ago             suspicious_shamir</span><br><span class="line"><span class="meta prompt_">$</span></span><br></pre></td></tr></table></figure>





<h2 id="5-命令行小技巧之批次操作"><a href="#5-命令行小技巧之批次操作" class="headerlink" title="5. 命令行小技巧之批次操作"></a>5. 命令行小技巧之批次操作</h2><h3 id="5-1-批次停止"><a href="#5-1-批次停止" class="headerlink" title="5.1. 批次停止"></a>5.1. 批次停止</h3><p>先查詢目前的清單如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker container ps</span></span><br><span class="line"></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS     NAMES</span><br><span class="line">cd3a825fedeb   nginx     &quot;/docker-entrypoint.…&quot;   7 seconds ago    Up 6 seconds    80/tcp    mystifying_leakey</span><br><span class="line">269494fe89fa   nginx     &quot;/docker-entrypoint.…&quot;   9 seconds ago    Up 8 seconds    80/tcp    funny_gauss</span><br><span class="line">34b68af9deef   nginx     &quot;/docker-entrypoint.…&quot;   12 seconds ago   Up 10 seconds   80/tcp    interesting_mahavira</span><br><span class="line">7513949674fc   nginx     &quot;/docker-entrypoint.…&quot;   13 seconds ago   Up 12 seconds   80/tcp    kind_nobel</span><br></pre></td></tr></table></figure>

<p>方法1</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">刪除多個container ，以下為例刪除4個container</span></span><br><span class="line">docker container stop af 87 c2 4c</span><br></pre></td></tr></table></figure>



<p>方法2</p>
<p>透過以下指令我們可以發現會出輸id清單</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">輸出 conainter <span class="built_in">id</span> list</span></span><br><span class="line">docker container ps -aq</span><br><span class="line"></span><br><span class="line">cd3a825fedeb</span><br><span class="line">269494fe89fa</span><br><span class="line">34b68af9deef</span><br><span class="line">7513949674fc</span><br></pre></td></tr></table></figure>

<p>接著利用以下方式批次停用container</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker container stop $(docker container ps -qa)</span><br></pre></td></tr></table></figure>



<h3 id="5-2-批次刪除"><a href="#5-2-批次刪除" class="headerlink" title="5.2. 批次刪除"></a>5.2. 批次刪除</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">批次刪除</span></span><br><span class="line">docker container rm $(docker ps -aq)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">批次強制刪除</span></span><br><span class="line">docker container rm -f $(docker container ls -aq)</span><br></pre></td></tr></table></figure>

<p>補充說明：</p>
<ul>
<li>container 在運行的過程中是不行刪除的，除非先stop。</li>
</ul>
<p>另一個方法是強制刪除，如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker container rm 704 -f</span><br></pre></td></tr></table></figure>

<ul>
<li>可以快速對系統進行清理，删除停止的容器，不用的image，等等</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker system prune -a -f</span><br></pre></td></tr></table></figure>







<h2 id="6-容器的attached和detached模式"><a href="#6-容器的attached和detached模式" class="headerlink" title="6. 容器的attached和detached模式"></a>6. 容器的attached和detached模式</h2><h3 id="6-1-attached"><a href="#6-1-attached" class="headerlink" title="6.1. attached"></a>6.1. attached</h3><p>前台的執行我們稱之為attached ，輸入輸出的結果attached本地的輸入輸出，也會將ctrl + c 輸入(反應)至容器內部。</p>
<p>而windows 的attached 不是完整的attached，只有做到容器的輸出打印出來，無法接收ctrl + c 的輸入指令。(LINUX 是完整attach)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">前台模式執行docker</span></span><br><span class="line">docker container run -p 80:80 nginx</span><br></pre></td></tr></table></figure>

<p>指令說明：<code>-p 80:80</code> 對外port:容器port ，也就是對外的80 port 映射容器 80 port</p>
<h3 id="6-2-detached"><a href="#6-2-detached" class="headerlink" title="6.2. detached"></a>6.2. detached</h3><p>後台的執行我們稱之為detached </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">背景模式執行docker 以下二種都可以</span></span><br><span class="line">docker run --detach -p</span><br><span class="line">docker run -d -p</span><br></pre></td></tr></table></figure>

<p>我們發現這樣執行後，只有拿到container id的輸出，我們看不到nginx 的log 輸出囉</p>
<p>如果想要去attach這個容器，使用以下指令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker attach [NAMES] or [Container id]</span><br></pre></td></tr></table></figure>

<p>我們會發現再去打開瀏覽器刷新一下頁面(<code>http://localhost:80</code>)，回過頭來看terminal就會看到nginx有輸出log 囉。</p>
<p><img src="https://i.imgur.com/DHpSx6M.png" alt="image-20220214133614727"></p>
<p>小結：我們比較常用的是detached 創建容器。</p>
<h2 id="7-容器的交互式模式"><a href="#7-容器的交互式模式" class="headerlink" title="7. 容器的交互式模式"></a>7. 容器的交互式模式</h2><h3 id="7-1-docker-container-logs-介紹"><a href="#7-1-docker-container-logs-介紹" class="headerlink" title="7.1. docker container logs 介紹"></a>7.1. docker container logs 介紹</h3><p>除了我們稍早講到的 <code>docker attch</code>指令方法得到相關log，也可以使用另外一個指令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker container logs [NAMES] or [Container id]</span><br></pre></td></tr></table></figure>

<p>這個指令是取得<code>/docker-entrypoint.sh</code>腳本輸出。</p>
<p><img src="https://i.imgur.com/Ag4rG8C.png" alt="image-20220214140333028"></p>
<p>如果我們需要即時出輸log的話可以透過以下指令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker container logs -f [NAMES] or [Container id]</span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/fZVe3F9.png" alt="image-20220214140509765"></p>
<p>接著，再去打開瀏覽器刷新一下頁面(<code>http://localhost:80</code>)，回過頭來看terminal就會看即時的log輸出囉</p>
<p><img src="https://i.imgur.com/Myvxh17.png" alt="image-20220214140439035"></p>
<p><img src="https://i.imgur.com/HinfKfJ.png" alt="image-20220214140415333"></p>
<h3 id="7-2-創建容器時並進入交互式模式"><a href="#7-2-創建容器時並進入交互式模式" class="headerlink" title="7.2. 創建容器時並進入交互式模式"></a>7.2. 創建容器時並進入交互式模式</h3><p>透過以下指令可以進行交互模式：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker container run -it ubuntu sh</span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/lyqVptM.png" alt="image-20220214140232538"></p>
<p>進入到了container 內部，當要離開container 時只要輸入<code>exit</code>指令就行了。</p>
<p>我們再去觀查<code>docker container ps -a</code> 會發現剛剛的ubuntu container 是停止的</p>
<p><img src="https://i.imgur.com/g8jcwYt.png" alt="image-20220214140127592"></p>
<h3 id="7-3-在一個已經運行的容器裡執行一個額外的command"><a href="#7-3-在一個已經運行的容器裡執行一個額外的command" class="headerlink" title="7.3. 在一個已經運行的容器裡執行一個額外的command"></a>7.3. 在一個已經運行的容器裡執行一個額外的command</h3><p>查看一下目前容器的狀態與ID</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/M3bXiWg.png" alt="image-20220214152023529"></p>
<p>執行以下指令進入到容器內部</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it [NAMES] or [Container id] sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">例子</span></span><br><span class="line">docker exec -it ae4 sh</span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/FXtsQ6T.png" alt="image-20220214152108100"></p>
<h3 id="7-4-BusyBox-介紹"><a href="#7-4-BusyBox-介紹" class="headerlink" title="7.4. BusyBox 介紹"></a>7.4. BusyBox 介紹</h3><p><code>BusyBox</code>是一個集成了一百多個最常用linux命令和工具(如<code>cat</code>、<code>echo</code>、<code>grep</code>、<code>mount</code>‘、<code>telnet</code>等)的精簡工具箱，它只需要幾MB的大小，很方便進行個種快速驗證，被譽為”LINUX系統的瑞士軍刀”。</p>
<p><code>BusyBox</code>可運行於多款<code>POSIX</code>環境的操作系統中，如<code>LINUX</code>(包括<code>android</code>)、<code>Hurd</code>、<code>FreeBSD</code>等。</p>
<p><code>BusyBox</code> 鏡像雖然小巧，但包括了大量常見的 <code>Linux</code> 命令，讀者可以用它快速熟悉 <code>Linux</code> 命令。</p>
<h2 id="8-容器和虛擬機-Container-vs-VM"><a href="#8-容器和虛擬機-Container-vs-VM" class="headerlink" title="8. 容器和虛擬機 Container vs VM"></a>8. 容器和虛擬機 Container vs VM</h2><p><img src="https://i.imgur.com/5K8U5Ms.jpg" alt="docker-vs-vm"></p>
<h3 id="8-1-虛擬機"><a href="#8-1-虛擬機" class="headerlink" title="8.1. 虛擬機"></a>8.1. 虛擬機</h3><ul>
<li>要虛擬出完整的系統包含了作業系統<ul>
<li>需要Hypervisor支持，並且在這些軟件之上創建虛擬機<ul>
<li>vmware</li>
<li>virtual box</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="8-2-容器"><a href="#8-2-容器" class="headerlink" title="8.2. 容器"></a>8.2. 容器</h3><ul>
<li>運行在container engine之上的虛擬容器</li>
</ul>
<h3 id="8-3-容器不是Mini虛擬機"><a href="#8-3-容器不是Mini虛擬機" class="headerlink" title="8.3. 容器不是Mini虛擬機"></a>8.3. 容器不是Mini虛擬機</h3><ul>
<li>容器其實是進程 <ul>
<li>Container are just processes</li>
</ul>
</li>
<li>容器中的進程被限制了對CPU、記憶體等資源的訪問<ul>
<li>我們可以對容器進行一些限制，比方說CPU使用2核、記憶體只能使用1G。這概念在VM也是可以的。</li>
</ul>
</li>
<li>當進程停止後，容器就退出了。</li>
</ul>
<h3 id="8-4-證明容器即是process"><a href="#8-4-證明容器即是process" class="headerlink" title="8.4. 證明容器即是process"></a>8.4. 證明容器即是process</h3><p>首先使用 <code>docker ps</code> 找目前容器的id</p>
<p><img src="https://i.imgur.com/uxAyoP5.png" alt="image-20220215152923918"></p>
<p>我們會看到其實nginx 是執行一個 docker-entrypoint.sh 的一個腳本，這個腳本當然也就是自動啟用nginx的相關指令。</p>
<p>我們輸入 <code>docker container top [Names] or [Container id]</code> ，會顯示出這個容器裡面運行了哪些進程，下圖我們試著輸入<code>docker container top 6cb</code></p>
<p><img src="https://i.imgur.com/19MsVc1.png" alt="image-20220215153056159"></p>
<p>我們可以看到在CMD有一個主進程(master process) ，而PPID欄位指的是此進程的父進程是誰，比方說4576、4577 的父進程都是指向4516 ，而我們再去找PID為4516的，我們會發現也就是我們剛剛講是主進程的那筆。</p>
<p>接著，我們使用<code>ps aux |grep nginx</code> (我們的環境為ubuntu)，如下：</p>
<p><img src="https://i.imgur.com/p1NSgWQ.png" alt="image-20220215160459890"></p>
<p>在ubuntu 的進程裡，我們會發現 4516 這個id 也就是剛剛在container 裡面找到的master process，也就證明了，container 的確是一個進程。</p>
<h4 id="8-4-1-透過pstree工具來查看進程的依賴關係"><a href="#8-4-1-透過pstree工具來查看進程的依賴關係" class="headerlink" title="8.4.1. 透過pstree工具來查看進程的依賴關係"></a>8.4.1. 透過pstree工具來查看進程的依賴關係</h4><p>接著，我們使用<code>pstree -halps 4576</code>，如下：</p>
<p><img src="https://i.imgur.com/vCIbls6.png" alt="image-20220215160841953"></p>
<p>我們可以看到進程的依賴關係。其中<code>containerd-shim</code>就是一個創建並啟動nginx的那個進程，後面的id也就是啟動之後的id名稱</p>
<h3 id="8-5-container-內部進程跟host進程是對不上的，是怎麼回事？"><a href="#8-5-container-內部進程跟host進程是對不上的，是怎麼回事？" class="headerlink" title="8.5. container 內部進程跟host進程是對不上的，是怎麼回事？"></a>8.5. container 內部進程跟host進程是對不上的，是怎麼回事？</h3><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">在container 內的進程id 跟host 的進程id 剛好對上，但其實具體上container 並不是這個id，這個涉及到容器的命名空間原理、隔離等等觀念技術。後續會再講到。</span><br></pre></td></tr></table></figure>



<p><strong>簡單的示例</strong></p>
<p>我們啟動一個有多指令的容器<code>busybox</code>，並利用<code>docker container top dd4</code>查看進程資料。</p>
<p><img src="https://i.imgur.com/H7VV5qA.png" alt="image-20220215162233126"></p>
<p>另外下面這張圖是進入到容器內之後，下了<code>ps</code>指令，我們會發現跟上一張圖片對比的PID 是不一樣的。</p>
<p><img src="https://i.imgur.com/bUZLyjb.png" alt="image-20220215162430641"></p>
<h2 id="9-docker-container-run-背後發生了什麼？"><a href="#9-docker-container-run-背後發生了什麼？" class="headerlink" title="9. docker container run 背後發生了什麼？"></a>9. docker container run 背後發生了什麼？</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker container run -d --publish 80:80 --name webhost nginx</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-d 後台運行</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--publish 也就是先前的 -p 80:80</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--name 給這個容器取名</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">nginx 後面可以再接執行的腳本名稱，如果沒有下，就會執行預設的腳本，後續會講到。</span></span><br></pre></td></tr></table></figure>





<ul>
<li>在本地查找是否有nginx這個image鏡像，但是沒有發現</li>
<li>去遠程的image registry查找nginx鏡像(預設的registry是docker hub)</li>
<li>下載最新版本的nginx鏡像(nginx:latest 預設)</li>
<li>基於nginx鏡像來創建一個新的容器，並且準備運行</li>
<li>docker enginer 分配給這個容器一個虛擬ip地址</li>
<li>在宿主機上打開80port 並把容器的80port轉發到宿主(host)機上</li>
<li>啟動容器，運行指定的命令(這裡是一個shell腳本去啟動nginx)</li>
</ul>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker 系列 - (2) 鏡像的創建管理和發布</title>
    <url>/2022/02/18/2022-02-18%20Docker%20%E7%B3%BB%E5%88%97%20-%20(2)%20%E9%8F%A1%E5%83%8F%E7%9A%84%E5%89%B5%E5%BB%BA%E7%AE%A1%E7%90%86%E5%92%8C%E7%99%BC%E5%B8%83/</url>
    <content><![CDATA[<h2 id="1-鏡像的獲取方式"><a href="#1-鏡像的獲取方式" class="headerlink" title="1. 鏡像的獲取方式"></a>1. 鏡像的獲取方式</h2><ol>
<li><p>pull from <code>registry</code> (online ) 從registry拉取</p>
<ul>
<li><p>public(公有)</p>
</li>
<li><p>private(私有)</p>
<ul>
<li>自架類似dokcer hub 的伺服器</li>
</ul>
</li>
</ul>
</li>
<li><p>build from <code>Dockerfile</code> (online) 從dockerfile構建</p>
<ul>
<li>構建的過程需要上網，拉取基礎的images也可是自架的docker hub 伺服器</li>
</ul>
</li>
<li><p>load from <code>file</code>(offline)文件導入(離線)</p>
<ul>
<li>透過鏡像的<code>save</code>指令導出一個鏡像檔，可以通過usb等硬體裝置儲存攜帶，再插到另一台機器讀取，接著再利用<code>load</code>指令導入到docker裡。</li>
</ul>
</li>
</ol>
<p><img src="https://i.imgur.com/35wWMep.png" alt="docker-image"></p>
<span id="more"></span>


<h2 id="2-鏡像的registry介紹"><a href="#2-鏡像的registry介紹" class="headerlink" title="2. 鏡像的registry介紹"></a>2. 鏡像的registry介紹</h2><p>registry網站</p>
<ul>
<li><a href="https://hub.docker.com/">docker hub</a></li>
<li><a href="https://quay.io/">Quay.io</a></li>
</ul>
<h2 id="3-鏡像的獲取和查看"><a href="#3-鏡像的獲取和查看" class="headerlink" title="3. 鏡像的獲取和查看"></a>3. 鏡像的獲取和查看</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拉取鏡像寫法</span></span><br><span class="line">docker image pull nginx </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">較舊寫法 不需要寫image</span></span><br><span class="line">docker pull nginx </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看本地的image 清單 以下兩個語法都可以</span></span><br><span class="line">docker image ls</span><br><span class="line">docker images</span><br></pre></td></tr></table></figure>

<p>在nginx 後面如果沒有加上tag名稱時，會預設抓<code>latest</code>的tag進行拉取。</p>
<p>舉例來說，我們可以先從docker hub 找到你要的版本，以1.20.2為例：</p>
<p><img src="https://i.imgur.com/TR3XrgC.png" alt="image-20220216095102803"></p>
<p>接著我們在輸入指令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@kite-virtual-machine:/home/kite/Desktop# docker pull nginx:1.20.2</span><br><span class="line">1.20.2: Pulling from library/nginx</span><br><span class="line">5eb5b503b376: Pull complete </span><br><span class="line">cdfeb356c029: Pull complete </span><br><span class="line">d86da7454448: Pull complete </span><br><span class="line">7976249980ef: Pull complete </span><br><span class="line">8f66aa6726b2: Pull complete </span><br><span class="line">c004cabebe76: Pull complete </span><br><span class="line">Digest: sha256:02923d65cde08a49380ab3f3dd2f8f90aa51fa2bd358bd85f89345848f6e6623</span><br><span class="line">Status: Downloaded newer image for nginx:1.20.2</span><br><span class="line">docker.io/library/nginx:1.20.2</span><br><span class="line"></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop# docker images</span><br><span class="line">REPOSITORY             TAG       IMAGE ID       CREATED       SIZE</span><br><span class="line">nginx                  1.20.2    d6c9558ba445   2 weeks ago   141MB</span><br></pre></td></tr></table></figure>

<p>下<code>docker images</code>就會看到拉取了1.20.2 的鏡像。</p>
<p>我們用另一個示例來玩看看，首先，先到<code>quay</code>網站來查詢nginx，我們copy 指令<code>docker pull quay.io/bitnami/nginx</code>。針對這個指令的說明一下：</p>
<ul>
<li>第一個<code>quay.io</code>指的是registry 的網址</li>
<li>第二個<code>bitnami</code>是發行的組(group)或是擁有者(owner)，比如是一個用戶的id</li>
<li>第三個<code>nginx</code>是鏡像名稱</li>
</ul>
<p><img src="https://i.imgur.com/rV2MPWp.png" alt="image-20220216143013797"></p>
<p>執行完結果如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@kite-virtual-machine:/home/kite/Desktop# docker pull quay.io/bitnami/nginx</span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from bitnami/nginx</span><br><span class="line">a2b89359fa38: Pull complete </span><br><span class="line">eb3d3b400740: Pull complete </span><br><span class="line">46e8977b34c6: Pull complete </span><br><span class="line">ba19e4f3bb28: Pull complete </span><br><span class="line">b32f6ece772b: Pull complete </span><br><span class="line">93564c931307: Pull complete </span><br><span class="line">e5b3ce1bf203: Pull complete </span><br><span class="line">724a66987928: Pull complete </span><br><span class="line">e556e9ce9174: Pull complete </span><br><span class="line">61c0aa354bde: Pull complete </span><br><span class="line">c14227a7baae: Pull complete </span><br><span class="line">055df77435e3: Pull complete </span><br><span class="line">Digest: sha256:f9b149213fa98cee7750ede87bbec1109971c7a2cfa556c89b7d2cbf3697b213</span><br><span class="line">Status: Downloaded newer image for quay.io/bitnami/nginx:latest</span><br><span class="line">quay.io/bitnami/nginx:latest</span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop# docker images</span><br><span class="line">REPOSITORY              TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">quay.io/bitnami/nginx   latest    fef44885d7d3   15 hours ago   89.4MB</span><br><span class="line">nginx                   1.20.2    d6c9558ba445   2 weeks ago    141MB</span><br></pre></td></tr></table></figure>

<p>我們透過<code>docker image ls</code>看到的訊息是比較簡易的，如果要看完整詳細的docker訊息可以透過<code>docker image inspect [names] or [container id]</code></p>
<p>這個指定來看詳細內容，如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker image inspect d6c</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        #這項是鏡像完整的id</span><br><span class="line">        &quot;Id&quot;: &quot;sha256:d6c9558ba4456741fc4ee304e1a75a561e1c8d92f5107a715b6224bb7844f507&quot;,</span><br><span class="line">        &quot;RepoTags&quot;: [</span><br><span class="line">            &quot;nginx:1.20.2&quot;</span><br><span class="line">        ],</span><br><span class="line">        ... </span><br><span class="line">        #這項是鏡像的架構，比方說如果你是MAC 的M1晶片，可能就必須選用ARM架構，就選擇AMD64</span><br><span class="line">        &quot;Architecture&quot;: &quot;amd64&quot;,</span><br><span class="line">        #這項是鏡像的作業系統</span><br><span class="line">        &quot;Os&quot;: &quot;linux&quot;,</span><br><span class="line">        ...</span><br><span class="line">        &quot;RootFS&quot;: &#123;</span><br><span class="line">            &quot;Type&quot;: &quot;layers&quot;,</span><br><span class="line">        #之前有講到docker是有分層的概念，也就是對應到這個，後續再詳細說明</span><br><span class="line">            &quot;Layers&quot;: [</span><br><span class="line">                &quot;sha256:7d0ebbe3f5d26c1b5ec4d5dbb6fe3205d7061f9735080b0162d550530328abd6&quot;,</span><br><span class="line">                &quot;sha256:f7d96e665ae1a81d81e18e2503b2341bec8491606ffa6e2b48480a8e741dfab7&quot;,</span><br><span class="line">                &quot;sha256:a64a30dea1c4b926a45abed0728327d079d2c5fa4a7b7e6aa2d06136783a27a2&quot;,</span><br><span class="line">                &quot;sha256:dc78c3d0e91713e0b45a209df1509fb96d4f6a4f3099f4dfbc9e9ae71b143e43&quot;,</span><br><span class="line">                &quot;sha256:8fa2ccbce0c21c1a0140ce0f2db6b92f92c16f9ff00e4c8a1daaea548799b698&quot;,</span><br><span class="line">                &quot;sha256:b1073b41766d15d7835ea97e5eaf7f2f8a06b7fd1549ecbc2c9697813ede853a&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>簡單說明幾個部分：</p>
<ul>
<li>ID<ul>
<li>鏡像的完整ID</li>
</ul>
</li>
<li>Architecture<ul>
<li>鏡像的架構，比方說如果你是MAC 的M1晶片，可能就必須選用ARM架構，就選擇AMD64</li>
</ul>
</li>
<li>Os<ul>
<li>鏡像的作業系統</li>
</ul>
</li>
<li>Layers<ul>
<li>之前有講到docker是有分層的概念，也就是對應到這個，後續再詳細說明</li>
</ul>
</li>
</ul>
<p>鏡像檔的刪除注意事項</p>
<p>透過以下的例子，我們發現其實要移除鏡像檔必須這個鏡像在沒有被container引用，並且就算已經停止的container 也必須移除，才有辦法完成鏡像檔的刪除動作。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1. 列出目前的鏡像清單</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop# docker image ls</span><br><span class="line">REPOSITORY              TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">nginx                   latest    c316d5a335a5   2 weeks ago    142MB</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">2. 啟動nginx</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop# docker container run -d nginx</span><br><span class="line">7dc905570d71599e9712f2dd978f25ef987d351f15b85231e79a8f5099bfda2b</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">3. 移除鏡像檔 發生錯誤</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop# docker image rm c3</span><br><span class="line">Error response from daemon: conflict: unable to delete c316d5a335a5 (cannot be forced) - image is being used by running container 7dc905570d71</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">4. 停用container</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop# docker container stop 7dc9</span><br><span class="line">7dc9</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">5. 再次移除鏡像檔 發生錯誤</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop# docker image rm c3</span><br><span class="line">Error response from daemon: conflict: unable to delete c316d5a335a5 (must be forced) - image is being used by stopped container 7dc905570d71</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">6. 移除container</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop# docker container rm 7dc9</span><br><span class="line">7dc9</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">7. 移除鏡像檔 完成</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop# docker image rm c3</span><br><span class="line">Untagged: nginx:latest</span><br><span class="line">Untagged: nginx@sha256:2834dc507516af02784808c5f48b7cbe38b8ed5d0f4837f16e78d00deb7e7767</span><br><span class="line">Deleted: sha256:c316d5a335a5cf324b0dc83b3da82d7608724769f6454f6d9a621f3ec2534a5a</span><br><span class="line">Deleted: sha256:67e568696593c33b4a15c9d81dc6f67499b8d973b88eb49b53d47bf4dbf4d187</span><br><span class="line">Deleted: sha256:0f8d4e3d979c540644f248b4206cf540978166b095223bdc950628dca2e8f3f1</span><br><span class="line">Deleted: sha256:5d75bfe8a7422476a495b27c8a1598d1206137631d350b8bdee13bc88f365282</span><br><span class="line">Deleted: sha256:8284a9e28c625b2826efdd6160ea1ff7f710881a4a2afe1ef58a5eb51d3f919e</span><br><span class="line">Deleted: sha256:89a1db9e1079b7574c1a707bc8c1fe04ff723bc71d4bca8bc48653e9a32186d2</span><br><span class="line">Deleted: sha256:7d0ebbe3f5d26c1b5ec4d5dbb6fe3205d7061f9735080b0162d550530328abd6</span><br></pre></td></tr></table></figure>

<h3 id="3-1-image-output-和image-load"><a href="#3-1-image-output-和image-load" class="headerlink" title="3.1. image output 和image load"></a>3.1. image output 和image load</h3><p>匯出指令，其中 <code>-o</code> 是<code>output</code>的縮寫</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker image save quay.io/bitnami/nginx -o nginx.image</span><br></pre></td></tr></table></figure>

<p>匯入指令，其中 <code>-i</code>是 <code>input</code>的縮寫</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker image load -i ./nginx.image </span><br></pre></td></tr></table></figure>

<h2 id="4-鏡像的導出和導入-offline"><a href="#4-鏡像的導出和導入-offline" class="headerlink" title="4. 鏡像的導出和導入(offline)"></a>4. 鏡像的導出和導入(offline)</h2><p>小實驗，動手下指令玩玩看，如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">匯出鏡像檔</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop# docker image save quay.io/bitnami/nginx -o nginx.image</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看當前路徑是否有剛剛匯出的鏡像</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop# ll</span><br><span class="line">total 91340</span><br><span class="line">drwxr-xr-x  2 kite kite     4096  二  16 15:27 ./</span><br><span class="line">drwxr-xr-x 23 kite kite     4096  二  11 09:44 ../</span><br><span class="line">-rw-------  1 root root 93520384  二  16 15:27 nginx.image</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">先刪除鏡像，為了後面測試load指定</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop# docker image rm quay.io/bitnami/nginx</span><br><span class="line">Untagged: quay.io/bitnami/nginx:latest</span><br><span class="line">Untagged: quay.io/bitnami/nginx@sha256:f9b149213fa98cee7750ede87bbec1109971c7a2cfa556c89b7d2cbf3697b213</span><br><span class="line">Deleted: sha256:fef44885d7d30571af3156ceaf232702d5b8f6771cda3ed724f8cc272e9c9829</span><br><span class="line">Deleted: sha256:a189c52fed386394dbb7ffb51c5c462ad2ba77c26c01d5c01e72b15e40db29c0</span><br><span class="line">Deleted: sha256:2f1c8bd99f51d77b4323230921f2ca86706e353cf2d775cf0b002e0e479f79e6</span><br><span class="line">Deleted: sha256:5c2ae43f5fa2f4dacbf202f3a363c3320eba7f78806e059bb0f893b925c46f53</span><br><span class="line">Deleted: sha256:0a946840cdb0258bf1b59a31680050dd60085769b79f3b44d7aa17ec069424f6</span><br><span class="line">Deleted: sha256:c5693486bf8d9e4a52a4925ff9f0c37861c3bb7646484f424b9a6b04b1b0eaf3</span><br><span class="line">Deleted: sha256:9efb4fc4677072eb2a7d83a8cf75aff78e35599aed05d4177b02bc557f878832</span><br><span class="line">Deleted: sha256:342797d9b97f8ca828cd8c7fc8081497627a0c249f1a808f7df8f66de8c48969</span><br><span class="line">Deleted: sha256:2b660bfea22ebf12cf21e46a323d73c68ef0094fc327d8ff1f7b9c5e6c8540e5</span><br><span class="line">Deleted: sha256:00251eb08c244921e37ee3e3f0e7b1f03d1f0d465f88c268372e6b1bbd3a29ad</span><br><span class="line">Deleted: sha256:305bbe3d88ac18f896068c246f07787570634b63bfbd47a2b9d65329b7d25558</span><br><span class="line">Deleted: sha256:a0fc422098a3de3df394bfcb3e085abd4fe28f58ef8b1d8f5a273529fbf5e65d</span><br><span class="line">Deleted: sha256:ae58f1561944087b459d2688dff7eda143f4d7512f05bf2b52f134fdfd2b8cd4</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">加載剛output的鏡像</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop# docker image load -i ./nginx.image </span><br><span class="line">ae58f1561944: Loading layer [==================================================&gt;]   70.8MB/70.8MB</span><br><span class="line">2f6f61f3bbc9: Loading layer [==================================================&gt;]  81.92kB/81.92kB</span><br><span class="line">3bfda742b4b4: Loading layer [==================================================&gt;]  15.14MB/15.14MB</span><br><span class="line">6ed2fe854cdb: Loading layer [==================================================&gt;]  2.634MB/2.634MB</span><br><span class="line">dddc1a8d1029: Loading layer [==================================================&gt;]  2.374MB/2.374MB</span><br><span class="line">269fbc668e52: Loading layer [==================================================&gt;]  2.307MB/2.307MB</span><br><span class="line">c12665b38039: Loading layer [==================================================&gt;]  5.632kB/5.632kB</span><br><span class="line">52f2403acee0: Loading layer [==================================================&gt;]  2.048kB/2.048kB</span><br><span class="line">260212c608b3: Loading layer [==================================================&gt;]  3.584kB/3.584kB</span><br><span class="line">0eca2613dc76: Loading layer [==================================================&gt;]  3.584kB/3.584kB</span><br><span class="line">29a9d19d38b2: Loading layer [==================================================&gt;]  60.42kB/60.42kB</span><br><span class="line">da0a9db5694c: Loading layer [==================================================&gt;]  60.93kB/60.93kB</span><br><span class="line">Loaded image: quay.io/bitnami/nginx:latest</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看目前鏡像清單，成功的匯入囉</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop# docker images</span><br><span class="line">REPOSITORY              TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">quay.io/bitnami/nginx   latest    fef44885d7d3   16 hours ago   89.4MB</span><br></pre></td></tr></table></figure>

<h2 id="5-Dockerfile介紹"><a href="#5-Dockerfile介紹" class="headerlink" title="5. Dockerfile介紹"></a>5. Dockerfile介紹</h2><p>官網的dockerfile 說明</p>
<blockquote>
<p>Docker can build images automatically by reading the instructions from a <code>Dockerfile</code>. A Dockerfile is a <code>text</code> document that contains all the commands a user could call on the command line to assemble an image. Using docker build users can create an automated build that executes several command-line instructions in succession.</p>
</blockquote>
<ul>
<li>Dockerfile 是用於構建於docker鏡像的文件<ul>
<li>也可以說是一個構建的腳本</li>
</ul>
</li>
<li>Dockerfile 裡面包含了構建鏡像所需的”指令”</li>
<li>Dockerfile有其特定的語法規則</li>
</ul>
<h2 id="6-鏡像構建準備"><a href="#6-鏡像構建準備" class="headerlink" title="6. 鏡像構建準備"></a>6. 鏡像構建準備</h2><h3 id="6-1-舉例：執行一個python程式"><a href="#6-1-舉例：執行一個python程式" class="headerlink" title="6.1. 舉例：執行一個python程式"></a>6.1. 舉例：執行一個python程式</h3><p>假如我們要在一台ubuntu21.04上運行下面這個hello.py的python腳本</p>
<h4 id="6-1-1-python腳本"><a href="#6-1-1-python腳本" class="headerlink" title="6.1.1. python腳本"></a>6.1.1. python腳本</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello docker,I&#x27;m kite&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>所以我們這個環境需要兩樣東西<code>ubuntu21.04</code>、<code>python</code>，並且執行<code>python3 hello.py</code>腳本。</p>
<h4 id="6-1-2-具體Dockerfile結構"><a href="#6-1-2-具體Dockerfile結構" class="headerlink" title="6.1.2. 具體Dockerfile結構"></a>6.1.2. 具體Dockerfile結構</h4><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">21.04</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y python3.9 python3-pip python3.9-dev</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> hello.py /</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;python3&quot;</span>, <span class="string">&quot;/hello.py&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<p><code>FROM</code>：抓一個我們需要的<code>ubuntu版本</code></p>
<p><code>RUN</code>：下指令安裝python</p>
<p><code>ADD</code>：加入hello.py 腳本至鏡像內的根目錄</p>
<p><code>CMD</code>：以python3 方式執行 路徑<code>/hello.py</code>程式</p>
<h4 id="6-1-3-執行流程"><a href="#6-1-3-執行流程" class="headerlink" title="6.1.3. 執行流程"></a>6.1.3. 執行流程</h4><ol>
<li><p>建立目錄</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir genDockerImagesFolder</span><br></pre></td></tr></table></figure>
</li>
<li><p>進入目錄</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd genDockerImagesFolder/</span><br></pre></td></tr></table></figure>
</li>
<li><p>建立hello.py檔</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &quot;print(&#x27;hello,docker&#x27;)&quot; &gt; hello.py</span><br></pre></td></tr></table></figure>
</li>
<li><p>建立Dockerfile檔</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOT &gt;&gt; Dockerfile</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">FROM ubuntu:21.04</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">RUN apt-get update &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">&gt;     DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y python3.9 python3-pip python3.9-dev</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">ADD hello.py /</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">CMD [<span class="string">&quot;python3&quot;</span>, <span class="string">&quot;/hello.py&quot;</span>]</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">EOT</span></span><br></pre></td></tr></table></figure>

<p>說明：在build image檔時，必須在資料夾內有<code>Dockerfile</code>檔案，後續下build指令才會成功</p>
</li>
<li><p>確認資料夾檔案</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ll</span><br></pre></td></tr></table></figure>
</li>
<li><p>build 鏡像檔</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">指令格式</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">docker image build -t [imagename] [path]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">預設是lastest</span></span><br><span class="line">docker image build -t hello .</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">給tag</span></span><br><span class="line">docker image build -t hello:1.0 .</span><br></pre></td></tr></table></figure>

<p>說明：</p>
<p><code>-t</code>：指的是tag</p>
<p><code>imagename</code>：hello</p>
<p><code>path</code>：<code>.</code>(當前路徑)</p>
</li>
</ol>
<p>具體語法說明可以參考<a href="https://docs.docker.com/engine/reference/builder/">Dockerfile reference</a>，以下是練習建image的指令過程：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">建立目錄</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop# mkdir genDockerImagesFolder</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">進入目錄</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop# cd genDockerImagesFolder/</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">建立hello.py檔</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop/genDockerImagesFolder# echo &quot;print(&#x27;hello,docker&#x27;)&quot; &gt; hello.py</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">建立Dockerfile檔</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop/genDockerImagesFolder# cat &lt;&lt;EOT &gt;&gt; Dockerfile</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">FROM ubuntu:21.04</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">RUN apt-get update &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">&gt;     DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y python3.9 python3-pip python3.9-dev</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">ADD hello.py /</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">CMD [<span class="string">&quot;python3&quot;</span>, <span class="string">&quot;/hello.py&quot;</span>]</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">EOT</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">確認資料夾檔案</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop/genDockerImagesFolder# ll</span><br><span class="line">total 16</span><br><span class="line">drwxr-xr-x 2 root root 4096  二  17 11:58 ./</span><br><span class="line">drwxr-xr-x 3 kite kite 4096  二  17 11:50 ../</span><br><span class="line">-rw-r--r-- 1 root root  198  二  17 11:58 Dockerfile</span><br><span class="line">-rw-r--r-- 1 root root   22  二  17 11:51 hello.py</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">build 鏡像檔</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop/genDockerImagesFolder# docker image build -t hello .</span><br><span class="line"></span><br><span class="line">Step 1/4 : FROM ubuntu:21.04</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">7cc39f89fa58</span></span><br><span class="line">Step 2/4 : RUN apt-get update &amp;&amp;     DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y python3.9 </span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">Step 3/4 : ADD hello.py /</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">864392501c61</span></span><br><span class="line">Step 4/4 : CMD [&quot;python3&quot;, &quot;/hello.py&quot;]</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="keyword">in</span> 6ddb6041461e</span></span><br><span class="line">Removing intermediate container 6ddb6041461e</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">698fa0b38d79</span></span><br><span class="line">Successfully built 698fa0b38d79</span><br><span class="line">Successfully tagged hello:latest</span><br></pre></td></tr></table></figure>

<p>build 的過程需要一些時間，等到我們看到suceccfully之後，代表已經完成了，接著檢查看看下指令<code>docker images</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@kite-virtual-machine:/home/kite/Desktop/genDockerImagesFolder# docker images</span><br><span class="line">REPOSITORY              TAG       IMAGE ID       CREATED          SIZE</span><br><span class="line">hello                   latest    698fa0b38d79   15 minutes ago   206MB</span><br></pre></td></tr></table></figure>

<p>hello 鏡像檔就出現在清單中囉，如果要導出鏡像記得再看前面的部分進行操作即可。</p>
<p>試著用<code>it</code> 交互的相方運行hello 容器如下：&#96;</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@kite-virtual-machine:/home/kite/Desktop/genDockerImagesFolder# docker run -it hello</span><br><span class="line">hello,docker</span><br></pre></td></tr></table></figure>

<h2 id="7-鏡像分享"><a href="#7-鏡像分享" class="headerlink" title="7. 鏡像分享"></a>7. 鏡像分享</h2><ol>
<li><p>先註冊一個<code>Dockerhub</code>帳號</p>
</li>
<li><p>因為先前建立的鏡像沒有加上用戶名，所以可以通過以下兩個方式做準備</p>
</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重新build一個並加入<span class="built_in">id</span></span></span><br><span class="line">docker image build -t kitefree/hello .</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">針對既有的hello鏡像 複製並新增一個</span></span><br><span class="line">docker image tag hello kitefree/hello:1.0</span><br></pre></td></tr></table></figure>

<p>執行登入指令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker login</span><br></pre></td></tr></table></figure>

<p>登出為</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker logout</span><br></pre></td></tr></table></figure>

<p>會要求輸入帳號密碼，登入完成後進行布署</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker image push kitefree/hello:1.0</span><br></pre></td></tr></table></figure>

<p>過程如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@kite-virtual-machine:/home/kite/Desktop/genDockerImagesFolder# docker login</span><br><span class="line">Login with your Docker ID to push and pull images from Docker Hub. If you don&#x27;t have a Docker ID, head over to https://hub.docker.com to create one.</span><br><span class="line">Username: kitefree</span><br><span class="line">Password: </span><br><span class="line">WARNING! Your password will be stored unencrypted in /root/.docker/config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/login/#credentials-store</span><br><span class="line"></span><br><span class="line">Login Succeeded</span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop/genDockerImagesFolder# docker image push kitefree/hello:1.0</span><br><span class="line">The push refers to repository [docker.io/kitefree/hello]</span><br><span class="line">3948f6982f11: Pushed </span><br><span class="line">24ac8aef82f9: Pushed </span><br><span class="line">dca6a631e9bb: Mounted from library/ubuntu </span><br><span class="line">1.0: digest: sha256:8f7be9cd060a67593a089a4111b8c5a3127e324c49aeed0843f578a100eba2b6 size: 948</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>接著登入後台查看一下結果</p>
<p><img src="https://i.imgur.com/U7yXbV0.png" alt="image-20220218091548874"></p>
<p><img src="https://i.imgur.com/5a0sZqq.png" alt="image-20220218091724911"></p>
<p>我們試著pull鏡像檔下來，我們先把本地端的鏡像檔刪除。</p>
<p>拉取鏡像語法</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull kitefree/hello:1.0</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">刪除本地鏡像</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop/genDockerImagesFolder# docker image rm kitefree/hello:1.0</span><br><span class="line">Untagged: kitefree/hello:1.0</span><br><span class="line">Untagged: kitefree/hello@sha256:8f7be9cd060a67593a089a4111b8c5a3127e324c49aeed0843f578a100eba2b6</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">拉取鏡像</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop/genDockerImagesFolder# docker pull kitefree/hello:1.0</span><br><span class="line">1.0: Pulling from kitefree/hello</span><br><span class="line">Digest: sha256:8f7be9cd060a67593a089a4111b8c5a3127e324c49aeed0843f578a100eba2b6</span><br><span class="line">Status: Downloaded newer image for kitefree/hello:1.0</span><br><span class="line">docker.io/kitefree/hello:1.0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">檢查本地鏡像</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop/genDockerImagesFolder# docker images</span><br><span class="line">REPOSITORY              TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">kitefree/hello          1.0       698fa0b38d79   17 hours ago   206MB</span><br></pre></td></tr></table></figure>

<h2 id="8-通過commit創建鏡像"><a href="#8-通過commit創建鏡像" class="headerlink" title="8. 通過commit創建鏡像"></a>8. 通過commit創建鏡像</h2><p>我們目標是進入容器內部直接修改文件，停用再啟用容器，我們會發現改的東西已經成功寫入到容器內部了。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">啟動一個nginx容器</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop# docker run -d -p 8000:80 --name nginx01 nginx</span><br><span class="line">5544cc14e2af3ed16dc875a9bb9b3594066bc695f94272ce6f6794f4a66714a7</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">進入容器內部</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop# docker exec -it 554 sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改首頁文字</span></span><br><span class="line">echo &quot;hello,docker&quot; &gt; /usr/share/nginx/html/index.html</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">離開容器</span></span><br><span class="line">exit</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">停止容器</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop# docker container stop 554</span><br><span class="line">554     </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">啟用容器</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop# docker container start 554</span><br><span class="line">554</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看容器異動的差異</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop# docker diff nginx01</span><br><span class="line">C /var</span><br><span class="line">C /var/cache</span><br><span class="line">C /var/cache/nginx</span><br><span class="line">A /var/cache/nginx/fastcgi_temp</span><br><span class="line">A /var/cache/nginx/proxy_temp</span><br><span class="line">A /var/cache/nginx/scgi_temp</span><br><span class="line">A /var/cache/nginx/uwsgi_temp</span><br><span class="line">A /var/cache/nginx/client_temp</span><br><span class="line">C /usr</span><br><span class="line">C /usr/share</span><br><span class="line">C /usr/share/nginx</span><br><span class="line">C /usr/share/nginx/html</span><br><span class="line">C /usr/share/nginx/html/index.html</span><br><span class="line">C /run</span><br><span class="line">A /run/nginx.pid</span><br><span class="line">C /etc</span><br><span class="line">C /etc/nginx</span><br><span class="line">C /etc/nginx/conf.d</span><br><span class="line">C /etc/nginx/conf.d/default.conf</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>以瀏覽器去查看webserver 的確在啟動後是有修改還是有效的。</p>
<p><img src="https://i.imgur.com/AuJjhzo.png" alt="image-20220218102300209"></p>
<p>接著，我們來玩玩看用commit 指令創建一個鏡像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">指定容器<span class="built_in">id</span> 554 進行commit 並創建名為 kitefree/nginx 儲存庫</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop# docker commit 554 kitefree/nginx</span><br><span class="line">sha256:799b17a2576601b6db1431f9d5b901843470ad9180e9c99aa86c0d1a7aef4569</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看目前鏡像清單</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop# docker images</span><br><span class="line">REPOSITORY              TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">kitefree/nginx          latest    799b17a25766   8 seconds ago   142MB</span><br><span class="line">nginx                   latest    c316d5a335a5   3 weeks ago     142MB</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">啟動容器 並給port 8001</span> </span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop# docker run -d -p 8001:80 --name kite_nginx kitefree/nginx </span><br><span class="line">4416889d90c4dc29292cbbe3cc35184d240d491975a2367c800651329ddc5627</span><br></pre></td></tr></table></figure>

<p>在以瀏覽器方式查看，我們會看到一樣為<code>hello,docker</code>的網頁顯示訊息。</p>
<h2 id="9-聊聊scratch鏡像"><a href="#9-聊聊scratch鏡像" class="headerlink" title="9. 聊聊scratch鏡像"></a>9. 聊聊scratch鏡像</h2><p>是一個empty image ，無法通過docker pull 拉取鏡像，但是可以<code>FROM scratch</code> 構建鏡像。在工作上比較少用到scratch鏡像，所以簡單的玩一下</p>
<p>以下為測試的執行過程</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">建立一個c語言的程式碼</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop/genDockerImagesFolder# cat &lt;&lt;EOT &gt;&gt;hello.c</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="comment">#include&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">&gt; int main()</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">&#123;</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">    <span class="built_in">printf</span>(<span class="string">&quot;hello docker\n&quot;</span>);</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">&#125;</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">EOT</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">執行編譯產出hello檔</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop/genDockerImagesFolder# gcc --static -o hello hello.c</span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop/genDockerImagesFolder# ls</span><br><span class="line">Dockerfile  hello  hello.c  hello.py</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">測試執行是否正常輸入字串</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop/genDockerImagesFolder# ./hello</span><br><span class="line">hello docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">建立dockerfile檔案</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop/genDockerImagesFolder# cat &lt;&lt;EOT &gt;&gt;Dockerfile</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">FROM scratch</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">ADD hello /</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">CMD [<span class="string">&quot;/hello&quot;</span>]</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">EOT</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">構建鏡像檔</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop/genDockerImagesFolder# docker build -t kitefree/scratch .</span><br><span class="line">Sending build context to Docker daemon  876.5kB</span><br><span class="line">Step 1/3 : FROM scratch</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">Step 2/3 : ADD hello /</span></span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">f95110c6fba2</span></span><br><span class="line">Step 3/3 : CMD [&quot;/hello&quot;]</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="keyword">in</span> 3a60c6a60ed1</span></span><br><span class="line">Removing intermediate container 3a60c6a60ed1</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">f39f26ad08a6</span></span><br><span class="line">Successfully built f39f26ad08a6</span><br><span class="line">Successfully tagged kitefree/scratch:latest</span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop/genDockerImagesFolder# docker images</span><br><span class="line">REPOSITORY              TAG       IMAGE ID       CREATED             SIZE</span><br><span class="line">kitefree/scratch        latest    f39f26ad08a6   7 seconds ago       872kB</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">啟動容器執行 ，這邊多加了<span class="built_in">rm</span>參數是指執行完後會自動刪除容器</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop/genDockerImagesFolder# docker run -it --rm kitefree/scratch </span><br><span class="line">hello docker</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="10-拉取次數的計算"><a href="#10-拉取次數的計算" class="headerlink" title="10. 拉取次數的計算"></a>10. 拉取次數的計算</h2><p>如果是以匿名方式拉取，會以IP方式計算</p>
<p>如果是以帳號登入方式拉取，那計算方式就會計算在帳號上面。當在公司同一個網段時，如果都用帳號的部分去進行拉取，基本上比較不用擔心有次數上的問題。</p>
<p>拉取次數目前的使用狀況可以透過curl request 指令進行查詢</p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker 系列 - (4) Dockerfile容器的儲存</title>
    <url>/2022/02/24/2022-02-23%20Docker%20%E7%B3%BB%E5%88%97%20-%20(4)%20Dockerfile%E5%AE%B9%E5%99%A8%E7%9A%84%E5%84%B2%E5%AD%98/</url>
    <content><![CDATA[<h2 id="1-容器儲存介紹"><a href="#1-容器儲存介紹" class="headerlink" title="1. 容器儲存介紹"></a>1. 容器儲存介紹</h2><p>預設情況下，在運行中的容器裡創建的文件，被保存在一個可寫的容器層：</p>
<ul>
<li>如果容器被刪除了，則數據也沒有了</li>
<li>這個可寫的容器層是和特定的容器綁定的，也就是這些數據無法方便的和其它容器共享</li>
</ul>
<span id="more"></span>


<p>Docker主要提供了三種方式做數據的持久化</p>
<ul>
<li><p>Data Volume</p>
<ul>
<li>由Docker管理，(&#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;linux)，持久化數據的最好方式</li>
</ul>
</li>
<li><p>Bind Mount</p>
<ul>
<li>由用戶指定存儲的數據具體mount在系統什麼位置</li>
</ul>
</li>
<li><p>tmpfs Mount</p>
<ul>
<li>這個比較少用到，暫時先不進行介紹</li>
</ul>
</li>
</ul>
<p><img src="https://i.imgur.com/HS1l6Zs.png" alt="docker-volume"></p>
<h2 id="2-Data-Volume"><a href="#2-Data-Volume" class="headerlink" title="2. Data Volume"></a>2. Data Volume</h2><p>我們來探討如何進行數據的持久化。</p>
<ul>
<li>“一個運行中的docker image”</li>
<li>實質是複製image全在image最上層加上一層<code>read-write</code>的層(稱之為container layer，容器層)</li>
<li>基於同一個IMAGE可以創建多個container</li>
</ul>
<p><img src="https://i.imgur.com/9j4ef71.png" alt="img"></p>
<h3 id="2-1-環境準備"><a href="#2-1-環境準備" class="headerlink" title="2.1. 環境準備"></a>2.1. 環境準備</h3><p>準備一個Dockerfile和一個my-cron的文件</p>
<p><code>dockerfile-cron</code>檔</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> alpine:latest</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apk update</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apk --no-cache add curl</span></span><br><span class="line"><span class="keyword">ENV</span> SUPERCRONIC_URL=https://github.com/aptible/supercronic/releases/download/v0.<span class="number">1.12</span>/supercronic-linux-amd64 \</span><br><span class="line">    SUPERCRONIC=supercronic-linux-amd64 \</span><br><span class="line">    SUPERCRONIC_SHA1SUM=<span class="number">048</span>b95b48b708983effb2e5c935a1ef8483d9e3e</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> curl -fsSLO <span class="string">&quot;<span class="variable">$SUPERCRONIC_URL</span>&quot;</span> \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;SUPERCRONIC_SHA1SUM&#125;</span>  <span class="variable">$&#123;SUPERCRONIC&#125;</span>&quot;</span> | <span class="built_in">sha1sum</span> -c - \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; <span class="built_in">chmod</span> +x <span class="string">&quot;<span class="variable">$SUPERCRONIC</span>&quot;</span> \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; <span class="built_in">mv</span> <span class="string">&quot;<span class="variable">$SUPERCRONIC</span>&quot;</span> <span class="string">&quot;/usr/local/bin/<span class="variable">$&#123;SUPERCRONIC&#125;</span>&quot;</span> \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; <span class="built_in">ln</span> -s <span class="string">&quot;/usr/local/bin/<span class="variable">$&#123;SUPERCRONIC&#125;</span>&quot;</span> /usr/local/bin/supercronic</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> my-cron /app/my-cron</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#volume 可以定義多個，這邊只定義一個</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"> [<span class="string">&quot;/app&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># RUN cron job</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;/usr/local/bin/supercronic&quot;</span>, <span class="string">&quot;/app/my-cron&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<p><code>my-cron</code>檔</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">*/1 * * * * date &gt;&gt; /app/test.txt</span><br></pre></td></tr></table></figure>





<p>資料夾結構</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── dockerfile-cron</span><br><span class="line">├── my-cron</span><br></pre></td></tr></table></figure>



<h3 id="2-2-基本使用volume"><a href="#2-2-基本使用volume" class="headerlink" title="2.2. 基本使用volume"></a>2.2. 基本使用volume</h3><h4 id="2-2-1-搭建環境"><a href="#2-2-1-搭建環境" class="headerlink" title="2.2.1. 搭建環境"></a>2.2.1. 搭建環境</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">建立dockefile-cron檔案，請自行完成腳本內容</span></span><br><span class="line">kite@kite-virtual-machine:~/Desktop/genDockerImagesFolder$ touch dockerfile-cron</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">建立my-cron檔案，請自行完成腳本內容</span></span><br><span class="line">kite@kite-virtual-machine:~/Desktop/genDockerImagesFolder$ touch my-cron</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">建立鏡像檔</span></span><br><span class="line">kite@kite-virtual-machine:~/Desktop/genDockerImagesFolder$ sudo docker image build -f dockerfile-cron -t my-cron .</span><br><span class="line">Sending build context to Docker daemon  892.4kB</span><br><span class="line">Step 1/9 : FROM alpine:latest</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">Successfully built a5105bc596ec</span><br><span class="line">Successfully tagged my-cron:latest</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看鏡像檔清單</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop/pythonworkspace# docker images</span><br><span class="line">REPOSITORY       TAG                IMAGE ID       CREATED          SIZE</span><br><span class="line">my-cron          latest             a6e1e40dd6bb   15 minutes ago   45MB</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">啟動並創建容器</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop/pythonworkspace# docker run -d my-cron</span><br><span class="line">97d956e771f6a833368d6ecc693aa79fb300eb04cfc0b435bc665652013401ec</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看容器清單</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop/pythonworkspace# docker container ps -a</span><br><span class="line">CONTAINER ID   IMAGE    COMMAND                  CREATED         STATUS       PORTS   NAMES</span><br><span class="line">97d956e771f6   my-cron  &quot;/usr/local/bin/supe…&quot;   5 seconds ago   Up 4 seconds         tender_mahavira</span><br></pre></td></tr></table></figure>

<h4 id="2-2-2-確認crontab執行狀況"><a href="#2-2-2-確認crontab執行狀況" class="headerlink" title="2.2.2. 確認crontab執行狀況"></a>2.2.2. 確認crontab執行狀況</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">進入容器</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop/pythonworkspace# docker exec -it 97d9 sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查詢檔案</span></span><br><span class="line">/app # ls</span><br><span class="line">my-cron   test.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看test.txt檔案</span></span><br><span class="line">/app # more test.txt</span><br><span class="line">Wed Feb 23 02:11:00 UTC 2022</span><br><span class="line">Wed Feb 23 02:12:00 UTC 2022</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">離開容器</span></span><br><span class="line">/app # exit</span><br></pre></td></tr></table></figure>

<h4 id="2-2-3-查看host檔案路徑-Mountpoint"><a href="#2-2-3-查看host檔案路徑-Mountpoint" class="headerlink" title="2.2.3. 查看host檔案路徑(Mountpoint)"></a>2.2.3. 查看host檔案路徑(Mountpoint)</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看volume 清單</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop/pythonworkspace# docker volume ls</span><br><span class="line">DRIVER    VOLUME NAME</span><br><span class="line">local     05b3074b5770b1a24b36493a3b1153a1070206d4600d19a1508714c9912dc5f5</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看volume映射資料</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop/pythonworkspace# docker volume inspect 05b3074b5770b1a24b36493a3b1153a1070206d4600d19a1508714c9912dc5f5</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;CreatedAt&quot;: &quot;2022-02-23T10:10:59+08:00&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Labels&quot;: null,</span><br><span class="line">        &quot;Mountpoint&quot;: &quot;/var/lib/docker/volumes/05b3074b5770b1a24b36493a3b1153a1070206d4600d19a1508714c9912dc5f5/_data&quot;,</span><br><span class="line">        &quot;Name&quot;: &quot;05b3074b5770b1a24b36493a3b1153a1070206d4600d19a1508714c9912dc5f5&quot;,</span><br><span class="line">        &quot;Options&quot;: null,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用<span class="built_in">ls</span> 加 mountpoint值的路徑，可以發現在host上也有test.txt檔案</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop/pythonworkspace# ls /var/lib/docker/volumes/05b3074b5770b1a24b36493a3b1153a1070206d4600d19a1508714c9912dc5f5/_data</span><br><span class="line">my-cron  test.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用more查看host的test.txt檔案，資料與容器內部一致</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop/pythonworkspace# more /var/lib/docker/volumes/05b3074b5770b1a24b36493a3b1153a1070206d4600d19a1508714c9912dc5f5/_data/test.txt</span><br><span class="line">Wed Feb 23 02:11:00 UTC 2022</span><br><span class="line">Wed Feb 23 02:12:00 UTC 2022</span><br></pre></td></tr></table></figure>

<h4 id="2-2-4-驗證停止container後，host檔案是否仍存在"><a href="#2-2-4-驗證停止container後，host檔案是否仍存在" class="headerlink" title="2.2.4. 驗證停止container後，host檔案是否仍存在"></a>2.2.4. 驗證停止container後，host檔案是否仍存在</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">停止容器</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop/pythonworkspace# docker container stop 97d</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">驗證，就算停止容器host檔案還是存在的</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop/pythonworkspace# more /var/lib/docker/volumes/05b3074b5770b1a24b36493a3b1153a1070206d4600d19a1508714c9912dc5f5/_data/test.txt</span><br><span class="line">Wed Feb 23 02:11:00 UTC 2022</span><br><span class="line">Wed Feb 23 02:12:00 UTC 2022</span><br></pre></td></tr></table></figure>

<h4 id="2-2-5-發現再啟用新的容器-volume重建一個新的區域"><a href="#2-2-5-發現再啟用新的容器-volume重建一個新的區域" class="headerlink" title="2.2.5. 發現再啟用新的容器,volume重建一個新的區域"></a>2.2.5. 發現再啟用新的容器,volume重建一個新的區域</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">再啟動一個新的container</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop/pythonworkspace# docker container run -d my-cron</span><br><span class="line">17f1ffa9999a697540fb4aa81a695b66d96b9f57ac05db6af8f9026da4bdb6a7</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看volume清單，會發現多了一個b49bbb，代表這個容器使用了一個新的硬碟空間</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop/pythonworkspace# docker volume ls</span><br><span class="line">DRIVER    VOLUME NAME</span><br><span class="line">local     05b3074b5770b1a24b36493a3b1153a1070206d4600d19a1508714c9912dc5f5</span><br><span class="line">local     b49bbb9e19dedb0bb36dc3b734ec354eb25e477212dbb5a5156416c63693a25d</span><br></pre></td></tr></table></figure>

<h4 id="2-2-6-如何接續上一個volume資料？"><a href="#2-2-6-如何接續上一個volume資料？" class="headerlink" title="2.2.6. 如何接續上一個volume資料？"></a>2.2.6. 如何接續上一個volume資料？</h4><p>如果container停止後，再繼續啟用一個新的container，我們想要接續上一個container的資料繼續記錄。如何做到呢？</p>
<p>首先，我們把之前實驗的資料進行清空的動作：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看目前所有container包含停止的container</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop/pythonworkspace# docker container ps -a</span><br><span class="line">CONTAINER ID   IMAGE    COMMAND                  ...</span><br><span class="line">17f1ffa9999a   my-cron  &quot;/usr/local/bin/supe…&quot;   ...</span><br><span class="line">97d956e771f6   my-cron  &quot;/usr/local/bin/supe…&quot;   ...</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">強制停止container</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop/pythonworkspace# docker container rm -f 17f1 97d9</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">刪除所有volume，會詢問是否繼續</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop/pythonworkspace# docker volume prune</span><br><span class="line">WARNING! This will remove all local volumes not used by at least one container.</span><br><span class="line">Are you sure you want to continue? [y/N] y</span><br><span class="line">Deleted Volumes:</span><br><span class="line">05b3074b5770b1a24b36493a3b1153a1070206d4600d19a1508714c9912dc5f5</span><br><span class="line">b49bbb9e19dedb0bb36dc3b734ec354eb25e477212dbb5a5156416c63693a25d</span><br><span class="line"></span><br><span class="line">Total reclaimed space: 1.402kB</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看volume 都清空了</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop/pythonworkspace# docker volume ls</span><br><span class="line">DRIVER    VOLUME NAME</span><br></pre></td></tr></table></figure>



<p>此項任務**<code>-v</code> 我是主角**：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker container run -d -v [自定義volume名稱]:[dockerfile內必須有的設定值] [image name]</span><br></pre></td></tr></table></figure>



<p>執行過程：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用 -v 參數，也就是代表volume的意思 cron-data volume 名稱，而冒號(:) 後面的 /app 必須是在dockerfile有指名的volume</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop/pythonworkspace# docker container run -d -v cron-data:/app my-cron</span><br><span class="line">6150f7169a578f27af13997ec8d8f9ca2610fa4c7aae0b97a57bef5bf9d845d6</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看一下volume 就會看到以cron-data為名稱的volume</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop/pythonworkspace# docker volume ls</span><br><span class="line">DRIVER    VOLUME NAME</span><br><span class="line">local     cron-data</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看volume資料，mountpoint路徑就變簡潔了</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop/pythonworkspace# docker volume inspect cron-data</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;CreatedAt&quot;: &quot;2022-02-23T11:24:59+08:00&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Labels&quot;: null,</span><br><span class="line">        &quot;Mountpoint&quot;: &quot;/var/lib/docker/volumes/cron-data/_data&quot;,</span><br><span class="line">        &quot;Name&quot;: &quot;cron-data&quot;,</span><br><span class="line">        &quot;Options&quot;: null,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><strong>進行驗證，是否有接續之前的資料</strong></p>
<p>我們會發現進入container後看<code>test.txt</code>文件內容，是有包含之前上一次container 的資料在裡面哦。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">先刪除之前的container</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop/pythonworkspace# docker container rm -f 6150</span><br><span class="line">6150</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">再次創建container</span> </span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop/pythonworkspace# docker container run -d -v cron-data:/app my-cron</span><br><span class="line">f61223479947f23bb6750d25aa22427e3b8dbb92875af9d4c3dbac761703ea29</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">進入container</span> </span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop/pythonworkspace# docker exec -it f6122 sh</span><br><span class="line">/app # ls</span><br><span class="line">my-cron   test.txt</span><br><span class="line">/app # more test.txt</span><br><span class="line">Wed Feb 23 03:25:00 UTC 2022</span><br><span class="line">Wed Feb 23 03:26:00 UTC 2022</span><br><span class="line">Wed Feb 23 03:27:00 UTC 2022</span><br><span class="line">Wed Feb 23 03:28:00 UTC 2022</span><br><span class="line">Wed Feb 23 03:29:00 UTC 2022</span><br><span class="line">Wed Feb 23 03:30:00 UTC 2022</span><br><span class="line">/app # exit</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<p>註記：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">刪除所有鏡像</span></span><br><span class="line">docker system prune</span><br><span class="line"></span><br><span class="line">docker volume rm $(docker volume ls -qf dangling=true)</span><br></pre></td></tr></table></figure>



<p>網站推薦</p>
<p><a href="https://crontab.guru/">crontab轉換</a></p>
<h2 id="3-數據持久化之Bind-Mount"><a href="#3-數據持久化之Bind-Mount" class="headerlink" title="3. 數據持久化之Bind Mount"></a>3. 數據持久化之Bind Mount</h2><p>複習一下在dockerfile裡面定義了<code>VOLUME</code>，如下：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> alpine:latest</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apk update</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apk --no-cache add curl</span></span><br><span class="line"><span class="keyword">ENV</span> SUPERCRONIC_URL=https://github.com/aptible/supercronic/releases/download/v0.<span class="number">1.12</span>/supercronic-linux-amd64 \</span><br><span class="line">    SUPERCRONIC=supercronic-linux-amd64 \</span><br><span class="line">    SUPERCRONIC_SHA1SUM=<span class="number">048</span>b95b48b708983effb2e5c935a1ef8483d9e3e</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> curl -fsSLO <span class="string">&quot;<span class="variable">$SUPERCRONIC_URL</span>&quot;</span> \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;SUPERCRONIC_SHA1SUM&#125;</span>  <span class="variable">$&#123;SUPERCRONIC&#125;</span>&quot;</span> | <span class="built_in">sha1sum</span> -c - \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; <span class="built_in">chmod</span> +x <span class="string">&quot;<span class="variable">$SUPERCRONIC</span>&quot;</span> \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; <span class="built_in">mv</span> <span class="string">&quot;<span class="variable">$SUPERCRONIC</span>&quot;</span> <span class="string">&quot;/usr/local/bin/<span class="variable">$&#123;SUPERCRONIC&#125;</span>&quot;</span> \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; <span class="built_in">ln</span> -s <span class="string">&quot;/usr/local/bin/<span class="variable">$&#123;SUPERCRONIC&#125;</span>&quot;</span> /usr/local/bin/supercronic</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> my-cron /app/my-cron</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#volume 可以定義多個，這邊只定義一個</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"> [<span class="string">&quot;/app&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># RUN cron job</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;/usr/local/bin/supercronic&quot;</span>, <span class="string">&quot;/app/my-cron&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<p>如果希望都是以參數方式定義<code>VOLUME</code>的話，在dockerfile的部分就可以不用去寫這段語法。</p>
<p>另外，windows 在使用volume時會有一些狀況。還記得windows的docker環境，其實是run在linux虛擬層裡。所以在使用<code>docker volume inspect</code>指令查閱<code>Mountpoint</code>的路徑是一個linux的路徑。但是在windows作業系統是摸不到這一層的。</p>
<p>因此，在windows環境使用<code>Bind Mount</code>方式好用一些。試著在windows運行，延用先前的<code>dockerfile-cron</code>檔案及<code>my-cron</code>腳本，玩玩看：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看目前的images</span></span><br><span class="line"><span class="built_in">PS</span> E:\dockerworkspace&gt; docker images</span><br><span class="line">REPOSITORY                       TAG           IMAGE ID       CREATED          SIZE</span><br><span class="line">my<span class="literal">-cron</span>                          latest        f356932e5078   <span class="number">22</span> seconds ago   <span class="number">24.8</span>MB</span><br><span class="line"></span><br><span class="line"><span class="comment">#創建並運行容器,$&#123;pwd&#125; 指的是當前目錄</span></span><br><span class="line"><span class="built_in">PS</span> E:\dockerworkspace&gt; docker container run <span class="literal">-d</span> <span class="literal">-v</span> <span class="variable">$</span>&#123;<span class="built_in">pwd</span>&#125;:/app my<span class="literal">-cron</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#我們會看到在windows底下，排程時間到了就自動產生test.txt檔案</span></span><br><span class="line"><span class="built_in">PS</span> E:\dockerworkspace&gt; tree /f /a</span><br><span class="line">列出磁碟區 <span class="keyword">Data</span> 的資料夾 PATH</span><br><span class="line">磁碟區序號為 <span class="number">3</span>A21<span class="literal">-AA41</span></span><br><span class="line">E:.</span><br><span class="line">    Dockerfile</span><br><span class="line">    my<span class="literal">-cron</span></span><br><span class="line">    test.txt</span><br><span class="line"></span><br><span class="line"><span class="comment">#輸出檔案內容</span></span><br><span class="line"><span class="built_in">PS</span> E:\dockerworkspace&gt; <span class="built_in">type</span> test.txt</span><br><span class="line">Wed Feb <span class="number">23</span> <span class="number">08</span>:<span class="number">38</span>:<span class="number">00</span> UTC <span class="number">2022</span></span><br><span class="line">Wed Feb <span class="number">23</span> <span class="number">08</span>:<span class="number">39</span>:<span class="number">00</span> UTC <span class="number">2022</span></span><br></pre></td></tr></table></figure>

<h2 id="4-Bind-Mount練習之docker開發環境"><a href="#4-Bind-Mount練習之docker開發環境" class="headerlink" title="4. Bind Mount練習之docker開發環境"></a>4. Bind Mount練習之docker開發環境</h2><p>host沒有編譯環境，希望透過container來 bind相同的資料區塊，用這個方式的確很輕鬆產生編譯後的檔案。</p>
<p>當前目錄指令說明</p>
<ul>
<li>linux<ul>
<li>$(pwd)</li>
</ul>
</li>
<li>windows<ul>
<li>${pwd}</li>
</ul>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看目前目錄檔案，目前只有一個hello.c</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop/bindMountArea# ls</span><br><span class="line">hello.c</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">創建並運行container $(<span class="built_in">pwd</span>) 指的是當前目錄</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop/bindMountArea# docker container run -it -v $(pwd):/app gcc:9.4</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">已進入容器，查看列表</span></span><br><span class="line">root@e058f803400b:/# ls                 </span><br><span class="line">app  bin  boot	dev  etc  home	lib  lib64  media  mnt	opt  proc  root  run  sbin  srv  sys  tmp  usr	var</span><br><span class="line"></span><br><span class="line">root@e058f803400b:/# cd app</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看的確在/app資料夾底下有跟host一樣的hello.c檔案</span></span><br><span class="line">root@e058f803400b:/app# ls</span><br><span class="line">hello.c</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">進行編譯</span></span><br><span class="line">root@e058f803400b:/app# gcc -o hello hello.c</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">編完譯後多出一個hello檔</span></span><br><span class="line">root@e058f803400b:/app# ls</span><br><span class="line">hello  hello.c</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">小玩一下</span></span><br><span class="line">root@e058f803400b:/app# ./hello abc</span><br><span class="line">hello abc</span><br><span class="line"></span><br><span class="line">root@e058f803400b:/app# ./hello kite</span><br><span class="line">hello kite</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">退出容器</span></span><br><span class="line">root@e058f803400b:/app# exit</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">在host的確也有hello檔案</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop/bindMountArea# ls</span><br><span class="line">hello  hello.c</span><br></pre></td></tr></table></figure>

<h2 id="5-機器之間共享數據"><a href="#5-機器之間共享數據" class="headerlink" title="5. 機器之間共享數據"></a>5. 機器之間共享數據</h2><p>待補</p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker 系列 - (3) Dockerfile完全指南</title>
    <url>/2022/02/22/2022-02-22%20Docker%20%E7%B3%BB%E5%88%97%20-%20(3)%20Dockerfile%E5%AE%8C%E5%85%A8%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h2 id="1-如何選擇基礎鏡像-FROM"><a href="#1-如何選擇基礎鏡像-FROM" class="headerlink" title="1. 如何選擇基礎鏡像(FROM)"></a>1. 如何選擇基礎鏡像(FROM)</h2><h3 id="1-1-基本原則"><a href="#1-1-基本原則" class="headerlink" title="1.1. 基本原則"></a>1.1. 基本原則</h3><ul>
<li>官方鏡像優非官方的鏡像，如果沒有官方鏡像，則儘量選擇Dockerfile開源的</li>
<li>固定版本tag而不是每次都使用latest</li>
<li>儘量選擇體積小的鏡像</li>
</ul>
<span id="more"></span>


<p>準備一個<code>index.html</code>文件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello Docker<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>準備一個<code>Dockerfile</code>文件</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> nginx:<span class="number">1.21</span>.<span class="number">0</span>-alpine</span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> index.html /usr/share/nginx/html/index.html</span></span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker image ls</span><br><span class="line">REPOSITORY      TAG             IMAGE ID       CREATED          SIZE</span><br><span class="line">bitnami/nginx   1.18.0          dfe237636dde   28 minutes ago   89.3MB</span><br><span class="line">nginx           1.21.0-alpine   a6eb2a334a9f   2 days ago       22.6MB</span><br><span class="line">nginx           1.21.0          d1a364dc548d   2 days ago       133MB</span><br></pre></td></tr></table></figure>

<p><code>alpine</code> 這個版本是一個非常輕量的linux 系統，在nginx、python都會看得到這樣的組合</p>
<p><img src="https://i.imgur.com/9zhQmDo.png" alt="image-20220218151904995"></p>
<blockquote>
<p>A minimal Docker image based on Alpine Linux with a complete package index and only 5 MB in size!</p>
</blockquote>
<p><img src="https://i.imgur.com/Aet8fLy.png" alt="image-20220218152341367"></p>
<h2 id="2-通過RUN執行指令"><a href="#2-通過RUN執行指令" class="headerlink" title="2. 通過RUN執行指令"></a>2. 通過RUN執行指令</h2><p><code>RUN</code> 主要用於在image裡執行指令，比如安裝軟體、下載文件…等。</p>
<p>如果是了6個<code>RUN</code>就會建立出6個分層，通常不會這樣寫，而且體積也會比較大。</p>
<p>原指令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">apt-get update</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">apt-get install wget</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">wget https://github.com/ipinfo/cli/releases/download/ipinfo-2.0.1/ipinfo_2.0.1_linux_amd64.tar.gz</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tar zxf ipinfo_2.0.1_linux_amd64.tar.gz</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mv</span> ipinfo_2.0.1_linux_amd64 /usr/bin/ipinfo</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">rm</span> -rf ipinfo_2.0.1_linux_amd64.tar.gz</span></span><br></pre></td></tr></table></figure>


<h3 id="2-1-Dockerfile-bad"><a href="#2-1-Dockerfile-bad" class="headerlink" title="2.1. Dockerfile.bad"></a>2.1. Dockerfile.bad</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">21.04</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install -y wget</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> wget https://github.com/ipinfo/cli/releases/download/ipinfo-2.0.1/ipinfo_2.0.1_linux_amd64.tar.gz</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> tar zxf ipinfo_2.0.1_linux_amd64.tar.gz</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">mv</span> ipinfo_2.0.1_linux_amd64 /usr/bin/ipinfo</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">rm</span> -rf ipinfo_2.0.1_linux_amd64.tar.gz</span></span><br></pre></td></tr></table></figure>



<p>鏡像的大小和分層</p>
<p>我們可以看到下面的history 多了好多個RUN ，每一個RUN都有佔幾個MB</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">建立鏡像檔 -f 參數可以指定dockerfile檔案</span></span><br><span class="line">docker image build -f Dockerfile.bad -t ipinfo-bad . </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker image <span class="built_in">ls</span></span></span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">ipinfo       latest    97bb429363fb   4 minutes ago   138MB</span><br><span class="line">ubuntu       21.04     478aa0080b60   4 days ago      74.1MB</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker image <span class="built_in">history</span> 97b</span></span><br><span class="line">IMAGE          CREATED         CREATED BY                                      SIZE      COMMENT</span><br><span class="line">97bb429363fb   4 minutes ago   RUN /bin/sh -c rm -rf ipinfo_2.0.1_linux_amd…   0B        buildkit.dockerfile.v0</span><br><span class="line">&lt;missing&gt;      4 minutes ago   RUN /bin/sh -c mv ipinfo_2.0.1_linux_amd64 /…   9.36MB    buildkit.dockerfile.v0</span><br><span class="line">&lt;missing&gt;      4 minutes ago   RUN /bin/sh -c tar zxf ipinfo_2.0.1_linux_am…   9.36MB    buildkit.dockerfile.v0</span><br><span class="line">&lt;missing&gt;      4 minutes ago   RUN /bin/sh -c wget https://github.com/ipinf…   4.85MB    buildkit.dockerfile.v0</span><br><span class="line">&lt;missing&gt;      4 minutes ago   RUN /bin/sh -c apt-get install -y wget # bui…   7.58MB    buildkit.dockerfile.v0</span><br><span class="line">&lt;missing&gt;      4 minutes ago   RUN /bin/sh -c apt-get update # buildkit        33MB      buildkit.dockerfile.v0</span><br><span class="line">&lt;missing&gt;      4 days ago      /bin/sh -c #(nop)  CMD [&quot;/bin/bash&quot;]            0B</span><br><span class="line">&lt;missing&gt;      4 days ago      /bin/sh -c mkdir -p /run/systemd &amp;&amp; echo &#x27;do…   7B</span><br><span class="line">&lt;missing&gt;      4 days ago      /bin/sh -c [ -z &quot;$(apt-get indextargets)&quot; ]     0B</span><br><span class="line">&lt;missing&gt;      4 days ago      /bin/sh -c set -xe   &amp;&amp; echo &#x27;#!/bin/sh&#x27; &gt; /…   811B</span><br><span class="line">&lt;missing&gt;      4 days ago      /bin/sh -c #(nop) ADD file:d6b6ba642344138dc…   74.1MB</span><br></pre></td></tr></table></figure>



<h3 id="2-2-Dockerfile-good"><a href="#2-2-Dockerfile-good" class="headerlink" title="2.2. Dockerfile.good"></a>2.2. Dockerfile.good</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM ubuntu:21.04</span><br><span class="line">RUN apt-get update &amp;&amp; \</span><br><span class="line">    apt-get install -y wget &amp;&amp; \</span><br><span class="line">    wget https://github.com/ipinfo/cli/releases/download/ipinfo-2.0.1/ipinfo_2.0.1_linux_amd64.tar.gz &amp;&amp; \</span><br><span class="line">    tar zxf ipinfo_2.0.1_linux_amd64.tar.gz &amp;&amp; \</span><br><span class="line">    mv ipinfo_2.0.1_linux_amd64 /usr/bin/ipinfo &amp;&amp; \</span><br><span class="line">    rm -rf ipinfo_2.0.1_linux_amd64.tar.gz</span><br></pre></td></tr></table></figure>



<p>我們可以看到下面的結果，只有一筆RUN的分層</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker image <span class="built_in">ls</span></span></span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED          SIZE</span><br><span class="line">ipinfo-new   latest    fe551bc26b92   5 seconds ago    124MB</span><br><span class="line">ipinfo       latest    97bb429363fb   16 minutes ago   138MB</span><br><span class="line">ubuntu       21.04     478aa0080b60   4 days ago       74.1MB</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker image <span class="built_in">history</span> fe5</span></span><br><span class="line">IMAGE          CREATED          CREATED BY                                      SIZE      COMMENT</span><br><span class="line">fe551bc26b92   16 seconds ago   RUN /bin/sh -c apt-get update &amp;&amp;     apt-get…   49.9MB    buildkit.dockerfile.v0</span><br><span class="line">&lt;missing&gt;      4 days ago       /bin/sh -c #(nop)  CMD [&quot;/bin/bash&quot;]            0B</span><br><span class="line">&lt;missing&gt;      4 days ago       /bin/sh -c mkdir -p /run/systemd &amp;&amp; echo &#x27;do…   7B</span><br><span class="line">&lt;missing&gt;      4 days ago       /bin/sh -c [ -z &quot;$(apt-get indextargets)&quot; ]     0B</span><br><span class="line">&lt;missing&gt;      4 days ago       /bin/sh -c set -xe   &amp;&amp; echo &#x27;#!/bin/sh&#x27; &gt; /…   811B</span><br><span class="line">&lt;missing&gt;      4 days ago       /bin/sh -c #(nop) ADD file:d6b6ba642344138dc…   74.1MB</span><br></pre></td></tr></table></figure>





<h2 id="3-文件複製和目錄操作-ADD-COPY-WORKDIR"><a href="#3-文件複製和目錄操作-ADD-COPY-WORKDIR" class="headerlink" title="3. 文件複製和目錄操作(ADD,COPY,WORKDIR)"></a>3. 文件複製和目錄操作(ADD,COPY,WORKDIR)</h2><p>往鏡像裡複製文件有兩種方式<code>COPY</code>、<code>ADD</code>。</p>
<h3 id="3-1-複製普通文件"><a href="#3-1-複製普通文件" class="headerlink" title="3.1. 複製普通文件"></a>3.1. 複製普通文件</h3><p><code>COPY</code>和<code>ADD</code>都可以把local的一個文件複製到鏡像裡，如果目標目錄不存在，則會自動建立</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FROM python:3.9.5-alpine3.13</span><br><span class="line">COPY hello.py /app/hello.py</span><br></pre></td></tr></table></figure>

<p>比如把本地的hello.py複製到&#x2F;app 目錄下，但app目錄不存在，所以會自動建立</p>
<h3 id="3-2-複製壓縮文件"><a href="#3-2-複製壓縮文件" class="headerlink" title="3.2. 複製壓縮文件"></a>3.2. 複製壓縮文件</h3><p><code>ADD</code>比較不一樣的地方是，如果複製的是一個gzip等壓縮文件時，<code>ADD</code>會幫助我們自動去解壓縮文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FROM python:3.9.5-alpine3.13</span><br><span class="line">ADD hello.tar.gz /app/</span><br></pre></td></tr></table></figure>

<h3 id="3-3-如何選擇"><a href="#3-3-如何選擇" class="headerlink" title="3.3. 如何選擇"></a>3.3. 如何選擇</h3><p>所有文件複製可以均使用<code>COPY</code>指令，僅在需要自動解壓縮的場合使用<code>ADD</code></p>
<h3 id="3-4-實驗記錄-COPY"><a href="#3-4-實驗記錄-COPY" class="headerlink" title="3.4. 實驗記錄 COPY"></a>3.4. 實驗記錄 COPY</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">建立tmp資料夾</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop/genDockerImagesFolder# mkdir tmp</span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop/genDockerImagesFolder# cd tmp</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">建a文件</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop/genDockerImagesFolder/tmp# touch a</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">建b文件</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop/genDockerImagesFolder/tmp# touch b</span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop/genDockerImagesFolder/tmp# cd ..</span><br></pre></td></tr></table></figure>

<p>修改<code>Dockerfile</code>檔案內容如下</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.9</span>.<span class="number">5</span>-alpine3.<span class="number">13</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> tmp/ /app/tmp/</span></span><br></pre></td></tr></table></figure>



<p>執行build動作，並進入到container查看是否有複製完整資料夾至<code>/app/tmp/</code>底下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">打包成docker image</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop/genDockerImagesFolder# docker build -t docker-copy .</span><br><span class="line">Sending build context to Docker daemon  878.1kB</span><br><span class="line">Step 1/2 : FROM python:3.9.5-alpine3.13</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">46a196bf50ae</span></span><br><span class="line">Step 2/2 : COPY tmp/ /app/tmp/</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">54edba980fe5</span></span><br><span class="line">Successfully built 54edba980fe5</span><br><span class="line">Successfully tagged docker-copy:latest</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">執行容器 並進入交互模式 結束後直接刪除container</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop/genDockerImagesFolder# docker run -it --rm docker-copy sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">切換目錄至tmp底下</span></span><br><span class="line">/ # cd app/tmp</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看資料夾，的確有a、b兩個檔案，代表有複製到整個資料夾到container內部</span></span><br><span class="line">/app/tmp # ls</span><br><span class="line">a  b</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">離開container</span></span><br><span class="line">/app/tmp # exit</span><br></pre></td></tr></table></figure>



<h3 id="3-5-實驗記錄-ADD"><a href="#3-5-實驗記錄-ADD" class="headerlink" title="3.5. 實驗記錄 ADD"></a>3.5. 實驗記錄 ADD</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">執行tar指令壓縮資料夾</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop/genDockerImagesFolder# tar cvf copy.tar tmp</span><br><span class="line">tmp/</span><br><span class="line">tmp/b</span><br><span class="line">tmp/a</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看清單</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop/genDockerImagesFolder# ls</span><br><span class="line">copy.tar  Dockerfile  hello  hello.c  hello.py  tmp</span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop/genDockerIm</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">先移除上一個剛產生的image</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop/genDockerImagesFolder# docker image rm docker-copy</span><br><span class="line">Untagged: docker-copy:latest</span><br><span class="line">Deleted: sha256:54edba980fe511c2cfce44ce4e7615fd47171deea2a8cd668404b6f59545405c</span><br><span class="line">Deleted: sha256:6cff68147576a72f2121ea1da50b33ccc8328fc11683b668564baed2c3b7dbc6</span><br></pre></td></tr></table></figure>



<p>修改<code>Dockerfile</code>檔案內容如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM python:3.9.5-alpine3.13</span><br><span class="line">ADD copy.tar /app/</span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">再進行構建</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop/genDockerImagesFolder# docker build -t docker-copy .</span><br><span class="line">Sending build context to Docker daemon  888.8kB</span><br><span class="line">Step 1/2 : FROM python:3.9.5-alpine3.13</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">46a196bf50ae</span></span><br><span class="line">Step 2/2 : ADD copy.tar /app/</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">9f31129139ea</span></span><br><span class="line">Successfully built 9f31129139ea</span><br><span class="line">Successfully tagged docker-copy:latest</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">運行容器並進入交互模式</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop/genDockerImagesFolder# docker run -it --rm docker-copy sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">移動到tmp資料夾</span></span><br><span class="line">/ # cd app/tmp</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看清單，果然有自動unzip資料夾</span></span><br><span class="line">/app/tmp # ls</span><br><span class="line">a  b</span><br></pre></td></tr></table></figure>





<h2 id="4-構建參數和環境變數-ARG-VS-ENV"><a href="#4-構建參數和環境變數-ARG-VS-ENV" class="headerlink" title="4. 構建參數和環境變數(ARG VS ENV)"></a>4. 構建參數和環境變數(ARG VS ENV)</h2><p><code>ARG</code>和<code>ENV</code>是經常容易被混淆的兩個Dockerfile的語法，都可以用來設置一個”變數”。但實際上兩者有很多的不同。</p>
<p>比方說有一個腳本</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">21.04</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    apt-get install -y wget &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    wget https://github.com/ipinfo/cli/releases/download/ipinfo-2.0.1/ipinfo_2.0.1_linux_amd64.tar.gz &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    tar zxf ipinfo_2.0.1_linux_amd64.tar.gz &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">mv</span> ipinfo_2.0.1_linux_amd64 /usr/bin/ipinfo &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">rm</span> -rf ipinfo_2.0.1_linux_amd64.tar.gz</span></span><br></pre></td></tr></table></figure>



<h3 id="4-1-使用ENV"><a href="#4-1-使用ENV" class="headerlink" title="4.1. 使用ENV"></a>4.1. 使用ENV</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">21.04</span></span><br><span class="line"><span class="keyword">ENV</span> VERSION=<span class="number">2.0</span>.<span class="number">1</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    apt-get install -y wget &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    wget https://github.com/ipinfo/cli/releases/download/ipinfo-<span class="variable">$&#123;VERSION&#125;</span>/ipinfo_<span class="variable">$&#123;VERSION&#125;</span>_linux_amd64.tar.gz &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    tar zxf ipinfo_<span class="variable">$&#123;VERSION&#125;</span>_linux_amd64.tar.gz &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">mv</span> ipinfo_<span class="variable">$&#123;VERSION&#125;</span>_linux_amd64 /usr/bin/ipinfo &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">rm</span> -rf ipinfo_<span class="variable">$&#123;VERSION&#125;</span>_linux_amd64.tar.gz</span></span><br></pre></td></tr></table></figure>

<h3 id="4-2-使用ARG"><a href="#4-2-使用ARG" class="headerlink" title="4.2. 使用ARG"></a>4.2. 使用ARG</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">21.04</span></span><br><span class="line"><span class="keyword">ARG</span> VERSION=<span class="number">2.0</span>.<span class="number">1</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    apt-get install -y wget &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    wget https://github.com/ipinfo/cli/releases/download/ipinfo-<span class="variable">$&#123;VERSION&#125;</span>/ipinfo_<span class="variable">$&#123;VERSION&#125;</span>_linux_amd64.tar.gz &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    tar zxf ipinfo_<span class="variable">$&#123;VERSION&#125;</span>_linux_amd64.tar.gz &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">mv</span> ipinfo_<span class="variable">$&#123;VERSION&#125;</span>_linux_amd64 /usr/bin/ipinfo &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">rm</span> -rf ipinfo_<span class="variable">$&#123;VERSION&#125;</span>_linux_amd64.tar.gz</span></span><br></pre></td></tr></table></figure>

<h3 id="4-3-區別"><a href="#4-3-區別" class="headerlink" title="4.3. 區別"></a>4.3. 區別</h3><p><img src="https://i.imgur.com/c1DIgDo.png" alt="docker-image"></p>
<h4 id="4-3-1-ARG"><a href="#4-3-1-ARG" class="headerlink" title="4.3.1. ARG"></a>4.3.1. ARG</h4><ul>
<li><p>ARG的生命週期在build 鏡像的過程</p>
</li>
<li><p>run container 內並不會有這組變數名稱可以使用</p>
</li>
<li><p>可以藉由build 指令去指定賦與值</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker image build -f .\Dockerfile-arg -t ipinfo-arg-2.0.0 --build-arg VERSION=2.0.0 .</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="4-3-2-ENV"><a href="#4-3-2-ENV" class="headerlink" title="4.3.2. ENV"></a>4.3.2. ENV</h4><ul>
<li>ENV的生命週期包含在build鏡像與run container 之後，變數仍存在。</li>
</ul>
<h2 id="5-CMD容器啟動命令"><a href="#5-CMD容器啟動命令" class="headerlink" title="5. CMD容器啟動命令"></a>5. CMD容器啟動命令</h2><p>CMD可以用來設置容器啟動時預設會執行的命令。</p>
<p>我們的dockerfile檔如下</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">21.04</span></span><br><span class="line"><span class="keyword">ENV</span> VERSION=<span class="number">2.0</span>.<span class="number">1</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    apt-get install -y wget &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    wget https://github.com/ipinfo/cli/releases/download/ipinfo-<span class="variable">$&#123;VERSION&#125;</span>/ipinfo_<span class="variable">$&#123;VERSION&#125;</span>_linux_amd64.tar.gz &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    tar zxf ipinfo_<span class="variable">$&#123;VERSION&#125;</span>_linux_amd64.tar.gz &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">mv</span> ipinfo_<span class="variable">$&#123;VERSION&#125;</span>_linux_amd64 /usr/bin/ipinfo &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">rm</span> -rf ipinfo_<span class="variable">$&#123;VERSION&#125;</span>_linux_amd64.tar.gz</span></span><br></pre></td></tr></table></figure>



<p>進行鏡像構建</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker image build -f dockerfile-ipinfo -t ipinfo .</span><br></pre></td></tr></table></figure>



<h3 id="5-1-容器啟動時預設執行的命令"><a href="#5-1-容器啟動時預設執行的命令" class="headerlink" title="5.1. 容器啟動時預設執行的命令"></a>5.1. 容器啟動時預設執行的命令</h3><p>啟動一個<code>ipinfo container</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">啟動一個新容器</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop/genDockerImagesFolder# docker container run -it ipinfo</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">自動進入到容器內部了</span></span><br><span class="line">root@ecfe534f0f60:/# ls</span><br></pre></td></tr></table></figure>

<p>我們發現我們沒有在ipinfo 後面下command 為什麼會自動進入到shell模式呢？我們使用<code>docker image history ipinfo</code> 看一下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看ipinfo</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop/genDockerImagesFolder# docker image history ipinfo</span><br><span class="line">IMAGE          CREATED          CREATED BY                                      SIZE      COMMENT</span><br><span class="line">f68f17d7369f   27 minutes ago   /bin/sh -c apt-get update &amp;&amp;     apt-get ins…   47MB      </span><br><span class="line">53a4d53f91b3   29 minutes ago   /bin/sh -c #(nop)  ENV VERSION=2.0.1            0B        </span><br><span class="line">7cc39f89fa58   2 weeks ago      /bin/sh -c #(nop)  CMD [&quot;bash&quot;]                 0B        </span><br><span class="line">&lt;missing&gt;      2 weeks ago      /bin/sh -c #(nop) ADD file:4cb90f4b06e581fee…   80MB   </span><br></pre></td></tr></table></figure>

<p>發現docker 的基礎鏡像中有<code>CMD[&quot;bash&quot;]</code>，所以就會變成預設是在這個模式下。</p>
<h3 id="5-2-如果docker-container-run啟動容器時指定了其它命令，則CMD命令會被忽略。"><a href="#5-2-如果docker-container-run啟動容器時指定了其它命令，則CMD命令會被忽略。" class="headerlink" title="5.2. 如果docker container run啟動容器時指定了其它命令，則CMD命令會被忽略。"></a>5.2. 如果docker container run啟動容器時指定了其它命令，則CMD命令會被忽略。</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@kite-virtual-machine:/home/kite/Desktop/genDockerImagesFolder# docker run -it --rm ipinfo ipinfo 8.8.8.8</span><br><span class="line">Core</span><br><span class="line">- IP           8.8.8.8</span><br><span class="line">- Anycast      true</span><br><span class="line">- Hostname     dns.google</span><br><span class="line">- City         Mountain View</span><br><span class="line">- Region       California</span><br><span class="line">- Country      United States (US)</span><br><span class="line">- Location     37.4056,-122.0775</span><br><span class="line">- Organization AS15169 Google LLC</span><br><span class="line">- Postal       94043</span><br><span class="line">- Timezone     America/Los_Angeles</span><br></pre></td></tr></table></figure>



<h3 id="5-3-如果定義了多個CMD-只有最後一個會被執行。"><a href="#5-3-如果定義了多個CMD-只有最後一個會被執行。" class="headerlink" title="5.3. 如果定義了多個CMD,只有最後一個會被執行。"></a>5.3. 如果定義了多個CMD,只有最後一個會被執行。</h3><p>以下腳本為例，參考了ubuntu的鏡像，ubuntu本身內部就有使用其它CMD，這時我們如果在最後多加了一個CMD的指令。那優先權最大就會變成</p>
<p><code>CMD [&quot;ipinfo&quot;]</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FROM ubuntu:21.04</span><br><span class="line">ENV VERSION=2.0.1</span><br><span class="line">RUN apt-get update &amp;&amp; \</span><br><span class="line">    apt-get install -y wget &amp;&amp; \</span><br><span class="line">    wget https://github.com/ipinfo/cli/releases/download/ipinfo-$&#123;VERSION&#125;/ipinfo_$&#123;VERSION&#125;_linux_amd64.tar.gz &amp;&amp; \</span><br><span class="line">    tar zxf ipinfo_$&#123;VERSION&#125;_linux_amd64.tar.gz &amp;&amp; \</span><br><span class="line">    mv ipinfo_$&#123;VERSION&#125;_linux_amd64 /usr/bin/ipinfo &amp;&amp; \</span><br><span class="line">    rm -rf ipinfo_$&#123;VERSION&#125;_linux_amd64.tar.gz</span><br><span class="line">CMD [&quot;ipinfo&quot;]</span><br></pre></td></tr></table></figure>


<p>迅速清理那些已經停止的container </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker system prune -f</span><br></pre></td></tr></table></figure>

<p>遽速清理沒有使用的image</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker image prune -a</span><br></pre></td></tr></table></figure>

<h3 id="5-4-小技巧"><a href="#5-4-小技巧" class="headerlink" title="5.4. 小技巧"></a>5.4. 小技巧</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">21.04</span></span><br><span class="line"><span class="keyword">ENV</span> VERSION=<span class="number">2.0</span>.<span class="number">1</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    apt-get install -y wget &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    wget https://github.com/ipinfo/cli/releases/download/ipinfo-<span class="variable">$&#123;VERSION&#125;</span>/ipinfo_<span class="variable">$&#123;VERSION&#125;</span>_linux_amd64.tar.gz &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    tar zxf ipinfo_<span class="variable">$&#123;VERSION&#125;</span>_linux_amd64.tar.gz &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">mv</span> ipinfo_<span class="variable">$&#123;VERSION&#125;</span>_linux_amd64 /usr/bin/ipinfo &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">rm</span> -rf ipinfo_<span class="variable">$&#123;VERSION&#125;</span>_linux_amd64.tar.gz</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> []</span></span><br></pre></td></tr></table></figure>

<p>把<code>CMD[]</code>設為空之後，再重新build一個新的鏡像，這樣子在輸入<code>docker run --it ipinfo</code> 時，就不會通過，要求使用者一定要在後面再接一個參數，比如</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">創建容器，出現錯誤提示</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop/genDockerImagesFolder# docker run -it ipinfo </span><br><span class="line">docker: Error response from daemon: No command specified.</span><br><span class="line">See &#x27;docker run --help&#x27;.</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">帶參數</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop/genDockerImagesFolder# docker run -it ipinfo ipinfo 8.8.8.8</span><br><span class="line">Core</span><br><span class="line">- IP           8.8.8.8</span><br><span class="line">- Anycast      true</span><br><span class="line">- Hostname     dns.google</span><br><span class="line">- City         Mountain View</span><br><span class="line">- Region       California</span><br><span class="line">- Country      United States (US)</span><br><span class="line">- Location     37.4056,-122.0775</span><br><span class="line">- Organization AS15169 Google LLC</span><br><span class="line">- Postal       94043</span><br><span class="line">- Timezone     America/Los_Angeles</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h2 id="6-容器啟動命令ENTRYPOINT"><a href="#6-容器啟動命令ENTRYPOINT" class="headerlink" title="6. 容器啟動命令ENTRYPOINT"></a>6. 容器啟動命令ENTRYPOINT</h2><p>ENTRYPOINT也可以設置容器啟動時要執行的命令，但是和CMD是有區別的。</p>
<ul>
<li><code>CMD</code>設置的命令，可以在docker container run 時傳入其它命令，覆蓋掉<code>CMD</code>的命令，但是<code>ENTRYPOINT</code>所設置的命令是<strong>一定會被執行</strong>的。</li>
<li><code>ENTRYPOINT</code>和<code>CMD</code>可以聯合使用，<code>ENTRYPOINT</code>設置執行的命令，CMD傳遞參數</li>
</ul>
<h2 id="7-SHELL格式和EXEC格式"><a href="#7-SHELL格式和EXEC格式" class="headerlink" title="7. SHELL格式和EXEC格式"></a>7. SHELL格式和EXEC格式</h2><p><code>CMD</code>和<code>ENTRYPOINT</code>同時支持SHELL格式和EXEC格式。</p>
<h3 id="7-1-shell格式"><a href="#7-1-shell格式" class="headerlink" title="7.1. shell格式"></a>7.1. shell格式</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CMD</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;hello docker&quot;</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;hello docker&quot;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="7-2-exec格式"><a href="#7-2-exec格式" class="headerlink" title="7.2. exec格式"></a>7.2. exec格式</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;echo&quot;</span>, <span class="string">&quot;hello docker&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;echo&quot;</span>, <span class="string">&quot;hello docker&quot;</span>]</span></span><br></pre></td></tr></table></figure>



<h3 id="7-3-注意事項舉例"><a href="#7-3-注意事項舉例" class="headerlink" title="7.3. 注意事項舉例"></a>7.3. 注意事項舉例</h3><p>比方說要print 出<strong>hello docker</strong></p>
<p>shell版本</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">21.04</span></span><br><span class="line"><span class="keyword">ENV</span> NAME=docker</span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;hello <span class="variable">$NAME</span>&quot;</span></span></span><br></pre></td></tr></table></figure>

<p>我們試著改成exec格式，如下面這樣，其實是不行的喔。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">21.04</span></span><br><span class="line"><span class="keyword">ENV</span> NAME=docker</span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;echo&quot;</span>, <span class="string">&quot;hello <span class="variable">$NAME</span>&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<p>具體方式要以shell腳本的方式去執行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FROM ubuntu:21.04</span><br><span class="line">ENV NAME=docker</span><br><span class="line">CMD [&quot;sh&quot;, &quot;-c&quot;, &quot;echo hello $NAME&quot;]</span><br></pre></td></tr></table></figure>



<h2 id="8-一起構建一個python-Flask鏡像"><a href="#8-一起構建一個python-Flask鏡像" class="headerlink" title="8. 一起構建一個python Flask鏡像"></a>8. 一起構建一個python Flask鏡像</h2><h3 id="8-1-環境準備"><a href="#8-1-環境準備" class="headerlink" title="8.1. 環境準備"></a>8.1. 環境準備</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">建立一個資料夾名稱為pythonworkspace</span></span><br><span class="line">kite@kite-virtual-machine:~/Desktop$ mkdir pythonworkspace</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">進入pythonworkspace資料夾</span></span><br><span class="line">kite@kite-virtual-machine:~/Desktop$ cd pythonworkspace/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安裝python3-virtualenv套件</span></span><br><span class="line">kite@kite-virtual-machine:~/Desktop/pythonworkspace$ sudo apt install python3-virtualenv</span><br><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree       </span><br><span class="line">Reading state information... Done</span><br><span class="line">python3-virtualenv is already the newest version (20.0.17-1ubuntu0.4).</span><br><span class="line">The following packages were automatically installed and are no longer required:</span><br><span class="line">  libc++1 libc++1-10 libc++abi1-10 libsss-nss-idmap0</span><br><span class="line">Use &#x27;sudo apt autoremove&#x27; to remove them.</span><br><span class="line">0 upgraded, 0 newly installed, 0 to remove and 36 not upgraded.</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">建立一個獨立空間的python環境，名稱為flaskwebsite</span></span><br><span class="line">kite@kite-virtual-machine:~/Desktop/pythonworkspace$ python3 -m venv flaskwebsite</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">執行進入到flaskwebsite空間</span></span><br><span class="line">kite@kite-virtual-machine:~/Desktop/pythonworkspace$ source ./flaskwebsite/bin/activate</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">發現前面就會帶(flaskwebsite)空間名稱囉，再用pip list看目前套件清單</span></span><br><span class="line">(flaskwebsite) kite@kite-virtual-machine:~/Desktop/pythonworkspace$ pip list</span><br><span class="line">Package       Version</span><br><span class="line">------------- -------</span><br><span class="line">pip           20.0.2 </span><br><span class="line">pkg-resources 0.0.0  </span><br><span class="line">setuptools    44.0.0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安裝flask套件</span></span><br><span class="line">(flaskwebsite) kite@kite-virtual-machine:~/Desktop/pythonworkspace$ pip install Flask</span><br><span class="line"></span><br><span class="line">Collecting Flask</span><br><span class="line">  Downloading Flask-2.0.3-py3-none-any.whl (95 kB)</span><br><span class="line">     |████████████████████████████████| 95 kB 393 kB/s </span><br><span class="line">Collecting Jinja2&gt;=3.0</span><br><span class="line">  Downloading Jinja2-3.0.3-py3-none-any.whl (133 kB)</span><br><span class="line">     |████████████████████████████████| 133 kB 1.2 MB/s </span><br><span class="line">Collecting Werkzeug&gt;=2.0</span><br><span class="line">  Downloading Werkzeug-2.0.3-py3-none-any.whl (289 kB)</span><br><span class="line">     |████████████████████████████████| 289 kB 2.6 MB/s </span><br><span class="line">Collecting itsdangerous&gt;=2.0</span><br><span class="line">  Downloading itsdangerous-2.1.0-py3-none-any.whl (15 kB)</span><br><span class="line">Collecting click&gt;=7.1.2</span><br><span class="line">  Downloading click-8.0.4-py3-none-any.whl (97 kB)</span><br><span class="line">     |████████████████████████████████| 97 kB 3.4 MB/s </span><br><span class="line">Collecting MarkupSafe&gt;=2.0</span><br><span class="line">  Downloading MarkupSafe-2.1.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (25 kB)</span><br><span class="line">Installing collected packages: MarkupSafe, Jinja2, Werkzeug, itsdangerous, click, Flask</span><br><span class="line">Successfully installed Flask-2.0.3 Jinja2-3.0.3 MarkupSafe-2.1.0 Werkzeug-2.0.3 click-8.0.4 itsdangerous-2.1.0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">再次確認套件清單</span></span><br><span class="line">(flaskwebsite) kite@kite-virtual-machine:~/Desktop/pythonworkspace$ pip list</span><br><span class="line">Package       Version</span><br><span class="line">------------- -------</span><br><span class="line">click         8.0.4  </span><br><span class="line">Flask         2.0.3  </span><br><span class="line">itsdangerous  2.1.0  </span><br><span class="line">Jinja2        3.0.3  </span><br><span class="line">MarkupSafe    2.1.0  </span><br><span class="line">pip           20.0.2 </span><br><span class="line">pkg-resources 0.0.0  </span><br><span class="line">setuptools    44.0.0 </span><br><span class="line">Werkzeug      2.0.3  </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">執行vscode 打開當前目錄</span></span><br><span class="line">(flaskwebsite) kite@kite-virtual-machine:~/Desktop/pythonworkspace$code . </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">設定環境變數，這步驟設定後，之後下flask run 會自動找這個設定值的內容</span></span><br><span class="line">(flaskwebsite) kite@kite-virtual-machine:~/Desktop/pythonworkspace$ export FLASK_APP=app.py</span><br></pre></td></tr></table></figure>



<h3 id="8-2-腳本與程式碼"><a href="#8-2-腳本與程式碼" class="headerlink" title="8.2. 腳本與程式碼"></a>8.2. 腳本與程式碼</h3><p>網站程式碼：<code>app.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello, World!&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>鏡像構建腳本：<code>Dockerfile</code></p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment">#參考 python tag 為 slim 版的輕量 image</span></span><br><span class="line"><span class="keyword">FROM</span> python:slim</span><br><span class="line"></span><br><span class="line"><span class="comment">#將本機檔 app.py copy到image內部指定路徑</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> app.py /src/app.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#執行安裝flask套件指令</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install flask</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#設定預設工作目錄</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /src</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#設定image內部環境變數</span></span><br><span class="line"><span class="keyword">ENV</span> FLASK=app.py</span><br><span class="line"></span><br><span class="line"><span class="comment">#對外公開5000 port</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">5000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#執行網站啟動指令</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;flask&quot;</span>,<span class="string">&quot;run&quot;</span>,<span class="string">&quot;-h&quot;</span>,<span class="string">&quot;0.0.0.0&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<p>透過dockerhub官網去尋找python的docker image檔，這次特別找輕量的python，可以在tag頁籤底下查詢<code>slim</code>關鍵字。</p>
<p><img src="https://i.imgur.com/8InDVzo.png" alt="image-20220222111053601"></p>
<h2 id="9-合理使用緩存技巧"><a href="#9-合理使用緩存技巧" class="headerlink" title="9. 合理使用緩存技巧"></a>9. 合理使用緩存技巧</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">參考 python tag 為 slim 版的輕量 image</span></span><br><span class="line">FROM python:slim</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">將本機檔 app.py copy到image內部指定路徑 &lt;&lt; 我原本在這個位置，程式異動後重build，後面的步驟都會重新再來，不會找緩存</span></span><br><span class="line">COPY app.py /src/app.py</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">執行安裝flask套件指令</span></span><br><span class="line">RUN pip install flask</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">設定預設工作目錄</span></span><br><span class="line">WORKDIR /src</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">設定image內部環境變數</span></span><br><span class="line">ENV FLASK=app.py</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">對外公開5000 port</span></span><br><span class="line">EXPOSE 5000</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">執行網站啟動指令</span></span><br><span class="line">CMD [&quot;flask&quot;,&quot;run&quot;,&quot;-h&quot;,&quot;0.0.0.0&quot;]</span><br></pre></td></tr></table></figure>



<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment">#參考 python tag 為 slim 版的輕量 image</span></span><br><span class="line"><span class="keyword">FROM</span> python:slim</span><br><span class="line"></span><br><span class="line"><span class="comment">#執行安裝flask套件指令</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install flask</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#設定預設工作目錄</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /src</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#設定image內部環境變數</span></span><br><span class="line"><span class="keyword">ENV</span> FLASK=app.py</span><br><span class="line"></span><br><span class="line"><span class="comment">#將本機檔 app.py copy到image內部指定路徑  &lt;&lt; 我換到這個位置，程式異後動後重build。前面那些指令就會預設去找緩存的資料囉</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> app.py /src/app.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#對外公開5000 port</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">5000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#執行網站啟動指令</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;flask&quot;</span>,<span class="string">&quot;run&quot;</span>,<span class="string">&quot;-h&quot;</span>,<span class="string">&quot;0.0.0.0&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<p>在固定且不經常變動的指令放到最前面，常會變的比如<code>app.py</code>檔案的程式碼更新。就儘量放到最後面。</p>
<p>這樣在build的過程中，就可以使用到緩存的機制。</p>
<h2 id="10-dockerignore"><a href="#10-dockerignore" class="headerlink" title="10. dockerignore"></a>10. dockerignore</h2><p>我們可以透過<code>tree -L 1</code>來看一下結構目錄</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@kite-virtual-machine:/home/kite/Desktop/pythonworkspace# tree -L 1</span><br><span class="line">.</span><br><span class="line">├── app.py</span><br><span class="line">├── Dockerfile</span><br><span class="line">├── flaskwebsite</span><br><span class="line">└── __pycache__</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我們發現其實<code>flaskwebsite資料夾</code>也包含在內，因此，指令<code>docker image build -t flask-demo .</code> 中的點也就是指當前路徑。</p>
<p>我們可以觀查在<code>Sending build context to Docker damon 11.12MB</code>這行顯示需要傳輸到<code>11.12MB</code>，但實際上我們的<code>app.py</code>程式碼才幾kb而已。原因就是因為包含了<code>flaskwebsite資料夾</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@kite-virtual-machine:/home/kite/Desktop/pythonworkspace# docker image build -t flask-demo .</span><br><span class="line"></span><br><span class="line">Sending build context to Docker daemon  11.12MB</span><br><span class="line">Step 1/7 : FROM python:slim</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">e4f3ae64bf20</span></span><br><span class="line">Step 2/7 : RUN pip install flask</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="keyword">in</span> 2ad3e866c913</span></span><br></pre></td></tr></table></figure>

<p>我們來試著進行資料夾的排除，跟<code>.giteignore</code>概念一樣</p>
<p><code>.dockerignore</code>檔案</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">./flaskwebsite</span><br></pre></td></tr></table></figure>

<p>這個檔案我們寫了一行<code>./flaskwebsite</code>，也就是請在build過程中忽略<code>flaskwebsite</code>資料夾。</p>
<p>資料結構加了一個檔案後如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@kite-virtual-machine:/home/kite/Desktop/pythonworkspace# tree -L 1 -a</span><br><span class="line">.</span><br><span class="line">├── app.py</span><br><span class="line">├── Dockerfile</span><br><span class="line">├── .dockerignore</span><br><span class="line">├── flaskwebsite</span><br><span class="line">└── __pycache__</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>我們再重build一下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@kite-virtual-machine:/home/kite/Desktop/pythonworkspace# docker image build -t flask-demo .</span><br><span class="line">Sending build context to Docker daemon  5.632kB</span><br></pre></td></tr></table></figure>

<p>就發現變成5.632kb囉</p>
<h2 id="11-dockerfile技術之多段構建"><a href="#11-dockerfile技術之多段構建" class="headerlink" title="11. dockerfile技術之多段構建"></a>11. dockerfile技術之多段構建</h2><p>有時候我們只需要一個可編譯的系統環境，也不必在host主機上安裝完整的編譯環境。就可以透過docker的環境來幫我們做到這件事情。但我們會發現可編譯程式的gcc鏡像檔(以編譯c語言為例)，容量是很擁腫的，有<code>1.44GB</code>以上。</p>
<p>查看鏡像大容量，<code>gcc</code>為<code>1.14GB</code>、 <code>hello-apline</code>為<code>6.55MB</code>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@kite-virtual-machine:/home/kite/Desktop/cworkspace# docker images</span><br><span class="line">REPOSITORY       TAG       IMAGE ID       CREATED              SIZE</span><br><span class="line">hello-apline     latest    aed1c277cad0   About a minute ago   6.55MB</span><br><span class="line">gcc              9.4       426442df2c0a   3 weeks ago          1.14GB</span><br><span class="line">alpine           3.13.5    6dbb9cc54074   10 months ago        5.61MB</span><br></pre></td></tr></table></figure>

<p>我們可以透過多段構建技巧，分段完成每一階段的任務。再最後階段再使用可執行c語言的鏡像檔幫我們build出小體積的鏡像檔。以下以這個為想法進行實驗與說明：</p>
<p>資料夾結構</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@kite-virtual-machine:/home/kite/Desktop/cworkspace# tree</span><br><span class="line">.</span><br><span class="line">├── Dockerfile</span><br><span class="line">└── hello.c</span><br></pre></td></tr></table></figure>

<p><code>hello</code>檔</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello %s\n&quot;</span>, argv[argc - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><code>Dockerfile</code>檔</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 第一階段編譯</span></span><br><span class="line"><span class="comment">#拉取一個可編譯c語言的鏡像(image比較肥大)，別名為builder</span></span><br><span class="line"><span class="keyword">FROM</span> gcc:<span class="number">9.4</span> AS builder</span><br><span class="line"></span><br><span class="line"><span class="comment">#將檔案copy至內部容器之指定路徑</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> hello.c /src/hello.c</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#預設當前目錄</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /src</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#執行編輯 hello</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> gcc --static -o hello hello.c</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 第二階段編譯(image比較輕量)</span></span><br><span class="line"><span class="comment">#拉取一個可執行c語言的鏡像</span></span><br><span class="line"><span class="keyword">FROM</span> alpine:<span class="number">3.13</span>.<span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#從builder鏡像取出 src/hello 程式copy之當前鏡像容器內部</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=builder /src/hello /src/hello</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#預設執行該指令碼</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [ <span class="string">&quot;/src/hello&quot;</span> ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> []</span></span><br></pre></td></tr></table></figure>

<p>玩玩看</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@kite-virtual-machine:/home/kite/Desktop/cworkspace# docker container run  --rm -it hello-apline kite</span><br><span class="line">hello kite</span><br></pre></td></tr></table></figure>





<h2 id="12-dockerfile技巧之儘量使用非root用戶"><a href="#12-dockerfile技巧之儘量使用非root用戶" class="headerlink" title="12. dockerfile技巧之儘量使用非root用戶"></a>12. dockerfile技巧之儘量使用非root用戶</h2><p><code>dockerfile-root</code>檔</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:slim</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install flask</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /src</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> FLASK=app.py</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> app.py /src/app.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">5000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;flask&quot;</span>,<span class="string">&quot;run&quot;</span>,<span class="string">&quot;-h&quot;</span>,<span class="string">&quot;0.0.0.0&quot;</span>]</span></span><br></pre></td></tr></table></figure>



<p><code>dockerfile-no-root</code>檔</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FROM python:3.9.5-slim</span><br><span class="line"></span><br><span class="line">RUN pip install flask &amp;&amp; \</span><br><span class="line">    groupadd -r flask &amp;&amp; useradd -r -g flask flask &amp;&amp; \</span><br><span class="line">    mkdir /src &amp;&amp; \</span><br><span class="line">    chown -R flask:flask /src</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用flask user帳號，避免使用root發生資安問題</span></span><br><span class="line">USER flask</span><br><span class="line"></span><br><span class="line">COPY app.py /src/app.py</span><br><span class="line"></span><br><span class="line">WORKDIR /src</span><br><span class="line">ENV FLASK_APP=app.py</span><br><span class="line"></span><br><span class="line">EXPOSE 5000</span><br><span class="line"></span><br><span class="line">CMD [&quot;flask&quot;, &quot;run&quot;, &quot;-h&quot;, &quot;0.0.0.0&quot;]</span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">構建flask-no-root鏡像</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop/pythonworkspace# docker image build -f dockerfile-no-root -t flask-no-root .</span><br><span class="line">Sending build context to Docker daemon   7.68kB</span><br><span class="line">Step 1/8 : FROM python:3.9.5-slim</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">Successfully built b65dbef09eed</span><br><span class="line">Successfully tagged flask-no-root:latest</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">構建flask-root鏡像</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop/pythonworkspace# docker image build -f docker-root -t docker-root .</span><br><span class="line">unable to prepare context: unable to evaluate symlinks in Dockerfile path: lstat /home/kite/Desktop/pythonworkspace/docker-root: no such file or directory</span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop/pythonworkspace# docker image build -f dockerfile-root -t flask-root .</span><br><span class="line">Sending build context to Docker daemon   7.68kB</span><br><span class="line">Step 1/7 : FROM python:slim</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">Successfully built 50a0190d1105</span><br><span class="line">Successfully tagged flask-root:latest</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看鏡像</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop/pythonworkspace# docker images</span><br><span class="line">REPOSITORY       TAG          IMAGE ID       CREATED          SIZE</span><br><span class="line">flask-no-root    latest       b65dbef09eed   3 minutes ago    126MB</span><br><span class="line">flask-root       latest       50a0190d1105   2 hours ago      134MB</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">創建啟動flask-no-root</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop/pythonworkspace# docker container run -d --rm --name flask-no-root flask-no-root</span><br><span class="line">8699d07e199436126092b6310ecf1a1fe7d68300b4a430d1209e94af1ff1073c</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">創建啟動flask-root</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop/pythonworkspace# docker container run -d --rm --name flask-root flask-root</span><br><span class="line">bb46a94bf7b5746ef0d3189fec59ae527531389955287c6df718cdb67c4a49a3</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用container top 指令查看權限</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#root權限的container</span></span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop/pythonworkspace# docker container top flask-root</span><br><span class="line">UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD</span><br><span class="line">root                54109               54086               0                   15:30               ?                   00:00:00            /usr/local/bin/python /usr/local/bin/flask run -h 0.0.0.0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用container top 指令查看權限</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#非root權限的container</span></span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop/pythonworkspace# docker container top flask-no-root</span><br><span class="line">UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD</span><br><span class="line">systemd+            54216               54196               0                   15:30               ?                   00:00:00            /usr/local/bin/python /usr/local/bin/flask run -h 0.0.0.0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">進入到flask-root container容器內，以井字號開頭就說明是root權限</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop/pythonworkspace# docker run -it flask-root sh</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">exit</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">進入到flask-no-root container容器內，以錢字號開頭就說明是非root權限</span></span><br><span class="line">root@kite-virtual-machine:/home/kite/Desktop/pythonworkspace# docker run -it flask-no-root sh</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">exit</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h2 id="13-小總結"><a href="#13-小總結" class="headerlink" title="13. 小總結"></a>13. 小總結</h2><p>dockerfile可以多參考相關連結</p>
<ul>
<li><p><a href="https://docs.docker.com/engine/reference/builder/">dockerfile reference</a></p>
<ul>
<li>官網的dockerfile reference docs</li>
</ul>
</li>
<li><p><a href="https://github.com/docker-library/official-images">docker-library&#x2F;official-images</a></p>
<ul>
<li>官網釋出的image，可以臨摹裡面的dockerfile寫法</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker 系列 - (5) Docker的網路</title>
    <url>/2022/03/03/2022-03-03%20Docker%20%E7%B3%BB%E5%88%97%20-%20(5)%20Docker%E7%9A%84%E7%B6%B2%E8%B7%AF/</url>
    <content><![CDATA[<h2 id="1-網路基礎知識回顧"><a href="#1-網路基礎知識回顧" class="headerlink" title="1. 網路基礎知識回顧"></a>1. 網路基礎知識回顧</h2><p><a href="https://twitter.com/manekinekko">作者Wassim Chegham</a></p>
<p><img src="https://i.imgur.com/OA8lKw3.jpg" alt="圖片"></p>
<p><a href="https://www.youtube.com/watch?v=Taq5TV1K4XU">Will保哥 初學者都該了解的HTTP通訊協定基礎</a></p>
<span id="more"></span>


<h2 id="2-網路常用命令"><a href="#2-網路常用命令" class="headerlink" title="2. 網路常用命令"></a>2. 網路常用命令</h2><h3 id="2-1-IP地址查詢"><a href="#2-1-IP地址查詢" class="headerlink" title="2.1. IP地址查詢"></a>2.1. IP地址查詢</h3><p>Windows</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ipconfig</span><br></pre></td></tr></table></figure>

<p>Linux</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip addr 或 ip a</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UNKNOWN group default qlen 1000</span><br><span class="line">    link/ether 00:0c:29:ac:f4:ef brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    altname enp2s1</span><br><span class="line">    inet 192.168.152.137/24 brd 192.168.152.255 scope global dynamic noprefixroute ens33</span><br><span class="line">       valid_lft 1200sec preferred_lft 1200sec</span><br><span class="line">    inet6 fe80::c252:7221:a2a5:42d9/64 scope link noprefixroute </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">3: docker0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default </span><br><span class="line">    link/ether 02:42:80:62:9c:23 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::42:80ff:fe62:9c23/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">5: veth58b174d@if4: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP group default </span><br><span class="line">    link/ether b6:1c:f6:19:ec:c8 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet6 fe80::b41c:f6ff:fe19:ecc8/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>lo</code>：localhost</p>
<p><code>ens33</code>：對外網路</p>
<p><code>docker0</code>：docker內部網路</p>
<p><code>veth</code>：docker內部容器</p>
<h3 id="2-2-測試網路連通性"><a href="#2-2-測試網路連通性" class="headerlink" title="2.2. 測試網路連通性"></a>2.2. 測試網路連通性</h3><h4 id="2-2-1-ping命令"><a href="#2-2-1-ping命令" class="headerlink" title="2.2.1. ping命令"></a>2.2.1. ping命令</h4><p>測試IP連通性</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@host04:/home/kite/Desktop# ping 192.168.152.139</span><br><span class="line">PING 192.168.152.139 (192.168.152.139) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.152.139: icmp_seq=1 ttl=64 time=0.614 ms</span><br><span class="line">64 bytes from 192.168.152.139: icmp_seq=2 ttl=64 time=0.521 ms</span><br></pre></td></tr></table></figure>



<h3 id="2-3-測試端口連通性"><a href="#2-3-測試端口連通性" class="headerlink" title="2.3. 測試端口連通性"></a>2.3. 測試端口連通性</h3><h4 id="2-3-1-telnet命令"><a href="#2-3-1-telnet命令" class="headerlink" title="2.3.1. telnet命令"></a>2.3.1. telnet命令</h4><p>測試(port)連通性</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@host04:/home/kite/Desktop# telnet www.google.com.tw 80</span><br><span class="line">Trying 142.251.43.3...</span><br><span class="line">Connected to www.google.com.tw.</span><br></pre></td></tr></table></figure>



<h3 id="2-4-測試路徑"><a href="#2-4-測試路徑" class="headerlink" title="2.4. 測試路徑"></a>2.4. 測試路徑</h3><h4 id="2-4-1-traceroute命令"><a href="#2-4-1-traceroute命令" class="headerlink" title="2.4.1. traceroute命令"></a>2.4.1. traceroute命令</h4><p>路徑探測跟蹤</p>
<ul>
<li><p>Linux</p>
<ul>
<li>tracepath</li>
</ul>
</li>
<li><p>Windows</p>
<ul>
<li>TRACERT.EXE</li>
</ul>
</li>
</ul>
<h3 id="2-5-測試web服務"><a href="#2-5-測試web服務" class="headerlink" title="2.5. 測試web服務"></a>2.5. 測試web服務</h3><h4 id="2-5-1-curl命令"><a href="#2-5-1-curl命令" class="headerlink" title="2.5.1. curl命令"></a>2.5.1. curl命令</h4><p>請求web服務的工具。它的名字就是客戶端(client)的URL工具的意思。</p>
<p>它的功能非常強大，如果熟練的話，完全可以取代Postman這一類的圖形界面工具。</p>
<p>可以參考 <a href="http://www.ruanyifeng.com/blog/2019/09/curl-reference.html">阮一峰 curl 的用法指南</a></p>
<h2 id="3-容器網路需要解決哪些問題？"><a href="#3-容器網路需要解決哪些問題？" class="headerlink" title="3. 容器網路需要解決哪些問題？"></a>3. 容器網路需要解決哪些問題？</h2><h3 id="3-1-第一個問題實驗"><a href="#3-1-第一個問題實驗" class="headerlink" title="3.1. 第一個問題實驗"></a>3.1. 第一個問題實驗</h3><p>首先先創建一個容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@host04:/home/kite/Desktop# docker container run -d --rm --name box01 busybox /bin/sh -c &quot;while true; do sleep 3600; done&quot;</span><br></pre></td></tr></table></figure>

<p>進入容器後，使用<code>ip a</code>，看到<code>etho0</code>開頭有一個ip為<code>172.17.0.2</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@host04:/home/kite/Desktop# docker exec -it box01 sh</span><br><span class="line">/ # ip a</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">8: eth0@if9: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueue </span><br><span class="line">    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">/ # exit</span><br></pre></td></tr></table></figure>

<h3 id="3-2-第二個問題實驗"><a href="#3-2-第二個問題實驗" class="headerlink" title="3.2. 第二個問題實驗"></a>3.2. 第二個問題實驗</h3><p>退出容器後，在host使用ping觀查：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@host04:/home/kite/Desktop# ping 172.17.0.2</span><br><span class="line">PING 172.17.0.2 (172.17.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=1 ttl=64 time=0.184 ms</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=2 ttl=64 time=0.040 ms</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=3 ttl=64 time=0.032 ms</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="3-3-第三個問題實驗"><a href="#3-3-第三個問題實驗" class="headerlink" title="3.3. 第三個問題實驗"></a>3.3. 第三個問題實驗</h3><p>實驗待補</p>
<h3 id="3-4-第四個問題實驗"><a href="#3-4-第四個問題實驗" class="headerlink" title="3.4. 第四個問題實驗"></a>3.4. 第四個問題實驗</h3><p>再創第二個容器<code>box02</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@host04:/home/kite/Desktop# docker container run -d --rm --name box02 busybox /bin/sh -c &quot;while true; do sleep 3600; done&quot;</span><br></pre></td></tr></table></figure>

<p>查看容器IP，IP為<code>172.17.0.3</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@host04:/home/kite/Desktop# docker container exec -it box02 ip a</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">10: eth0@if11: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueue </span><br><span class="line">    link/ether 02:42:ac:11:00:03 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.0.3/16 brd 172.17.255.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure>



<p>在<code>box02</code>容器內去ping <code>box01</code>：</p>
<ul>
<li><p>box01</p>
<ul>
<li>IP 172.17.0.2</li>
</ul>
</li>
<li><p>box02</p>
<ul>
<li>IP 172.17.0.3</li>
</ul>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@host04:/home/kite/Desktop# docker container exec -it box02 ping 172.17.0.2</span><br><span class="line">PING 172.17.0.2 (172.17.0.2): 56 data bytes</span><br><span class="line">64 bytes from 172.17.0.2: seq=0 ttl=64 time=0.060 ms</span><br><span class="line">64 bytes from 172.17.0.2: seq=1 ttl=64 time=0.066 ms</span><br></pre></td></tr></table></figure>



<h3 id="3-5-第五個問題實驗"><a href="#3-5-第五個問題實驗" class="headerlink" title="3.5. 第五個問題實驗"></a>3.5. 第五個問題實驗</h3><p>創建一個<code>web01</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@host04:/home/kite/Desktop# docker container run -d -p 8080:80 --name web01 nginx</span><br></pre></td></tr></table></figure>

<p>查看一下<code>host04</code>IP：</p>
<p><code>192.168.152.137</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@host04:/home/kite/Desktop# ip a</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UNKNOWN group default qlen 1000</span><br><span class="line">    link/ether 00:0c:29:ac:f4:ef brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    altname enp2s1</span><br><span class="line">    inet 192.168.152.137/24 brd 192.168.152.255 scope global dynamic noprefixroute ens33</span><br><span class="line">       valid_lft 1637sec preferred_lft 1637sec</span><br><span class="line">    inet6 fe80::c252:7221:a2a5:42d9/64 scope link noprefixroute </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">3: docker0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default </span><br><span class="line">    link/ether 02:42:80:62:9c:23 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::42:80ff:fe62:9c23/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">9: veth2024750@if8: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP group default </span><br><span class="line">    link/ether f6:0a:2b:a1:86:df brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet6 fe80::f40a:2bff:fea1:86df/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">11: veth3872608@if10: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP group default </span><br><span class="line">    link/ether 8e:84:3d:c0:57:7c brd ff:ff:ff:ff:ff:ff link-netnsid 1</span><br><span class="line">    inet6 fe80::8c84:3dff:fec0:577c/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">19: vetha5bf5e2@if18: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP group default </span><br><span class="line">    link/ether 7a:26:38:e8:03:8f brd ff:ff:ff:ff:ff:ff link-netnsid 2</span><br><span class="line">    inet6 fe80::7826:38ff:fee8:38f/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure>

<p>我們利用<code>host05</code>使用<code>curl</code>來 對 <code>host04</code> IP <code>192.168.152.137:8080</code>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kite@host5:~/Desktop$ curl 192.168.152.137:8080</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">html &#123; color-scheme: light dark; &#125;</span><br><span class="line">body &#123; width: 35em; margin: 0 auto;</span><br><span class="line">font-family: Tahoma, Verdana, Arial, sans-serif; &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;If you see this page, the nginx web server is successfully installed and</span><br><span class="line">working. Further configuration is required.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;For online documentation and support please refer to</span><br><span class="line">&lt;a href=&quot;http://nginx.org/&quot;&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span><br><span class="line">Commercial support is available at</span><br><span class="line">&lt;a href=&quot;http://nginx.com/&quot;&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>





<h3 id="3-6-第一個問題：為什麼容器內會獲取到172-17-0-2-的IP地址"><a href="#3-6-第一個問題：為什麼容器內會獲取到172-17-0-2-的IP地址" class="headerlink" title="3.6. 第一個問題：為什麼容器內會獲取到172.17.0.2 的IP地址"></a>3.6. 第一個問題：為什麼容器內會獲取到172.17.0.2 的IP地址</h3><h3 id="3-7-第二個問題：為什麼HOST可以PING成功容器？"><a href="#3-7-第二個問題：為什麼HOST可以PING成功容器？" class="headerlink" title="3.7. 第二個問題：為什麼HOST可以PING成功容器？"></a>3.7. 第二個問題：為什麼HOST可以PING成功容器？</h3><h3 id="3-8-第三個問題：為什麼容器可以PING外部網路成功？"><a href="#3-8-第三個問題：為什麼容器可以PING外部網路成功？" class="headerlink" title="3.8. 第三個問題：為什麼容器可以PING外部網路成功？"></a>3.8. 第三個問題：為什麼容器可以PING外部網路成功？</h3><h3 id="3-9-第四個問題：為什麼容器與容器之間可以互通？"><a href="#3-9-第四個問題：為什麼容器與容器之間可以互通？" class="headerlink" title="3.9. 第四個問題：為什麼容器與容器之間可以互通？"></a>3.9. 第四個問題：為什麼容器與容器之間可以互通？</h3><h3 id="3-10-第五個問題：PORT轉發是怎麼回事？"><a href="#3-10-第五個問題：PORT轉發是怎麼回事？" class="headerlink" title="3.10. 第五個問題：PORT轉發是怎麼回事？"></a>3.10. 第五個問題：PORT轉發是怎麼回事？</h3><h2 id="4-容器間通信之bridge網路"><a href="#4-容器間通信之bridge網路" class="headerlink" title="4. 容器間通信之bridge網路"></a>4. 容器間通信之bridge網路</h2><p>來教一個新指令<code>docker network ls</code>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@host04:/home/kite/Desktop# docker network ls</span><br><span class="line">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class="line">118c43b92cc6   bridge    bridge    local</span><br><span class="line">60cb3d796e6b   host      host      local</span><br><span class="line">c5b7b2fbb219   none      null      local</span><br></pre></td></tr></table></figure>

<p>這是目前的container網路相關配置，我們再使用<code>docker network inspect 118c</code>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@host04:/home/kite/Desktop# docker network inspect 118</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Name&quot;: &quot;bridge&quot;,</span><br><span class="line">        &quot;Id&quot;: &quot;118c43b92cc662ecc4e86dc17d63fc599bcc3d0d39547715f92ab77c4fcc2b6c&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2022-02-24T11:01:57.933731418+08:00&quot;,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;bridge&quot;,</span><br><span class="line">        &quot;EnableIPv6&quot;: false,</span><br><span class="line">        &quot;IPAM&quot;: &#123;</span><br><span class="line">            &quot;Driver&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;Options&quot;: null,</span><br><span class="line">            #Here</span><br><span class="line">            &quot;Config&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;Subnet&quot;: &quot;172.17.0.0/16&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;172.17.0.1&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Internal&quot;: false,</span><br><span class="line">        &quot;Attachable&quot;: false,</span><br><span class="line">        &quot;Ingress&quot;: false,</span><br><span class="line">        &quot;ConfigFrom&quot;: &#123;</span><br><span class="line">            &quot;Network&quot;: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ConfigOnly&quot;: false,</span><br><span class="line">        #Here</span><br><span class="line">        &quot;Containers&quot;: &#123;</span><br><span class="line">            &quot;794e99f196278ea048b963bbac0845ad228a768ca9f787450d557b317f098f7e&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;web01&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;df84f183d1fcd096c04e9f902000176b2bb25e7eb46e1c3a9e1c16b9d42c9642&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:ac:11:00:04&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;172.17.0.4/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;cb69532a01df76e063aeaf5addaf921ff5e8f7fd273e6fa685b5e976c26e5355&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;box01&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;1d6f5ea9838a274bed7bbb4df5ed66a4071119aec190414de7ca0d12f089dd14&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;172.17.0.2/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;ef42984b47681f9f0d923dc85902e952a6a53adcc5d7f37cb2c4290711945e62&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;box02&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;3153006bfa4e61c83a9edf44cdf4d666557603c74ef1bcacd8fcac01c43eef10&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:ac:11:00:03&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;172.17.0.3/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Options&quot;: &#123;</span><br><span class="line">            &quot;com.docker.network.bridge.default_bridge&quot;: &quot;true&quot;,</span><br><span class="line">            &quot;com.docker.network.bridge.enable_icc&quot;: &quot;true&quot;,</span><br><span class="line">            &quot;com.docker.network.bridge.enable_ip_masquerade&quot;: &quot;true&quot;,</span><br><span class="line">            &quot;com.docker.network.bridge.host_binding_ipv4&quot;: &quot;0.0.0.0&quot;,</span><br><span class="line">            &quot;com.docker.network.bridge.name&quot;: &quot;docker0&quot;,</span><br><span class="line">            &quot;com.docker.network.driver.mtu&quot;: &quot;1500&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Labels&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>整理後，抽出幾個部分說明</p>
<p>Config</p>
<p>gateway為<code>172.17.0.1</code></p>
<pre><code>        &quot;Config&quot;: [
            &#123;
                &quot;Subnet&quot;: &quot;172.17.0.0/16&quot;,
                &quot;Gateway&quot;: &quot;172.17.0.1&quot;
            &#125;
</code></pre>
<p>Containers</p>
<p>這個bridge就扮演了switch的角色，container都接這個bridge上面，可以再參考下面的圖片。</p>
<p>因此有了這個<code>docker0</code>，就可以讓container彼此之間進行交互溝通。</p>
<p>並且container在預設建立時，沒有指令要使用哪個bridge，那默認就會使用<code>docker0</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;Containers&quot;: &#123;</span><br><span class="line">    &quot;794e99f196278ea048b963bbac0845ad228a768ca9f787450d557b317f098f7e&quot;: &#123;</span><br><span class="line">        &quot;Name&quot;: &quot;web01&quot;,</span><br><span class="line">        &quot;EndpointID&quot;: &quot;df84f183d1fcd096c04e9f902000176b2bb25e7eb46e1c3a9e1c16b9d42c9642&quot;,</span><br><span class="line">        &quot;MacAddress&quot;: &quot;02:42:ac:11:00:04&quot;,</span><br><span class="line">        &quot;IPv4Address&quot;: &quot;172.17.0.4/16&quot;,</span><br><span class="line">        &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;cb69532a01df76e063aeaf5addaf921ff5e8f7fd273e6fa685b5e976c26e5355&quot;: &#123;</span><br><span class="line">        &quot;Name&quot;: &quot;box01&quot;,</span><br><span class="line">        &quot;EndpointID&quot;: &quot;1d6f5ea9838a274bed7bbb4df5ed66a4071119aec190414de7ca0d12f089dd14&quot;,</span><br><span class="line">        &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,</span><br><span class="line">        &quot;IPv4Address&quot;: &quot;172.17.0.2/16&quot;,</span><br><span class="line">        &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;ef42984b47681f9f0d923dc85902e952a6a53adcc5d7f37cb2c4290711945e62&quot;: &#123;</span><br><span class="line">        &quot;Name&quot;: &quot;box02&quot;,</span><br><span class="line">        &quot;EndpointID&quot;: &quot;3153006bfa4e61c83a9edf44cdf4d666557603c74ef1bcacd8fcac01c43eef10&quot;,</span><br><span class="line">        &quot;MacAddress&quot;: &quot;02:42:ac:11:00:03&quot;,</span><br><span class="line">        &quot;IPv4Address&quot;: &quot;172.17.0.3/16&quot;,</span><br><span class="line">        &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/fLELTcL.png" alt="Untitled"></p>
<h2 id="5-容器對外通訊之bridge網路"><a href="#5-容器對外通訊之bridge網路" class="headerlink" title="5. 容器對外通訊之bridge網路"></a>5. 容器對外通訊之bridge網路</h2><p><img src="https://i.imgur.com/U5mek0P.png" alt="network.drawio"></p>
<p>可以先安裝<code> sudo apt-get install -y bridge-utils</code>，接著我們下指令，我們會看到docker0有3個<code>interfaces</code>以<code>veth</code>開頭，就如我們上面圖片一樣的示意圖。因為我們有3個container所以就會有3個interface。</p>
<p>假設我們再刪掉一個container，再重新下<code>brctl show</code>指令，也就會發現少一個喔。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@host04:/home/kite/Desktop# brctl show</span><br><span class="line">bridge name	bridge id		STP enabled	interfaces</span><br><span class="line">docker0		8000.024280629c23	no		veth2024750</span><br><span class="line">							            veth3872608</span><br><span class="line">               							vetha5bf5e2</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我們複習一下</p>
<ol>
<li>如果<code>box01</code> ping <code>web01</code>能成功，路線會經過<code>docker0</code>過去。</li>
<li>我們<code>box01</code>往外網ping能成功，路線一樣會經過<code>docker0</code>往外丟。(前提是host主機本身也能連外網，這樣才能ping成功)</li>
</ol>
<p>那<code>docker0</code>怎麼走出去的，實際還是要看路由，可以使用<code>ip route</code>來看一下，其中 <code>default via 192.168.152.55</code> 就是<code>eth0</code>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@host04:/home/kite/Desktop# ip route</span><br><span class="line">default via 192.168.152.55 dev ens33 proto dhcp metric 100 </span><br><span class="line">169.254.0.0/16 dev ens33 scope link metric 1000 </span><br><span class="line">172.17.0.0/16 dev docker0 proto kernel scope link src 172.17.0.1 </span><br><span class="line">192.168.152.0/24 dev ens33 proto kernel scope link src 192.168.152.137 metric 100 </span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/ATlSu1Y.png" alt="network.drawio"></p>
<p>如果<code>box01</code>要出去到外網時，因為是pirvate ip，因此到外網前會再透過<code>NAT</code>轉為成<code>eth0</code>的IP地址，而實際怎麼轉換的規則可以使用<code>iptables --list -t nat</code>來查看：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@host04:/home/kite/Desktop# iptables --list -t nat</span><br><span class="line">Chain PREROUTING (policy ACCEPT)</span><br><span class="line">target     prot opt source               destination         </span><br><span class="line">DOCKER     all  --  anywhere             anywhere             ADDRTYPE match dst-type LOCAL</span><br><span class="line"></span><br><span class="line">Chain INPUT (policy ACCEPT)</span><br><span class="line">target     prot opt source               destination         </span><br><span class="line"></span><br><span class="line">Chain OUTPUT (policy ACCEPT)</span><br><span class="line">target     prot opt source               destination         </span><br><span class="line">DOCKER     all  --  anywhere            !localhost/8          ADDRTYPE match dst-type LOCAL</span><br><span class="line"></span><br><span class="line">Chain POSTROUTING (policy ACCEPT)</span><br><span class="line">target     prot opt source               destination         </span><br><span class="line">MASQUERADE  all  --  172.17.0.0/16        anywhere            </span><br><span class="line">MASQUERADE  tcp  --  172.17.0.4           172.17.0.4           tcp dpt:http</span><br><span class="line"></span><br><span class="line">Chain DOCKER (2 references)</span><br><span class="line">target     prot opt source               destination         </span><br><span class="line">RETURN     all  --  anywhere             anywhere            </span><br><span class="line">DNAT       tcp  --  anywhere             anywhere             tcp dpt:http-alt to:172.17.0.4:80</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>參考資料</p>
<p><a href="https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/4/html/Security_Guide/s1-firewall-ipt-fwd.html">https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/4/html/Security_Guide/s1-firewall-ipt-fwd.html</a></p>
<h2 id="6-網路知識補充NAT"><a href="#6-網路知識補充NAT" class="headerlink" title="6. 網路知識補充NAT"></a>6. 網路知識補充NAT</h2><p>NAT的技術在解決什麼問題？</p>
<blockquote>
<p>IP不足的問題</p>
</blockquote>
<p>網路上進行通信必須要一個獨一無二的IP才能進行傳輸。</p>
<p>舉例來說，在家裡的筆電、桌機、平板都給一個私有IP，透過路由器後，會再轉換成公有IP。回程的時候再透過路由器將公有IP轉換為對應內部的IP。</p>
<p>NAT translates：</p>
<ul>
<li>Private to public</li>
<li>Public to private</li>
</ul>
<h2 id="7-創建和使用自定義bridge-上"><a href="#7-創建和使用自定義bridge-上" class="headerlink" title="7. 創建和使用自定義bridge(上)"></a>7. 創建和使用自定義bridge(上)</h2><p><img src="https://i.imgur.com/gxUx2r9.png"></p>
<p><code>docker network create -d [類型] [名稱]</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker network create -d bridge mybridge</span><br></pre></td></tr></table></figure>

<p>其中<code>-d</code> 指的就是driver，因為network類型有很多種，以此為例，我們創建一個<code>bridge</code>類型。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">創建bridge名為mybridge</span></span><br><span class="line">root@host04:/home/kite/Desktop# docker network create -d bridge mybridge</span><br><span class="line">020d342bf4a11304f4509d44ff64df2555918b2ff4d6664878254faba753d489</span><br><span class="line">root@host04:/home/kite/Desktop# docker network ls</span><br><span class="line">NETWORK ID     NAME       DRIVER    SCOPE</span><br><span class="line">118c43b92cc6   bridge     bridge    local</span><br><span class="line">60cb3d796e6b   host       host      local</span><br><span class="line">020d342bf4a1   mybridge   bridge    local</span><br><span class="line">c5b7b2fbb219   none       null      local</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看mybridge 172.18.0.0 ，還記得嗎？剛剛默認的bridge 是172.17.0.0</span></span><br><span class="line">root@host04:/home/kite/Desktop# docker network inspect mybridge</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Name&quot;: &quot;mybridge&quot;,</span><br><span class="line">        &quot;Id&quot;: &quot;020d342bf4a11304f4509d44ff64df2555918b2ff4d6664878254faba753d489&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2022-03-01T15:19:52.641431288+08:00&quot;,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;bridge&quot;,</span><br><span class="line">        &quot;EnableIPv6&quot;: false,</span><br><span class="line">        &quot;IPAM&quot;: &#123;</span><br><span class="line">            &quot;Driver&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">            &quot;Config&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;Subnet&quot;: &quot;172.18.0.0/16&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;172.18.0.1&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Internal&quot;: false,</span><br><span class="line">        &quot;Attachable&quot;: false,</span><br><span class="line">        &quot;Ingress&quot;: false,</span><br><span class="line">        &quot;ConfigFrom&quot;: &#123;</span><br><span class="line">            &quot;Network&quot;: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ConfigOnly&quot;: false,</span><br><span class="line">        &quot;Containers&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Labels&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="7-1-如何添加指定的bridge在container上？"><a href="#7-1-如何添加指定的bridge在container上？" class="headerlink" title="7.1. 如何添加指定的bridge在container上？"></a>7.1. 如何添加指定的bridge在container上？</h3><p>補上<code>--network mybridge</code>，完成！</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@host04:/home/kite/Desktop# docker container run -d --rm --name box03 --network mybridge busybox /bin/sh -c &quot;while true; do sleep 3600; done&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>來看一下container設定內容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@host04:/home/kite/Desktop# docker container inspect box03</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Id&quot;: &quot;408dbc15598a60ec6f57dbfd7ae080cc9bceb318bf307a19303b757d8d9e3265&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2022-03-01T07:21:15.326172232Z&quot;,</span><br><span class="line">        &quot;Path&quot;: &quot;/bin/sh&quot;,</span><br><span class="line">		...</span><br><span class="line">		...</span><br><span class="line">        &quot;NetworkSettings&quot;: &#123;</span><br><span class="line">            &quot;Bridge&quot;: &quot;&quot;,</span><br><span class="line">			...</span><br><span class="line">			...</span><br><span class="line">            &quot;Networks&quot;: &#123;</span><br><span class="line">                &quot;mybridge&quot;: &#123;</span><br><span class="line">                    &quot;IPAMConfig&quot;: null,</span><br><span class="line">                    &quot;Links&quot;: null,</span><br><span class="line">                    &quot;Aliases&quot;: [</span><br><span class="line">                        &quot;408dbc15598a&quot;</span><br><span class="line">                    ],</span><br><span class="line">                    &quot;NetworkID&quot;: &quot;020d342bf4a11304f4509d44ff64df2555918b2ff4d6664878254faba753d489&quot;,</span><br><span class="line">                    &quot;EndpointID&quot;: &quot;c3acfbc43272a5c1c9c01a1ff3c05faa7925e8f3b86617d24cac3d620f74be48&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;172.18.0.1&quot;,</span><br><span class="line">                    &quot;IPAddress&quot;: &quot;172.18.0.2&quot;,</span><br><span class="line">                    &quot;IPPrefixLen&quot;: 16,</span><br><span class="line">                    &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;GlobalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;GlobalIPv6PrefixLen&quot;: 0,</span><br><span class="line">                    &quot;MacAddress&quot;: &quot;02:42:ac:12:00:02&quot;,</span><br><span class="line">                    &quot;DriverOpts&quot;: null</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="7-2-在一個container可否有2個bridge？"><a href="#7-2-在一個container可否有2個bridge？" class="headerlink" title="7.2. 在一個container可否有2個bridge？"></a>7.2. 在一個container可否有2個bridge？</h3><p>可以喔。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker network connect bridge box03</span><br></pre></td></tr></table></figure>

<p>查看一下container：</p>
<p>這個<code>box03</code>拿到了兩個ip，分別是<code>172.17.0.5</code>、<code>172.18.0.2</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@host04:/home/kite/Desktop# docker network connect bridge box03</span><br><span class="line">root@host04:/home/kite/Desktop# docker container inspect box03</span><br><span class="line">[</span><br><span class="line">	...</span><br><span class="line">	...</span><br><span class="line">        &quot;NetworkSettings&quot;: &#123;</span><br><span class="line">			...</span><br><span class="line">            &quot;Networks&quot;: &#123;</span><br><span class="line">                &quot;bridge&quot;: &#123;</span><br><span class="line">                    &quot;IPAMConfig&quot;: &#123;&#125;,</span><br><span class="line">                    &quot;Links&quot;: null,</span><br><span class="line">                    &quot;Aliases&quot;: [],</span><br><span class="line">                    &quot;NetworkID&quot;: &quot;118c43b92cc662ecc4e86dc17d63fc599bcc3d0d39547715f92ab77c4fcc2b6c&quot;,</span><br><span class="line">                    &quot;EndpointID&quot;: &quot;d15ea2680f6b23826c99995932b2ad178366ee3008cb1025fc7385133bd63b8e&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;172.17.0.1&quot;,</span><br><span class="line">                    &quot;IPAddress&quot;: &quot;172.17.0.5&quot;,</span><br><span class="line">                    &quot;IPPrefixLen&quot;: 16,</span><br><span class="line">                    &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;GlobalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;GlobalIPv6PrefixLen&quot;: 0,</span><br><span class="line">                    &quot;MacAddress&quot;: &quot;02:42:ac:11:00:05&quot;,</span><br><span class="line">                    &quot;DriverOpts&quot;: &#123;&#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;mybridge&quot;: &#123;</span><br><span class="line">                    &quot;IPAMConfig&quot;: null,</span><br><span class="line">                    &quot;Links&quot;: null,</span><br><span class="line">                    &quot;Aliases&quot;: [</span><br><span class="line">                        &quot;408dbc15598a&quot;</span><br><span class="line">                    ],</span><br><span class="line">                    &quot;NetworkID&quot;: &quot;020d342bf4a11304f4509d44ff64df2555918b2ff4d6664878254faba753d489&quot;,</span><br><span class="line">                    &quot;EndpointID&quot;: &quot;c3acfbc43272a5c1c9c01a1ff3c05faa7925e8f3b86617d24cac3d620f74be48&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;172.18.0.1&quot;,</span><br><span class="line">                    &quot;IPAddress&quot;: &quot;172.18.0.2&quot;,</span><br><span class="line">                    &quot;IPPrefixLen&quot;: 16,</span><br><span class="line">                    &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;GlobalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;GlobalIPv6PrefixLen&quot;: 0,</span><br><span class="line">                    &quot;MacAddress&quot;: &quot;02:42:ac:12:00:02&quot;,</span><br><span class="line">                    &quot;DriverOpts&quot;: null</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>進入到container裡面驗證，的確有兩個IP：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@host04:/home/kite/Desktop# docker container exec -it box03 sh</span><br><span class="line">/ # ip a</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">21: eth0@if22: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueue </span><br><span class="line">    link/ether 02:42:ac:12:00:02 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.18.0.2/16 brd 172.18.255.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">23: eth1@if24: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueue </span><br><span class="line">    link/ether 02:42:ac:11:00:05 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.0.5/16 brd 172.17.255.255 scope global eth1</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure>

<h3 id="7-3-在bridge中移除掉container"><a href="#7-3-在bridge中移除掉container" class="headerlink" title="7.3. 在bridge中移除掉container"></a>7.3. 在bridge中移除掉container</h3><p>可以透過<code>docker network disconnect [bridge name] [container name]</code> ：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@host04:/home/kite/Desktop# docker network disconnect bridge box03</span><br></pre></td></tr></table></figure>

<p>再重查一次，的確沒有<code>bridge</code>那一項：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@host04:/home/kite/Desktop# docker container inspect box03</span><br><span class="line">[</span><br><span class="line">	...</span><br><span class="line">	...</span><br><span class="line">        &quot;NetworkSettings&quot;: &#123;</span><br><span class="line">			...</span><br><span class="line">            &quot;Networks&quot;: &#123;</span><br><span class="line">                &quot;mybridge&quot;: &#123;</span><br><span class="line">                    &quot;IPAMConfig&quot;: null,</span><br><span class="line">                    &quot;Links&quot;: null,</span><br><span class="line">                    &quot;Aliases&quot;: [</span><br><span class="line">                        &quot;408dbc15598a&quot;</span><br><span class="line">                    ],</span><br><span class="line">                    &quot;NetworkID&quot;: &quot;020d342bf4a11304f4509d44ff64df2555918b2ff4d6664878254faba753d489&quot;,</span><br><span class="line">                    &quot;EndpointID&quot;: &quot;c3acfbc43272a5c1c9c01a1ff3c05faa7925e8f3b86617d24cac3d620f74be48&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;172.18.0.1&quot;,</span><br><span class="line">                    &quot;IPAddress&quot;: &quot;172.18.0.2&quot;,</span><br><span class="line">                    &quot;IPPrefixLen&quot;: 16,</span><br><span class="line">                    &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;GlobalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;GlobalIPv6PrefixLen&quot;: 0,</span><br><span class="line">                    &quot;MacAddress&quot;: &quot;02:42:ac:12:00:02&quot;,</span><br><span class="line">                    &quot;DriverOpts&quot;: null</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>



<h2 id="8-創建和使用自定義bridge-下"><a href="#8-創建和使用自定義bridge-下" class="headerlink" title="8. 創建和使用自定義bridge(下)"></a>8. 創建和使用自定義bridge(下)</h2><h3 id="8-1-自定義bridge好處"><a href="#8-1-自定義bridge好處" class="headerlink" title="8.1. 自定義bridge好處"></a>8.1. 自定義bridge好處</h3><p>container 使用自定義的bridge時，容器之間的互ping可以多一種選擇，就是直接使用container 名稱</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@host04:/home/kite/Desktop# docker container exec -ti box04 ping 172.18.0.4</span><br><span class="line">PING 172.18.0.4 (172.18.0.4): 56 data bytes</span><br><span class="line">64 bytes from 172.18.0.4: seq=0 ttl=64 time=0.262 ms</span><br><span class="line">64 bytes from 172.18.0.4: seq=1 ttl=64 time=0.095 ms</span><br><span class="line"></span><br><span class="line">#這個方法我目前沒試成功，不過的確在教學中看老師是有成功的，目前懷疑是docker的版本問題</span><br><span class="line">root@host04:/home/kite/Desktop# docker container exec -ti box04 ping box05</span><br></pre></td></tr></table></figure>

<p>記錄問題：</p>
<p>目前在使用container 名稱互ping是失敗的，環境資訊先memo，後續找出確切問題</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@host04:/home/kite/Desktop# docker version</span><br><span class="line">Client:</span><br><span class="line"> Version:           20.10.7</span><br><span class="line"> API version:       1.41</span><br><span class="line"> Go version:        go1.13.8</span><br><span class="line"> Git commit:        20.10.7-0ubuntu5~20.04.2</span><br><span class="line"> Built:             Mon Nov  1 00:34:17 2021</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Context:           default</span><br><span class="line"> Experimental:      true</span><br><span class="line"></span><br><span class="line">Server:</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          20.10.7</span><br><span class="line">  API version:      1.41 (minimum version 1.12)</span><br><span class="line">  Go version:       go1.13.8</span><br><span class="line">  Git commit:       20.10.7-0ubuntu5~20.04.2</span><br><span class="line">  Built:            Fri Oct 22 00:45:53 2021</span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     false</span><br><span class="line"> containerd:</span><br><span class="line">  Version:          1.5.5-0ubuntu3~20.04.1</span><br><span class="line">  GitCommit:        </span><br><span class="line"> runc:</span><br><span class="line">  Version:          1.0.1-0ubuntu2~20.04.1</span><br><span class="line">  GitCommit:        </span><br><span class="line"> docker-init:</span><br><span class="line">  Version:          0.19.0</span><br><span class="line">  GitCommit:        </span><br><span class="line">  </span><br><span class="line">root@host04:/home/kite/Desktop# lsb_release -a</span><br><span class="line">No LSB modules are available.</span><br><span class="line">Distributor ID:	Ubuntu</span><br><span class="line">Description:	Ubuntu 20.04.3 LTS</span><br><span class="line">Release:	20.04</span><br><span class="line">Codename:	focal</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="8-2-自己決定區段"><a href="#8-2-自己決定區段" class="headerlink" title="8.2. 自己決定區段"></a>8.2. 自己決定區段</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker network create -d bridge --gateway 172.200.0.1 --subnet 172.200.0.0/16</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">建立一個bridge 並自行設定gateway、subnet</span></span><br><span class="line">root@host04:/home/kite/Desktop# docker network create -d bridge --gateway 172.200.0.1 --subnet 172.200.0.0/16 mydemo</span><br><span class="line">b9020c5774943e03e7ddfbf9506d16434a0058330e2e4798ddfa9ef37403e598</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">檢查network清單</span></span><br><span class="line">root@host04:/home/kite/Desktop# docker network ls</span><br><span class="line">NETWORK ID     NAME       DRIVER    SCOPE</span><br><span class="line">118c43b92cc6   bridge     bridge    local</span><br><span class="line">60cb3d796e6b   host       host      local</span><br><span class="line">020d342bf4a1   mybridge   bridge    local</span><br><span class="line">b9020c577494   mydemo     bridge    local</span><br><span class="line">c5b7b2fbb219   none       null      local</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看mydemo詳細</span></span><br><span class="line">root@host04:/home/kite/Desktop# docker network inspect mydemo</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Name&quot;: &quot;mydemo&quot;,</span><br><span class="line">        &quot;Id&quot;: &quot;b9020c5774943e03e7ddfbf9506d16434a0058330e2e4798ddfa9ef37403e598&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2022-03-01T17:06:02.813440335+08:00&quot;,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;bridge&quot;,</span><br><span class="line">        &quot;EnableIPv6&quot;: false,</span><br><span class="line">        &quot;IPAM&quot;: &#123;</span><br><span class="line">            &quot;Driver&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">            &quot;Config&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;Subnet&quot;: &quot;172.200.0.0/16&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;172.200.0.1&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Internal&quot;: false,</span><br><span class="line">        &quot;Attachable&quot;: false,</span><br><span class="line">        &quot;Ingress&quot;: false,</span><br><span class="line">        &quot;ConfigFrom&quot;: &#123;</span><br><span class="line">            &quot;Network&quot;: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ConfigOnly&quot;: false,</span><br><span class="line">        &quot;Containers&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Labels&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="9-容器的端口轉發Port-Forwarding"><a href="#9-容器的端口轉發Port-Forwarding" class="headerlink" title="9. 容器的端口轉發Port Forwarding"></a>9. 容器的端口轉發Port Forwarding</h2><p>試著建立一個容器：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker container run -d -p 8080:80 --name web01 nginx</span><br></pre></td></tr></table></figure>

<p>我們使用<code>sudo iptables -t nat -nvxL</code></p>
<p>裡面有一條很重要的訊息<code> tcp dpt:8080 to:172.17.0.4:80</code> 也就是指host 8080 port 映射到 容器172.17.0.4:80 port。顯然很多docker network 的底層實際會用到iptable進行一些設定，好讓容器與host之間能有很好的互通效果。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@host04:/home/kite/Desktop# sudo iptables -t nat -nvxL</span><br><span class="line">Chain PREROUTING (policy ACCEPT 13 packets, 1629 bytes)</span><br><span class="line">    pkts      bytes target     prot opt in     out     source               destination         </span><br><span class="line">       4      312 DOCKER     all  --  *      *       0.0.0.0/0            0.0.0.0/0            ADDRTYPE match dst-type LOCAL</span><br><span class="line"></span><br><span class="line">Chain INPUT (policy ACCEPT 12 packets, 1545 bytes)</span><br><span class="line">    pkts      bytes target     prot opt in     out     source               destination         </span><br><span class="line"></span><br><span class="line">Chain OUTPUT (policy ACCEPT 140 packets, 13111 bytes)</span><br><span class="line">    pkts      bytes target     prot opt in     out     source               destination         </span><br><span class="line">       0        0 DOCKER     all  --  *      *       0.0.0.0/0           !127.0.0.0/8          ADDRTYPE match dst-type LOCAL</span><br><span class="line"></span><br><span class="line">Chain POSTROUTING (policy ACCEPT 141 packets, 13195 bytes)</span><br><span class="line">    pkts      bytes target     prot opt in     out     source               destination         </span><br><span class="line">       0        0 MASQUERADE  all  --  *      !br-b9020c577494  172.200.0.0/16       0.0.0.0/0           </span><br><span class="line">       0        0 MASQUERADE  all  --  *      !br-020d342bf4a1  172.18.0.0/16        0.0.0.0/0           </span><br><span class="line">      27     1767 MASQUERADE  all  --  *      !docker0  172.17.0.0/16        0.0.0.0/0           </span><br><span class="line">       0        0 MASQUERADE  tcp  --  *      *       172.17.0.4           172.17.0.4           tcp dpt:80</span><br><span class="line"></span><br><span class="line">Chain DOCKER (2 references)</span><br><span class="line">    pkts      bytes target     prot opt in     out     source               destination         </span><br><span class="line">       0        0 RETURN     all  --  br-b9020c577494 *       0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">       0        0 RETURN     all  --  br-020d342bf4a1 *       0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">       0        0 RETURN     all  --  docker0 *       0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">       1       60 DNAT       tcp  --  !docker0 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:8080 to:172.17.0.4:80</span><br></pre></td></tr></table></figure>



<h2 id="10-端口轉發和dockerfile"><a href="#10-端口轉發和dockerfile" class="headerlink" title="10. 端口轉發和dockerfile"></a>10. 端口轉發和dockerfile</h2><p><a href="https://github.com/nginxinc/docker-nginx/blob/master/Dockerfile-alpine.template">https://github.com/nginxinc/docker-nginx/blob/master/Dockerfile-alpine.template</a></p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> alpine:%%ALPINE_VERSION%%</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> docker-entrypoint.sh /</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> 10-listen-on-ipv6-by-default.sh /docker-entrypoint.d</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> 20-envsubst-on-templates.sh /docker-entrypoint.d</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> 30-tune-worker-processes.sh /docker-entrypoint.d</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;/docker-entrypoint.sh&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">STOPSIGNAL</span> SIGQUIT</span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;nginx&quot;</span>, <span class="string">&quot;-g&quot;</span>, <span class="string">&quot;daemon off;&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<p>我們可以看到在<code>nginx</code>的dockerfile中有一行 <code>EXPOSE 80</code> ，可以做到對外PORT的映射。</p>
<p>提問，那如果dockerfile 沒有這行<code>EXPOSE 80</code>，我們還能使用<code>docker container run -p </code>這樣的方式設定port嗎？答案是可以的。</p>
<p>dockefile這邊如果有明確使用<code>EXPOSE 80</code>，主要的精神在表達讓使用者知道有一個默認的對外port。</p>
<blockquote>
<p>The <code>EXPOSE</code> instruction does not actually publish the port. It functions as a type of documentation between the person who builds the image and the person who runs the container,about which ports are intended to be published.</p>
</blockquote>
<p><code>EXPOSE</code> 默認為<code>TCP</code> ，也可以具體明確定義：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span>/udp</span><br></pre></td></tr></table></figure>

<p>當然，也可以同使支持兩種協議，寫二行即可：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span>/tcp</span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span>/udp</span><br></pre></td></tr></table></figure>



<h2 id="11-HOST與None"><a href="#11-HOST與None" class="headerlink" title="11. HOST與None"></a>11. HOST與None</h2><h3 id="11-1-HOST"><a href="#11-1-HOST" class="headerlink" title="11.1. HOST"></a>11.1. HOST</h3><p>針對HOST詳細說明</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@host04:/home/kite/Desktop# docker network ls</span><br><span class="line">NETWORK ID     NAME       DRIVER    SCOPE</span><br><span class="line">b22fdb790b7f   bridge     bridge    local</span><br><span class="line">60cb3d796e6b   host       host      local</span><br></pre></td></tr></table></figure>



<p>建立一個container 並使用<code>host</code>network：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@host04:/home/kite/Desktop# docker container run -d --name web03 --network host nginx</span><br><span class="line">e1b6b611df2e79a4622359385b98e5a0c824af8a740d71a9ad2ecfcf14fac886</span><br></pre></td></tr></table></figure>

<p>列出container ps ，我們會發現<code>web03</code>port 是空白的。是因為我們剛剛使用的的是host 那組netwowrk，所以目前這個container是與host共用同一組network設定的</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@host04:/home/kite/Desktop# docker container ps -a</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND    CREATED         STATUS                        PORTS   NAMES</span><br><span class="line">e1b6b611df2e   nginx     &quot;/docker-entrypoint.…&quot;   7 minutes ago   Up 7 minutes            web03</span><br><span class="line">f1a1469eac7f   nginx     &quot;/docker-entrypoint.…&quot;   2 hours ago     Up 7 minutes    80/tcp  web02</span><br></pre></td></tr></table></figure>

<p>使用<code>curl</code>查看一下，的確在host上的80 port 是映射到<code>web03</code> container ：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@host04:/home/kite/Desktop# curl 127.0.0.1:80</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">html &#123; color-scheme: light dark; &#125;</span><br><span class="line">body &#123; width: 35em; margin: 0 auto;</span><br><span class="line">font-family: Tahoma, Verdana, Arial, sans-serif; &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;If you see this page, the nginx web server is successfully installed and</span><br><span class="line">working. Further configuration is required.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;For online documentation and support please refer to</span><br><span class="line">&lt;a href=&quot;http://nginx.org/&quot;&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span><br><span class="line">Commercial support is available at</span><br><span class="line">&lt;a href=&quot;http://nginx.com/&quot;&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>我們可以思考一下，那這樣的使用<code>host netowrk</code>與使用<code>container -p 80:80</code>(沒填寫network 預設會選擇<code>docker0</code>，也就是<code>bridge network</code>)會有什麼差別？</p>
<p>其實用圖片來說，多了一個<code>docker0</code>，當中間層的轉發，效率上是有差一些的喔。(因為突然斷電…圖的設計稿不見了，懶得重畫…)想像一下，多了一個web03 然後不經過<code>docker0</code>,直接一條線對接<code>192.168.152.55 eth0</code>。</p>
<p><img src="https://i.imgur.com/gxUx2r9.png"></p>
<h3 id="11-2-NONE"><a href="#11-2-NONE" class="headerlink" title="11.2. NONE"></a>11.2. NONE</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@host04:/home/kite/Desktop# docker network ls</span><br><span class="line">NETWORK ID     NAME       DRIVER    SCOPE</span><br><span class="line">b22fdb790b7f   bridge     bridge    local</span><br><span class="line">60cb3d796e6b   host       host      local</span><br><span class="line">c5b7b2fbb219   none       null      local</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">建立一個box01 使用network none</span></span><br><span class="line">root@host04:/home/kite/Desktop# docker container run -it --name box01 --network none busybox </span><br><span class="line">/ # ip a</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>有一些第三方開發特殊需求，只需要container容器，相關的網路配置由自己決定與設計。就會使用到 <code>none network</code></p>
<h2 id="12-網路命名空間"><a href="#12-網路命名空間" class="headerlink" title="12. 網路命名空間"></a>12. 網路命名空間</h2><p><img src="https://i.imgur.com/8O8nGDp.png" alt="docker-volume"></p>
<p><code>add-ns-to-br.sh</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">bridge=$1</span><br><span class="line">namespace=$2</span><br><span class="line">addr=$3</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">link</span>的兩頭</span></span><br><span class="line">vethA=veth-$namespace</span><br><span class="line">vethB=eth00</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">建立一個namespace空間</span></span><br><span class="line">sudo ip netns add $namespace</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">建立一個<span class="built_in">link</span>，兩頭一個是<span class="variable">$vethA</span>，另一個是<span class="variable">$vethB</span></span></span><br><span class="line">sudo ip link add $vethA type veth peer name $vethB</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">將<span class="variable">$vethB</span>放到這個namespace裡</span></span><br><span class="line">sudo ip link set $vethB netns $namespace</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">這個namespace空間中，針對<span class="variable">$vethB</span>頭賦與一個IP地址給它</span></span><br><span class="line">sudo ip netns exec $namespace ip addr add $addr dev $vethB</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">將<span class="variable">$vethB</span> 給up起來</span></span><br><span class="line">sudo ip netns exec $namespace ip link set $vethB up</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">將<span class="variable">$vethA</span> 給up起來</span></span><br><span class="line">sudo ip link set $vethA up</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">將<span class="variable">$vethA</span> 加到這個bridge上</span></span><br><span class="line">sudo brctl addif $bridge $vethA</span><br></pre></td></tr></table></figure>

<h3 id="12-1-腳本執行"><a href="#12-1-腳本執行" class="headerlink" title="12.1. 腳本執行"></a>12.1. 腳本執行</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kite@host04:~/Desktop/namespace$ sh add-ns-to-br.sh mydocker0 ns1 172.16.1.1/16</span><br><span class="line">kite@host04:~/Desktop/namespace$ sh add-ns-to-br.sh mydocker0 ns1 172.16.1.2/16</span><br></pre></td></tr></table></figure>



<h3 id="12-2-驗證"><a href="#12-2-驗證" class="headerlink" title="12.2. 驗證"></a>12.2. 驗證</h3><p>我使用的是ubuntu 環境，去ping 另一個ip 沒有成功。有空再回來試試看，以下是視頻的實驗結果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[vagrant@docker-host1 ~]$ sudo ip netns exec ns1 bash</span><br><span class="line">[root@docker-host1 vagrant]# ip a</span><br><span class="line">1: lo: &lt;LOOPBACK&gt; mtu 65536 qdisc noop state DOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">5: eth00@if6: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default qlen 1000</span><br><span class="line">    link/ether f2:59:19:34:73:70 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet 172.16.1.1/16 scope global eth00</span><br><span class="line">    valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::f059:19ff:fe34:7370/64 scope link</span><br><span class="line">    valid_lft forever preferred_lft forever</span><br><span class="line">[root@docker-host1 vagrant]# ping 172.16.1.2</span><br><span class="line">PING 172.16.1.2 (172.16.1.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from 172.16.1.2: icmp_seq=1 ttl=64 time=0.029 ms</span><br><span class="line">64 bytes from 172.16.1.2: icmp_seq=2 ttl=64 time=0.080 ms</span><br><span class="line">^C</span><br><span class="line">--- 172.16.1.2 ping statistics ---</span><br><span class="line">2 packets transmitted, 2 received, 0% packet loss, time 1000ms</span><br><span class="line">rtt min/avg/max/mdev = 0.029/0.054/0.080/0.026 ms</span><br><span class="line">[root@docker-host1 vagrant]#</span><br></pre></td></tr></table></figure>





<h2 id="13-多容器應用部署練習"><a href="#13-多容器應用部署練習" class="headerlink" title="13. 多容器應用部署練習"></a>13. 多容器應用部署練習</h2><p>常見需求會將各個服務進行拆分各自容器之中。後續我們會再講<code>docker compose</code> ，透過配置文件定義容器之間的交互溝通與設定，搭建一個完整的環境。</p>
<p><img src="https://i.imgur.com/yxGUnHE.png" alt="image-20220303145950107"></p>
<h3 id="13-1-鏡像準備"><a href="#13-1-鏡像準備" class="headerlink" title="13.1. 鏡像準備"></a>13.1. 鏡像準備</h3><h4 id="13-1-1-REDIS"><a href="#13-1-1-REDIS" class="headerlink" title="13.1.1. REDIS"></a>13.1.1. REDIS</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@host04:/home/kite/Desktop/namespace# docker image pull redis</span><br></pre></td></tr></table></figure>

<h4 id="13-1-2-python-flask-web"><a href="#13-1-2-python-flask-web" class="headerlink" title="13.1.2. python flask web"></a>13.1.2. python flask web</h4><h5 id="13-1-2-1-資料夾結構"><a href="#13-1-2-1-資料夾結構" class="headerlink" title="13.1.2.1. 資料夾結構"></a>13.1.2.1. 資料夾結構</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@host04:/home/kite/Desktop/flask_redis_practice# tree </span><br><span class="line">.</span><br><span class="line">├── app.py</span><br><span class="line">└── Dockerfile</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="13-1-2-2-程式準備"><a href="#13-1-2-2-程式準備" class="headerlink" title="13.1.2.2. 程式準備"></a>13.1.2.2. 程式準備</h5><p><code>app.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> redis <span class="keyword">import</span> Redis</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">redis = Redis(host=os.environ.get(<span class="string">&#x27;REDIS_HOST&#x27;</span>, <span class="string">&#x27;127.0.0.1&#x27;</span>), port=<span class="number">6379</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>():</span><br><span class="line">    redis.incr(<span class="string">&#x27;hits&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;Hello Container World! I have been seen <span class="subst">&#123;redis.get(<span class="string">&#x27;hits&#x27;</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>)&#125;</span> times and my hostname is <span class="subst">&#123;socket.gethostname()&#125;</span>.\n&quot;</span></span><br></pre></td></tr></table></figure>

<h5 id="13-1-2-3-dockerfile準備"><a href="#13-1-2-3-dockerfile準備" class="headerlink" title="13.1.2.3. dockerfile準備"></a>13.1.2.3. dockerfile準備</h5><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.9</span>.<span class="number">5</span>-slim</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install flask redis &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    groupadd -r flask &amp;&amp; useradd -r -g flask flask &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">mkdir</span> /src &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">chown</span> -R flask:flask /src</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">USER</span> flask</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> app.py /src/app.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /src</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> FLASK_APP=app.py REDIS_HOST=redis</span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">5000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;flask&quot;</span>, <span class="string">&quot;run&quot;</span>, <span class="string">&quot;-h&quot;</span>, <span class="string">&quot;0.0.0.0&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<h5 id="13-1-2-4-產生鏡像檔"><a href="#13-1-2-4-產生鏡像檔" class="headerlink" title="13.1.2.4. 產生鏡像檔"></a>13.1.2.4. 產生鏡像檔</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker image build -t flask-demo .</span><br></pre></td></tr></table></figure>



<h3 id="13-2-建立bridge"><a href="#13-2-建立bridge" class="headerlink" title="13.2. 建立bridge"></a>13.2. 建立bridge</h3><p>建立名為<code>demo-network</code>的bridge</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@host04:/home/kite/Desktop/flask_redis_practice# docerk network create -d bridge demo-network</span><br></pre></td></tr></table></figure>



<h3 id="13-3-建立container"><a href="#13-3-建立container" class="headerlink" title="13.3. 建立container"></a>13.3. 建立container</h3><p>將<code>redis</code>、<code>python flask web</code> 創建時，加入至 <code>demo-network</code>中。</p>
<h4 id="13-3-1-REDIS"><a href="#13-3-1-REDIS" class="headerlink" title="13.3.1. REDIS"></a>13.3.1. REDIS</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@host04:/home/kite/Desktop/flask_redis_practice# docker container run -d --name redis-server --network demo-network redis</span><br></pre></td></tr></table></figure>

<h4 id="13-3-2-python-flask-web"><a href="#13-3-2-python-flask-web" class="headerlink" title="13.3.2. python flask web"></a>13.3.2. python flask web</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@host04:/home/kite/Desktop/flask_redis_practice# docker container run -d --network demo-network --name flask-demo --env REDIS_HOST=redis-server -p 5000:5000 flask-demo</span><br></pre></td></tr></table></figure>



<h4 id="13-3-3-測試"><a href="#13-3-3-測試" class="headerlink" title="13.3.3. 測試"></a>13.3.3. 測試</h4><p>應該就會看到網頁刷新時，會一直+1</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:5000</span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/tHoIkRm.png" alt="image-20220303145554786"></p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker 系列 - (6) Docker compose</title>
    <url>/2022/03/05/2022-03-05%20Docker%20%E7%B3%BB%E5%88%97%20-%20(6)%20Docker%20compose/</url>
    <content><![CDATA[<h2 id="1-Compose-簡介"><a href="#1-Compose-簡介" class="headerlink" title="1. Compose 簡介"></a>1. Compose 簡介</h2><p>一個環境的建置可以透過compose 方式來設計與配置。</p>
<span id="more"></span>


<p><img src="https://i.imgur.com/hVzonOL.png" alt="docker-compose-intro"></p>
<h2 id="2-基本語法結構"><a href="#2-基本語法結構" class="headerlink" title="2. 基本語法結構"></a>2. 基本語法結構</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.8&quot;</span> <span class="comment">#compose 版本</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span> <span class="comment"># 容器</span></span><br><span class="line">  <span class="attr">servicename:</span> <span class="comment"># 服務名字，這個名字也是内部 bridge網路可以使用的 DNS name </span></span><br><span class="line">    <span class="attr">image:</span> <span class="comment"># 鏡像的名字</span></span><br><span class="line">    <span class="attr">command:</span> <span class="comment"># 可選，如果設置，則會覆蓋默認鏡像裡的 CMD命令</span></span><br><span class="line">    <span class="attr">environment:</span> <span class="comment"># 可選，相當於 docker run裡的 --env</span></span><br><span class="line">    <span class="attr">volumes:</span> <span class="comment"># 可選，相當於docker run裡的 -v</span></span><br><span class="line">    <span class="attr">networks:</span> <span class="comment"># 可選，相當於 docker run裡的 --network</span></span><br><span class="line">    <span class="attr">ports:</span> <span class="comment"># 可選，相當於 docker run裡的 -p</span></span><br><span class="line">  <span class="attr">servicename2:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span> <span class="comment"># 可選，相當於 docker volume create</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span> <span class="comment"># 可選，相當於 docker network create</span></span><br></pre></td></tr></table></figure>



<p>以 Python Flask + Redis练习：为例子，改造成一个docker-compose文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker image pull redis</span><br><span class="line">docker image build -t flask-demo .</span><br><span class="line"></span><br><span class="line"><span class="comment"># create network</span></span><br><span class="line">docker network create -d bridge demo-network</span><br><span class="line"></span><br><span class="line"><span class="comment"># create container</span></span><br><span class="line">docker container run -d --name redis-server --network demo-network redis</span><br><span class="line">docker container run -d --network demo-network --name flask-demo --<span class="built_in">env</span> REDIS_HOST=redis-server -p 5000:5000 flask-demo</span><br></pre></td></tr></table></figure>

<p>docker-compose.yml 文件如下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">flask-demo:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">flask-demo:latest</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">REDIS_HOST=redis-server</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">demo-network</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:5000</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">redis-server:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:latest</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">demo-network</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">demo-network:</span> <span class="comment">#創建一個deom-network網路，不填寫參數預設建立bridge type網路</span></span><br></pre></td></tr></table></figure>



<h2 id="3-docker-compose命令行基本使用"><a href="#3-docker-compose命令行基本使用" class="headerlink" title="3. docker-compose命令行基本使用"></a>3. docker-compose命令行基本使用</h2><p>先將<code>docker-compose.yml</code>檔案放到上次練習的資料夾底下，並使用之前建立好的<code>flask-demo</code>鏡像檔。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@host04:/home/kite/Desktop/flask_redis_practice# tree</span><br><span class="line">.</span><br><span class="line">├── app.py</span><br><span class="line">├── docker-compose.yml</span><br><span class="line">└── Dockerfile</span><br></pre></td></tr></table></figure>



<h3 id="3-1-docker-compose-up"><a href="#3-1-docker-compose-up" class="headerlink" title="3.1. docker-compose up"></a>3.1. docker-compose up</h3><p>我們開始學習的第一個指令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose up</span><br></pre></td></tr></table></figure>

<p>我們會看到container 名稱會以資料夾名稱 + 鏡像名稱 + 數字(flask_redis_practice_redis-server_1) ，這個是跟後續擴容有關的設計，當然我們也可以在compose 檔設定自己定義的名稱</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kite@host04:~/Desktop/flask_redis_practice$ sudo docker-compose up</span><br><span class="line">Creating flask_redis_practice_flask-demo_1   ... done</span><br><span class="line">Creating flask_redis_practice_redis-server_1 ... done</span><br><span class="line">Attaching to flask_redis_practice_redis-server_1, flask_redis_practice_flask-demo_1</span><br><span class="line">redis-server_1  | 1:C 07 Mar 2022 02:41:20.371 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span><br><span class="line">redis-server_1  | 1:C 07 Mar 2022 02:41:20.371 # Redis version=6.2.6, bits=64, commit=00000000, modified=0, pid=1, just started</span><br><span class="line">redis-server_1  | 1:C 07 Mar 2022 02:41:20.371 # Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.conf</span><br><span class="line">redis-server_1  | 1:M 07 Mar 2022 02:41:20.372 * monotonic clock: POSIX clock_gettime</span><br><span class="line">redis-server_1  | 1:M 07 Mar 2022 02:41:20.372 * Running mode=standalone, port=6379.</span><br><span class="line">redis-server_1  | 1:M 07 Mar 2022 02:41:20.372 # Server initialized</span><br><span class="line">redis-server_1  | 1:M 07 Mar 2022 02:41:20.372 # WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add &#x27;vm.overcommit_memory = 1&#x27; to /etc/sysctl.conf and then reboot or run the command &#x27;sysctl vm.overcommit_memory=1&#x27; for this to take effect.</span><br><span class="line">redis-server_1  | 1:M 07 Mar 2022 02:41:20.372 * Ready to accept connections</span><br><span class="line">flask-demo_1    |  * Serving Flask app &#x27;app.py&#x27; (lazy loading)</span><br><span class="line">flask-demo_1    |  * Environment: production</span><br><span class="line">flask-demo_1    |    WARNING: This is a development server. Do not use it in a production deployment.</span><br><span class="line">flask-demo_1    |    Use a production WSGI server instead.</span><br><span class="line">flask-demo_1    |  * Debug mode: off</span><br><span class="line">flask-demo_1    |  * Running on all addresses.</span><br><span class="line">flask-demo_1    |    WARNING: This is a development server. Do not use it in a production deployment.</span><br><span class="line">flask-demo_1    |  * Running on http://172.19.0.2:5000/ (Press CTRL+C to quit)</span><br><span class="line">flask-demo_1    | 172.19.0.1 - - [07/Mar/2022 02:41:39] &quot;GET / HTTP/1.1&quot; 200 -</span><br><span class="line">flask-demo_1    | 172.19.0.1 - - [07/Mar/2022 02:41:39] &quot;GET /favicon.ico HTTP/1.1&quot; 404 -</span><br><span class="line">flask-demo_1    | 172.19.0.1 - - [07/Mar/2022 02:41:40] &quot;GET / HTTP/1.1&quot; 200 -</span><br></pre></td></tr></table></figure>

<h3 id="3-2-docker-compose-up-d"><a href="#3-2-docker-compose-up-d" class="headerlink" title="3.2. docker-compose up -d"></a>3.2. docker-compose up -d</h3><p><code>ctrl + c</code>退出互動模式後，如果想讓環境運行在後台，可加參數 <code>-d</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<p>執行如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kite@host04:~/Desktop/flask_redis_practice$ sudo docker-compose up -d</span><br><span class="line">Starting flask_redis_practice_redis-server_1 ... <span class="keyword">done</span></span><br><span class="line">Starting flask_redis_practice_flask-demo_1   ... <span class="keyword">done</span></span><br><span class="line">kite@host04:~/Desktop/flask_redis_practice$ </span><br></pre></td></tr></table></figure>



<h3 id="3-3-docker-compose-logs"><a href="#3-3-docker-compose-logs" class="headerlink" title="3.3. docker-compose logs"></a>3.3. docker-compose logs</h3><p>這個模式下，如果還想看相關log我們可以使用<code>docker-compose logs</code> 或<code>docker-compose logs -f</code>持續動態查看。</p>
<h3 id="3-4-docker-compose-ps"><a href="#3-4-docker-compose-ps" class="headerlink" title="3.4. docker-compose ps"></a>3.4. docker-compose ps</h3><p>透過<code>docker-compose ps</code>查看運行的內容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose ps</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kite@host04:~/Desktop/flask_redis_practice$ sudo docker-compose ps</span><br><span class="line">               Name                              Command               State                    Ports                  </span><br><span class="line">-----------------------------------------------------------------------------------------------------------------------</span><br><span class="line">flask_redis_practice_flask-demo_1     flask run -h 0.0.0.0             Up      0.0.0.0:8080-&gt;5000/tcp,:::8080-&gt;5000/tcp</span><br><span class="line">flask_redis_practice_redis-server_1   docker-entrypoint.sh redis ...   Up      6379/tcp      </span><br></pre></td></tr></table></figure>

<p><strong>注意：這個指定一定要在docker-compose檔案所在的資料夾執行才有效</strong></p>
<p>我們稍微看一下相關指令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kite@host04:~/Desktop/flask_redis_practice$ docker-compose</span><br><span class="line">Options:</span><br><span class="line">  -f, --file FILE             Specify an alternate compose file</span><br><span class="line">                              (default: docker-compose.yml)</span><br><span class="line">  -p, --project-name NAME     Specify an alternate project name</span><br><span class="line">                              (default: directory name)</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>如果compose檔名稱要指定的話，加<code>-f</code>參數即可，跟dockerfile的概念一樣。另外也有看到一個 <code>project-name</code>這個就是我們剛剛說的container名稱會以資料夾名稱的命名方式，如果不喜歡也可以使用<code>-p</code>的指令方式指定。</p>
<h3 id="3-5-docker-compose-stop"><a href="#3-5-docker-compose-stop" class="headerlink" title="3.5. docker-compose stop"></a>3.5. docker-compose stop</h3><p>如果想要停止compose也是可以做到的，這個方式很聰明，可以一次性將整個環境的容器一起停止處理：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose stop</span><br></pre></td></tr></table></figure>

<p>如果去看docker container 、docker network 都會有compose 建立出來的容器與bridge</p>
<p>刪除沒有被使用的資源可以使用以下指令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker system prune -f</span><br></pre></td></tr></table></figure>

<h3 id="3-6-docker-compose-p"><a href="#3-6-docker-compose-p" class="headerlink" title="3.6. docker-compose -p"></a>3.6. docker-compose -p</h3><p>我們也可以自定義專案名稱</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kite@host04:~/Desktop/flask_redis_practice$ sudo docker-compose -p myproject up -d</span><br></pre></td></tr></table></figure>

<p>使用指令查看</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kite@host04:~/Desktop/flask_redis_practice$ sudo docker-compose -p myproject ps</span><br><span class="line">          Name                        Command               State                    Ports                  </span><br><span class="line">------------------------------------------------------------------------------------------------------------</span><br><span class="line">myproject_flask-demo_1     flask run -h 0.0.0.0             Up      0.0.0.0:8080-&gt;5000/tcp,:::8080-&gt;5000/tcp</span><br><span class="line">myproject_redis-server_1   docker-entrypoint.sh redis ...   Up      6379/tcp  </span><br></pre></td></tr></table></figure>

<p>通過<code>stop</code>指令再批次停止</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kite@host04:~/Desktop/flask_redis_practice$ sudo docker-compose -p myproject stop</span><br><span class="line">Stopping myproject_redis-server_1 ... done</span><br><span class="line">Stopping myproject_flask-demo_1   ... done</span><br></pre></td></tr></table></figure>



<h3 id="3-7-docker-compose-rm"><a href="#3-7-docker-compose-rm" class="headerlink" title="3.7. docker-compose-rm"></a>3.7. docker-compose-rm</h3><p>通過<code>rm</code>指令刪除</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kite@host04:~/Desktop/flask_redis_practice$ sudo docker-compose -p myproject rm</span><br><span class="line">Going to remove myproject_redis-server_1, myproject_flask-demo_1</span><br><span class="line">Are you sure? [yN] y</span><br><span class="line">Removing myproject_redis-server_1 ... done</span><br><span class="line">Removing myproject_flask-demo_1   ... done</span><br></pre></td></tr></table></figure>



<h3 id="3-8-docker-compose-build"><a href="#3-8-docker-compose-build" class="headerlink" title="3.8. docker-compose build"></a>3.8. docker-compose build</h3><p>試著使用build方式來玩,，建立一個資料夾名稱為<code>flask_web</code>，將<code>app.py</code>、<code>Dockerfile</code>移至<code>flask_web</code>底下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kite@host04:~/Desktop/flask_redis_practice$ tree</span><br><span class="line">.</span><br><span class="line">├── docker-compose.yml</span><br><span class="line">└── flask_web</span><br><span class="line">    ├── app.py</span><br><span class="line">    └── Dockerfile</span><br></pre></td></tr></table></figure>

<p><code>app.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> redis <span class="keyword">import</span> Redis</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">redis = Redis(host=os.environ.get(<span class="string">&#x27;REDIS_HOST&#x27;</span>, <span class="string">&#x27;127.0.0.1&#x27;</span>), port=<span class="number">6379</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>():</span><br><span class="line">    redis.incr(<span class="string">&#x27;hits&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;Hello Container World! I have been seen <span class="subst">&#123;redis.get(<span class="string">&#x27;hits&#x27;</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>)&#125;</span> times and my hostname is <span class="subst">&#123;socket.gethostname()&#125;</span>.\n&quot;</span></span><br></pre></td></tr></table></figure>

<p><code>Dockerfile</code></p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.9</span>.<span class="number">5</span>-slim</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install flask redis &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    groupadd -r flask &amp;&amp; useradd -r -g flask flask &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">mkdir</span> /src &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">chown</span> -R flask:flask /src</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">USER</span> flask</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> app.py /src/app.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /src</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> FLASK_APP=app.py REDIS_HOST=redis</span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">5000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;flask&quot;</span>, <span class="string">&quot;run&quot;</span>, <span class="string">&quot;-h&quot;</span>, <span class="string">&quot;0.0.0.0&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<p>修改<code>docker-compose.yml</code> 檔：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">flask-demo:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">./flask_web</span></span><br><span class="line">    <span class="comment">#image: flask-demo:latest</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">REDIS_HOST=redis-server</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">demo-network</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:5000</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">redis-server:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:latest</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">demo-network</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">demo-network:</span></span><br></pre></td></tr></table></figure>

<p>我們添加了<code>build: ./flask_web</code>，預設會抓這個資料夾底下的Dockerfile名稱進行build image</p>
<p>compose build 指令玩一下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kite@host04:~/Desktop/flask_redis_practice$ sudo docker-compose build</span><br><span class="line">redis-server uses an image, skipping</span><br><span class="line">Building flask-demo</span><br><span class="line">Sending build context to Docker daemon  3.072kB</span><br><span class="line">Step 1/8 : FROM python:3.9.5-slim</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">c71955050276</span></span><br><span class="line">Step 2/8 : RUN pip install flask redis &amp;&amp;     groupadd -r flask &amp;&amp; useradd -r -g flask flask &amp;&amp;     mkdir /src &amp;&amp;     chown -R ...</span><br><span class="line">...</span><br><span class="line">Successfully built 626b99e2547c</span><br><span class="line">Successfully tagged flask_redis_practice_flask-demo:latest</span><br><span class="line">kite@host04:~/Desktop/flask_redis_practice$ sudo docker images </span><br></pre></td></tr></table></figure>

<p>看一下image 清單，我們會發現image名稱會以當時的資料夾名稱為前綴：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kite@host04:~/Desktop/flask_redis_practice$ sudo docker images </span><br><span class="line">REPOSITORY                        TAG                IMAGE ID       CREATED          SIZE</span><br><span class="line">flask_redis_practice_flask-demo   latest             626b99e2547c   36 seconds ago   129MB</span><br></pre></td></tr></table></figure>



<h3 id="3-9-docker-compose-build-文件格式-add-image-name"><a href="#3-9-docker-compose-build-文件格式-add-image-name" class="headerlink" title="3.9. docker-compose build 文件格式 - add image name"></a>3.9. docker-compose build 文件格式 - add image name</h3><p>也可以在docker-compose文件中指定image名稱：</p>
<p><code>docker-compose.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">flask-demo:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">./flask_web</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">flask-kite:latest</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">REDIS_HOST=redis-server</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">demo-network</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:5000</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">redis-server:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:latest</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">demo-network</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">demo-network:</span></span><br></pre></td></tr></table></figure>

<p>結果如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kite@host04:~/Desktop/flask_redis_practice$ sudo docker images </span><br><span class="line">REPOSITORY       TAG                IMAGE ID       CREATED          SIZE</span><br><span class="line">flask-kite       latest             33a0bf4d2428   11 seconds ago   129MB</span><br></pre></td></tr></table></figure>



<h3 id="3-10-docker-compose-build-文件格式-context、dockefile-name"><a href="#3-10-docker-compose-build-文件格式-context、dockefile-name" class="headerlink" title="3.10. docker-compose build 文件格式 - context、dockefile name"></a>3.10. docker-compose build 文件格式 - context、dockefile name</h3><p>先將<code>Dockerfile</code>名稱改為<code>Dockerfile.dev</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kite@host04:~/Desktop/flask_redis_practice$ tree</span><br><span class="line">.</span><br><span class="line">├── docker-compose.yml</span><br><span class="line">└── flask_web</span><br><span class="line">    ├── app.py</span><br><span class="line">    └── Dockerfile.dev</span><br></pre></td></tr></table></figure>

<p>在docker-compose文件中指定dockerfile檔案名稱：</p>
<p><code>docker-compose.dev</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">flask-demo:</span></span><br><span class="line">    <span class="attr">build:</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">./flask_web</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">Dockerfile.dev</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">flask-kite:latest</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">REDIS_HOST=redis-server</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">demo-network</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:5000</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">redis-server:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:latest</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">demo-network</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">demo-network:</span></span><br></pre></td></tr></table></figure>



<h3 id="3-11-docker-compose-pull"><a href="#3-11-docker-compose-pull" class="headerlink" title="3.11. docker-compose pull"></a>3.11. docker-compose pull</h3><p>也可以使用docker-compose pull進行image build：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kite@host04:~/Desktop/flask_redis_practice$ sudo docker-compose pull</span><br><span class="line">Pulling flask-demo   ... done</span><br><span class="line">Pulling redis-server ... done</span><br></pre></td></tr></table></figure>



<h3 id="3-12-docker-compose-–help"><a href="#3-12-docker-compose-–help" class="headerlink" title="3.12. docker-compose –help"></a>3.12. docker-compose –help</h3><p>查找相關指令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kite@host04:~/Desktop/flask_redis_practice$ sudo docker-compose --help</span><br><span class="line">Define and run multi-container applications with Docker.</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  docker-compose [-f &lt;arg&gt;...] [--profile &lt;name&gt;...] [options] [--] [COMMAND] [ARGS...]</span><br><span class="line">  docker-compose -h|--help</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -f, --file FILE             Specify an alternate compose file</span><br><span class="line">                              (default: docker-compose.yml)</span><br><span class="line">  -p, --project-name NAME     Specify an alternate project name</span><br><span class="line">                              (default: directory name)</span><br><span class="line">  --profile NAME              Specify a profile to enable</span><br><span class="line">  -c, --context NAME          Specify a context name</span><br><span class="line">  --verbose                   Show more output</span><br><span class="line">  --log-level LEVEL           Set log level (DEBUG, INFO, WARNING, ERROR, CRITICAL)</span><br><span class="line">  --ansi (never|always|auto)  Control when to print ANSI control characters</span><br><span class="line">  --no-ansi                   Do not print ANSI control characters (DEPRECATED)</span><br><span class="line">  -v, --version               Print version and exit</span><br><span class="line">  -H, --host HOST             Daemon socket to connect to</span><br><span class="line"></span><br><span class="line">  --tls                       Use TLS; implied by --tlsverify</span><br><span class="line">  --tlscacert CA_PATH         Trust certs signed only by this CA</span><br><span class="line">  --tlscert CLIENT_CERT_PATH  Path to TLS certificate file</span><br><span class="line">  --tlskey TLS_KEY_PATH       Path to TLS key file</span><br><span class="line">  --tlsverify                 Use TLS and verify the remote</span><br><span class="line">  --skip-hostname-check       Don&#x27;t check the daemon&#x27;s hostname against the</span><br><span class="line">                              name specified in the client certificate</span><br><span class="line">  --project-directory PATH    Specify an alternate working directory</span><br><span class="line">                              (default: the path of the Compose file)</span><br><span class="line">  --compatibility             If set, Compose will attempt to convert keys</span><br><span class="line">                              in v3 files to their non-Swarm equivalent (DEPRECATED)</span><br><span class="line">  --env-file PATH             Specify an alternate environment file</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  build              Build or rebuild services</span><br><span class="line">  config             Validate and view the Compose file</span><br><span class="line">  create             Create services</span><br><span class="line">  down               Stop and remove resources</span><br><span class="line">  events             Receive real time events from containers</span><br><span class="line">  exec               Execute a command in a running container</span><br><span class="line">  help               Get help on a command</span><br><span class="line">  images             List images</span><br><span class="line">  kill               Kill containers</span><br><span class="line">  logs               View output from containers</span><br><span class="line">  pause              Pause services</span><br><span class="line">  port               Print the public port for a port binding</span><br><span class="line">  ps                 List containers</span><br><span class="line">  pull               Pull service images</span><br><span class="line">  push               Push service images</span><br><span class="line">  restart            Restart services</span><br><span class="line">  rm                 Remove stopped containers</span><br><span class="line">  run                Run a one-off command</span><br><span class="line">  scale              Set number of containers for a service</span><br><span class="line">  start              Start services</span><br><span class="line">  stop               Stop services</span><br><span class="line">  top                Display the running processes</span><br><span class="line">  unpause            Unpause services</span><br><span class="line">  up                 Create and start containers</span><br><span class="line">  version            Show version information and quit</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kite@host04:~/Desktop/flask_redis_practice$ sudo docker-compose build --help</span><br><span class="line">Build or rebuild services.</span><br><span class="line"></span><br><span class="line">Services are built once and then tagged as `project_service`,</span><br><span class="line">e.g. `composetest_db`. If you change a service&#x27;s `Dockerfile` or the</span><br><span class="line">contents of its build directory, you can run `docker-compose build` to rebuild it.</span><br><span class="line"></span><br><span class="line">Usage: build [options] [--build-arg key=val...] [--] [SERVICE...]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">    --build-arg key=val     Set build-time variables for services.</span><br><span class="line">    --compress              Compress the build context using gzip.</span><br><span class="line">    --force-rm              Always remove intermediate containers.</span><br><span class="line">    -m, --memory MEM        Set memory limit for the build container.</span><br><span class="line">    --no-cache              Do not use cache when building the image.</span><br><span class="line">    --no-rm                 Do not remove intermediate containers after a successful build.</span><br><span class="line">    --parallel              Build images in parallel.</span><br><span class="line">    --progress string       Set type of progress output (auto, plain, tty).</span><br><span class="line">    --pull                  Always attempt to pull a newer version of the image.</span><br><span class="line">    -q, --quiet             Don&#x27;t print anything to STDOUT</span><br></pre></td></tr></table></figure>



<h3 id="3-13-docker-compose-build-d-–build"><a href="#3-13-docker-compose-build-d-–build" class="headerlink" title="3.13. docker compose build -d –build"></a>3.13. docker compose build -d –build</h3><p>試著修改<code>app.py</code>檔</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> redis <span class="keyword">import</span> Redis</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">redis = Redis(host=os.environ.get(<span class="string">&#x27;REDIS_HOST&#x27;</span>, <span class="string">&#x27;127.0.0.1&#x27;</span>), port=<span class="number">6379</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>():</span><br><span class="line">    redis.incr(<span class="string">&#x27;hits&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;Hello Container World!I&#x27;m kite. I have been seen <span class="subst">&#123;redis.get(<span class="string">&#x27;hits&#x27;</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>)&#125;</span> times and my hostname is <span class="subst">&#123;socket.gethostname()&#125;</span>.\n&quot;</span></span><br></pre></td></tr></table></figure>

<p>在運行的過程中：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kite@host04:~/Desktop/flask_redis_practice$ sudo docker-compose ps</span><br><span class="line">               Name                              Command               State                    Ports                  </span><br><span class="line">-----------------------------------------------------------------------------------------------------------------------</span><br><span class="line">flask_redis_practice_flask-demo_1     flask run -h 0.0.0.0             Up      0.0.0.0:8080-&gt;5000/tcp,:::8080-&gt;5000/tcp</span><br><span class="line">flask_redis_practice_redis-server_1   docker-entrypoint.sh redis ...   Up      6379/tcp   </span><br></pre></td></tr></table></figure>

<p>使用<code>--build</code>指令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker compose build -d --build</span><br></pre></td></tr></table></figure>

<p>這個指令會發現檔案有發生改變，就會決定重新build，並且會直接重啟與運行容器，不用經過compose stop、compose rm、compose build、 compose up 過程，非常方便，結果如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kite@host04:~/Desktop/flask_redis_practice$ sudo docker-compose up -d --build</span><br><span class="line">Building flask-demo</span><br><span class="line">Sending build context to Docker daemon  3.072kB</span><br><span class="line">Step 1/8 : FROM python:3.9.5-slim</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">c71955050276</span></span><br><span class="line">Step 2/8 : RUN pip install flask redis &amp;&amp;     groupadd -r flask &amp;&amp; useradd -r -g flask flask &amp;&amp;     mkdir /src &amp;&amp;     chown -R flask:flask /src</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">Using cache</span></span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">bbf517f842c7</span></span><br><span class="line">Step 3/8 : USER flask</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">Using cache</span></span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">7b1d7b6407b8</span></span><br><span class="line">Step 4/8 : COPY app.py /src/app.py</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">47b63bef74ff</span></span><br><span class="line">Step 5/8 : WORKDIR /src</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="keyword">in</span> 1da9b0391baf</span></span><br><span class="line">Removing intermediate container 1da9b0391baf</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">ccbca4bf8c09</span></span><br><span class="line">Step 6/8 : ENV FLASK_APP=app.py REDIS_HOST=redis</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="keyword">in</span> 74c8fbb7fd95</span></span><br><span class="line">Removing intermediate container 74c8fbb7fd95</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">cc12a2e1af00</span></span><br><span class="line">Step 7/8 : EXPOSE 5000</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="keyword">in</span> 201a42960e97</span></span><br><span class="line">Removing intermediate container 201a42960e97</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">3731d50ee226</span></span><br><span class="line">Step 8/8 : CMD [&quot;flask&quot;, &quot;run&quot;, &quot;-h&quot;, &quot;0.0.0.0&quot;]</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="keyword">in</span> 3f4fea9f7156</span></span><br><span class="line">Removing intermediate container 3f4fea9f7156</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">df6ac55a1b2d</span></span><br><span class="line">Successfully built df6ac55a1b2d</span><br><span class="line">Successfully tagged flask-kite:latest</span><br><span class="line">flask_redis_practice_redis-server_1 is up-to-date</span><br><span class="line">Recreating flask_redis_practice_flask-demo_1 ... done</span><br><span class="line">kite@host04:~/Desktop/flask_redis_practice$ </span><br></pre></td></tr></table></figure>

<h3 id="3-14-docker-compose-d"><a href="#3-14-docker-compose-d" class="headerlink" title="3.14. docker compose -d"></a>3.14. docker compose -d</h3><p>目前comopose狀態：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kite@host04:~/Desktop/flask_redis_practice$ sudo docker-compose ps</span><br><span class="line">[sudo] password for kite: </span><br><span class="line">               Name                              Command               State                    Ports                  </span><br><span class="line">-----------------------------------------------------------------------------------------------------------------------</span><br><span class="line">flask_redis_practice_flask-demo_1     flask run -h 0.0.0.0             Up      0.0.0.0:8080-&gt;5000/tcp,:::8080-&gt;5000/tcp</span><br><span class="line">flask_redis_practice_redis-server_1   docker-entrypoint.sh redis ...   Up      6379/tcp    </span><br></pre></td></tr></table></figure>

<h4 id="3-14-1-add-image"><a href="#3-14-1-add-image" class="headerlink" title="3.14.1. add image"></a>3.14.1. add image</h4><p>我們添加一個busybox ，修改docker-compose檔</p>
<p><code>docker-compose.dev</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">flask-demo:</span></span><br><span class="line">    <span class="attr">build:</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">./flask_web</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">Dockerfile.dev</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">flask-kite:latest</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">REDIS_HOST=redis-server</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">demo-network</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:5000</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">redis-server:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:latest</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">demo-network</span></span><br><span class="line">  <span class="attr">busybox:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox:latest</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">sh</span> <span class="string">-c</span> <span class="string">&quot;while true;do sleep 3600; done&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">demo-network</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">demo-network:</span></span><br></pre></td></tr></table></figure>

<p>接著，我們再試著下<code>docker-compose up -d</code>，我們會發現有出現create busybox的訊息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kite@host04:~/Desktop/flask_redis_practice$ sudo docker-compose up -d</span><br><span class="line">flask_redis_practice_flask-demo_1 is up-to-date</span><br><span class="line">flask_redis_practice_redis-server_1 is up-to-date</span><br><span class="line">Creating flask_redis_practice_busybox_1 ... done</span><br></pre></td></tr></table></figure>

<h4 id="3-14-2-remove-image"><a href="#3-14-2-remove-image" class="headerlink" title="3.14.2. remove image"></a>3.14.2. remove image</h4><p>再試著將剛剛的busybox移除 ，修改docker-compose檔</p>
<p><code>docker-compose.dev</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">flask-demo:</span></span><br><span class="line">    <span class="attr">build:</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">./flask_web</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">Dockerfile.dev</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">flask-kite:latest</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">REDIS_HOST=redis-server</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">demo-network</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:5000</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">redis-server:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:latest</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">demo-network</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">demo-network:</span></span><br></pre></td></tr></table></figure>

<p>再執行一次<code>docker-compose up -d</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kite@host04:~/Desktop/flask_redis_practice$ sudo docker-compose up -d</span><br><span class="line">WARNING: Found orphan containers (flask_redis_practice_busybox_1) for this project. If you removed or renamed this service in your compose file, you can run this command with the --remove-orphans flag to clean it up.</span><br><span class="line">flask_redis_practice_flask-demo_1 is up-to-date</span><br><span class="line">flask_redis_practice_redis-server_1 is up-to-date</span><br></pre></td></tr></table></figure>

<p>會出現警告：</p>
<blockquote>
<p>WARNING: Found orphan containers (flask_redis_practice_busybox_1) for this project. If you removed or renamed this service in your compose file, you can run this command with the –remove-orphans flag to clean it up.</p>
</blockquote>
<p>照著指令操作，移除busybox的指令需要<code>--remove-orphans</code>，執行如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kite@host04:~/Desktop/flask_redis_practice$ sudo docker-compose up -d --remove-orphans</span><br><span class="line">Removing orphan container &quot;flask_redis_practice_busybox_1&quot;</span><br><span class="line">flask_redis_practice_flask-demo_1 is up-to-date</span><br><span class="line">flask_redis_practice_redis-server_1 is up-to-date</span><br><span class="line">kite@host04:~/Desktop/flask_redis_practice$ </span><br></pre></td></tr></table></figure>



<h4 id="3-14-3-container-配置文件修改"><a href="#3-14-3-container-配置文件修改" class="headerlink" title="3.14.3. container 配置文件修改"></a>3.14.3. container 配置文件修改</h4><p>通常container 配置文件(使用volume 掛載本地文件)修改之後，要重啟container。而在compose 可以透過<code>docker compose restart</code>指令重啟。</p>
<p>這個指令只是重啟，並不是重新創建喔。</p>
<h3 id="3-15-更新操作小總結"><a href="#3-15-更新操作小總結" class="headerlink" title="3.15. 更新操作小總結"></a>3.15. 更新操作小總結</h3><p>我們常在專案會時常更新，比如更新鏡像、配置文件、增加service、刪除service，最常用的有二種</p>
<ol>
<li><p>刪除未使用的service</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose up -d --remove-orphans</span><br></pre></td></tr></table></figure>
</li>
<li><p>container 配置文件修改</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose restart</span><br></pre></td></tr></table></figure>
</li>
<li><p>image 進行修改</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose -d --build</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="4-docker-compose網路-上"><a href="#4-docker-compose網路-上" class="headerlink" title="4. docker-compose網路(上)"></a>4. docker-compose網路(上)</h2><p>暫補</p>
<h2 id="5-docker-compose網路-下"><a href="#5-docker-compose網路-下" class="headerlink" title="5. docker-compose網路(下)"></a>5. docker-compose網路(下)</h2><p>暫補</p>
<p>各別指定network</p>
<p>network default</p>
<p>network subnet</p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>OWASP ZAP 筆記</title>
    <url>/2022/06/18/2022-06-18%20OWASP%20ZAP%20%E5%BF%83%E5%BE%97/</url>
    <content><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>客戶的案子希望提供簡單的弱點掃描服務，這次使用OWASP ZAP 2.11.1版本進行掃描測試。如何修復弱點…過程是痛苦的(可能心中只想寫程式…)，於是決定寫下筆記，或許之後會用得上。(朋友提醒我，要注意軟體有沒有誤判)</p>
<span id="more"></span>

<h2 id="2-Missing-Anti-clickjacking-Header-風險：中"><a href="#2-Missing-Anti-clickjacking-Header-風險：中" class="headerlink" title="2. Missing Anti-clickjacking Header (風險：中)"></a>2. Missing Anti-clickjacking Header (風險：中)</h2><p><img src="https://i.imgur.com/lEtVkxN.png" alt="image-20220618144640064"></p>
<h3 id="2-1-Description"><a href="#2-1-Description" class="headerlink" title="2.1. Description"></a>2.1. Description</h3><blockquote>
<p>The response does not include either Content-Security-Policy with ‘frame-ancestors’ directive or X-Frame-Options to protect against ‘Click.Jacking’ attacks.</p>
</blockquote>
<h3 id="2-2-Solution"><a href="#2-2-Solution" class="headerlink" title="2.2. Solution"></a>2.2. Solution</h3><blockquote>
<p>Modern Web Browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site&#x2F;app.</p>
<p>If you expect the page to be framed only by pages on your server(e.g. it’s part of a FRAMESET) then you’ll want to use SAMEORIGIN. otherwise if you nerver expect the page to be framed,you should use DENY. Alternatively consider implementing Content Security Policy’s “frame-ancestors” directive.</p>
</blockquote>
<h3 id="2-3-Before-response-header"><a href="#2-3-Before-response-header" class="headerlink" title="2.3. Before response header"></a>2.3. Before response header</h3><p><img src="https://i.imgur.com/rpV0bso.png" alt="image-20220619192311369"></p>
<h3 id="2-4-解決方式"><a href="#2-4-解決方式" class="headerlink" title="2.4. 解決方式"></a>2.4. 解決方式</h3><p>設定web.config ，加入<code>&lt;add name=&quot;X-Frame-Options&quot; value=&quot;SAMEORIGIN&quot; /&gt;</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">system.webServer</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">httpProtocol</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">customHeaders</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">&quot;X-Frame-Options&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SAMEORIGIN&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">customHeaders</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">httpProtocol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">staticContent</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">clientCache</span> <span class="attr">cacheControlMode</span>=<span class="string">&quot;DisableCache&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">staticContent</span>&gt;</span> </span><br><span class="line">   <span class="tag">&lt;/<span class="name">system.webServer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-5-After-Response-header"><a href="#2-5-After-Response-header" class="headerlink" title="2.5. After Response header"></a>2.5. After Response header</h3><p><img src="https://i.imgur.com/4QSbJp1.png" alt="image-20220619192406171"></p>
<h3 id="2-6-進行OWASP-ZAP-驗證"><a href="#2-6-進行OWASP-ZAP-驗證" class="headerlink" title="2.6. 進行OWASP ZAP 驗證"></a>2.6. 進行OWASP ZAP 驗證</h3><p><img src="https://i.imgur.com/njtWTjT.png" alt="image-20220618145351126"></p>
<h3 id="2-7-小結"><a href="#2-7-小結" class="headerlink" title="2.7. 小結"></a>2.7. 小結</h3><p>其實跟下一題解決方式一樣(X-Frame-Options Setting Malformed)，筆者這邊只是練習了二次，別分使用<code>web.config</code>、<code>IIS工具介面</code>，想知道效果是不是一樣的。這裡比較令我感到好奇的是，同一個解法解決了「Missing Anti-clickjacking Header」、「X-Frame-Options Setting Malformed 」二個題目，只是有時候OWASP ZAP 出現的alert 卻是不同的。</p>
<h2 id="3-X-Frame-Options-Setting-Malformed-風險：中"><a href="#3-X-Frame-Options-Setting-Malformed-風險：中" class="headerlink" title="3. X-Frame-Options Setting Malformed (風險：中)"></a>3. X-Frame-Options Setting Malformed (風險：中)</h2><p><img src="https://i.imgur.com/2bLyCYw.jpg" alt="messageImage_1655471403029"></p>
<h3 id="3-1-Description"><a href="#3-1-Description" class="headerlink" title="3.1. Description"></a>3.1. Description</h3><blockquote>
<p>An X-Frame-Options header was present in the response but the value was not correctly set.</p>
</blockquote>
<h3 id="3-2-Solution"><a href="#3-2-Solution" class="headerlink" title="3.2. Solution"></a>3.2. Solution</h3><blockquote>
<p>Ensure a valid setting is used on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it’s part of a FRAMESET) then you’ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  Alternatively consider implementing Content Security Policy’s “frame-ancestors” directive.</p>
</blockquote>
<h3 id="3-3-Before-response-header"><a href="#3-3-Before-response-header" class="headerlink" title="3.3. Before response header"></a>3.3. Before response header</h3><p><img src="https://i.imgur.com/QUAkUoB.png" alt="image-20220619192525912"></p>
<h3 id="3-4-解決方式"><a href="#3-4-解決方式" class="headerlink" title="3.4. 解決方式"></a>3.4. 解決方式</h3><p>在IIS介面使用<code>HTTP回應標題</code>點擊進入後，再點擊右邊的<code>新增</code>，開始填寫<code>名稱</code>、<code>值</code>。</p>
<p><img src="https://i.imgur.com/lp54xAM.png" alt="image-20220618141806921"></p>
<p><img src="https://i.imgur.com/AIeNGfA.png" alt="image-20220618150503383"></p>
<p><img src="https://i.imgur.com/R28DEli.jpg" alt="1655470906467"></p>
<h3 id="3-5-After-response-header"><a href="#3-5-After-response-header" class="headerlink" title="3.5. After response header"></a>3.5. After response header</h3><p><img src="https://i.imgur.com/XhogXK8.png" alt="image-20220618114602656"></p>
<h3 id="3-6-進行OWASP-ZAP-驗證"><a href="#3-6-進行OWASP-ZAP-驗證" class="headerlink" title="3.6. 進行OWASP ZAP 驗證"></a>3.6. 進行OWASP ZAP 驗證</h3><p><img src="https://i.imgur.com/X6fcSdR.jpg" alt="1655471705151"></p>
<h2 id="4-Re-examine-Cache-control-Directives-風險：低"><a href="#4-Re-examine-Cache-control-Directives-風險：低" class="headerlink" title="4. Re-examine Cache-control Directives(風險：低)"></a>4. Re-examine Cache-control Directives(風險：低)</h2><p>無圖(忘了截圖，放棄補…)</p>
<h3 id="4-1-Description"><a href="#4-1-Description" class="headerlink" title="4.1. Description"></a>4.1. Description</h3><blockquote>
<p>The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.</p>
</blockquote>
<h3 id="4-2-Solution"><a href="#4-2-Solution" class="headerlink" title="4.2. Solution"></a>4.2. Solution</h3><blockquote>
<p>For secure content, ensure the cache-control HTTP header is set with “no-cache, no-store, must-revalidate”. If an asset should be cached consider setting the directives “public, max-age, immutable”.</p>
</blockquote>
<p><img src="https://i.imgur.com/lp54xAM.png" alt="image-20220618141806921"></p>
<h3 id="4-3-Before-response-header"><a href="#4-3-Before-response-header" class="headerlink" title="4.3. Before response header"></a>4.3. Before response header</h3><p><img src="https://i.imgur.com/1YjiIcO.png" alt="image-20220619193259536"></p>
<h3 id="4-4-解決方式"><a href="#4-4-解決方式" class="headerlink" title="4.4. 解決方式"></a>4.4. 解決方式</h3><p><img src="https://i.imgur.com/X1ucSSv.png" alt="image-20220618142106847"></p>
<p>如果在站台下有web.config檔，則會自動添加紅色區塊的設定</p>
<p><img src="https://i.imgur.com/Ec3jntc.png" alt="image-20220618142246166"></p>
<h3 id="4-5-After-Response-header"><a href="#4-5-After-Response-header" class="headerlink" title="4.5. After Response header"></a>4.5. After Response header</h3><p><img src="https://i.imgur.com/zUzaYa7.png" alt="image-20220619193212629"></p>
<h3 id="4-6-進行OWASP-ZAP驗證"><a href="#4-6-進行OWASP-ZAP驗證" class="headerlink" title="4.6. 進行OWASP ZAP驗證"></a>4.6. 進行OWASP ZAP驗證</h3><p>無圖(忘了截圖，放棄補…)</p>
<h2 id="5-X-Content-Type-Options-Header-Missing-風險：低"><a href="#5-X-Content-Type-Options-Header-Missing-風險：低" class="headerlink" title="5. X-Content-Type-Options Header Missing (風險：低)"></a>5. X-Content-Type-Options Header Missing (風險：低)</h2><p><img src="https://i.imgur.com/gZ0QL3x.png" alt="image-20220618152728961"></p>
<h3 id="5-1-Description"><a href="#5-1-Description" class="headerlink" title="5.1. Description"></a>5.1. Description</h3><blockquote>
<p>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to ‘nosniff’. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.</p>
</blockquote>
<h3 id="5-2-Solution"><a href="#5-2-Solution" class="headerlink" title="5.2. Solution"></a>5.2. Solution</h3><blockquote>
<p>Ensure that the application&#x2F;web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to ‘nosniff’ for all web pages.<br>If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application&#x2F;web server to not perform MIME-sniffing.</p>
</blockquote>
<h3 id="5-3-Before-response-header"><a href="#5-3-Before-response-header" class="headerlink" title="5.3. Before response header"></a>5.3. Before response header</h3><p><img src="https://i.imgur.com/CF0rtyh.png" alt="image-20220619193337785"></p>
<h3 id="5-4-解決方式"><a href="#5-4-解決方式" class="headerlink" title="5.4. 解決方式"></a>5.4. 解決方式</h3><p>加入 <code>&lt;add name=&quot;X-Content-Type-Options&quot; value=&quot;nosniff&quot; /&gt;</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">system.webServer</span>&gt;</span>	  </span><br><span class="line">		<span class="tag">&lt;<span class="name">httpProtocol</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">customHeaders</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">&quot;X-Frame-Options&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SAMEORIGIN&quot;</span> /&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">&quot;X-Content-Type-Options&quot;</span> <span class="attr">value</span>=<span class="string">&quot;nosniff&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">customHeaders</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">httpProtocol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">staticContent</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">clientCache</span> <span class="attr">cacheControlMode</span>=<span class="string">&quot;DisableCache&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">staticContent</span>&gt;</span> </span><br><span class="line">   <span class="tag">&lt;/<span class="name">system.webServer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5-5-After-response-header"><a href="#5-5-After-response-header" class="headerlink" title="5.5. After response header"></a>5.5. After response header</h3><p><img src="https://i.imgur.com/lLgnEH2.png" alt="image-20220619193423691"></p>
<h3 id="5-6-進行OWASP-ZAP-驗證"><a href="#5-6-進行OWASP-ZAP-驗證" class="headerlink" title="5.6. 進行OWASP ZAP 驗證"></a>5.6. 進行OWASP ZAP 驗證</h3><p><img src="https://i.imgur.com/3SciMww.png" alt="image-20220618153815955"></p>
<h2 id="6-Content-Security-Policy-CSP"><a href="#6-Content-Security-Policy-CSP" class="headerlink" title="6. Content Security Policy (CSP)"></a>6. Content Security Policy (CSP)</h2><h3 id="6-1-心得說明"><a href="#6-1-心得說明" class="headerlink" title="6.1. 心得說明"></a>6.1. 心得說明</h3><p>使用vscode的<code>Live Server</code>extension跑一個臨時起一個網站，這種方式設定CSP，瀏覽器的確會吃到這個設定，比方說<code>default-src &#39;none&#39;;</code>，網頁確實都沒有相關載入資源，但是去查看response header 卻看不出CSP的設定，而且在OWASP ZAP去attack這個<code>http://127.0.0.1:5502</code>網站，也是會回饋沒有設定CSP。</p>
<p>對照的另一個實驗是在客戶的伺服器上，使用的是IIS機器。如果有設定CSP的情況下，在response header就會有看到CSP的設定，在OWASP ZAP的掃描的確有掃到CSP，並且是alert另一種CSP的問題。</p>
<p>可能的狀況是HTTP、HTTPS的不同？ 有實體的IIS 與臨時的extension架站有實質上的差異？ 不過…都沒有關係，就先以客戶的https機器 + IIS 進行測試吧…。</p>
<p>PS：因為跑客戶的實體機一次掃描都太久了，所以在想有沒有更快的作法，比如先掃自己電腦架的網站(的確掃描速度非常快…但就是不太正常，alert 消不掉)。</p>
<h3 id="6-2-Content-Security-Policy-CSP-Header-Not-Set-風險：中"><a href="#6-2-Content-Security-Policy-CSP-Header-Not-Set-風險：中" class="headerlink" title="6.2. Content Security Policy(CSP) Header Not Set(風險：中)"></a>6.2. Content Security Policy(CSP) Header Not Set(風險：中)</h3><p><img src="https://i.imgur.com/rowqcEj.png" alt="image-20220619175219207"></p>
<h4 id="6-2-1-Description"><a href="#6-2-1-Description" class="headerlink" title="6.2.1. Description"></a>6.2.1. Description</h4><blockquote>
<p>Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.</p>
</blockquote>
<h4 id="6-2-2-Solution"><a href="#6-2-2-Solution" class="headerlink" title="6.2.2. Solution"></a>6.2.2. Solution</h4><blockquote>
<p>Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header, to achieve optimal browser support: “Content-Security-Policy” for Chrome 25+, Firefox 23+ and Safari 7+, “X-Content-Security-Policy” for Firefox 4.0+ and Internet Explorer 10+, and “X-WebKit-CSP” for Chrome 14+ and Safari 6+.</p>
</blockquote>
<h4 id="6-2-3-Before-response-header"><a href="#6-2-3-Before-response-header" class="headerlink" title="6.2.3. Before response header"></a>6.2.3. Before response header</h4><p><img src="https://i.imgur.com/rZXUZjv.png" alt="image-20220619180854290"></p>
<h4 id="6-2-4-解決方式"><a href="#6-2-4-解決方式" class="headerlink" title="6.2.4. 解決方式"></a>6.2.4. 解決方式</h4><p>加上<code>Content-Security-Policy</code>，參考如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">system.webServer</span>&gt;</span>  </span><br><span class="line">		<span class="tag">&lt;<span class="name">httpProtocol</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">customHeaders</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">value</span>=<span class="string">&quot;default-src &#x27;self&#x27;;&quot;</span> /&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">&quot;X-Frame-Options&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SAMEORIGIN&quot;</span> /&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">&quot;X-Content-Type-Options&quot;</span> <span class="attr">value</span>=<span class="string">&quot;nosniff&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">customHeaders</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">httpProtocol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">staticContent</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">clientCache</span> <span class="attr">cacheControlMode</span>=<span class="string">&quot;DisableCache&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">staticContent</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">system.webServer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="6-2-5-After-response-header"><a href="#6-2-5-After-response-header" class="headerlink" title="6.2.5. After response header"></a>6.2.5. After response header</h4><p><img src="https://i.imgur.com/AqjZJbE.png" alt="image-20220619184257141"></p>
<h4 id="6-2-6-進行OWASP-ZAP-驗證"><a href="#6-2-6-進行OWASP-ZAP-驗證" class="headerlink" title="6.2.6. 進行OWASP ZAP 驗證"></a>6.2.6. 進行OWASP ZAP 驗證</h4><p><img src="https://i.imgur.com/ki8Pq9k.png" alt="image-20220619181157201"></p>
<h3 id="6-3-CSP-Wildcard-Directive-風險：中"><a href="#6-3-CSP-Wildcard-Directive-風險：中" class="headerlink" title="6.3. CSP:Wildcard Directive(風險：中)"></a>6.3. CSP:Wildcard Directive(風險：中)</h3><h4 id="6-3-1-Description"><a href="#6-3-1-Description" class="headerlink" title="6.3.1. Description"></a>6.3.1. Description</h4><blockquote>
<p>Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.</p>
</blockquote>
<h4 id="6-3-2-Other-Info"><a href="#6-3-2-Other-Info" class="headerlink" title="6.3.2. Other Info"></a>6.3.2. Other Info</h4><blockquote>
<p>The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined:<br>frame-ancestors, form-action</p>
<p>The directive(s): frame-ancestors, form-action are among the directives that do not fallback to default-src, missing&#x2F;excluding them is the same as allowing anything.</p>
</blockquote>
<h4 id="6-3-3-Solution"><a href="#6-3-3-Solution" class="headerlink" title="6.3.3. Solution"></a>6.3.3. Solution</h4><blockquote>
<p>Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.</p>
</blockquote>
<h4 id="6-3-4-Before-response-header"><a href="#6-3-4-Before-response-header" class="headerlink" title="6.3.4. Before response header"></a>6.3.4. Before response header</h4><p><img src="https://i.imgur.com/XCXVNr2.png" alt="image-20220619184133110"></p>
<h4 id="6-3-5-解決方法"><a href="#6-3-5-解決方法" class="headerlink" title="6.3.5. 解決方法"></a>6.3.5. 解決方法</h4><p>在OWASP ZAP 的 other info 裡其實有提到 <code>frame-ancestors</code> <code>form-action</code> director，所以補上了這個兩個director：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">system.webServer</span>&gt;</span>	  </span><br><span class="line">		<span class="tag">&lt;<span class="name">httpProtocol</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">customHeaders</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">value</span>=<span class="string">&quot;default-src &#x27;self&#x27;; frame-ancestors &#x27;self&#x27;; form-action &#x27;self&#x27;&quot;</span> /&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">&quot;X-Frame-Options&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SAMEORIGIN&quot;</span> /&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">&quot;X-Content-Type-Options&quot;</span> <span class="attr">value</span>=<span class="string">&quot;nosniff&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">customHeaders</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">httpProtocol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">staticContent</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">clientCache</span> <span class="attr">cacheControlMode</span>=<span class="string">&quot;DisableCache&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">staticContent</span>&gt;</span>	  	  </span><br><span class="line">   <span class="tag">&lt;/<span class="name">system.webServer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="6-3-6-After-response-header"><a href="#6-3-6-After-response-header" class="headerlink" title="6.3.6. After response header"></a>6.3.6. After response header</h4><p><img src="https://i.imgur.com/YIN41R0.png" alt="image-20220619184432581"></p>
<h4 id="6-3-7-進行OWASP-ZAP驗證"><a href="#6-3-7-進行OWASP-ZAP驗證" class="headerlink" title="6.3.7. 進行OWASP ZAP驗證"></a>6.3.7. 進行OWASP ZAP驗證</h4><p><img src="https://i.imgur.com/SdqCzFg.png" alt="image-20220619184451166"></p>
<h3 id="6-4-CSP-script-src-unsafe-inline-風險：中"><a href="#6-4-CSP-script-src-unsafe-inline-風險：中" class="headerlink" title="6.4. CSP: script-src unsafe-inline(風險：中)"></a>6.4. CSP: script-src unsafe-inline(風險：中)</h3><h4 id="6-4-1-Description"><a href="#6-4-1-Description" class="headerlink" title="6.4.1. Description"></a>6.4.1. Description</h4><blockquote>
<p>Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.</p>
</blockquote>
<h4 id="6-4-2-Other-Info"><a href="#6-4-2-Other-Info" class="headerlink" title="6.4.2. Other Info"></a>6.4.2. Other Info</h4><blockquote>
<p>script-src includes unsafe-inline.</p>
</blockquote>
<h4 id="6-4-3-Solution"><a href="#6-4-3-Solution" class="headerlink" title="6.4.3. Solution"></a>6.4.3. Solution</h4><blockquote>
<p>Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.</p>
</blockquote>
<p>Before response header</p>
<h4 id="6-4-4-解決方式"><a href="#6-4-4-解決方式" class="headerlink" title="6.4.4. 解決方式"></a>6.4.4. 解決方式</h4><p>在某一次的嘗試CSP設定為如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">system.webServer</span>&gt;</span>	  </span><br><span class="line">		<span class="tag">&lt;<span class="name">httpProtocol</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">customHeaders</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">value</span>=<span class="string">&quot;default-src &#x27;self&#x27;; script-src &#x27;unsafe-inline&#x27;&quot;</span> /&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">&quot;X-Frame-Options&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SAMEORIGIN&quot;</span> /&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">&quot;X-Content-Type-Options&quot;</span> <span class="attr">value</span>=<span class="string">&quot;nosniff&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">customHeaders</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">httpProtocol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">staticContent</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">clientCache</span> <span class="attr">cacheControlMode</span>=<span class="string">&quot;DisableCache&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">staticContent</span>&gt;</span>	</span><br><span class="line">   <span class="tag">&lt;/<span class="name">system.webServer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>當時還不是很懂隨便亂設定，讓OWASP ZAP 掃描，就發現了這個風險中的alert。解決方式很簡單，將<code>script-src</code>改為<code>self</code>就可以了：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">system.webServer</span>&gt;</span>	  </span><br><span class="line">		<span class="tag">&lt;<span class="name">httpProtocol</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">customHeaders</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">value</span>=<span class="string">&quot;default-src &#x27;self&#x27;; script-src &#x27;self&#x27;&quot;</span> /&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">&quot;X-Frame-Options&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SAMEORIGIN&quot;</span> /&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">&quot;X-Content-Type-Options&quot;</span> <span class="attr">value</span>=<span class="string">&quot;nosniff&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">customHeaders</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">httpProtocol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">staticContent</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">clientCache</span> <span class="attr">cacheControlMode</span>=<span class="string">&quot;DisableCache&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">staticContent</span>&gt;</span>	</span><br><span class="line">   <span class="tag">&lt;/<span class="name">system.webServer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>除此之外，在程式的部分<strong>不能</strong>有類似<code>inline</code>JS的寫法，如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:goTop()&quot;</span> <span class="attr">class</span>=<span class="string">&quot;fs-4 bg-secondary px-2&quot;</span> <span class="attr">title</span>=<span class="string">&quot;Go to top&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;go to top&quot;</span>&gt;</span>TOP<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;...</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>這種JS寫法，必須移到<code>index.js</code>(舉例，可能是別的js名稱)裡面去定義相關的實作。</p>
<p>同樣的，在<code>style-src</code> 也有一樣<code>inline</code>的問題，我們來舉例個有問題的程式，如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">accesskey</span>=<span class="string">&quot;M&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#M&quot;</span> <span class="attr">id</span>=<span class="string">&quot;MU&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nav-link text-white pe-0 &quot;</span> <span class="attr">style</span>=<span class="string">&quot;vertical-align: bottom;&quot;</span> <span class="attr">title</span>=<span class="string">&quot;相關連結區塊&quot;</span>&gt;</span>:::<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;banner&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;img-fluid&quot;</span> <span class="attr">id</span>=<span class="string">&quot;banner01&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;banner01&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:1266px;&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;img-fluid&quot;</span> <span class="attr">id</span>=<span class="string">&quot;banner02&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./images/banner02.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;banner02&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:1266px;&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>這種css寫法，必須移到<code>all.css</code>裡面去定義相關的實作。</p>
<h4 id="6-4-5-如果沒改會怎樣？"><a href="#6-4-5-如果沒改會怎樣？" class="headerlink" title="6.4.5. 如果沒改會怎樣？"></a>6.4.5. 如果沒改會怎樣？</h4><p>你會發現這定這樣的CSP規則，而程式卻沒有遵循，瀏覽器是會報錯的，並且網頁的LAYOUT會壞掉哦…(畫面就不方便截圖了)， 報錯畫面如下：</p>
<p><img src="https://i.imgur.com/bepCT9m.png" alt="image-20220619191312687"></p>
<h3 id="6-5-OWASP-ZAP-到這裡…就沒有alert了"><a href="#6-5-OWASP-ZAP-到這裡…就沒有alert了" class="headerlink" title="6.5. OWASP ZAP 到這裡…就沒有alert了"></a>6.5. OWASP ZAP 到這裡…就沒有alert了</h3><p>接下來後面的東西是為了加強資安進行的實驗，於是改了一下CSP設定：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">system.webServer</span>&gt;</span>	  </span><br><span class="line">		<span class="tag">&lt;<span class="name">httpProtocol</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">customHeaders</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">value</span>=<span class="string">&quot;default-src &#x27;self&#x27;; script-src &#x27;self&#x27;; style-src &#x27;self&#x27;; img-src &#x27;self&#x27;; connect-src &#x27;self&#x27;; object-src &#x27;none&#x27;; frame-src &#x27;self&#x27;; frame-ancestors &#x27;self&#x27;; form-action &#x27;self&#x27;; block-all-mixed-content; base-uri &#x27;self&#x27;&quot;</span> /&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">&quot;X-Frame-Options&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SAMEORIGIN&quot;</span> /&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">&quot;X-Content-Type-Options&quot;</span> <span class="attr">value</span>=<span class="string">&quot;nosniff&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">customHeaders</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">httpProtocol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">staticContent</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">clientCache</span> <span class="attr">cacheControlMode</span>=<span class="string">&quot;DisableCache&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">staticContent</span>&gt;</span>	  </span><br><span class="line">	  </span><br><span class="line">   <span class="tag">&lt;/<span class="name">system.webServer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>提供一個產生CSP規則的網站：<a href="https://report-uri.com/home/generate">report-uri.com</a></p>
<h2 id="7-其它小筆記"><a href="#7-其它小筆記" class="headerlink" title="7. 其它小筆記"></a>7. 其它小筆記</h2><h3 id="7-1-chrome-extension-CSP-scanner"><a href="#7-1-chrome-extension-CSP-scanner" class="headerlink" title="7.1. chrome extension CSP scanner"></a>7.1. chrome extension CSP scanner</h3><p>這個工具還滿不錯的，可以針對CSP問題進行檢測，並且回饋您一些資訊與建議。最後在用OWASP ZAP 大部分時間都是在測試 CSP的問題，但是OWASP ZAP 是很全面的掃描，所以一輪下來都會花不少時間(2~5min)。這個工具就可以直接針對CSP 進行掃描。我猜想或許在OWASP ZAP 可以設定針對CSP掃描也說不定。</p>
<p><img src="https://i.imgur.com/GIRTOuZ.png" alt="image-20220619210152807"></p>
<p><img src="https://i.imgur.com/SITrgSd.png" alt="image-20220619204838625"></p>
<h3 id="7-2-IIS-的-web-config-的記錄"><a href="#7-2-IIS-的-web-config-的記錄" class="headerlink" title="7.2. IIS 的 web.config 的記錄"></a>7.2. IIS 的 web.config 的記錄</h3><p>太久沒玩web.config了，所以稍微記錄一下實驗心得，方便回憶。</p>
<p>放在某個專案底下的資料夾：</p>
<p><img src="https://i.imgur.com/7w8At1b.png" alt="image-20220618135856027"></p>
<p><code>web.config</code>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">system.webServer</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">staticContent</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">clientCache</span> <span class="attr">cacheControlMode</span>=<span class="string">&quot;DisableCache&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">staticContent</span>&gt;</span></span><br><span class="line">	  </span><br><span class="line">		<span class="tag">&lt;<span class="name">httpProtocol</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">customHeaders</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">value</span>=<span class="string">&quot;default-src &#x27;self&#x27; data:; img-src &#x27;self&#x27; data: ; script-src &#x27;self&#x27; &#x27;unsafe-inline&#x27; &#x27;unsafe-eval&#x27; www.google-analytics.com;&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">customHeaders</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">httpProtocol</span>&gt;</span>	  </span><br><span class="line">	  </span><br><span class="line">   <span class="tag">&lt;/<span class="name">system.webServer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>改完通常不用重啟服務，就直接生效了(不管是在web.config 還是在 IIS 工具介面設定都一樣)</p>
<h2 id="8-備註"><a href="#8-備註" class="headerlink" title="8. 備註"></a>8. 備註</h2><p>寫一些有關文件</p>
<ol>
<li>SSH 、固定IP 在 IIS上設定的文件(複習)</li>
<li>site map .xml(複習)</li>
<li>robots(複習)</li>
<li>寫一個CSP相關概念文件</li>
</ol>
<h2 id="9-相關連結"><a href="#9-相關連結" class="headerlink" title="9. 相關連結"></a>9. 相關連結</h2><p><a href="https://sdwh.dev/posts/2020/10/Cyber-Security-Web-Config-Configuration/">ASP.NET Web.config &amp; Http Headers 安全設定大全 (Guide to Secure your Web application by web.config configuration)</a></p>
<p>CSP Inline Styles</p>
<ol>
<li><a href="https://content-security-policy.com/examples/allow-inline-style/">CSP Inline Styles</a></li>
</ol>
<p>X-Content-Type-Options</p>
<ol>
<li><a href="https://ithelp.ithome.com.tw/articles/10273029">Day12-記得要戴安全帽（二）</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options">X-Content-Type-Options</a></li>
</ol>
<p><a href="https://www.zhangxinxu.com/wordpress/2018/08/css-svg-background-image-base64-encode/">学习了，CSS中内联SVG图片有比Base64更好的形式</a></p>
<p>SiteMap </p>
<p><a href="https://www.da-vinci.com.tw/tw/blog/Sitemap">Sitemap是什麼？一次搞懂網站地圖提交</a></p>
<p><a href="https://awoo.ai/zh-hant/blog/sitemap-xml/">sitemap.xml網站地圖是什麼？從工具&#x2F;產生器&#x2F;程式製作到進行提交教學</a></p>
<p>robots</p>
<ol>
<li><a href="https://welly.tw/serp-rank-optimization/how-to-use-or-check-robots.txt-and-meta-robots">robots.txt V.S. meta robots！SEO爬蟲溝通教學！</a></li>
<li><a href="https://medium.com/seo-day-1/%E6%92%B0%E5%AF%ABrobots-txt%E6%AA%94-%E8%AE%93%E7%88%AC%E8%9F%B2%E4%B9%96%E4%B9%96%E8%81%BD%E4%BD%A0%E7%9A%84%E8%A9%B1-8fa06b01fd59">撰寫robots.txt檔，讓爬蟲乖乖聽你的話</a></li>
<li><a href="https://www.yesharris.com/meta-robots-and-robots-txt/">三分鐘搞懂 SEO的《meta robots、robots.txt》</a></li>
</ol>
<p><a href="https://www.mxp.tw/9267/">[WordPress] 通過 OWASP ZAP 黑箱安全性檢測的幾個要點</a></p>
<p>Cache-Control</p>
<ol>
<li><a href="https://shunnien.github.io/2018/05/08/cache-control/">Cache-Control 在 IIS 上的設定</a></li>
<li><a href="https://www.yamab2b.com/how/368526.html">IIS的Connection由改為close改為Keep-Alive?</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10013447">不要把網頁 cache 起來的語法</a></li>
</ol>
<p>CSP 產生網站</p>
<p><a href="https://report-uri.com/home/generate">https://report-uri.com/home/generate</a></p>
<p>CSP介紹</p>
<p><a href="https://rainmakerho.github.io/2021/06/16/CSP-script-src-unsafe-inline/">CSP script-src unsafe-inline</a></p>
<p><a href="https://blog.bepsvpt.me/2020/11/25/introduction-to-content-security-policy/">淺談 Content Security Policy (CSP)</a></p>
<p><a href="https://content-security-policy.com/">Content Security Policy Reference</a></p>
<p><a href="https://iter01.com/524950.html">Content Security Policy</a></p>
<p><a href="https://medium.com/%E7%A8%8B%E5%BC%8F%E8%A3%A1%E6%9C%89%E8%9F%B2/content-security-policy-for-iis-c923e9f43c8a">Content Security Policy for IIS</a></p>
<p><a href="https://hackmd.io/@Eotones/BkOX6u5kX">Content Security Policy (CSP) 筆記</a></p>
<p><a href="https://ithelp.ithome.com.tw/articles/10223568">Web Security 魔法使攻略─嗑一下 CSP</a></p>
<p><a href="https://ithelp.ithome.com.tw/articles/10224306">Web Security 魔法使攻略─CSP bypasss</a></p>
<p><a href="https://csper.io/blog/an-introduction-to-report-uri">An Introduction To Report-URI</a></p>
<p><a href="https://www.gushiciku.cn/pl/2UlJ/zh-tw">WEB應用內容安全策略(Content Security Policy)</a></p>
<p><a href="https://itw01.com/NRWNEBR.html">【學習筆記】Content Security Policy 入門教程</a></p>
<p><a href="https://devco.re/blog/2014/04/08/security-issues-of-http-headers-2-content-security-policy/">Content-Security-Policy - HTTP Headers 的資安議題 (2)</a></p>
<p>CSP 評估</p>
<p><a href="https://csp-evaluator.withgoogle.com/">CSP Evaluator</a></p>
<p><a href="https://rapidsec.com/resources/knowledge-base/6-common-web-application-client-side-vulnerabilities/#xss-cross-site-scripting">6 Common Web Application Client-side Vulnerabilities</a></p>
<p><a href="https://blog.darkthread.net/blog/applicationhost-config/">隨手記 - IIS &#x2F; IIS Express 伺服器 config 檔</a></p>
<p>X-Frame-Options </p>
<p>看這篇就對了-&gt;<a href="https://developer.mozilla.org/zh-TW/docs/Web/HTTP/Headers/X-Frame-Options">X-Frame-Options 回應標頭</a></p>
]]></content>
      <categories>
        <category>資訊安全</category>
        <category>OWASP ZAP</category>
      </categories>
      <tags>
        <tag>資訊安全</tag>
        <tag>弱點掃描</tag>
        <tag>IIS</tag>
      </tags>
  </entry>
  <entry>
    <title>消息隊列</title>
    <url>/2022/07/26/2022-07-26%20%E6%B6%88%E6%81%AF%E9%9A%8A%E5%88%97/</url>
    <content><![CDATA[<h2 id="1-消息隊列-Message-Queue"><a href="#1-消息隊列-Message-Queue" class="headerlink" title="1. 消息隊列 Message Queue"></a>1. 消息隊列 Message Queue</h2><p>內容包含記錄了對於主題與隊列、消息隊列的一致性、消息的丟失、重複、積壓問題</p>
<span id="more"></span>


<h2 id="2-為什麼需要消息隊列"><a href="#2-為什麼需要消息隊列" class="headerlink" title="2. 為什麼需要消息隊列"></a>2. 為什麼需要消息隊列</h2><h3 id="2-1-工廠流水線"><a href="#2-1-工廠流水線" class="headerlink" title="2.1. 工廠流水線"></a>2.1. 工廠流水線</h3><p>大家在廠線上，只需要觀注自己的工作內容，意味著解耦了彼此的關係。</p>
<p><img src="https://i.imgur.com/bfpPK5p.png" alt="image-20220726121505581"></p>
<h3 id="2-2-水庫"><a href="#2-2-水庫" class="headerlink" title="2.2. 水庫"></a>2.2. 水庫</h3><p>當發生大量的請求與流量時，可以保護我們的後端伺服器的穩定，扮演水庫角色，進行的控制與排放。</p>
<p><img src="https://i.imgur.com/19z3MSg.png" alt="image-20220726121556180"></p>
<h3 id="2-3-倉庫"><a href="#2-3-倉庫" class="headerlink" title="2.3. 倉庫"></a>2.3. 倉庫</h3><p>可用途儲存半成品的存放站，後續再由它人去拿取半成品商品進行處理。</p>
<p><img src="https://i.imgur.com/EN8QPDP.png" alt="image-20220726122222781"></p>
<h2 id="3-場景"><a href="#3-場景" class="headerlink" title="3. 場景"></a>3. 場景</h2><h3 id="3-1-非同步處理"><a href="#3-1-非同步處理" class="headerlink" title="3.1. 非同步處理"></a>3.1. 非同步處理</h3><p>同步處理</p>
<p>響應一個用戶的請求，需要完成4個步驟，每個模塊都有自己的運行時間，這樣的話運行時間就會相對較長。</p>
<p>並且，往往在過程當中，只有一步或二步是重要的關鍵步驟，其餘的步驟往往都沒有那麼重要…比如發郵件或簡訊通知訂單完成之類的訊息</p>
<p>亦或者是數據統計之類的工作。</p>
<p>異步處理</p>
<p>加入了隊列請求後，對於一個用戶的請求，我們只需要完成一個最核心的業務邏輯操作，完成後直接返回請求。</p>
<p>我們引入消息隊列，使這些模塊監聽消息隊列中的事件，這些模塊只要異步操作完即可。</p>
<p>異步處理，可以大大縮短響應用戶的請求</p>
<p><img src="https://i.imgur.com/Toubbsh.png" alt="MQ同步、異步"></p>
<h3 id="3-2-應付瞬間巨量"><a href="#3-2-應付瞬間巨量" class="headerlink" title="3.2. 應付瞬間巨量"></a>3.2. 應付瞬間巨量</h3><p>秒殺活動流量較大，透過網關導向到隊列中，隊列在這當中扮演了很大的保護作用，可避免後端服務器崩潰。![MQ_流量控制](E:\1. kite\GitWorkSpace\kite_hexo\source_posts\2022-07-26 消息隊列.assets\MQ_流量控制.png)</p>
<h3 id="3-3-系統間解耦-服務解耦"><a href="#3-3-系統間解耦-服務解耦" class="headerlink" title="3.3. 系統間解耦(服務解耦)"></a>3.3. 系統間解耦(服務解耦)</h3><p>如果沒有導入<code>MessageQueue</code>時，可以說每個模塊之間的接口耦合，又或者說每個微服務之間的RPC耦合。</p>
<p>如果某一個模塊出現了問題，又或者需要重新佈署，這些與它相依賴的模塊有可能會受到影響。</p>
<p>引入了MessageQueue之後，每個模塊就可以觀注在自己的事情上面，完全不用考慮體會上游或下游的情況。去掉耦合之後，我們的微服務佈署也好，項目維護也好，包括項目的高可用性，帶來不錯的效益。</p>
<p><img src="https://i.imgur.com/7dpxUxQ.png" alt="MQ_服務解耦"></p>
<h2 id="4-消息隊列類型"><a href="#4-消息隊列類型" class="headerlink" title="4. 消息隊列類型"></a>4. 消息隊列類型</h2><p>分為兩大類，分為單播、廣播。現在有很多消息隊列是能同時支援兩種類型的，比如<code>RabbitMQ</code>、<code>Kafka</code></p>
<h3 id="4-1-單播-1對1"><a href="#4-1-單播-1對1" class="headerlink" title="4.1. 單播 (1對1)"></a>4.1. 單播 (1對1)</h3><p>一個<code>消息發佈者</code>對應一個<code>消息消費者</code>，就算<code>MQ</code>中有多個消息，<strong>每一個消息</strong>都還是對應<strong>一個</strong><code>消息消費者</code>。很像我們平常在用的數據模式，先進先出。</p>
<p><img src="https://i.imgur.com/ugqxhQ4.png" alt="MQ_單播"></p>
<h3 id="4-2-廣播-1對多"><a href="#4-2-廣播-1對多" class="headerlink" title="4.2. 廣播 (1對多)"></a>4.2. 廣播 (1對多)</h3><p>多個<code>消息消費者</code>監聽一個<code>消息發佈者</code>。舉例來說，一個訂單成立之後，後續流程各自展開「開始通知整貨作業、簡訊通知訂單成立、郵件通知訂單成立、統計數據」，多個模塊都需要知道一個消息發佈者的完整訊息。</p>
<p><img src="https://i.imgur.com/2V6saL3.png" alt="MQ_多播"></p>
<h2 id="5-事務"><a href="#5-事務" class="headerlink" title="5. 事務"></a>5. 事務</h2><p>什麼是事務，簡單來說它是一組操作，需要滿足這些操作全部完成或者這些操作全部都沒有完成</p>
<h3 id="5-1-Half-Message-RocketMQ"><a href="#5-1-Half-Message-RocketMQ" class="headerlink" title="5.1. Half Message - RocketMQ"></a>5.1. Half Message - RocketMQ</h3><p>我們無法保證網路傳輸是穩定的，因此，如何提高事務的完整性(ACID，Atomicity 原子性 )，就需要透過一些設計方法與思維，其中，Half Message就是一個解決方法。它是一個有順序流程性的設計：</p>
<ol>
<li><p>在開始執行業務邏輯之前，會先發送一條半消息到<code>MQ</code>，提醒<code>MQ</code>說我們的業務邏輯即將開始了。</p>
</li>
<li><p><code>MQ</code>會回覆收到<code>半消息</code>的確認，如果這一步就錯誤了，我們就必須在業務邏輯上註記(返回)失敗。</p>
</li>
<li><p>真正開始業務邏輯(這段覺得很怪<code>業務模組</code>告訴<code>消息發佈者</code>)</p>
</li>
<li><p>由消息發佈者進行提交&#x2F;回滾消息給<code>MQ</code>，當<code>MQ</code>收到提交(業務邏輯執行成功)，則將<code>半消息</code>改狀態變為正常的消息(可見的)</p>
</li>
<li><p><code>消費消費者</code>自然可以去取得<code>MQ</code>的訊息</p>
<blockquote>
<p>確認如何畫圖</p>
</blockquote>
</li>
</ol>
<p>而<code>半消息</code>的定義是這條訊息在消費者那邊是不可見的。</p>
<h4 id="5-1-1-死信隊列"><a href="#5-1-1-死信隊列" class="headerlink" title="5.1.1. 死信隊列"></a>5.1.1. 死信隊列</h4><p>以上5個步驟只是確保<code>MQ</code>、<code>Publisher</code>、<code>業務</code>的<code>原子性</code>，無法確保<code>Consumer</code>的原子性。因此，在Consumer與MQ之間，會允許嘗試try catch 多次(maybe 3~5次的限制)，如果是失敗3次了，則進入到死信的隊列。其實死信隊列就是記錄了consumer操作失敗訊息，我們可以定期查詢死信隊列的記錄，進行手動修復，這樣就是最大成度的保證原子性。</p>
<h4 id="5-1-2-反查機制"><a href="#5-1-2-反查機制" class="headerlink" title="5.1.2. 反查機制"></a>5.1.2. 反查機制</h4><p>我們繼續考慮一個例外狀況，當第4步驟沒有執行的時候，那MQ就會無法得知實際狀況，變成死等。因此，我們可以利用一個回調函式提供MQ去反查確認消費發佈者的狀況，maybe是一個定期器，預計10秒內應該得到回應，如果沒有就去反查<code>消費發佈者</code></p>
<h2 id="6-消息隊列常見問題"><a href="#6-消息隊列常見問題" class="headerlink" title="6. 消息隊列常見問題"></a>6. 消息隊列常見問題</h2><h3 id="6-1-消息丟失"><a href="#6-1-消息丟失" class="headerlink" title="6.1. 消息丟失"></a>6.1. 消息丟失</h3><p>P 發送 MQ</p>
<p>MQ發送確認P</p>
<p>MQ發送C</p>
<p>C發送確認MQ</p>
<h3 id="6-2-重複消息"><a href="#6-2-重複消息" class="headerlink" title="6.2. 重複消息"></a>6.2. 重複消息</h3><p>幂等性:Idempotence</p>
<p>重傳保證結果不會影響最終結果</p>
<h3 id="6-3-消息積壓"><a href="#6-3-消息積壓" class="headerlink" title="6.3. 消息積壓"></a>6.3. 消息積壓</h3><ul>
<li>水平擴容queue&#x2F;partition的數量，以及consumer實例的數量<ul>
<li>兩邊要等量的增加，單獨增加一邊是沒有效益的</li>
</ul>
</li>
<li>排查日誌，確保隊列層正常送達消息</li>
<li>在producer段，服務降級<ul>
<li>提供重要邏輯的優先度</li>
</ul>
</li>
</ul>
<h2 id="7-參考資料"><a href="#7-參考資料" class="headerlink" title="7. 參考資料"></a>7. 參考資料</h2><ul>
<li><a href="https://www.youtube.com/watch?v=M7v1rlgpgec&ab_channel=JimmyCoding">Message Queue 消息队列：最强大的web后端组件</a></li>
<li><a href="https://www.youtube.com/watch?v=E1pxP0wuGso">91APP 電商技術大解密 (2020 線上分享系列)：解密 91APP Queue System</a></li>
</ul>
]]></content>
      <categories>
        <category>消息隊列</category>
      </categories>
  </entry>
  <entry>
    <title>編碼歷史</title>
    <url>/2022/04/29/2022-04-29%20%E7%B7%A8%E7%A2%BC%E6%AD%B7%E5%8F%B2%E6%95%B4%E5%90%88%E5%8C%85/</url>
    <content><![CDATA[<h2 id="1-名詞定義"><a href="#1-名詞定義" class="headerlink" title="1. 名詞定義"></a>1. 名詞定義</h2><h3 id="1-1-位元-bit"><a href="#1-1-位元-bit" class="headerlink" title="1.1. 位元 - bit"></a>1.1. 位元 - bit</h3><span id="more"></span>


<p><strong>位元</strong>（英語：Bit，亦稱<strong>二進制位</strong>）指<a href="https://zh.wikipedia.org/wiki/%E4%BA%8C%E8%BF%9B%E5%88%B6">二進位</a>中的一位，是資訊的最小單位[<a href="https://zh.wikipedia.org/zh-tw/%E4%BD%8D%E5%85%83#cite_note-1">1]</a>。<strong>Bit</strong>是<strong>Bi</strong>nary digi<strong>t</strong>（二進位數位）的<a href="https://zh.wikipedia.org/wiki/%E6%B7%B7%E6%88%90%E8%A9%9E">混成詞</a>，由數學家John Wilder Tukey提出可能是1946年提出，但有資料稱1943年就提出了）。這個術語第一次被正式使用，是在<a href="https://zh.wikipedia.org/wiki/%E5%85%8B%E5%8A%B3%E5%BE%B7%C2%B7%E8%89%BE%E5%B0%94%E4%BC%8D%E5%BE%B7%C2%B7%E9%A6%99%E5%86%9C">香農</a>著名的論文《通信的數學理論》（A Mathematical Theory of Communication）第1頁中。</p>
<h3 id="1-2-位元組-字節-bytes"><a href="#1-2-位元組-字節-bytes" class="headerlink" title="1.2. 位元組(字節) - bytes"></a>1.2. 位元組(字節) - bytes</h3><p><strong>位元組</strong>（英語：Byte），通常用作<a href="https://zh.wikipedia.org/wiki/%E9%9B%BB%E8%85%A6">電腦</a>及<a href="https://zh.wikipedia.org/wiki/%E6%99%BA%E6%85%A7%E5%9E%8B%E6%89%8B%E6%A9%9F">手機</a>及<a href="https://zh.wikipedia.org/wiki/%E6%99%BA%E6%85%A7%E5%9E%8B%E6%89%8B%E9%8C%B6">手錶</a>等 資訊計量單位，不分資料型態。[<a href="https://zh.wikipedia.org/zh-tw/%E5%AD%97%E8%8A%82#cite_note-Buchholz_1962-1">1]</a>[<a href="https://zh.wikipedia.org/zh-tw/%E5%AD%97%E8%8A%82#cite_note-Bemer_1959-2">2]</a> 是通信和資料儲存的概念。一個位元組代表八個<a href="https://zh.wikipedia.org/wiki/%E4%BD%8D%E5%85%83">位元</a>。從歷史的觀點上，「位元組」表示用於編碼單個<a href="https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)">字元</a>所需要的位元數量。歷史上位元組長度曾基於硬體為1-48位元不等，最初通常使用6位元或9位元為一位元組。今日標準以8位元作為一位元組，因8為<a href="https://zh.wikipedia.org/wiki/%E4%BA%8C%E8%BF%9B%E5%88%B6">二進位</a>整數。</p>
<p>bit與byte示意圖：</p>
<p><img src="https://i.imgur.com/4hLOMRr.png" alt="bit &amp; byte"></p>
<h3 id="1-3-字元-字符-character"><a href="#1-3-字元-字符-character" class="headerlink" title="1.3. 字元(字符) - character"></a>1.3. 字元(字符) - character</h3><p>字元（character）是人類語文的最基本單位，例如：中文字、英文字母、阿拉伯數字、標點符號等。而字元集（character set）則是指某種語文的全部字元（例如：英文的字元）或部份字元（例如：中文的字元）所形成的集合</p>
<ul>
<li>圖形字元（graphic characters）<ul>
<li>指的是可以被顯示在螢光幕上或是被列印在報表紙上，用以構成文數字資訊或電腦語言的字元。就英文字元集而言，所包含的圖形字元為52個大小寫英文字母、10個阿拉伯數字和一些標點符號，總數還不到100個。但就中文字元集而言，所包含的圖形字元至少是成千上萬的中文字。</li>
</ul>
</li>
<li>控制字元（control characters）<ul>
<li>則代表特定的處理功能，可驅使電腦或通信設備執行特定程式，以進行特定處理或表現特定動作，例如：驅使螢光幕上的游標回到行首並換行、驅使印表機換行或跳頁、開始或終止資料的傳輸等。原則上，控制字元不具備可顯示或可列印的圖形。</li>
</ul>
</li>
</ul>
<h3 id="1-4-編碼"><a href="#1-4-編碼" class="headerlink" title="1.4. 編碼"></a>1.4. 編碼</h3><p>計算機中儲存的信息都是用二進制數表示的；而我們在屏幕上看到的英文、漢字等字符是二進制數轉換之後的結果。通俗的說，按照何種規則將字符存儲在計算機中，如<code>a</code>用什麼表示，稱為”編碼”；反之，將存儲在計算機中的二進制數解析顯示出來，稱為”解碼”，如同密碼學中的加密和解密。在解碼過程中，如果使用了錯誤的解碼規則，則導致<code>a</code>解析成<code>b</code>或者亂碼。</p>
<p><img src="https://i.imgur.com/aq6BpZr.png"></p>
<h4 id="1-4-1-字元集-字符集-characterset"><a href="#1-4-1-字元集-字符集-characterset" class="headerlink" title="1.4.1. 字元集(字符集) - characterset"></a>1.4.1. 字元集(字符集) - characterset</h4><p>是一個系統支持的所有抽象字符的集合。字符是各種文字和符號的總稱，包括各國家文字、標點符號、圖形符號、數字等。</p>
<p>一組由不同字元構成的有限集合，它對某些特定用途而言，被認為是完整而有意義的。在字元集中，每個字元均有不同的代碼，且所包括的字元數目是固定的。這些組合在一起的字元，有其唯一的表示形式及順序。例如ISO第646號標準「資訊互換用七數元碼字符集」、128個ASCII字元、CNS 11643「中文標準交換碼」等，都是一組有效字元使用於特定原因的字元集。</p>
<p>字符集：多個字符的集合。</p>
<p>字符集的目的是完成映射, 映射完成後二進制數就變成了新的字符</p>
<h4 id="1-4-2-字元編碼-字符編碼-Character-Encoding"><a href="#1-4-2-字元編碼-字符編碼-Character-Encoding" class="headerlink" title="1.4.2. 字元編碼(字符編碼) - Character Encoding"></a>1.4.2. 字元編碼(字符編碼) - Character Encoding</h4><p>是一套法則，使用該法則能夠對自然語言的字符的一個集合（如字母表或音節表），與其他東西的一個集合（如號碼或電脈衝）進行配對。即在符號集合與數字系統之間建立對應關係，它是信息處理的一項基本技術。通常人們用符號集合（一般情況下就是文字）來表達信息。而以計算機為基礎的信息處理系統則是利用元件（硬件）不同狀態的組合來存儲和處理信息的。元件不同狀態的組合能代表數字系統的數字，因此字符編碼就是將符號轉換為計算機可以接受的數字系統的數，稱為數字代碼。</p>
<p>常見字符集名稱：<code>ASCII</code>、<code>GB2312</code>、<code>BIG5</code>、<code>GB18030</code>、<code>Unicode</code>字符集等。計算機要準確的處理各種字符集文字，需要進行字符編碼，以便計算機能夠識別和存儲各種文字。</p>
<p>其實，在網頁上常見的寫法，我們也會發現<code>UTF-8</code>也常宣告在header中，告訴瀏覽器請以<code>UTF-8</code>編碼格式來閱讀這份文件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-5-位元組順序記號-BOM"><a href="#1-5-位元組順序記號-BOM" class="headerlink" title="1.5. 位元組順序記號 (BOM)"></a>1.5. 位元組順序記號 (BOM)</h3><p>BIG-5、GBK、UTF-8 等編碼方式都是以單位元組為單位，所以沒有位元組順序的問題，不過 UTF-16 編碼是以兩個位元組為單位，所以需要知道資料使用的位元組順序才能解析資料。</p>
<p>Unocode 推薦判斷位元組順序的方式是 BOM (Byte Order Mark)，其原理是在位元組流的開頭使用 <code>FEFF</code> 字元來識別位元組順序，如果在文件開頭讀到 <code>FF</code> <code>FE</code> 就代表使用小端序，反之代表使用大端序。</p>
<p>有人一定會問，<code>FF</code> <code>FE</code> 有沒有可能是沒使用 BOM 的大端序中的 <code>FFFE</code> 這個字元，這個問題其實在設計 BOM 時已經有考慮進去了，在 Unocode 中確保 <code>FFFE</code> 不會被指定為字元，因此也不該出現在資料中，所以 <code>FF</code> <code>FE</code> 只能被解釋為小端序的 <code>FEFF</code>，不可能是大端序的 <code>FFFE</code>。</p>
<h3 id="1-6-代碼頁-Code-Page"><a href="#1-6-代碼頁-Code-Page" class="headerlink" title="1.6. 代碼頁 (Code Page)"></a>1.6. 代碼頁 (Code Page)</h3><p>代碼頁的用途是用來區分不同的字元集編碼，告訴系統該使用哪種方式來解析文字編碼，例如記事本讀到 <code>B1</code> <code>F0</code>，那麼到底該解釋為 GBK 的 “别” 字，還是 BIG5 的 “梗” 字，這兩個字的編碼都是 B1F0，在沒有指定編碼訊息的情況下，Windows 會使用預設的代碼頁來解析文字編碼，Windows 的代碼頁也被稱為 <code>ANSI</code> 代碼頁，在 Windows 上預設代碼頁不能直接修改，必須透過選擇系統的 Locale 間接改變代碼頁。</p>
<p>代碼頁也用於不同編碼之間的轉換，在 Windows 2000 之後，Windows 統一採用 UTF-16 作為系統內部的字元編碼，代碼頁其實就是一張各國文字編碼和 Unocode 的對應表，Windows 就是透過此表實現不同編碼間的轉換。</p>
<p>不知道大家有沒有試過在不同編碼的文件中使用複製貼上，大家一定都有做過，只是可能不會特別去注意文件的編碼是否相同，例如在 GBK 文件中將 “文” 複製貼上到 BIG5 文件中，如果系統只是複製字元的編碼 CEC4 的話，那麼貼過去後看到的應該是 “恅”，可是實際上看到的還是 “文”，所以很明顯系統在這之間做了轉碼的動作，先將 GBK 對應到 Unicode，再將 Unicode 對應到 BIG5，所以字才沒有跑掉，大家無聊可以去試試看。</p>
<p>大家可以再試試上面的 “别”，會發現貼過去怎麼變成了問號 <code>?</code>，為什麼沒有轉為繁體字 “別” 呢，因為在 Unicode 簡體字别和繁體字別其實是不同的兩個字，對應不同的碼位，所以無法直接轉換。那為什麼會變成問號呢，因為 BIG5 編碼中並沒有簡體字 “别”，系統在轉換的過程中，會將代碼頁對應不到的字用問號 <code>?</code> 取代，所以才會看到問號，而這個過程是不可逆的，轉換失敗後字碼就被改變了，無法再轉回原來的字。</p>
<h3 id="1-7-CMAP-表"><a href="#1-7-CMAP-表" class="headerlink" title="1.7. CMAP 表"></a>1.7. CMAP 表</h3><p>CMAP 表的功能是將 <code>字元編碼</code> 和 <code>字元點陣圖</code> 對應起來，透過此表字型檔才能將文字由字元編碼轉換為字型圖檔顯示在螢幕上，不過一張 CMAP 表只能對應一種編碼方式，如果需要字型檔支援不同的編碼方案就需要多張對應表，因此 CMAP 表可以包含多個子表，每個子表對應一種編碼方案，字型檔可透過多種支援的編碼方案來查表，可以是 Unicode 或其他 Code Page，不過這裡我還沒有更深入研究，目前還只會用 Unicode 來查表，未來有機會再嘗試更多的編碼方案。</p>
<p><img src="https://i.imgur.com/tfRSnCN.png" alt="img"></p>
<h2 id="2-編碼歷史概圖"><a href="#2-編碼歷史概圖" class="headerlink" title="2. 編碼歷史概圖"></a>2. 編碼歷史概圖</h2><p><img src="https://i.imgur.com/jeiEdzg.png" alt="encode.drawio"></p>
<h2 id="3-ASCII"><a href="#3-ASCII" class="headerlink" title="3. ASCII"></a>3. ASCII</h2><p>ASCII（American Standard Code for Information Interchange，美國信息交換標準代碼）是基於拉丁字母的一套電腦編碼系統。它主要用於顯示現代英語，而其擴展版本EASCII則可以勉強顯示其他西歐語言。它是現今最通用的單字節編碼系統，並等同於國際標準ISO。</p>
<h3 id="3-1-標準ASCII"><a href="#3-1-標準ASCII" class="headerlink" title="3.1. 標準ASCII"></a>3.1. 標準ASCII</h3><p>8位二進制中第一位(高位)一直為<code>0</code> 後面7位一共有2^7次, 128種不同的組合, 表示所有的大寫和小寫字母，數字0 到9、標點符號， 以及在美式英語中使用的特殊控制字符。</p>
<p><img src="https://i.imgur.com/xcZcCz4.png" alt="img"></p>
<ul>
<li>可顯示字元<ul>
<li>ASCII<a href="https://zh.wikipedia.org/wiki/%E6%8E%A7%E5%88%B6%E5%AD%97%E7%AC%A6">控制字元</a>的編號範圍是0-31和127（0x00-0x1F和0x7F），共33個字元。</li>
</ul>
</li>
<li>控制字元<ul>
<li>可顯示字元編號範圍是32-126（0x20-0x7E），共95個字元。</li>
</ul>
</li>
</ul>
<p>注意：在電腦的存儲單元中，一個ASCII碼值占一個位元組(8個二進位位元)，其最高位元(b7)用作奇偶校驗位。</p>
<p>所謂奇偶校驗，是指在代碼傳送過程中用來檢驗是否出現錯誤的一種方法，一般分奇校驗和偶校驗兩種。</p>
<p>奇校驗規定：正確的代碼一個位元組中1的個數必須是奇數，若非奇數，則在最高位b7添1；偶校驗規定：正確的代碼一個位元組中1的個數必須是偶數，若非偶數，則在最高位b7添1。</p>
<p><a href="https://zh.wikipedia.org/zh-tw/ASCII">參考連結：wiki ASCII</a></p>
<h3 id="3-2-擴展ASCII-EASCII-Extended-ASCII"><a href="#3-2-擴展ASCII-EASCII-Extended-ASCII" class="headerlink" title="3.2. 擴展ASCII - EASCII(Extended ASCII)"></a>3.2. 擴展ASCII - EASCII(Extended ASCII)</h3><p><strong>EASCII</strong>（<strong>Extended ASCII</strong>，延伸美國標準資訊交換碼）是將<a href="https://zh.wikipedia.org/wiki/ASCII">ASCII</a>碼由7<a href="https://zh.wikipedia.org/wiki/%E4%BD%8D">位</a>擴充為8位元而成。EASCII的內碼是由0到255共有256個字元組成。EASCII碼比ASCII碼擴充出來的符號包括表格符號、計算符號、希臘字母和特殊的拉丁符號。</p>
<p>標準ASCII碼在美國使用基本沒問題,但是一旦推廣到其它國家, 他們有屬於自己的字母和符號, 現有的符號無法滿足需求, 因此其它國家就將8位二進制的第一位置位1, 然後用擴展出來的128種組合, 作為自己國家特殊符號的表示.</p>
<p>比如，法語中的<code>é</code>的編碼為130（二進制10000010）。這樣一來，這些歐洲國家使用的編碼體系，可以表示最多256個符號。</p>
<p>但是，這裡又出現了新的問題。不同的國家有不同的字母，因此，哪怕它們都使用256個符號的編碼方式，代表的字母卻不一樣。比如，130在法語編碼中代表了<code>é</code>，在希伯來語編碼中卻代表了字母<code>Gimel (ג)</code>，在俄語編碼中又會代表另一個符號。但是不管怎樣，所有這些編碼方式中，0–127表示的符號是一樣的，不一樣的只是128–255的這一段。</p>
<p>至於亞洲國家的文字，使用的符號就更多了，漢字就多達10萬左右。一個字節只能表示256種符號，肯定是不夠的，就必須使用多個字節表達一個符號。比如，簡體中文常見的編碼方式是 GB2312，使用兩個字節表示一個漢字，所以理論上最多可以表示 256 x 256 &#x3D; 65536 個符號。</p>
<p><a href="https://zh.wikipedia.org/zh-tw/EASCII">參考連結：wiki EASCII</a></p>
<p><a href="https://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html">參考連結：字符编码笔记：ASCII，Unicode 和 UTF-8</a></p>
<h2 id="4-GB家族"><a href="#4-GB家族" class="headerlink" title="4. GB家族"></a>4. GB家族</h2><p>中國設計了GB系列編碼(“GB”為“國標”的漢語拼音首字母縮寫，即“國家標準”之意)。</p>
<h3 id="4-1-GB2312"><a href="#4-1-GB2312" class="headerlink" title="4.1. GB2312"></a>4.1. GB2312</h3><p>計算機發展的很迅速，很快傳入了亞洲，傳入了中國。中國的文字博大精深，光常用的漢字就多達幾千個，ASCII和ISO-8859顯然都是不適用的。所以聰明的中國人想到了一個辦法：用2個字節表示一個漢字。我們知道ASCII但是單字節的，1個字節可以表示256個字符，那兩個字節就可以表示256*256&#x3D; 65536個漢字，這就基本可以滿足我們了，這就是最早的GB2312編碼。</p>
<p>GB2312中收錄了大概有7000個漢字，同時收錄了拉丁字母、希臘字母、日文平假名及片假名字母、俄語西里爾字母在內的 682 個字符。</p>
<h3 id="4-2-GBK"><a href="#4-2-GBK" class="headerlink" title="4.2. GBK"></a>4.2. GBK</h3><p>但是隨著的問題有出現了。在GB2312使用的過程中發現一些生僻字無法處理，所以就出現了GBK。GBK設計兼容GB2312的，收錄了2萬多的漢字和圖形符號。</p>
<h3 id="4-3-GB18030"><a href="#4-3-GB18030" class="headerlink" title="4.3. GB18030"></a>4.3. GB18030</h3><p>為了進一步擴展編碼所能表示更多的漢字。信息產業部和國家質量技術監督局在2000年發布了GB 18030。GB 18030總共收錄了7萬多漢字，並且兼容GBK和GB2312。到這裡中國基本所有的漢字就可以在計算機中表示了。</p>
<h2 id="5-BIG5"><a href="#5-BIG5" class="headerlink" title="5. BIG5"></a>5. BIG5</h2><p><strong>大五碼</strong>（英語：Big5，又稱為<strong>五大碼</strong>）是使用<a href="https://zh.wikipedia.org/wiki/%E7%B9%81%E4%BD%93%E4%B8%AD%E6%96%87">繁體中文</a>（正體中文）社群中最常用的電腦<a href="https://zh.wikipedia.org/wiki/%E6%B1%89%E5%AD%97">漢字</a><a href="https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E9%9B%86">字元集</a>標準，共收錄13,060個漢字[<a href="https://zh.wikipedia.org/wiki/%E5%A4%A7%E4%BA%94%E7%A2%BC#cite_note-1">1]</a>。</p>
<p>中文碼分為<a href="https://zh.wikipedia.org/wiki/%E5%85%A7%E7%A2%BC">內碼</a>及<a href="https://zh.wikipedia.org/wiki/%E4%BA%A4%E6%8F%9B%E7%A2%BC">交換碼</a>兩類，Big5屬中文內碼，知名的中文交換碼有<a href="https://zh.wikipedia.org/wiki/CCCII">CCCII</a>、<a href="https://zh.wikipedia.org/wiki/CNS11643">CNS11643</a>。</p>
<p>Big5雖普及於<a href="https://zh.wikipedia.org/wiki/%E5%8F%B0%E7%81%A3">台灣</a>、<a href="https://zh.wikipedia.org/wiki/%E9%A6%99%E6%B8%AF">香港</a>、<a href="https://zh.wikipedia.org/wiki/%E6%BE%B3%E9%96%80">澳門</a>等繁體中文區域，但長期以來並非當地的國家&#x2F;地區標準或官方標準，而只是<a href="https://zh.wikipedia.org/wiki/%E6%A5%AD%E7%95%8C%E6%A8%99%E6%BA%96">業界標準</a>。<a href="https://zh.wikipedia.org/wiki/%E5%80%9A%E5%A4%A9%E4%B8%AD%E6%96%87%E7%B3%BB%E7%B5%B1">倚天中文系統</a>、<a href="https://zh.wikipedia.org/wiki/Windows">Windows</a>繁體中文版等主要作業系統的字元集都是以Big5為基準，但廠商又各自增加不同的造字與造字區，衍生成多種不同版本。</p>
<p><strong>五大中文套裝軟體</strong>，即<strong>Big-5</strong>軟體，是1984年由<a href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E8%8F%AF%E6%B0%91%E5%9C%8B">中華民國</a><a href="https://zh.wikipedia.org/wiki/%E8%B3%87%E8%A8%8A%E5%B7%A5%E6%A5%AD%E7%AD%96%E9%80%B2%E6%9C%83">財團法人資訊工業策進會</a>與<a href="https://zh.wikipedia.org/wiki/%E5%8F%B0%E7%81%A3">台灣</a>國內13家廠商合作進行「五大軟體專案」，所開發出來的五種中文套裝軟體，分別為「<a href="https://zh.wikipedia.org/wiki/%E6%96%87%E6%9B%B8%E8%99%95%E7%90%86">文書處理</a>」、「<a href="https://zh.wikipedia.org/wiki/%E8%B3%87%E6%96%99%E5%BA%AB">資料庫</a>」、「<a href="https://zh.wikipedia.org/wiki/%E8%A9%A6%E7%AE%97%E8%A1%A8">試算表</a>」、「<a href="https://zh.wikipedia.org/wiki/%E9%80%9A%E8%A8%8A">通訊</a>」及「<a href="https://zh.wikipedia.org/w/index.php?title=%E7%B9%AA%E5%9C%96&action=edit&redlink=1">繪圖</a>」。</p>
<p>Big5碼的產生，是因為當時<a href="https://zh.wikipedia.org/wiki/%E5%80%8B%E4%BA%BA%E9%9B%BB%E8%85%A6">個人電腦</a>沒有共通的內碼，導致廠商推出的中文應用軟體無法推廣，並且與<a href="https://zh.wikipedia.org/wiki/IBM_5550">IBM 5550</a>、<a href="https://zh.wikipedia.org/w/index.php?title=%E7%8E%8B%E5%AE%89%E7%A2%BC&action=edit&redlink=1">王安碼</a>等內碼，彼此不能相容；另一方面，台灣當時尚未推出中文編碼標準。在這樣的時空背景下，為了使台灣早日進入資訊時代，所採行的一個計畫；同時，這個計畫對於以台灣為核心的亞洲繁體漢字圈也產生了久遠的影響。</p>
<h2 id="6-ANSI"><a href="#6-ANSI" class="headerlink" title="6. ANSI"></a>6. ANSI</h2><p>ANSI指American National Standards Institute（美國國家標準學會）。</p>
<p>在全世界所有國家和民族的文字符號統一編碼的Unicode編碼方案問世之前，各個國家、民族為了用計算機記錄並顯示自己的字符，都在ASCII編碼方案的基礎上，設計了各自的編碼方案。</p>
<p>比如歐洲先後設計了EASCII和ISO&#x2F;IEC 8859系列字符編碼方案；為了顯示中文及相關字符，中國設計了GB系列編碼(“GB”為“國標”的漢語拼音首字母縮寫，即“國家標準”之意)。</p>
<p>同樣，日文、韓文、世界各國文字都有它們各自的編碼。所有這些各個國家和地區所獨立制定的既兼容ASCII又互相不兼容的字符編碼，微軟統稱為ANSI編碼。</p>
<p>ANSI編碼不是一種具體的編碼方式，而是一種指定在某些環境下使用某些編碼方式的標準。比如，在中文環境中ANSI的編碼標準為GBK，在日語環境中ANSI的編碼標準則是Shift_JIS編碼。</p>
<p>不同的國家和地區製定了不同的標準，由此產生了 GB2312、GBK、Big5、Shift_JIS 等各自的編碼標準。這些使用 1 至 4 個字節來代表一個字符的各種漢字延伸編碼方式，稱為 ANSI 編碼。在簡體中文Windows操作系統中，ANSI 編碼代表 GBK 編碼；在日文Windows操作系統中，ANSI 編碼代表 Shift_JIS 編碼。 “ANSI編碼”被稱為“本地編碼”。</p>
<p>ANSI另外一個名稱是MBCS，MBCS(Multi-Byte Character Set)是多字節編碼的統稱。目前為止大家都是用了雙字節，所以有時候也叫做DBCS(Double-Byte Character Set)。必須明確的是，MBCS並不是某一種特定的編碼，Windows裡根據你設定的區域不同，MBCS指代不同的編碼，而Linux裡無法使用MBCS作為編碼。在Windows中你看不到MBCS這幾個字符，因為微軟為了更加洋氣，使用了ANSI來嚇唬人，記事本的另存為對話框裡編碼ANSI就是MBCS。</p>
<h3 id="6-1-實驗ANSI編碼"><a href="#6-1-實驗ANSI編碼" class="headerlink" title="6.1. 實驗ANSI編碼"></a>6.1. 實驗ANSI編碼</h3><p>用Notepad++創建一個文本文件text.txt，其默認編碼格式為ANSI（乍看之下，還以為是ASCII呢），輸入漢字居然不是亂碼：<br><img src="https://i.imgur.com/13Cbivx.png" alt="img"></p>
<p>保存為test.txt，發送給你美國的同事Bob。他也用Notepad++，不幸的是，卻發現你的文件內容是這樣的：<br><img src="https://i.imgur.com/DFD6Hxw.png" alt="img"></p>
<p>也許你會認為：你用的是中文系統，能正常顯示中文；他用的是英文系統，不能顯示中文！</p>
<p>這麼想，好像很有道理呢！</p>
<p>但是再細想一下：<strong>一個系統顯示亂碼，說明它不支持這種編碼格式（或者解碼方式不對）。難道英文系統不支持ANSI？難道ANSI是一種中文編碼？</strong></p>
<p>如果你身邊有一個韓文系統，也裝一個Notepad++，默認還是ANSI編碼，你可以輸入“한국어”，發現也能正常顯示：<br><img src="https://i.imgur.com/X7xgkAv.png" alt="img"><br>但是你要輸入“漢字”可能就會發現是亂碼了…</p>
<p>通過這個反例，就可以說明<strong>ANSI不是一種中文編碼。那麼，ANSI到底是什麼編碼？</strong></p>
<p>用十六進制編輯器打開內容為“漢字”的test.txt文件，你會發現其中baba和d7d6正好是“漢”和“字”兩個字的<a href="http://www.qqxiuzi.cn/zh/hanzi-gbk-bianma.php">GBK編碼</a>值。<br><img src="https://i.imgur.com/plzhK8L.png" alt="img"></p>
<p>同樣，用十六進制編輯器打開內容為“한국어”的test.txt文件，你會發現其中c7d1、b1b9和beee正好是“한”、“국”和“어”三個字符的<a href="http://www.chi2ko.com/jingyan/euckr2uni.htm">EUC-KR編碼</a>值。<br><img src="https://i.imgur.com/6HdhF9f.png" alt="img"></p>
<p>由此可以看出：其實ANSI並不是某一種特定的字符編碼，而是在不同的系統中，ANSI表示不同的編碼。你的美國同事Bob的系統中ANSI編碼其實是ASCII編碼（ASCII編碼不能表示漢字，所以漢字為亂碼），而你的系統中（“漢字”正常顯示）ANSI編碼其實是GBK編碼，而韓文系統中（“한국어”正常顯示）ANSI編碼其實是EUC-KR編碼。</p>
<h3 id="6-2-Windows系統是如何區分ANSI背後的真實編碼的呢？"><a href="#6-2-Windows系統是如何區分ANSI背後的真實編碼的呢？" class="headerlink" title="6.2. Windows系統是如何區分ANSI背後的真實編碼的呢？"></a>6.2. Windows系統是如何區分ANSI背後的真實編碼的呢？</h3><p>微軟用一個叫“ <a href="https://en.wikipedia.org/wiki/Code_page">Windows code pages</a> ”（在命令行下執行chcp命令可以查看當前code page的值）的值來判斷系統默認編碼，比如：簡體中文的code page值為936（它表示GBK編碼，win95之前表示GB2312，詳見：<a href="https://en.wikipedia.org/wiki/Code_page_1386">Microsoft Windows’ Code Page 936</a>），繁體中文的code page值為950（表示Big-5編碼）。</p>
<h3 id="6-3-通過修改Windows-code-pages的值來改變“ANSI編碼”"><a href="#6-3-通過修改Windows-code-pages的值來改變“ANSI編碼”" class="headerlink" title="6.3. 通過修改Windows code pages的值來改變“ANSI編碼”"></a>6.3. 通過修改Windows code pages的值來改變“ANSI編碼”</h3><p>命令提示符下，我們可以通過chcp命令來修改當前終端的active code page，例如：<br>(1) 執行：chcp 437，code page改為437，當前終端的默認編碼就為ASCII編碼了（漢字就成亂碼了）；<br>(2) 執行：chcp 936，code page改為936，當前終端的默認編碼就為GBK編碼了（漢字又能正常顯示了）。<br>上面的操作只在當前終端起作用，並不會影響系統默認的“ANSI編碼”。（更改命令行默認codepage參看：<a href="http://www.cnblogs.com/SunWentao/archive/2010/05/26/1744382.html">設置cmd的codepage的方法</a>）。</p>
<p>Windows下code page是根據當前系統區域（locale）來設置的，要想修改系統默認的“ANSI編碼”，我們可以通過修改系統區域來實現（“控制面板” &#x3D;&gt;“時鐘、語言和區域”&#x3D;&gt;“區域和語言”&#x3D;&gt;“管理”&#x3D;&gt;“更改系統區域設置…”）：<br><img src="https://i.imgur.com/QOuL8CU.png" alt="img"><br>圖中的系統locale為簡體中文，意味著當前“ANSI編碼”實際是GBK編碼。當你把它改成Korean(Korea)時，“ANSI編碼”實際是EUC-KR編碼，“한국어”就能正常顯示了；當你把它改成English(US)時，“ANSI編碼”實際是ASCII編碼，“漢字”和“한국어”都成亂碼了。（改了之後需要重啟系統的。。。）</p>
<p>說明：locale是國際化與本地化中重要的概念，本文不深入講解該內容。</p>
<p>常見編碼：</p>
<p>codepage&#x3D;936 簡體中文GBK<br>codepage&#x3D;950 繁體中文BIG5<br>codepage&#x3D;437 美國&#x2F;加拿大英語<br>codepage&#x3D;932 日文<br>codepage&#x3D;949 韓文<br>codepage&#x3D;866 俄文</p>
<p><a href="https://www.cnblogs.com/malecrab/p/5300486.html">參考連結：ANSI是什麼編碼？</a></p>
<h2 id="7-UNICODE"><a href="#7-UNICODE" class="headerlink" title="7. UNICODE"></a>7. UNICODE</h2><p>由於 ASCII 只能儲存最多 256 種組合，顯然對於多國語系來說相當不夠，因此出現 <strong>Unicode</strong>。</p>
<p>Unicode字碼表（Unicode characters）收集了大量的Unicode字符代碼，以表格形式呈現。Unicode（統一碼、萬國碼、單一碼）是電腦科學領域裡的一項業界標準，包括字符集(字元集)、編碼方案等。Unicode 是為了解決傳統的字元編碼方案的局限而產生的，它為每種語言中的每個字元設定了統一，併且唯一的二進制編碼，以滿足跨語言、跨平台進行文本轉換、處理的要求。1990年開始研發，1994年正式公佈。</p>
<p><strong>Unicode 就像一個資料庫，每一個文字符號（symbol）都可以對應到一組數字</strong>。</p>
<p>在 Unicode 中常用 <code>U+&lt;hex&gt;</code> 表示，<code>U+</code> 後面的 16 進制數就叫「<strong>碼點（Code Point）」</strong>或「<strong>編碼位置</strong>」。<strong>這個編碼位置是唯一的</strong>。透過這種方式可以簡單的存取特定文字符號而不用直接輸入符號本身，例如，<code>U+0000</code> 則碼點為 <code>0000</code>。</p>
<h3 id="7-1-基本平面和輔助平面（BMP-and-SMP）"><a href="#7-1-基本平面和輔助平面（BMP-and-SMP）" class="headerlink" title="7.1. 基本平面和輔助平面（BMP and SMP）"></a>7.1. 基本平面和輔助平面（BMP and SMP）</h3><p>Unicode 編碼範圍從  <code>U+0000</code> 到  <code>U+10FFFF</code> 超過 110 萬個符號。</p>
<p><strong>基本平面</strong>（BMP, Basic Multilingual Plane）：<strong>由兩個位元組組成</strong>，是 Unicode 中最前面的 65536 個文字符號，寫成 16 進制就是從<code>U+0000</code> 到 <code>U+FFFF</code>。所有最常見的字符都放在這個平面，這是 Unicode 最先定義和公佈的一個平面。</p>
<p><strong>輔助平面</strong>（SMP, Supplementary planes or Astral planes）：<strong>由三個位元組組成</strong>，除了基本平面外，剩下的文字符號都放在輔助平面，碼點範圍從 <code>U+010000</code> 一直到 <code>U+10FFFF</code>，如果某個字符需要超過 4 位數的 16 進制來表示那它就屬於輔助平面。</p>
<p>目前的<a href="https://zh.wikipedia.org/wiki/Unicode">Unicode</a>字元分為17組編排，每組稱為<strong>平面</strong>（Plane），而每平面擁有65536（即216）個代碼點。然而目前只用了少數平面。</p>
<p><img src="https://i.imgur.com/OyuPCqM.png" alt="3330817-c188b53396c14318"></p>
<table>
<thead>
<tr>
<th align="center">平面</th>
<th align="center">始末字元值</th>
<th align="center">中文名稱</th>
<th align="center">英文名稱</th>
</tr>
</thead>
<tbody><tr>
<td align="center">0號平面</td>
<td align="center">U+0000 - U+FFFF</td>
<td align="center"><strong>基本多文種平面</strong></td>
<td align="center">Basic Multilingual Plane，簡稱<strong>BMP</strong></td>
</tr>
<tr>
<td align="center">1號平面</td>
<td align="center">U+10000 - U+1FFFF</td>
<td align="center"><strong>多文種補充平面</strong></td>
<td align="center">Supplementary Multilingual Plane，簡稱<strong>SMP</strong></td>
</tr>
<tr>
<td align="center">2號平面</td>
<td align="center">U+20000 - U+2FFFF</td>
<td align="center"><strong>表意文字補充平面</strong></td>
<td align="center">Supplementary Ideographic Plane，簡稱<strong>SIP</strong></td>
</tr>
<tr>
<td align="center">3號平面</td>
<td align="center">U+30000 - U+3FFFF</td>
<td align="center"><strong>表意文字第三平面</strong></td>
<td align="center">Tertiary Ideographic Plane，簡稱<strong>TIP</strong></td>
</tr>
<tr>
<td align="center">4號平面 至 13號平面</td>
<td align="center">U+40000 - U+DFFFF</td>
<td align="center">（尚未使用）</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">14號平面</td>
<td align="center">U+E0000 - U+EFFFF</td>
<td align="center"><strong>特別用途補充平面</strong></td>
<td align="center">Supplementary Special-purpose Plane，簡稱<strong>SSP</strong></td>
</tr>
<tr>
<td align="center">15號平面</td>
<td align="center">U+F0000 - U+FFFFF</td>
<td align="center">保留作為<strong>私人使用區（A區）</strong>[<a href="https://zh.wikipedia.org/wiki/Unicode%E5%AD%97%E7%AC%A6%E5%B9%B3%E9%9D%A2%E6%98%A0%E5%B0%84#cite_note-PUA-1">1]</a></td>
<td align="center">Private Use Area-A，簡稱<strong>PUA-A</strong></td>
</tr>
<tr>
<td align="center">16號平面</td>
<td align="center">U+100000 - U+10FFFF</td>
<td align="center">保留作為<strong>私人使用區（B區）</strong>[<a href="https://zh.wikipedia.org/wiki/Unicode%E5%AD%97%E7%AC%A6%E5%B9%B3%E9%9D%A2%E6%98%A0%E5%B0%84#cite_note-PUA-1">1]</a></td>
<td align="center">Private Use Area-B，簡稱<strong>PUA-B</strong></td>
</tr>
</tbody></table>
<p><a href="https://zh.wikipedia.org/wiki/Unicode%E5%AD%97%E7%AC%A6%E5%B9%B3%E9%9D%A2%E6%98%A0%E5%B0%84">參考連結：Unicode字元平面對映</a></p>
<h3 id="7-2-Unicode和Unicode-big-endian有什麼區別？"><a href="#7-2-Unicode和Unicode-big-endian有什麼區別？" class="headerlink" title="7.2. Unicode和Unicode big endian有什麼區別？"></a>7.2. Unicode和Unicode big endian有什麼區別？</h3><h4 id="7-2-1-位元組順序"><a href="#7-2-1-位元組順序" class="headerlink" title="7.2.1. 位元組順序"></a>7.2.1. 位元組順序</h4><p>學過組語的大大們應該很了解，不同 CPU 在處理多位元資料型態時，暫存器和記憶體存放資料的方式有兩種大端序 (big-endian) 和小端序 (little-endian)。 </p>
<ul>
<li><p>大端序會將資料的高位位元組儲存在記憶體的低位地址。 </p>
</li>
<li><p>小端序會將資料的低位位元組儲存在記憶體的低位地址。</p>
</li>
</ul>
<p>例如 “字” 的 Unicode 是 5B57，5B 為高位位元組，57 為低為位元位，如果開啟記事本後讀取到的順序是 5B 57，就是使用大端序儲存，反之就是小端序。</p>
<p>像我第一次在 C# 將 string 轉成 hex 時就覺得很困惑，為什麼 Unicode 是 5B57，而我看到的卻是 575B，後來才知道是因為 C# 和 C++ 一樣，位元組順序會隨著 CPU 架構而不同，在 Intel x86 x64 架構下會採用小端序，所以才會看到低位地址57放在前面，而 JAVA 因為 JVM 的原因沒有這種差異，都是採用大端序。 </p>
<p>主機間不同的位元組順序，會造成網路通訊的困難，因此 TCP&#x2F;IP 協議也規範了統一的位元組順序 網絡位元組序，採用大端序，大部分的網路協定也都是使用大端序。</p>
<p>不同的計算機系統會以不同的順序保存字節。這意味著字符U+4E2D在UTF-16編碼方式下可能被保存為4E 2D或者2D 4E，這取決於該系統使用的是大尾端(big-endian)還是小尾端(little-endian)。 （對於UTF-32編碼方式，則有更多種可能的字節排列。）只要文檔沒有離開你的計算機，它還是安全的——同一台電腦上的不同程序使用相同的字節順序(byte order)。但是當我們需要在系統之間傳輸這個文檔的時候，也許在萬維網中，我們就需要一種方法來指示當前我們的字節是怎樣存儲的。不然的話，接收文檔的計算機就無法知道這兩個字節4E 2D表達的到底是U+4E2D還是U+2D4E。</p>
<p><img src="https://i.imgur.com/8PJdxGO.png" alt="img"></p>
<h4 id="7-2-2-大端序（英：big-endian）"><a href="#7-2-2-大端序（英：big-endian）" class="headerlink" title="7.2.2. 大端序（英：big-endian）"></a>7.2.2. 大端序（英：big-endian）</h4><ul>
<li>數據以8bit為單位：地址增長方向 → 0x0A 0x0B 0x0C 0x0D</li>
<li>示例中，最高位字節是0x0A 存儲在最低的內存地址處。下一個字節0x0B存在後面的地址處。正類似於十六進製字節從左到右的閱讀順序。</li>
<li>數據以16bit為單位: 地址增長方向 → 0x0A0B 0x0C0D</li>
<li>最高的16bit單元0x0A0B存儲在低位。</li>
</ul>
<h4 id="7-2-3-小端序（英：little-endian）"><a href="#7-2-3-小端序（英：little-endian）" class="headerlink" title="7.2.3. 小端序（英：little-endian）"></a>7.2.3. 小端序（英：little-endian）</h4><ul>
<li>數據以8bit為單位: 地址增長方向 → 0x0D 0x0C 0x0B 0x0A</li>
<li>最低位字節是0x0D 存儲在最低的內存地址處。後面字節依次存在後面的地址處。</li>
<li>數據以16bit為單位: 地址增長方向 → 0x0C0D 0x0A0B</li>
<li>最低的16bit單元0x0D0C存儲在低位。</li>
</ul>
<p>以漢字<code>严</code>為例，Unicode碼是<code>4E25</code>，需要用兩個字節存儲，一個字節是4E，另一個字節是25。</p>
<p>存儲的時候，4E在前，25在後，就是Big endian方式(也就是<code>4E25</code>)；25在前，4E在後，就是Little endian方式(也就是<code>254E</code>)。</p>
<p>Unicode規範中定義，每一個文件的最前面分別加入一個表示編碼順序的字符，這個字符的名字叫做”零寬度非換行空格”（Zero Width No-Break Space），用FEFF表示。這正好是兩個字節，而且FF比FE大1。</p>
<p>如果一個文本文件的頭兩個字節是FE FF，就表示該文件採用大頭方式；如果頭兩個字節是FF FE，就表示該文件採用小頭方式。</p>
<ul>
<li>Unicode：編碼是四個字節”FF FE 25 4E”，其中”FF FE”表明是小頭方式存儲，真正的編碼是4E25。</li>
<li>Unicode big endian：編碼是四個字節”FE FF 4E 25″，其中”FE FF”表明是大頭方式存儲。</li>
</ul>
<h3 id="7-3-Unicode-版本"><a href="#7-3-Unicode-版本" class="headerlink" title="7.3. Unicode 版本"></a>7.3. Unicode 版本</h3><table>
<thead>
<tr>
<th align="center">版本</th>
<th align="center">發布日期</th>
<th align="center">書籍</th>
<th align="center">對應<a href="https://zh.m.wikipedia.org/wiki/%E9%80%9A%E7%94%A8%E5%AD%97%E7%AC%A6%E9%9B%86">ISO&#x2F;IEC 10646</a>版本</th>
<th align="center">文字數</th>
<th align="center">字元數</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td align="center">總計[<a href="https://zh.m.wikipedia.org/zh-tw/Unicode#cite_note-9">註 1]</a></td>
<td align="center">已知的擴增</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td></td>
</tr>
<tr>
<td align="center">1.0.0</td>
<td align="center">1991年10月</td>
<td align="center"><a href="https://zh.m.wikipedia.org/wiki/%E5%9B%BD%E9%99%85%E6%A0%87%E5%87%86%E4%B9%A6%E5%8F%B7">ISBN</a> <a href="https://zh.m.wikipedia.org/wiki/Special:%E7%BD%91%E7%BB%9C%E4%B9%A6%E6%BA%90/0-201-56788-1">0-201-56788-1</a>（Vol. 1）</td>
<td align="center"></td>
<td align="center">24</td>
<td align="center">7,161</td>
<td>最初包含的文字有：<a href="https://zh.m.wikipedia.org/wiki/%E9%98%BF%E6%8B%89%E4%BC%AF%E5%AD%97%E6%AF%8D">阿拉伯字母</a>、<a href="https://zh.m.wikipedia.org/wiki/%E4%BA%9E%E7%BE%8E%E5%B0%BC%E4%BA%9E%E5%AD%97%E6%AF%8D">亞美尼亞字母</a>、<a href="https://zh.m.wikipedia.org/wiki/%E5%AD%9F%E5%8A%A0%E6%8B%89%E6%96%87">孟加拉文</a>、<a href="https://zh.m.wikipedia.org/wiki/%E6%B3%A8%E9%9F%B3%E7%AC%A6%E8%99%9F">注音符號</a>、<a href="https://zh.m.wikipedia.org/wiki/%E8%A5%BF%E9%87%8C%E7%88%BE%E5%AD%97%E6%AF%8D">西里爾字母</a>、<a href="https://zh.m.wikipedia.org/wiki/%E5%A4%A9%E5%9F%8E%E6%96%87">天城文</a>、<a href="https://zh.m.wikipedia.org/wiki/%E6%A0%BC%E9%B2%81%E5%90%89%E4%BA%9A%E5%AD%97%E6%AF%8D">喬治亞字母</a>、<a href="https://zh.m.wikipedia.org/wiki/%E5%B8%8C%E8%87%98%E5%AD%97%E6%AF%8D">希臘字母</a>、<a href="https://zh.m.wikipedia.org/wiki/%E5%8F%A4%E5%90%89%E6%8B%89%E7%89%B9%E6%96%87">古吉拉特文</a>、<a href="https://zh.m.wikipedia.org/wiki/%E5%8F%A4%E6%9C%A8%E5%9F%BA%E6%96%87">古木基文</a>、<a href="https://zh.m.wikipedia.org/wiki/%E8%AB%BA%E6%96%87">諺文</a>、<a href="https://zh.m.wikipedia.org/wiki/%E5%B8%8C%E4%BC%AF%E4%BE%86%E5%AD%97%E6%AF%8D">希伯來字母</a>、<a href="https://zh.m.wikipedia.org/wiki/%E5%B9%B3%E5%81%87%E5%90%8D">平假名</a>、<a href="https://zh.m.wikipedia.org/wiki/%E5%8D%A1%E7%B4%8D%E9%81%94%E6%96%87">卡納達文</a>、<a href="https://zh.m.wikipedia.org/wiki/%E7%89%87%E5%81%87%E5%90%8D">片假名</a>、<a href="https://zh.m.wikipedia.org/wiki/%E5%AF%AE%E6%96%87%E5%AD%97">寮文字</a>、<a href="https://zh.m.wikipedia.org/wiki/%E6%8B%89%E4%B8%81%E5%AD%97%E6%AF%8D">拉丁字母</a>、<a href="https://zh.m.wikipedia.org/wiki/%E9%A6%AC%E6%8B%89%E9%9B%85%E6%8B%89%E5%A7%86%E6%96%87">馬拉雅拉姆文</a>、<a href="https://zh.m.wikipedia.org/wiki/%E5%A5%A7%E9%87%8C%E4%BA%9E%E6%96%87">奧里亞文</a>、<a href="https://zh.m.wikipedia.org/wiki/%E6%B3%B0%E7%B1%B3%E7%88%BE%E6%96%87">泰米爾文</a>、<a href="https://zh.m.wikipedia.org/wiki/%E6%B3%B0%E5%8D%A2%E5%9B%BA%E6%96%87">泰盧固文</a>、<a href="https://zh.m.wikipedia.org/wiki/%E6%B3%B0%E6%96%87%E5%AD%97">泰文字</a>與<a href="https://zh.m.wikipedia.org/wiki/%E8%97%8F%E6%96%87">藏文</a>[<a href="https://zh.m.wikipedia.org/zh-tw/Unicode#cite_note-10">9]</a>。</td>
</tr>
<tr>
<td align="center">1.0.1</td>
<td align="center">1992年6月</td>
<td align="center"><a href="https://zh.m.wikipedia.org/wiki/%E5%9B%BD%E9%99%85%E6%A0%87%E5%87%86%E4%B9%A6%E5%8F%B7">ISBN</a> <a href="https://zh.m.wikipedia.org/wiki/Special:%E7%BD%91%E7%BB%9C%E4%B9%A6%E6%BA%90/0-201-60845-6">0-201-60845-6</a>（Vol. 2）</td>
<td align="center"></td>
<td align="center">25</td>
<td align="center">28,359</td>
<td>定義<a href="https://zh.m.wikipedia.org/wiki/%E4%B8%AD%E6%97%A5%E9%9F%93%E7%B5%B1%E4%B8%80%E8%A1%A8%E6%84%8F%E6%96%87%E5%AD%97">中日韓統一表意文字</a>最初的20,902個字[<a href="https://zh.m.wikipedia.org/zh-tw/Unicode#cite_note-11">10]</a>。</td>
</tr>
<tr>
<td align="center">1.1</td>
<td align="center">1993年6月</td>
<td align="center"></td>
<td align="center">ISO&#x2F;IEC 10646-1:1993</td>
<td align="center">24</td>
<td align="center">34,233</td>
<td>於原有2,350個<a href="https://zh.m.wikipedia.org/wiki/%E8%AB%BA%E6%96%87">諺文</a>字母的基礎上新增4,306個諺文字母。移除<a href="https://zh.m.wikipedia.org/wiki/%E8%97%8F%E6%96%87">藏文</a>[<a href="https://zh.m.wikipedia.org/zh-tw/Unicode#cite_note-12">11]</a>。</td>
</tr>
<tr>
<td align="center">2.0</td>
<td align="center">1996年7月</td>
<td align="center"><a href="https://zh.m.wikipedia.org/wiki/%E5%9B%BD%E9%99%85%E6%A0%87%E5%87%86%E4%B9%A6%E5%8F%B7">ISBN</a> <a href="https://zh.m.wikipedia.org/wiki/Special:%E7%BD%91%E7%BB%9C%E4%B9%A6%E6%BA%90/0-201-48345-9">0-201-48345-9</a></td>
<td align="center">ISO&#x2F;IEC 10646-1:1993與其第5－7修訂版</td>
<td align="center">25</td>
<td align="center">38,950</td>
<td>移除原有的<a href="https://zh.m.wikipedia.org/wiki/%E8%AB%BA%E6%96%87">諺文</a>字母設定，於新的編碼範圍更換成11,172個新的諺文字母。<a href="https://zh.m.wikipedia.org/wiki/%E8%97%8F%E6%96%87">藏文</a>重新加入，但編碼位置更換。代理字元機制建立，並將第15與第16平面分配給私人使用區[<a href="https://zh.m.wikipedia.org/zh-tw/Unicode#cite_note-13">12]</a>。</td>
</tr>
<tr>
<td align="center">2.1</td>
<td align="center">1998年5月</td>
<td align="center"></td>
<td align="center">ISO&#x2F;IEC 10646-1:1993與其第5－7修訂版，以及第18修訂版中新增的2個字元</td>
<td align="center">25</td>
<td align="center">38,952</td>
<td>新增<a href="https://zh.m.wikipedia.org/wiki/%E6%AD%90%E5%85%83%E7%AC%A6%E8%99%9F">歐元符號</a>與<a href="https://zh.m.wikipedia.org/w/index.php?title=%E5%AF%B9%E8%B1%A1%E6%9B%BF%E6%8D%A2%E5%AD%97%E7%AC%A6&action=edit&redlink=1">物件替換字元</a>[<a href="https://zh.m.wikipedia.org/zh-tw/Unicode#cite_note-14">13]</a>。</td>
</tr>
<tr>
<td align="center">3.0</td>
<td align="center">1999年9月</td>
<td align="center"><a href="https://zh.m.wikipedia.org/wiki/%E5%9B%BD%E9%99%85%E6%A0%87%E5%87%86%E4%B9%A6%E5%8F%B7">ISBN</a> <a href="https://zh.m.wikipedia.org/wiki/Special:%E7%BD%91%E7%BB%9C%E4%B9%A6%E6%BA%90/0-201-61633-5">0-201-61633-5</a></td>
<td align="center">ISO&#x2F;IEC 10646-1:2000</td>
<td align="center">38</td>
<td align="center">49,259</td>
<td>新增<a href="https://zh.m.wikipedia.org/wiki/%E5%88%87%E7%BD%97%E5%9F%BA%E6%96%87">切羅基文</a>、<a href="https://zh.m.wikipedia.org/wiki/%E5%90%89%E8%8C%B2%E5%AD%97%E6%AF%8D">吉茲字母</a>、<a href="https://zh.m.wikipedia.org/wiki/%E9%AB%98%E6%A3%89%E5%AD%97%E6%AF%8D">高棉字母</a>、<a href="https://zh.m.wikipedia.org/wiki/%E8%92%99%E5%8F%A4%E5%AD%97%E6%AF%8D">蒙古字母</a>、<a href="https://zh.m.wikipedia.org/wiki/%E7%BC%85%E6%96%87">緬文</a>、<a href="https://zh.m.wikipedia.org/wiki/%E6%AD%90%E7%94%98%E5%AD%97%E6%AF%8D">歐甘字母</a>、<a href="https://zh.m.wikipedia.org/wiki/%E5%8D%A2%E6%81%A9%E5%AD%97%E6%AF%8D">盧恩字母</a>、<a href="https://zh.m.wikipedia.org/wiki/%E5%83%A7%E4%BC%BD%E7%BE%85%E6%96%87">僧伽羅文</a>、<a href="https://zh.m.wikipedia.org/wiki/%E6%95%98%E5%88%A9%E4%BA%9E%E5%AD%97%E6%AF%8D">敘利亞字母</a>、<a href="https://zh.m.wikipedia.org/wiki/%E5%AE%83%E6%8B%BF%E5%AD%97%E6%AF%8D">它拿字母</a>、<a href="https://zh.m.wikipedia.org/wiki/%E5%8A%A0%E6%8B%BF%E5%A4%A7%E5%8E%9F%E4%BD%8F%E6%B0%91%E9%9F%B3%E7%AF%80%E6%96%87%E5%AD%97">加拿大原住民音節文字</a>和<a href="https://zh.m.wikipedia.org/wiki/%E5%BD%9D%E6%96%87">彝文</a>，以及部分<a href="https://zh.m.wikipedia.org/wiki/%E7%9B%B2%E6%96%87">盲文</a>圖案。[<a href="https://zh.m.wikipedia.org/zh-tw/Unicode#cite_note-15">14]</a></td>
</tr>
<tr>
<td align="center">3.1</td>
<td align="center">2001年3月</td>
<td align="center"></td>
<td align="center">ISO&#x2F;IEC 10646-1:2000ISO&#x2F;IEC 10646-2:2001</td>
<td align="center">41</td>
<td align="center">94,205</td>
<td>新增<a href="https://zh.m.wikipedia.org/w/index.php?title=%E5%BE%B7%E7%91%9F%E9%9B%B7%E7%89%B9%E5%AD%97%E6%AF%8D&action=edit&redlink=1">德瑟雷特字母</a>（英語：<a href="https://en.wikipedia.org/wiki/Deseret_alphabet">Deseret alphabet</a>）、<a href="https://zh.m.wikipedia.org/wiki/%E5%93%A5%E7%89%B9%E5%AD%97%E6%AF%8D">哥特字母</a>、<a href="https://zh.m.wikipedia.org/wiki/%E5%8F%A4%E6%84%8F%E5%A4%A7%E5%88%A9%E5%AD%97%E6%AF%8D">古義大利字母</a>、<a href="https://zh.m.wikipedia.org/wiki/%E9%9F%B3%E6%A8%82%E7%AC%A6%E8%99%9F">音樂符號</a>和<a href="https://zh.m.wikipedia.org/wiki/%E6%8B%9C%E5%8D%A0%E5%BA%AD%E9%9F%B3%E4%B9%90%E7%AC%A6%E5%8F%B7">拜占庭音樂符號</a>，追加了42711個<a href="https://zh.m.wikipedia.org/wiki/%E4%B8%AD%E6%97%A5%E9%9F%A9%E7%BB%9F%E4%B8%80%E8%A1%A8%E6%84%8F%E6%96%87%E5%AD%97">中日韓統一表意文字</a>（<a href="https://zh.m.wikipedia.org/wiki/%E4%B8%AD%E6%97%A5%E9%9F%93%E7%B5%B1%E4%B8%80%E8%A1%A8%E6%84%8F%E6%96%87%E5%AD%97%E6%93%B4%E5%B1%95%E5%8D%80B">CJK-B</a>）。[<a href="https://zh.m.wikipedia.org/zh-tw/Unicode#cite_note-16">15]</a></td>
</tr>
<tr>
<td align="center">3.2</td>
<td align="center">2002年3月</td>
<td align="center"></td>
<td align="center">ISO&#x2F;IEC 10646-1:2000與其第1修訂版ISO&#x2F;IEC 10646-2:2001</td>
<td align="center">45</td>
<td align="center">95,221</td>
<td>新增<a href="https://zh.m.wikipedia.org/wiki/%E8%8F%B2%E5%BE%8B%E5%AE%BE">菲律賓</a>文字<a href="https://zh.m.wikipedia.org/wiki/%E5%B8%83%E9%94%A1%E6%96%87">布錫文</a>、<a href="https://zh.m.wikipedia.org/w/index.php?title=%E5%93%88%E5%8A%AA%E8%AF%BA%E6%96%87&action=edit&redlink=1">哈努諾文</a>、<a href="https://zh.m.wikipedia.org/wiki/%E4%BB%96%E5%8A%A0%E7%A5%BF%E6%96%87">他加祿文</a>、<a href="https://zh.m.wikipedia.org/w/index.php?title=%E5%A1%94%E6%A0%BC%E5%B7%B4%E5%A5%B4%E4%BA%9A%E6%96%87&action=edit&redlink=1">塔格巴奴亞文</a>。[<a href="https://zh.m.wikipedia.org/zh-tw/Unicode#cite_note-17">16]</a></td>
</tr>
<tr>
<td align="center">4.0</td>
<td align="center">2003年4月</td>
<td align="center"><a href="https://zh.m.wikipedia.org/wiki/%E5%9B%BD%E9%99%85%E6%A0%87%E5%87%86%E4%B9%A6%E5%8F%B7">ISBN</a> <a href="https://zh.m.wikipedia.org/wiki/Special:%E7%BD%91%E7%BB%9C%E4%B9%A6%E6%BA%90/0-321-18578-1">0-321-18578-1</a></td>
<td align="center">ISO&#x2F;IEC 10646:2003</td>
<td align="center">52</td>
<td align="center">96,447</td>
<td>新增<a href="https://zh.m.wikipedia.org/wiki/%E5%A1%9E%E6%B5%A6%E8%B7%AF%E6%96%AF%E9%9F%B3%E8%8A%82%E6%96%87%E5%AD%97">賽普勒斯音節文字</a>、<a href="https://zh.m.wikipedia.org/w/index.php?title=%E6%9E%97%E5%B8%83%E5%AD%97%E6%AF%8D&action=edit&redlink=1">林布字母</a>、<a href="https://zh.m.wikipedia.org/wiki/%E7%BA%BF%E5%BD%A2%E6%96%87%E5%AD%97B">線形文字B</a>、<a href="https://zh.m.wikipedia.org/wiki/%E5%A5%A7%E6%96%AF%E6%9B%BC%E4%BA%9E%E5%AD%97%E6%AF%8D">奧斯曼亞字母</a>、<a href="https://zh.m.wikipedia.org/wiki/%E8%95%AD%E4%BC%AF%E7%B4%8D%E5%AD%97%E6%AF%8D">蕭伯納字母</a>、<a href="https://zh.m.wikipedia.org/wiki/%E5%BE%B7%E5%AE%8F%E5%82%A3%E6%96%87">德宏傣文</a>、<a href="https://zh.m.wikipedia.org/wiki/%E4%B9%8C%E5%8A%A0%E9%87%8C%E7%89%B9%E5%AD%97%E6%AF%8D">烏加里特字母</a>以及<a href="https://zh.m.wikipedia.org/wiki/%E5%85%AD%E5%8D%81%E5%9B%9B%E5%8D%A6">六十四卦</a>。[<a href="https://zh.m.wikipedia.org/zh-tw/Unicode#cite_note-18">17]</a></td>
</tr>
<tr>
<td align="center">4.1</td>
<td align="center">2005年3月</td>
<td align="center"></td>
<td align="center">ISO&#x2F;IEC 10646:2003與其第1修訂版</td>
<td align="center">59</td>
<td align="center">97,720</td>
<td>新增<a href="https://zh.m.wikipedia.org/wiki/%E5%B8%83%E5%90%89%E6%96%87">布吉文</a>、<a href="https://zh.m.wikipedia.org/wiki/%E6%A0%BC%E6%8B%89%E5%93%A5%E9%87%8C%E5%AD%97%E6%AF%8D">格拉哥里字母</a>、<a href="https://zh.m.wikipedia.org/wiki/%E4%BD%89%E5%8D%A2%E6%96%87">佉盧文</a>、<a href="https://zh.m.wikipedia.org/wiki/%E8%A5%BF%E5%8F%8C%E7%89%88%E7%BA%B3%E5%82%A3%E6%96%87">西雙版納傣文</a>、<a href="https://zh.m.wikipedia.org/w/index.php?title=%E5%8F%A4%E6%B3%A2%E6%96%AF%E6%96%87&action=edit&redlink=1">古波斯文</a>、<a href="https://zh.m.wikipedia.org/w/index.php?title=%E9%94%A1%E5%B0%94%E8%B5%AB%E7%89%B9%E6%96%87&action=edit&redlink=1">錫爾赫特文</a>和<a href="https://zh.m.wikipedia.org/wiki/%E6%8F%90%E9%9D%9E%E7%B4%8D%E6%96%87">提非納文</a>。<a href="https://zh.m.wikipedia.org/wiki/%E7%A7%91%E6%99%AE%E7%89%B9%E5%AD%97%E6%AF%8D">科普特字母</a>從<a href="https://zh.m.wikipedia.org/wiki/%E5%B8%8C%E8%85%8A%E6%96%87">希臘文</a>區段分離。新增了<a href="https://zh.m.wikipedia.org/w/index.php?title=%E5%8F%A4%E5%B8%8C%E8%85%8A%E9%9F%B3%E4%B9%90%E7%AC%A6%E5%8F%B7&action=edit&redlink=1">古希臘音樂符號</a>。[<a href="https://zh.m.wikipedia.org/zh-tw/Unicode#cite_note-19">18]</a></td>
</tr>
<tr>
<td align="center">5.0</td>
<td align="center">2006年7月</td>
<td align="center"><a href="https://zh.m.wikipedia.org/wiki/%E5%9B%BD%E9%99%85%E6%A0%87%E5%87%86%E4%B9%A6%E5%8F%B7">ISBN</a> <a href="https://zh.m.wikipedia.org/wiki/Special:%E7%BD%91%E7%BB%9C%E4%B9%A6%E6%BA%90/0-321-48091-0">0-321-48091-0</a></td>
<td align="center">ISO&#x2F;IEC 10646:2003與其第1、2修訂版，以及第3修訂版中新增的4個字元</td>
<td align="center">64</td>
<td align="center">99,089</td>
<td>新增<a href="https://zh.m.wikipedia.org/wiki/%E5%B7%B4%E5%8E%98%E6%96%87">峇里文</a>、<a href="https://zh.m.wikipedia.org/wiki/%E6%A5%94%E5%BD%A2%E6%96%87%E5%AD%97">楔形文字</a>、<a href="https://zh.m.wikipedia.org/wiki/%E8%A5%BF%E9%9D%9E%E4%B9%A6%E9%9D%A2%E6%96%87%E5%AD%97">西非書面文字</a>、<a href="https://zh.m.wikipedia.org/wiki/%E5%85%AB%E6%80%9D%E5%B7%B4%E6%96%87">八思巴文</a>和<a href="https://zh.m.wikipedia.org/wiki/%E8%85%93%E5%B0%BC%E5%9F%BA%E5%AD%97%E6%AF%8D">腓尼基字母</a>。[<a href="https://zh.m.wikipedia.org/zh-tw/Unicode#cite_note-20">19]</a></td>
</tr>
<tr>
<td align="center">5.1</td>
<td align="center">2008年4月</td>
<td align="center"></td>
<td align="center">ISO&#x2F;IEC 10646:2003與其第1－4修訂版</td>
<td align="center">75</td>
<td align="center">100,713</td>
<td>新增<a href="https://zh.m.wikipedia.org/w/index.php?title=%E5%8D%A1%E5%88%A9%E4%BA%9A%E6%96%87&action=edit&redlink=1">卡利亞文</a>、<a href="https://zh.m.wikipedia.org/wiki/%E5%8D%A0%E5%A9%86%E5%AD%97%E6%AF%8D">占婆字母</a>、<a href="https://zh.m.wikipedia.org/w/index.php?title=%E5%85%8B%E8%80%B6%E9%BB%8E%E6%96%87&action=edit&redlink=1">克耶黎文</a>、<a href="https://zh.m.wikipedia.org/wiki/%E7%BB%92%E5%B7%B4%E6%96%87">絨巴文</a>、<a href="https://zh.m.wikipedia.org/w/index.php?title=%E5%88%A9%E8%A5%BF%E4%BA%9A%E6%96%87&action=edit&redlink=1">利西亞文</a>、<a href="https://zh.m.wikipedia.org/w/index.php?title=%E5%90%95%E5%BA%95%E4%BA%9A%E6%96%87&action=edit&redlink=1">呂底亞文</a>、<a href="https://zh.m.wikipedia.org/w/index.php?title=%E6%A1%91%E5%A1%94%E5%88%A9%E6%96%87&action=edit&redlink=1">桑塔利文</a>、<a href="https://zh.m.wikipedia.org/w/index.php?title=%E6%8B%89%E8%AE%A9%E6%96%87&action=edit&redlink=1">拉讓文</a>、<a href="https://zh.m.wikipedia.org/w/index.php?title=%E7%B4%A2%E6%8B%89%E4%BB%80%E7%89%B9%E6%8B%89%E6%96%87&action=edit&redlink=1">索拉什特拉文</a>、<a href="https://zh.m.wikipedia.org/w/index.php?title=%E5%B7%BD%E4%BB%96%E6%96%87&action=edit&redlink=1">巽他文</a>和<a href="https://zh.m.wikipedia.org/w/index.php?title=%E7%93%A6%E4%BC%8A%E6%96%87&action=edit&redlink=1">瓦伊文</a>。同時增加了<a href="https://zh.m.wikipedia.org/wiki/%E6%96%90%E6%96%AF%E6%89%98%E6%96%AF%E5%9C%93%E7%9B%A4">斐斯托斯圓盤</a>、<a href="https://zh.m.wikipedia.org/wiki/%E9%BA%BB%E5%B0%86">麻將</a>和<a href="https://zh.m.wikipedia.org/wiki/%E5%A4%9A%E7%B1%B3%E8%AF%BA%E9%AA%A8%E7%89%8C">多米諾骨牌</a>符號。對<a href="https://zh.m.wikipedia.org/wiki/%E7%BC%85%E7%94%B8%E6%96%87">緬甸文</a>做了重要的補充，追加了手抄縮寫的額外字母，追加了<a href="https://zh.m.wikipedia.org/wiki/%E5%A4%A7%E5%AF%AB%E1%BA%9E">大寫ẞ</a>。[<a href="https://zh.m.wikipedia.org/zh-tw/Unicode#cite_note-21">20]</a></td>
</tr>
<tr>
<td align="center">5.2</td>
<td align="center">2009年10月</td>
<td align="center"><a href="https://zh.m.wikipedia.org/wiki/%E5%9B%BD%E9%99%85%E6%A0%87%E5%87%86%E4%B9%A6%E5%8F%B7">ISBN</a> <a href="https://zh.m.wikipedia.org/wiki/Special:%E7%BD%91%E7%BB%9C%E4%B9%A6%E6%BA%90/978-1-936213-00-9">978-1-936213-00-9</a></td>
<td align="center">ISO&#x2F;IEC 10646:2003與其第1－6修訂版</td>
<td align="center">90</td>
<td align="center">107,361</td>
<td>新增<a href="https://zh.m.wikipedia.org/w/index.php?title=%E9%98%BF%E7%BB%B4%E6%96%AF%E9%99%80%E6%96%87&action=edit&redlink=1">阿維斯陀文</a>、<a href="https://zh.m.wikipedia.org/wiki/%E5%B7%B4%E5%A7%86%E7%A9%86%E6%96%87%E5%AD%97">巴姆穆文字</a>、<a href="https://zh.m.wikipedia.org/wiki/%E5%9F%83%E5%8F%8A%E8%B1%A1%E5%BD%A2%E6%96%87%E5%AD%97">埃及象形文字</a>（<a href="https://zh.m.wikipedia.org/wiki/%E5%8A%A0%E6%B1%80%E7%B4%8D%E7%AC%A6%E8%99%9F%E8%A1%A8">加汀納符號表</a>，涵蓋1071個符號）、<a href="https://zh.m.wikipedia.org/wiki/%E4%BA%9E%E6%8B%89%E5%A7%86%E6%96%87">亞拉姆文</a>、<a href="https://zh.m.wikipedia.org/w/index.php?title=%E5%B7%B4%E6%8B%89%E7%BB%B4%E7%A2%91%E9%93%AD%E4%BD%93&action=edit&redlink=1">巴拉維碑銘體</a>、<a href="https://zh.m.wikipedia.org/w/index.php?title=%E5%B8%95%E6%8F%90%E4%BA%9A%E7%A2%91%E9%93%AD%E4%BD%93&action=edit&redlink=1">帕提亞碑銘體</a>、<a href="https://zh.m.wikipedia.org/wiki/%E7%88%AA%E5%93%87%E6%96%87">爪哇文</a>、<a href="https://zh.m.wikipedia.org/wiki/%E5%87%B1%E6%8F%90%E6%96%87">凱提文</a>、<a href="https://zh.m.wikipedia.org/wiki/%E8%80%81%E5%82%88%E5%83%B3%E6%96%87">老傈僳文</a>、<a href="https://zh.m.wikipedia.org/w/index.php?title=%E6%9B%BC%E5%B0%BC%E6%99%AE%E5%B0%94%E6%96%87&action=edit&redlink=1">曼尼普爾文</a>、<a href="https://zh.m.wikipedia.org/wiki/%E5%8D%97%E9%98%BF%E6%8B%89%E4%BC%AF%E5%AD%97%E6%AF%8D">南阿拉伯字母</a>、<a href="https://zh.m.wikipedia.org/wiki/%E5%8F%A4%E7%AA%81%E5%8E%A5%E6%96%87">古突厥文</a>、<a href="https://zh.m.wikipedia.org/w/index.php?title=%E6%92%92%E7%8E%9B%E5%88%A9%E4%BA%9A%E5%AD%97%E6%AF%8D&action=edit&redlink=1">撒瑪利亞字母</a>、<a href="https://zh.m.wikipedia.org/wiki/%E8%80%81%E5%82%A3%E6%96%87">老傣文</a>和<a href="https://zh.m.wikipedia.org/wiki/%E5%82%A3%E9%BB%AF%E8%AA%9E">傣越文</a>。追加4,149個<a href="https://zh.m.wikipedia.org/wiki/%E4%B8%AD%E6%97%A5%E9%9F%A9%E7%BB%9F%E4%B8%80%E8%A1%A8%E6%84%8F%E6%96%87%E5%AD%97">中日韓統一表意文字</a>（<a href="https://zh.m.wikipedia.org/wiki/%E4%B8%AD%E6%97%A5%E9%9F%93%E7%B5%B1%E4%B8%80%E8%A1%A8%E6%84%8F%E6%96%87%E5%AD%97%E6%93%B4%E5%B1%95%E5%8D%80C">CJK-C</a>），同時擴充了<a href="https://zh.m.wikipedia.org/w/index.php?title=%E5%8F%A4%E9%9F%A9%E6%96%87&action=edit&redlink=1">古韓文</a>和<a href="https://zh.m.wikipedia.org/wiki/%E5%90%A0%E9%99%80%E6%A2%B5%E6%96%87">吠陀梵文</a>的字元。[<a href="https://zh.m.wikipedia.org/zh-tw/Unicode#cite_note-22">21]</a></td>
</tr>
<tr>
<td align="center">6.0</td>
<td align="center">2010年10月</td>
<td align="center"><a href="https://zh.m.wikipedia.org/wiki/%E5%9B%BD%E9%99%85%E6%A0%87%E5%87%86%E4%B9%A6%E5%8F%B7">ISBN</a> <a href="https://zh.m.wikipedia.org/wiki/Special:%E7%BD%91%E7%BB%9C%E4%B9%A6%E6%BA%90/978-1-936213-01-6">978-1-936213-01-6</a></td>
<td align="center">ISO&#x2F;IEC 10646:2010與<a href="https://zh.m.wikipedia.org/wiki/%E5%8D%B0%E5%BA%A6%E5%8D%A2%E6%AF%94%E7%AC%A6%E5%8F%B7">印度盧比符號</a></td>
<td align="center">93</td>
<td align="center">109,449</td>
<td>新增<a href="https://zh.m.wikipedia.org/w/index.php?title=%E5%B7%B4%E5%A1%94%E5%85%8B%E5%AD%97%E6%AF%8D&action=edit&redlink=1">巴塔克字母</a>、<a href="https://zh.m.wikipedia.org/wiki/%E5%A9%86%E7%BD%97%E7%B1%B3%E6%96%87%E5%AD%97">婆羅米文字</a>、<a href="https://zh.m.wikipedia.org/w/index.php?title=%E6%9B%BC%E8%BE%BE%E5%AD%97%E6%AF%8D&action=edit&redlink=1">曼達字母</a>、<a href="https://zh.m.wikipedia.org/wiki/%E7%BA%B8%E7%89%8C">紙牌</a>符號、<a href="https://zh.m.wikipedia.org/wiki/%E4%BA%A4%E9%80%9A%E6%A0%87%E5%BF%97">交通標誌</a>、<a href="https://zh.m.wikipedia.org/wiki/%E5%9C%B0%E5%9B%BE">地圖</a>符號、<a href="https://zh.m.wikipedia.org/wiki/%E7%82%BC%E9%87%91%E6%9C%AF%E7%AC%A6%E5%8F%B7">鍊金術符號</a>、<a href="https://zh.m.wikipedia.org/wiki/%E9%A2%9C%E6%96%87%E5%AD%97">顏文字</a>和<a href="https://zh.m.wikipedia.org/wiki/%E7%BB%98%E6%96%87%E5%AD%97">繪文字</a>。追加222個額外的<a href="https://zh.m.wikipedia.org/wiki/%E4%B8%AD%E6%97%A5%E9%9F%A9%E7%BB%9F%E4%B8%80%E8%A1%A8%E6%84%8F%E6%96%87%E5%AD%97">中日韓統一表意文字</a>（<a href="https://zh.m.wikipedia.org/wiki/%E4%B8%AD%E6%97%A5%E9%9F%93%E7%B5%B1%E4%B8%80%E8%A1%A8%E6%84%8F%E6%96%87%E5%AD%97%E6%93%B4%E5%B1%95%E5%8D%80D">CJK-D</a>）。[<a href="https://zh.m.wikipedia.org/zh-tw/Unicode#cite_note-23">22]</a></td>
</tr>
<tr>
<td align="center">6.1</td>
<td align="center">2012年1月</td>
<td align="center"><a href="https://zh.m.wikipedia.org/wiki/%E5%9B%BD%E9%99%85%E6%A0%87%E5%87%86%E4%B9%A6%E5%8F%B7">ISBN</a> <a href="https://zh.m.wikipedia.org/wiki/Special:%E7%BD%91%E7%BB%9C%E4%B9%A6%E6%BA%90/978-1-936213-02-3">978-1-936213-02-3</a></td>
<td align="center">ISO&#x2F;IEC 10646:2012</td>
<td align="center">100</td>
<td align="center">110,181</td>
<td>新增<a href="https://zh.m.wikipedia.org/w/index.php?title=%E6%9F%A5%E5%85%8B%E9%A9%AC%E5%AD%97%E6%AF%8D&action=edit&redlink=1">查克馬字母</a>、<a href="https://zh.m.wikipedia.org/wiki/%E9%BA%A6%E7%BD%97%E5%9F%83%E6%96%87">麥羅埃文</a>、<a href="https://zh.m.wikipedia.org/w/index.php?title=%E9%BA%A6%E7%BD%97%E5%9F%83%E8%B1%A1%E5%BD%A2%E6%96%87%E5%AD%97&action=edit&redlink=1">麥羅埃象形文字</a>、<a href="https://zh.m.wikipedia.org/wiki/%E6%9F%8F%E6%A0%BC%E7%90%86%E8%8B%97%E6%96%87">柏格理苗文</a>、<a href="https://zh.m.wikipedia.org/wiki/%E5%A4%8F%E6%8B%89%E9%81%94%E6%96%87">夏拉達文</a>、<a href="https://zh.m.wikipedia.org/wiki/%E7%B4%A2%E6%8B%89%E5%83%A7%E5%B9%B3%E6%96%87%E5%AD%97">索拉僧平文字</a>和<a href="https://zh.m.wikipedia.org/w/index.php?title=%E6%B3%B0%E5%85%8B%E9%87%8C%E6%96%87&action=edit&redlink=1">泰克里文</a>。[<a href="https://zh.m.wikipedia.org/zh-tw/Unicode#cite_note-24">23]</a></td>
</tr>
<tr>
<td align="center">6.2</td>
<td align="center">2012年9月</td>
<td align="center"><a href="https://zh.m.wikipedia.org/wiki/%E5%9B%BD%E9%99%85%E6%A0%87%E5%87%86%E4%B9%A6%E5%8F%B7">ISBN</a> <a href="https://zh.m.wikipedia.org/wiki/Special:%E7%BD%91%E7%BB%9C%E4%B9%A6%E6%BA%90/978-1-936213-07-8">978-1-936213-07-8</a></td>
<td align="center">ISO&#x2F;IEC 10646:2012與<a href="https://zh.m.wikipedia.org/wiki/%E5%9C%9F%E8%80%B3%E5%85%B6%E9%87%8C%E6%8B%89%E7%AC%A6%E5%8F%B7">土耳其里拉符號</a></td>
<td align="center">100</td>
<td align="center">110,182</td>
<td><a href="https://zh.m.wikipedia.org/wiki/%E5%9C%9F%E8%80%B3%E5%85%B6%E9%87%8C%E6%8B%89%E7%AC%A6%E5%8F%B7">土耳其里拉符號</a>[<a href="https://zh.m.wikipedia.org/zh-tw/Unicode#cite_note-25">24]</a>。</td>
</tr>
<tr>
<td align="center">6.3</td>
<td align="center">2013年9月</td>
<td align="center"><a href="https://zh.m.wikipedia.org/wiki/%E5%9B%BD%E9%99%85%E6%A0%87%E5%87%86%E4%B9%A6%E5%8F%B7">ISBN</a> <a href="https://zh.m.wikipedia.org/wiki/Special:%E7%BD%91%E7%BB%9C%E4%B9%A6%E6%BA%90/978-1-936213-08-5">978-1-936213-08-5</a></td>
<td align="center">ISO&#x2F;IEC 10646:2012與6個字元</td>
<td align="center">100</td>
<td align="center">110,187</td>
<td>5個雙向排版符號。[<a href="https://zh.m.wikipedia.org/zh-tw/Unicode#cite_note-26">25]</a></td>
</tr>
<tr>
<td align="center">7.0</td>
<td align="center">2014年6月</td>
<td align="center"><a href="https://zh.m.wikipedia.org/wiki/%E5%9B%BD%E9%99%85%E6%A0%87%E5%87%86%E4%B9%A6%E5%8F%B7">ISBN</a> <a href="https://zh.m.wikipedia.org/wiki/Special:%E7%BD%91%E7%BB%9C%E4%B9%A6%E6%BA%90/978-1-936213-09-2">978-1-936213-09-2</a></td>
<td align="center">ISO&#x2F;IEC 10646:2012與其第1、2修訂版，以及<a href="https://zh.m.wikipedia.org/wiki/%E4%BF%84%E7%BE%85%E6%96%AF%E7%9B%A7%E5%B8%83">俄羅斯盧布</a>符號</td>
<td align="center">123</td>
<td align="center">113,021</td>
<td>新增<a href="https://zh.m.wikipedia.org/w/index.php?title=%E5%B7%B4%E8%90%A8%E5%AD%97%E6%AF%8D&action=edit&redlink=1">巴薩字母</a>、<a href="https://zh.m.wikipedia.org/w/index.php?title=%E9%AB%98%E5%8A%A0%E7%B4%A2%E9%98%BF%E5%B0%94%E5%B7%B4%E5%B0%BC%E4%BA%9A%E5%AD%97%E6%AF%8D&action=edit&redlink=1">高加索阿爾巴尼亞字母</a>、<a href="https://zh.m.wikipedia.org/w/index.php?title=%E6%9D%9C%E6%99%AE%E9%9B%B7%E5%9A%B4%E9%80%9F%E8%A8%98&action=edit&redlink=1">杜普雷嚴速記</a>、<a href="https://zh.m.wikipedia.org/w/index.php?title=%E7%88%B1%E5%B0%94%E5%B7%B4%E6%A1%91%E5%AD%97%E6%AF%8D&action=edit&redlink=1">愛爾巴桑字母</a>、<a href="https://zh.m.wikipedia.org/wiki/%E5%8F%A4%E5%85%B0%E5%A1%94%E6%96%87">古蘭塔文</a>、<a href="https://zh.m.wikipedia.org/w/index.php?title=%E5%8F%AF%E5%90%89%E6%96%87&action=edit&redlink=1">可吉文</a>、<a href="https://zh.m.wikipedia.org/w/index.php?title=%E5%BA%93%E8%BE%BE%E7%93%A6%E8%BF%AA%E6%96%87&action=edit&redlink=1">庫達瓦迪文</a>、<a href="https://zh.m.wikipedia.org/wiki/%E7%BA%BF%E5%BD%A2%E6%96%87%E5%AD%97A">線形文字A</a>、<a href="https://zh.m.wikipedia.org/w/index.php?title=%E9%A9%AC%E5%93%88%E4%BD%B3%E5%B0%BC%E6%96%87&action=edit&redlink=1">馬哈佳尼文</a>、<a href="https://zh.m.wikipedia.org/wiki/%E6%91%A9%E5%B0%BC%E6%95%99%E5%AD%97%E6%AF%8D">摩尼教字母</a>、<a href="https://zh.m.wikipedia.org/w/index.php?title=%E9%97%A8%E5%BE%97%E6%96%87%E5%AD%97&action=edit&redlink=1">門得文字</a>、<a href="https://zh.m.wikipedia.org/w/index.php?title=%E8%8E%AB%E8%BF%AA%E5%AD%97%E6%AF%8D&action=edit&redlink=1">莫迪字母</a>、<a href="https://zh.m.wikipedia.org/w/index.php?title=%E9%BB%98%E6%96%87&action=edit&redlink=1">默文</a>、<a href="https://zh.m.wikipedia.org/wiki/%E7%B4%8D%E5%B7%B4%E6%B3%B0%E5%AD%97%E6%AF%8D">納巴泰字母</a>、<a href="https://zh.m.wikipedia.org/w/index.php?title=%E5%8F%A4%E5%8C%97%E9%98%BF%E6%8B%89%E4%BC%AF%E6%96%87&action=edit&redlink=1">古北阿拉伯文</a>、<a href="https://zh.m.wikipedia.org/wiki/%E5%8F%A4%E5%BD%BC%E7%88%BE%E5%A7%86%E6%96%87">古彼爾姆文</a>、<a href="https://zh.m.wikipedia.org/wiki/%E6%9D%A8%E6%9D%BE%E5%BD%95%E8%8B%97%E6%96%87">楊松錄苗文</a>、<a href="https://zh.m.wikipedia.org/w/index.php?title=%E5%B8%95%E7%B1%B3%E6%8B%89%E6%96%87%E5%AD%97&action=edit&redlink=1">帕米拉文字</a>、<a href="https://zh.m.wikipedia.org/w/index.php?title=%E8%A2%8D%E6%B8%85%E8%B1%AA%E6%96%87&action=edit&redlink=1">袍清豪文</a>、<a href="https://zh.m.wikipedia.org/w/index.php?title=%E8%AF%97%E7%AF%87%E5%B7%B4%E5%88%97%E7%BB%B4%E6%96%87&action=edit&redlink=1">詩篇巴列維文</a>、<a href="https://zh.m.wikipedia.org/wiki/%E6%82%89%E6%9B%87%E6%96%87%E5%AD%97">悉曇文字</a>、<a href="https://zh.m.wikipedia.org/wiki/%E5%BA%95%E7%BD%97%E4%BB%86%E5%A4%9A%E6%96%87">底羅仆多文</a>、<a href="https://zh.m.wikipedia.org/w/index.php?title=%E7%93%A6%E5%85%B0%E9%BD%90%E5%9C%B0%E6%96%87&action=edit&redlink=1">瓦蘭齊地文</a>以及<a href="https://zh.m.wikipedia.org/wiki/Dingbat">裝飾符號</a>。[<a href="https://zh.m.wikipedia.org/zh-tw/Unicode#cite_note-27">26]</a></td>
</tr>
<tr>
<td align="center">8.0</td>
<td align="center">2015年6月</td>
<td align="center"><a href="https://zh.m.wikipedia.org/wiki/%E5%9B%BD%E9%99%85%E6%A0%87%E5%87%86%E4%B9%A6%E5%8F%B7">ISBN</a> <a href="https://zh.m.wikipedia.org/wiki/Special:%E7%BD%91%E7%BB%9C%E4%B9%A6%E6%BA%90/978-1-936213-10-8">978-1-936213-10-8</a></td>
<td align="center">ISO&#x2F;IEC 10646:2014與其第1修訂版，以及<a href="https://zh.m.wikipedia.org/wiki/%E5%96%AC%E6%B2%BB%E4%BA%9E%E6%8B%89%E9%87%8C">喬治亞拉里</a>符號、9個中日韓統一表意文字與41個表情符號[<a href="https://zh.m.wikipedia.org/zh-tw/Unicode#cite_note-28">27]</a></td>
<td align="center">129</td>
<td align="center">120,737</td>
<td>增加<a href="https://zh.m.wikipedia.org/wiki/%E9%98%BF%E6%B4%AA%E5%A7%86%E6%96%87">阿洪姆文</a>、<a href="https://zh.m.wikipedia.org/w/index.php?title=%E5%AE%89%E7%BA%B3%E6%89%98%E5%88%A9%E4%BA%9A%E8%B1%A1%E5%BD%A2%E6%96%87%E5%AD%97&action=edit&redlink=1">安納托利亞象形文字</a>、<a href="https://zh.m.wikipedia.org/w/index.php?title=%E5%93%88%E5%9D%A6%E6%96%87&action=edit&redlink=1">哈坦文</a>、<a href="https://zh.m.wikipedia.org/w/index.php?title=%E7%A9%86%E5%B0%94%E5%A1%94%E5%B0%BC%E6%96%87&action=edit&redlink=1">穆爾塔尼文</a>、<a href="https://zh.m.wikipedia.org/wiki/%E5%8F%A4%E5%8C%88%E7%89%99%E5%88%A9%E5%AD%97%E6%AF%8D">古匈牙利字母</a>、<a href="https://zh.m.wikipedia.org/wiki/%E8%96%A9%E9%A0%93%E6%89%8B%E8%AA%9E%E8%AD%9C%E5%AF%AB">薩頓手語譜寫</a>、5,771個<a href="https://zh.m.wikipedia.org/wiki/%E4%B8%AD%E6%97%A5%E9%9F%A9%E7%BB%9F%E4%B8%80%E8%A1%A8%E6%84%8F%E6%96%87%E5%AD%97">中日韓統一表意文字</a>字元（<a href="https://zh.m.wikipedia.org/wiki/%E4%B8%AD%E6%97%A5%E9%9F%93%E7%B5%B1%E4%B8%80%E8%A1%A8%E6%84%8F%E6%96%87%E5%AD%97%E6%93%B4%E5%B1%95%E5%8D%80E">CJK-E</a>）、<a href="https://zh.m.wikipedia.org/wiki/%E5%88%87%E7%BD%97%E5%9F%BA%E6%96%87">切羅基文</a>小寫字母，以及五種<a href="https://zh.m.wikipedia.org/wiki/%E7%BB%98%E6%96%87%E5%AD%97">繪文字</a><a href="https://zh.m.wikipedia.org/wiki/%E8%86%9A%E8%89%B2">膚色</a>修改字元。[<a href="https://zh.m.wikipedia.org/zh-tw/Unicode#cite_note-29">28]</a></td>
</tr>
<tr>
<td align="center">9.0</td>
<td align="center">2016年6月</td>
<td align="center"><a href="https://zh.m.wikipedia.org/wiki/%E5%9B%BD%E9%99%85%E6%A0%87%E5%87%86%E4%B9%A6%E5%8F%B7">ISBN</a> <a href="https://zh.m.wikipedia.org/wiki/Special:%E7%BD%91%E7%BB%9C%E4%B9%A6%E6%BA%90/978-1-936213-13-9">978-1-936213-13-9</a></td>
<td align="center">ISO&#x2F;IEC 10646:2014與其第1、2修訂版，阿德拉姆字母、尼泊爾紐瓦字母、日本電視符號和74個繪文字表情與符號。[<a href="https://zh.m.wikipedia.org/zh-tw/Unicode#cite_note-30">29]</a></td>
<td align="center">135</td>
<td align="center">128,237</td>
<td>新增<a href="https://zh.m.wikipedia.org/wiki/%E9%98%BF%E5%BE%B7%E6%8B%89%E5%A7%86%E5%AD%97%E6%AF%8D">阿德拉姆字母</a>、<a href="https://zh.m.wikipedia.org/w/index.php?title=%E6%AF%94%E5%A5%87%E8%88%92%E5%A5%87%E6%96%87&action=edit&redlink=1">比奇舒奇文</a>、<a href="https://zh.m.wikipedia.org/wiki/%E8%B1%A1%E9%9B%84%E6%96%87">象雄文</a>、<a href="https://zh.m.wikipedia.org/w/index.php?title=%E5%B0%BC%E6%B3%8A%E5%B0%94%E7%BA%BD%E7%93%A6%E5%AD%97%E6%AF%8D&action=edit&redlink=1">尼泊爾紐瓦字母</a>、<a href="https://zh.m.wikipedia.org/w/index.php?title=%E6%AC%A7%E5%A1%9E%E5%A5%87%E5%AD%97%E6%AF%8D&action=edit&redlink=1">歐塞奇字母</a>、<a href="https://zh.m.wikipedia.org/wiki/%E8%A5%BF%E5%A4%8F%E6%96%87">西夏文</a>以及74個繪文字[<a href="https://zh.m.wikipedia.org/zh-tw/Unicode#cite_note-31">30]</a></td>
</tr>
<tr>
<td align="center">10.0</td>
<td align="center">2017年6月</td>
<td align="center"><a href="https://zh.m.wikipedia.org/wiki/%E5%9B%BD%E9%99%85%E6%A0%87%E5%87%86%E4%B9%A6%E5%8F%B7">ISBN</a> <a href="https://zh.m.wikipedia.org/wiki/Special:%E7%BD%91%E7%BB%9C%E4%B9%A6%E6%BA%90/978-1-936213-16-0">978-1-936213-16-0</a></td>
<td align="center">ISO&#x2F;IEC 10646:2017，新增56個<a href="https://zh.m.wikipedia.org/wiki/%E7%BB%98%E6%96%87%E5%AD%97">繪文字</a>符號、385個<a href="https://zh.m.wikipedia.org/wiki/%E8%AE%8A%E9%AB%94%E5%81%87%E5%90%8D">變體假名</a>字元，和3個札那巴札爾字元[<a href="https://zh.m.wikipedia.org/zh-tw/Unicode#cite_note-Unicode10.0-32">31]</a></td>
<td align="center">139</td>
<td align="center">136,755</td>
<td><a href="https://zh.m.wikipedia.org/wiki/%E8%92%99%E5%8F%A4%E6%96%87%E5%AD%97">札那巴札爾</a>、<a href="https://zh.m.wikipedia.org/wiki/%E7%B4%A2%E6%B0%B8%E5%B8%83%E6%96%87%E5%AD%97">索永布文字</a>、<a href="https://zh.m.wikipedia.org/w/index.php?title=%E9%A9%AC%E8%90%A8%E6%8B%89%E5%A7%86%E8%B4%A1%E5%BE%B7%E6%96%87%E5%AD%97&action=edit&redlink=1">馬薩拉姆貢德文字</a>、<a href="https://zh.m.wikipedia.org/wiki/%E5%A5%B3%E4%B9%A6">女書</a>、<a href="https://zh.m.wikipedia.org/wiki/%E8%AE%8A%E9%AB%94%E5%81%87%E5%90%8D">變體假名</a>（非標準<a href="https://zh.m.wikipedia.org/wiki/%E5%B9%B3%E5%81%87%E5%90%8D">平假名</a>）、7,494個<a href="https://zh.m.wikipedia.org/wiki/%E4%B8%AD%E6%97%A5%E9%9F%93%E7%B5%B1%E4%B8%80%E8%A1%A8%E6%84%8F%E6%96%87%E5%AD%97">中日韓統一表意文字</a>（<a href="https://zh.m.wikipedia.org/wiki/%E4%B8%AD%E6%97%A5%E9%9F%93%E7%B5%B1%E4%B8%80%E8%A1%A8%E6%84%8F%E6%96%87%E5%AD%97%E6%93%B4%E5%B1%95%E5%8D%80F">CJK-F</a>）與56個<a href="https://zh.m.wikipedia.org/wiki/%E7%B9%AA%E6%96%87%E5%AD%97">繪文字</a>[<a href="https://zh.m.wikipedia.org/zh-tw/Unicode#cite_note-33">32]</a></td>
</tr>
<tr>
<td align="center">11.0</td>
<td align="center">2018年6月</td>
<td align="center"><a href="https://zh.m.wikipedia.org/wiki/%E5%9B%BD%E9%99%85%E6%A0%87%E5%87%86%E4%B9%A6%E5%8F%B7">ISBN</a> <a href="https://zh.m.wikipedia.org/wiki/Special:%E7%BD%91%E7%BB%9C%E4%B9%A6%E6%BA%90/978-1-936213-19-1">978-1-936213-19-1</a></td>
<td align="center">ISO&#x2F;IEC 10646:2017與其第1修訂版，新增145個<a href="https://zh.m.wikipedia.org/wiki/%E7%BB%98%E6%96%87%E5%AD%97">繪文字</a>符號、5個急用漢字，<a href="https://zh.m.wikipedia.org/wiki/Copyleft">copyleft</a>符號、<a href="https://zh.m.wikipedia.org/wiki/%E4%B8%AD%E5%9B%BD%E8%B1%A1%E6%A3%8B">中國象棋</a>符號等[<a href="https://zh.m.wikipedia.org/zh-tw/Unicode#cite_note-Unicode11.0-34">33]</a></td>
<td align="center">146</td>
<td align="center">137,374</td>
<td><a href="https://zh.m.wikipedia.org/w/index.php?title=%E5%A4%9A%E6%A0%BC%E6%8B%89%E6%96%87&action=edit&redlink=1">多格拉文</a>、<a href="https://zh.m.wikipedia.org/wiki/%E5%96%AC%E6%B2%BB%E4%BA%9E%E6%96%87">喬治亞文</a>騎士體大寫字母、<a href="https://zh.m.wikipedia.org/w/index.php?title=%E8%B4%A1%E8%B4%BE%E6%8B%89%E8%B4%A1%E5%BE%B7%E6%96%87&action=edit&redlink=1">貢賈拉貢德文</a>、<a href="https://zh.m.wikipedia.org/wiki/%E5%93%88%E4%B9%83%E6%96%90%E7%BE%85%E8%88%88%E4%BA%9E%E6%96%87%E5%AD%97">哈乃斐羅興亞文字</a>、<a href="https://zh.m.wikipedia.org/w/index.php?title=%E6%9C%9B%E5%8A%A0%E9%94%A1%E6%96%87&action=edit&redlink=1">望加錫文</a>、<a href="https://zh.m.wikipedia.org/w/index.php?title=%E6%A2%85%E5%BE%B7%E6%B3%95%E4%BC%8A%E5%BE%B7%E6%9E%97%E6%96%87&action=edit&redlink=1">梅德法伊德林文</a>、<a href="https://zh.m.wikipedia.org/wiki/%E8%80%81%E7%B2%9F%E7%89%B9%E5%AD%97%E6%AF%8D">老粟特字母</a>、<a href="https://zh.m.wikipedia.org/wiki/%E7%B2%9F%E7%89%B9%E5%AD%97%E6%AF%8D">粟特字母</a>以及145個繪文字[<a href="https://zh.m.wikipedia.org/zh-tw/Unicode#cite_note-35">34]</a></td>
</tr>
<tr>
<td align="center">12.0</td>
<td align="center">2019年3月</td>
<td align="center"><a href="https://zh.m.wikipedia.org/wiki/%E5%9B%BD%E9%99%85%E6%A0%87%E5%87%86%E4%B9%A6%E5%8F%B7">ISBN</a> <a href="https://zh.m.wikipedia.org/wiki/Special:%E7%BD%91%E7%BB%9C%E4%B9%A6%E6%BA%90/978-1-936213-22-1">978-1-936213-22-1</a></td>
<td align="center">ISO&#x2F;IEC 10646:2017與其第1、2修訂版，新增61個<a href="https://zh.m.wikipedia.org/wiki/%E7%BB%98%E6%96%87%E5%AD%97">繪文字</a>符號、一些方言<a href="https://zh.m.wikipedia.org/wiki/%E8%8B%97%E6%96%87">苗文</a>字元、古日文用小型<a href="https://zh.m.wikipedia.org/wiki/%E6%97%A5%E6%96%87%E5%81%87%E5%90%8D">日文假名</a>、<a href="https://zh.m.wikipedia.org/wiki/%E6%B3%B0%E7%B1%B3%E7%88%BE%E6%96%87">泰米爾文</a>的符號、<a href="https://zh.m.wikipedia.org/wiki/%E5%9C%A3%E4%B9%A6%E4%BD%93">聖書體</a>控制字元等[<a href="https://zh.m.wikipedia.org/zh-tw/Unicode#cite_note-Unicode12.0-36">35]</a></td>
<td align="center">150</td>
<td align="center">137,928</td>
<td><a href="https://zh.m.wikipedia.org/wiki/%E5%9F%83%E5%88%A9%E9%82%81%E6%96%87">埃利邁文</a>、<a href="https://zh.m.wikipedia.org/w/index.php?title=%E5%8D%97%E8%BF%AA%E5%9F%8E%E6%96%87&action=edit&redlink=1">南迪城文</a>、<a href="https://zh.m.wikipedia.org/wiki/%E5%89%B5%E4%B8%96%E7%B4%80%E8%8B%97%E6%96%87">創世紀苗文</a>、<a href="https://zh.m.wikipedia.org/w/index.php?title=%E6%96%87%E4%B9%94%E6%96%87&action=edit&redlink=1">文喬文</a>以及61個繪文字[<a href="https://zh.m.wikipedia.org/zh-tw/Unicode#cite_note-37">36]</a></td>
</tr>
<tr>
<td align="center">12.1</td>
<td align="center">2019年5月</td>
<td align="center"><a href="https://zh.m.wikipedia.org/wiki/%E5%9B%BD%E9%99%85%E6%A0%87%E5%87%86%E4%B9%A6%E5%8F%B7">ISBN</a> <a href="https://zh.m.wikipedia.org/wiki/Special:%E7%BD%91%E7%BB%9C%E4%B9%A6%E6%BA%90/978-1-936213-25-2">978-1-936213-25-2</a></td>
<td align="center"></td>
<td align="center">150</td>
<td align="center">137,929</td>
<td>只在U+32FF新增了一個字元，即日本新年號<a href="https://zh.m.wikipedia.org/wiki/%E4%BB%A4%E5%92%8C">令和</a>的合字。[<a href="https://zh.m.wikipedia.org/zh-tw/Unicode#cite_note-38">37]</a></td>
</tr>
<tr>
<td align="center">13.0</td>
<td align="center">2020年3月</td>
<td align="center"><a href="https://zh.m.wikipedia.org/wiki/%E5%9B%BD%E9%99%85%E6%A0%87%E5%87%86%E4%B9%A6%E5%8F%B7">ISBN</a> <a href="https://zh.m.wikipedia.org/wiki/Special:%E7%BD%91%E7%BB%9C%E4%B9%A6%E6%BA%90/978-1-936213-26-9">978-1-936213-26-9</a></td>
<td align="center">ISO&#x2F;IEC 10646:2020[<a href="https://zh.m.wikipedia.org/zh-tw/Unicode#cite_note-39">38]</a></td>
<td align="center">154</td>
<td align="center">143,924</td>
<td><a href="https://zh.m.wikipedia.org/wiki/%E8%8A%B1%E5%89%8C%E5%AD%90%E6%A8%A1%E8%AF%AD">花剌子模語</a>、<a href="https://zh.m.wikipedia.org/wiki/%E8%BF%AA%E7%BB%B4%E8%A5%BF%E8%AF%AD">迪維西語</a>的<a href="https://zh.m.wikipedia.org/w/index.php?title=%E5%B3%B6%E5%AD%97%E6%AF%8D&action=edit&redlink=1">島字母</a>（英語：<a href="https://en.wikipedia.org/wiki/Dhives_akuru">Dhives akuru</a>）、<a href="https://zh.m.wikipedia.org/wiki/%E5%A5%91%E4%B8%B9%E5%B0%8F%E5%AD%97">契丹小字</a>、<a href="https://zh.m.wikipedia.org/wiki/%E5%BA%93%E5%B0%94%E5%BE%B7%E8%AF%AD%E5%AD%97%E6%AF%8D">庫德語字母</a>的<a href="https://zh.m.wikipedia.org/wiki/%E5%BA%93%E5%B0%94%E5%BE%B7%E8%AF%AD%E5%AD%97%E6%AF%8D#%E9%9B%85%E8%8C%B2%E8%BF%AA%E6%96%87">雅茲迪文</a>、4969個中日韓統一表意文字（4939個位於<a href="https://zh.m.wikipedia.org/wiki/%E4%B8%AD%E6%97%A5%E9%9F%93%E7%B5%B1%E4%B8%80%E8%A1%A8%E6%84%8F%E6%96%87%E5%AD%97%E6%93%B4%E5%B1%95%E5%8D%80G">擴充區G</a>（<a href="https://zh.m.wikipedia.org/wiki/CJK-G">CJK-G</a>））、書寫<a href="https://zh.m.wikipedia.org/wiki/%E8%B1%AA%E8%90%A8%E8%AF%AD">豪薩語</a>用的阿拉伯附加字母、<a href="https://zh.m.wikipedia.org/wiki/%E6%B2%83%E6%B4%9B%E5%A4%AB%E8%AA%9E">沃洛夫語</a>、其他非洲語言、在巴基斯坦書寫<a href="https://zh.m.wikipedia.org/w/index.php?title=%E5%8D%B0%E5%BE%B7%E7%A7%91%E8%AA%9E&action=edit&redlink=1">印德科語</a>（英語：<a href="https://en.wikipedia.org/wiki/Hindko">Hindko</a>）和<a href="https://zh.m.wikipedia.org/wiki/%E6%97%81%E9%81%AE%E6%99%AE%E8%AA%9E">旁遮普語</a>的補充字元、<a href="https://zh.m.wikipedia.org/wiki/%E7%B2%B5%E8%AA%9E">粵語</a>用的<a href="https://zh.m.wikipedia.org/wiki/%E7%B2%B5%E8%AA%9E%E6%B3%A8%E9%9F%B3%E7%AC%A6%E8%99%9F">注音符號</a>、<a href="https://zh.m.wikipedia.org/wiki/%E5%85%B1%E4%BA%AB%E5%89%B5%E6%84%8F">創用CC</a>授權符號、1970年代和1980年代電訊用圖符、55個<a href="https://zh.m.wikipedia.org/wiki/%E7%B9%AA%E6%96%87%E5%AD%97">繪文字</a>[<a href="https://zh.m.wikipedia.org/zh-tw/Unicode#cite_note-40">39]</a></td>
</tr>
<tr>
<td align="center">14.0</td>
<td align="center">2021年9月</td>
<td align="center"><a href="https://zh.m.wikipedia.org/wiki/%E5%9B%BD%E9%99%85%E6%A0%87%E5%87%86%E4%B9%A6%E5%8F%B7">ISBN</a> <a href="https://zh.m.wikipedia.org/wiki/Special:%E7%BD%91%E7%BB%9C%E4%B9%A6%E6%BA%90/978-1-936213-29-0">978-1-936213-29-0</a></td>
<td align="center"></td>
<td align="center">159</td>
<td align="center">144,697</td>
<td><a href="https://zh.m.wikipedia.org/w/index.php?title=%E6%89%98%E6%89%98%E6%96%87&action=edit&redlink=1">托托文</a>，用於在<a href="https://zh.m.wikipedia.org/wiki/%E5%8D%B0%E5%BA%A6%E4%B8%9C%E5%8C%97%E9%83%A8">印度東北部</a>書寫<a href="https://zh.m.wikipedia.org/w/index.php?title=%E6%89%98%E6%89%98%E8%AF%AD&action=edit&redlink=1">托托語</a><a href="https://zh.m.wikipedia.org/w/index.php?title=%E5%A1%9E%E6%99%AE%E5%8B%92%E6%96%AF-%E7%B1%B3%E8%AB%BE%E6%96%AF%E6%96%87%E5%AD%97&action=edit&redlink=1">塞普勒斯-米諾斯文字</a>，一種未破譯的歷史文字，主要用於<a href="https://zh.m.wikipedia.org/wiki/%E5%A1%9E%E6%B5%A6%E8%B7%AF%E6%96%AF%E5%B2%9B">賽普勒斯島</a><a href="https://zh.m.wikipedia.org/w/index.php?title=%E7%B6%AD%E6%96%AF%E5%BA%AB%E5%A5%87%E6%96%87&action=edit&redlink=1">維斯庫奇文</a>，一種用於書寫阿爾巴尼亞語的歷史文字，正在經歷現代復興<a href="https://zh.m.wikipedia.org/wiki/%E5%9B%9E%E9%B9%98%E5%AD%97%E6%AF%8D">回鶻字母</a>，一種歷史上在中亞和其他地方用於書寫<a href="https://zh.m.wikipedia.org/wiki/%E7%AA%81%E5%8E%A5%E8%AF%AD%E6%97%8F">突厥語</a>、漢語、蒙古語、藏語和阿拉伯語的文字唐薩文，一種現代文字，用於書寫在印度和緬甸使用的<a href="https://zh.m.wikipedia.org/w/index.php?title=%E5%94%90%E8%96%A9%E8%AF%AD&action=edit&redlink=1">唐薩語</a>位於第一輔助平面的拉丁文擴充區段（擴展F和G）增加了許多擴充IPA字母 ，和許多用於拉丁語及阿拉伯文字的補充字母，這些字母用於非洲和伊朗、巴基斯坦、馬來西亞、印度尼西亞、爪哇和波士尼亞書寫語言，以及書寫<a href="https://zh.m.wikipedia.org/wiki/%E6%95%AC%E8%AA%9E">敬語</a>，以及為《<a href="https://zh.m.wikipedia.org/wiki/%E5%8F%A4%E5%85%B0%E7%BB%8F">古蘭經</a>》使用的補充。其它的一些字元添加支援北美和菲律賓、印度和蒙古的語言的文字追加9個額外的<a href="https://zh.m.wikipedia.org/wiki/%E4%B8%AD%E6%97%A5%E9%9F%A9%E7%BB%9F%E4%B8%80%E8%A1%A8%E6%84%8F%E6%96%87%E5%AD%97">中日韓統一表意文字</a>（基本多文種平面、第二輔助平面）。</td>
</tr>
</tbody></table>
<p><a href="https://zh.m.wikipedia.org/zh-tw/Unicode">參考連結：UNICODE 維基百科</a></p>
<h2 id="8-UTF-8"><a href="#8-UTF-8" class="headerlink" title="8. UTF-8"></a>8. UTF-8</h2><p><strong>Unicode 解決的問題是將多國語言中的每一個文字符號都能夠對應到一組數字，但 Unicode 並沒有說明儲存這些數字的方式</strong>。</p>
<p><strong>UTF-8</strong>（<strong>8-bit Unicode Transformation Format</strong>）是一種針對<a href="https://zh.wikipedia.org/wiki/Unicode">Unicode</a>的可變長度<a href="https://zh.wikipedia.org/wiki/%E5%AD%97%E5%85%83%E7%B7%A8%E7%A2%BC">字元編碼</a>，也是一種<a href="https://zh.wikipedia.org/wiki/%E5%89%8D%E7%BC%80%E7%A0%81">字首碼</a>。它可以用一至四個位元組對Unicode字元集中的所有有效編碼點進行編碼，屬於<a href="https://zh.wikipedia.org/wiki/Unicode">Unicode</a>標準的一部分，最初由<a href="https://zh.wikipedia.org/wiki/%E8%82%AF%C2%B7%E6%B1%A4%E6%99%AE%E9%80%8A">肯·湯普遜</a>和<a href="https://zh.wikipedia.org/w/index.php?title=%E7%BD%97%E5%B8%83%C2%B7%E6%B4%BE%E5%85%8B&action=edit&redlink=1">羅布·派克</a>提出。[<a href="https://zh.wikipedia.org/wiki/UTF-8#cite_note-:0-2">2]</a>[<a href="https://zh.wikipedia.org/wiki/UTF-8#cite_note-3">3]</a>由於較小值的編碼點一般使用頻率較高，直接使用Unicode編碼效率低下，大量浪費記憶體空間。UTF-8就是為了解決向下相容ASCII碼而設計，Unicode中前128個字元，使用與ASCII碼相同的二進位值的單個<a href="https://zh.wikipedia.org/wiki/%E5%AD%97%E8%8A%82">位元組</a>進行編碼，而且字面與ASCII碼的字面一一對應，這使得原來處理ASCII字元的<a href="https://zh.wikipedia.org/wiki/%E8%BB%9F%E9%AB%94">軟體</a>無須或只須做少部份修改，即可繼續使用。因此，它逐漸成為<a href="https://zh.wikipedia.org/wiki/%E9%9B%BB%E5%AD%90%E9%83%B5%E4%BB%B6">電子郵件</a>、<a href="https://zh.wikipedia.org/wiki/%E7%B6%B2%E9%A0%81">網頁</a>及其他<a href="https://zh.wikipedia.org/wiki/%E5%84%B2%E5%AD%98%E8%A3%9D%E7%BD%AE">儲存</a>或傳送文字優先採用的編碼方式。</p>
<p>自2009年以來，UTF-8一直是<a href="https://zh.wikipedia.org/wiki/%E4%B8%87%E7%BB%B4%E7%BD%91">全球資訊網</a>的最主要的編碼形式（對所有，而不僅是Unicode範圍內的編碼）（並由WHATWG宣布為強制性的「適用於所有事物(for all things)」，[<a href="https://zh.wikipedia.org/wiki/UTF-8#cite_note-mandatory-4">4]</a>截止到2019年11月， 在所有網頁中，UTF-8編碼應用率高達94.3%（其中一些僅是ASCII編碼，因為它是UTF-8的子集），而在排名最高的1000個網頁中占96％。[<a href="https://zh.wikipedia.org/wiki/UTF-8#cite_note-5">5]</a> 第二熱門的多位元組編碼方式Shift JIS和GB 2312分別具有0.3％和0.2％的占有率。[<a href="https://zh.wikipedia.org/wiki/UTF-8#cite_note-W3Techs-6">6]</a>[<a href="https://zh.wikipedia.org/wiki/UTF-8#cite_note-BuiltWith-7">7]</a>[<a href="https://zh.wikipedia.org/wiki/UTF-8#cite_note-MarkDavis2012-1">1]</a>Internet郵件聯盟（ Internet Mail Consortium, IMC）建議所有電子郵件程式都能夠使用UTF-8展示和建立郵件，[<a href="https://zh.wikipedia.org/wiki/UTF-8#cite_note-IMC-8">8]</a> W3C建議UTF-8作為XML檔案和HTML檔案的預設編碼方式。[<a href="https://zh.wikipedia.org/wiki/UTF-8#cite_note-html5charset-9">9]</a><a href="https://zh.wikipedia.org/wiki/%E7%B6%B2%E9%9A%9B%E7%B6%B2%E8%B7%AF%E5%B7%A5%E7%A8%8B%E5%B7%A5%E4%BD%9C%E5%B0%8F%E7%B5%84">網際網路工程工作小組</a>（IETF）要求所有<a href="https://zh.wikipedia.org/wiki/%E7%B6%B2%E9%9A%9B%E7%B6%B2%E8%B7%AF">網際網路</a><a href="https://zh.wikipedia.org/wiki/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE">協定</a>都必須支援UTF-8編碼[<a href="https://zh.wikipedia.org/wiki/UTF-8#cite_note-10">10]</a>。<a href="https://zh.wikipedia.org/w/index.php?title=%E4%BA%92%E8%81%AF%E7%B6%B2%E9%83%B5%E4%BB%B6%E8%81%AF%E7%9B%9F&action=edit&redlink=1">網際網路郵件聯盟</a>（IMC）建議所有電子郵件軟體都支援UTF-8編碼。[<a href="https://zh.wikipedia.org/wiki/UTF-8#cite_note-11">11]</a></p>
<p><img src="https://i.imgur.com/AY0WAQs.jpg" alt="img"></p>
<h3 id="8-1-編碼規則"><a href="#8-1-編碼規則" class="headerlink" title="8.1. 編碼規則"></a>8.1. 編碼規則</h3><p>UTF-8 的編碼規則很簡單，只有二條：</p>
<ol>
<li>對於單一位元組的文字符號，位元組的第一位設為 <code>0</code>，後面 7 位為這個符號的 Unicode 碼。因此<strong>對於英語字母，UTF-8 編碼和 ASCII 碼是相同的</strong>。</li>
<li>對於 <code>n</code> 位元組的文字符號（<code>n &gt; 1</code>），第一個位元組的前 <code>n</code> 位都設為 <code>1</code>，第 <code>n + 1</code> 位設為 <code>0</code>，後面位元組的前兩位一律設為 <code>10</code>。剩下的沒有提及的二進制位，全部為這個符號的 Unicode 碼。</li>
</ol>
<p><img src="https://i.imgur.com/D8KMmtD.png" alt="Imgur"></p>
<h4 id="8-1-1-範例一：A"><a href="#8-1-1-範例一：A" class="headerlink" title="8.1.1. 範例一：A"></a>8.1.1. 範例一：A</h4><p>舉例來說，英文字「A」的 Unicode 是 <code>U+0041</code>，也就是 (65)10，亦等同於 (0100 0001)2 因此根據上表顯示介於十六進制 <code>0000 0000</code> ~ <code>0000 007F</code> 範圍內，也就是屬於第一組。</p>
<p>所以「A」的 UTF-8 編碼只需要一個位元組，格式就是 <code>0xxxxxxx</code>。將「A」Unicode 的內容直接填入 x，即可得到「A」的 UTF-8 編碼為 <code>0100 0001</code>，轉換成 16 進制就是 (41)16。</p>
<h4 id="8-1-2-範例二：臺"><a href="#8-1-2-範例二：臺" class="headerlink" title="8.1.2. 範例二：臺"></a>8.1.2. 範例二：臺</h4><p>舉例來說，中文字「臺」的 Unicode 是 <code>U+81FA</code>，也就是 (33274)10，亦等同於 (1000 0001 1111 1010)2，因此根據上表顯示介於十六進制 <code>00000800</code> ~ <code>0000FFFF</code> 這個範圍內，也就是屬於第三組。</p>
<p>所以「臺」的 UTF-8 編碼需要三個位元組，格式就是 <code>1110xxxx 10xxxxxx 10xxxxxx</code>。然後從「臺」的最後一個二進制位數開始，依次由後往前添入格式中的 <code>x</code>，多出來的位數補 <code>0</code>。</p>
<p>於是便可得到「臺」的 UTF-8 編碼是 <code>11101000 10000111 10111010</code>，轉換成十六進制就是 (<code>E887BA</code>)16。</p>
<p><img src="https://i.imgur.com/TQl8qWp.png" alt="Imgur"></p>
<p><a href="https://pjchender.dev/webdev/note-unicode/">參考連結：Unicode 字串編碼(encode, decode)</a></p>
<h2 id="9-UTF-8與BOM"><a href="#9-UTF-8與BOM" class="headerlink" title="9. UTF-8與BOM"></a>9. UTF-8與BOM</h2><p>BOM – Byte Order Mark，中文名譯作“字節順序標記”。在UCS 編碼中有一個叫做 “Zero Width No-Break Space” ，中文譯名作“零寬無間斷間隔”的字符，它的編碼是 FEFF。而 FFFE 在 UCS 中是不存在的字符，所以不應該出現在實際傳輸中。 UCS 規范建議我們在傳輸字節流前，先傳輸字符 “Zero Width No-Break Space”。這樣如果接收者收到 FEFF，就表明這個字節流是 Big-Endian 的；如果收到FFFE，就表明這個字節流是 Little- Endian 的。因此字符 “Zero Width No-Break Space” （“零寬無間斷間隔”）又被稱作 BOM。</p>
<p>BOM（byte order mark）是為 UTF-16 和 UTF-32 準備的，UTF-8 不需要 BOM 來表明字節順序，但可以用 BOM 來表明編碼方式。字符 “Zero Width No-Break Space” 的 UTF-8 編碼是 EF BB BF。所以如果接收者收到以 EF BB BF （十六進制）開頭的字節流，就知道這是 UTF-8編碼了。 Windows 就是使用 BOM 來標記文本文件的編碼方式的。微軟在 UTF-8 中使用 BOM 是因為這樣可以把 UTF-8 和 ASCII 等編碼明確區分開，但這樣的文件在 Windows 之外的操作系統裡會帶來問題。它產生的BUG包含但不僅限於：</p>
<ul>
<li>HTML空白行</li>
<li>div之間莫明的間隔</li>
<li>亂碼</li>
<li>Ssl出錯</li>
<li>編譯錯誤</li>
</ul>
<p>在Linux中的解決方案，在Linux中可以用vim很方便地檢測、去除BOM頭</p>
<p>檢測是否有BOM頭：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:set bomb?</span><br></pre></td></tr></table></figure>

<p>去除BOM頭：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:set encoding=utf-8</span><br><span class="line">:set nobomb</span><br></pre></td></tr></table></figure>

<p>添加BOM頭也很簡單：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:set encoding=utf-8</span><br><span class="line">:set bomb</span><br></pre></td></tr></table></figure>

<p>利用python去除文件中BOM的方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line">data = <span class="built_in">open</span>(<span class="string">&quot;Test.txt&quot;</span>).read()</span><br><span class="line"><span class="keyword">if</span> data[:<span class="number">3</span>] == codecs.BOM_UTF8:</span><br><span class="line">  data = data[<span class="number">3</span>:]</span><br><span class="line">  <span class="built_in">print</span>(data.decode(<span class="string">&quot;utf-8&quot;</span>))</span><br></pre></td></tr></table></figure>



<h2 id="10-程序角度看unicode"><a href="#10-程序角度看unicode" class="headerlink" title="10. 程序角度看unicode"></a>10. 程序角度看unicode</h2><p>如果沒有一個統一的編碼可以讓程序來處理，那麼同樣的程序就需要維護不同的版本。 Unicode的出現就是為了解決不同語言間的問題，不同的編碼可以和Unicode進行轉換。</p>
<p><img src="https://i.imgur.com/J4XEgUv.png" alt="img"></p>
<p>在計算機內存中，統一使用Unicode編碼，當需要保存到硬盤或者需要傳輸的時候，就轉換為UTF-8編碼。用記事本編輯的時候，從文件讀取的UTF-8字符被轉換為Unicode字符到內存裡，編輯完成後，保存的時候再把Unicode轉換為UTF-8保存到文件：</p>
<p><img src="https://i.imgur.com/yApOhK7.png" alt="unicode.drawio"></p>
<h3 id="10-1-Python源代碼文件的執行過程"><a href="#10-1-Python源代碼文件的執行過程" class="headerlink" title="10.1. Python源代碼文件的執行過程"></a>10.1. Python源代碼文件的執行過程</h3><p>我們都知道，磁盤上的文件都是以二進制格式存放的，其中文本文件都是以某種特定編碼的字節形式存放的。對於程序源代碼文件的字符編碼是由編輯器指定的，比如我們使用Pycharm來編寫Python程序時會指定工程編碼和文件編碼為UTF-8，那麼Python代碼被保存到磁盤時就會被轉換為UTF-8編碼對應的字節（encode過程）後寫入磁盤。</p>
<p>當執行Python代碼文件中的代碼時，Python解釋器在讀取Python代碼文件中的字節串之後，需要將其轉換為Unicode字符串（decode過程）之後才執行後續操作。</p>
<p><img src="https://i.imgur.com/RQ2AylZ.png" alt="python_exec_encode_decode.drawio"></p>
<h3 id="10-2-python-編碼的unicode"><a href="#10-2-python-編碼的unicode" class="headerlink" title="10.2. python 編碼的unicode"></a>10.2. python 編碼的unicode</h3><p>Python3 裡的字串可以用兩個型別來表示：(1) <code>str</code>(2) <code>bytes</code>(其實 str 就是一般所謂的 unicode ，以下統稱為 <strong>unicode</strong> )</p>
<p>在 Python 的程式裡，會建議所有「內部」的商業邏輯操作都使用 unicode 來處理，只有在與「外界」溝通時，才需要轉換成 bytes。</p>
<p>這邊可以定義為「外界」的可以有下列幾個，在 Python3 裡的 function 參數都只吃 bytes 而且，傳 unicode 字串就會 exception</p>
<ol>
<li>File I&#x2F;O (read, write)</li>
<li>System I&#x2F;O (stdin, stdout, stderr)</li>
<li>Binary I&#x2F;O (http content)</li>
</ol>
<p>下面這段說明應該滿清楚的</p>
<ul>
<li>Use <code>.encode()</code> to convert <strong>human text</strong> to <strong>bytes</strong>.</li>
<li>Use <code>.decode()</code> to convert <strong>bytes</strong> to <strong>human text</strong>.</li>
</ul>
<p><img src="https://i.imgur.com/yBAR1GB.png" alt="img"></p>
<p>概念上來說，就是 Python Application 「內部」核心處理的部分都用以 Unicode 處理，「外界」的部分，不管是 Terminal 的 stdout &#x2F; stdin、HTTP content、File ，只要跟 I&#x2F;O 有關，都是以 bytes 來處理，進來一律 decode 成 unicode，出去一律 encode 成 bytes。</p>
<h2 id="11-MySQL-utf8與utf8mb4的差別"><a href="#11-MySQL-utf8與utf8mb4的差別" class="headerlink" title="11. MySQL utf8與utf8mb4的差別"></a>11. MySQL utf8與utf8mb4的差別</h2><h3 id="11-1-網站資料庫utf8編碼用得好好的，為什麼要多一個utf8mb4"><a href="#11-1-網站資料庫utf8編碼用得好好的，為什麼要多一個utf8mb4" class="headerlink" title="11.1. 網站資料庫utf8編碼用得好好的，為什麼要多一個utf8mb4?"></a>11.1. 網站資料庫utf8編碼用得好好的，為什麼要多一個utf8mb4?</h3><p>一般情況下，架設網站使用MySQL的utf8就夠用了，但隨著網路資訊的快速進步，需求越來越多元，有些特殊漢字或是常用的emoji(一種特殊的Unicode編碼，在ios跟安卓手機都會看過)，這其實都是需要使用四個位元組網頁上才能完整呈現，相對MySQL支援的utf8只有三個位元組，大部分的中文漢字雖然夠用，但是卻無法滿足到所有的字元，若是要使用特殊漢字或是表情符號，就無法使用MySQL的utf8字符集儲存，網站後台操作時會造成錯誤。</p>
<h3 id="11-2-UTF-8原本不就支援四個位元組嗎-為什在MySQL裡只能支援三個位元，還要多此一舉端出一個utf8mb4"><a href="#11-2-UTF-8原本不就支援四個位元組嗎-為什在MySQL裡只能支援三個位元，還要多此一舉端出一個utf8mb4" class="headerlink" title="11.2. UTF-8原本不就支援四個位元組嗎?為什在MySQL裡只能支援三個位元，還要多此一舉端出一個utf8mb4?"></a>11.2. UTF-8原本不就支援四個位元組嗎?為什在MySQL裡只能支援三個位元，還要多此一舉端出一個utf8mb4?</h3><p>是的，你所知道的UTF-8字符集是支援最多四個位元組沒有錯，但因為MySQL最初開發時，認為三個位元組就夠用了不需要支援到四個位元組，於是把utf8設定為最多支援三個位元組，並不是我們所熟知的UTF-8支援四位元組的字符集，可說是此MySQL utf8非彼UTF-8啊!!</p>
<p>這情況，導致在使用MySQL utf8編碼時使用到生僻字特殊漢字，或是表情符號時，會出錯誤插入失敗(因為只支援到三個位元組)，以為是編碼錯誤，找了老半天竟然是系統不支援字符的窘境。</p>
<p>這個漏洞，一直到2010年才得以修復，MySQL端出了一個叫做utf8mb4的字符集來在MySQL內部使用，後面的mb4意思是most bytes 4，表示支援最多四個位元組啦，這樣就可以順利插入生僻字或是Emoji表情符號了。有趣的是官方端出utf8mb4時(這才是真正的UTF-8字符集)就統一將原本的utf8改名為utf8mb3了，也許是容易分辨吧!</p>
<h3 id="11-3-那我如果想要從utf8轉換到utf8mb4會不會不相容，空間與速度的變化"><a href="#11-3-那我如果想要從utf8轉換到utf8mb4會不會不相容，空間與速度的變化" class="headerlink" title="11.3. 那我如果想要從utf8轉換到utf8mb4會不會不相容，空間與速度的變化?"></a>11.3. 那我如果想要從utf8轉換到utf8mb4會不會不相容，空間與速度的變化?</h3><p>utf8與utf8mb4差別是在後者多了一個位元組，但兩者都是相同的儲存特性、相同的編碼，所以網站在升級到utf8mb4時，是不用擔心字元轉換出現亂碼或資料遺失的問題，網頁可以正常顯示。</p>
<p>官方資料也有針對這項疑問作出解釋：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">For a BMP character, utf8mb4 and utf8mb3 have identical storage characteristics: same code values, same encoding, same length.</span><br></pre></td></tr></table></figure>

<p>也就是強調不用擔心轉換字符的問題，程式編碼等都是相同的。</p>
<h3 id="11-4-utf8mb4-unicode-ci-vs-utf8mb4-general-ci"><a href="#11-4-utf8mb4-unicode-ci-vs-utf8mb4-general-ci" class="headerlink" title="11.4. utf8mb4_unicode_ci vs utf8mb4_general_ci"></a>11.4. utf8mb4_unicode_ci vs utf8mb4_general_ci</h3><p>xxx_general_ci與xxx_unicode_ci 是一種連線校對的規則，這兩項的差別，也是很多人在操作時不知道如何選擇的地方，在這邊會詳細介紹他的功能和兩者的差別，幫助你選擇。</p>
<p>general版本比unicode來的快速，但是相對的準確率沒有unicode來的精準，會存在一些的錯誤，原因是因為Unicode支持擴展字符集，他的文字涵蓋率可說無論全球哪種文字，只要保存成Unicode編碼都可以正常解釋，但也因為編碼體積比較大，佔網站伺服器空間較多，所以速度會稍微慢一點；general不支持擴展字集，是比較古老的校對規則，準確率沒有這麼高但是速度也相對快速。</p>
<p><strong>這兩項連線校對規則最經典的不同就是發生在以下這個字元「ß」</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">若在utf8_general_ci 他會顯示為ß = s</span><br><span class="line">在utf8_unicode_ci 則會顯示為ß = ss</span><br></pre></td></tr></table></figure>

<p><strong>而在MySQL官方網站則將這現象做了一個總結方便使用者做選擇：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">utf8_general_ci also is satisfactory for both German and French, except that ß is equal to s, and not to ss. </span><br><span class="line">If this is acceptable for your application, you should use utf8_general_ci because it is faster. </span><br><span class="line">If this is not acceptable (for example, if you require German dictionary order), use utf8_unicode_ci because it is more accurate.</span><br></pre></td></tr></table></figure>

<p>當架設多國語言網站遇到德文與法文翻譯時，general可能會出現小錯誤，但官方認為若是一般使用可以選擇general版本，因為速度較快，建議若是有字典，需要正確率高的文字需求，則建議使用準確率極高的Unicode版本。</p>
<p>而前述都是舉例原本的utf8做解釋，若套用成utf8mb4_general_ci或是utf8mb_unicode_ci的連線校對也是跟utf8的舉例一樣的，只是就如同前面所說的，生僻字與特殊符號能否正確顯示的差別而已。</p>
<h3 id="11-5-重點整理"><a href="#11-5-重點整理" class="headerlink" title="11.5. 重點整理"></a>11.5. 重點整理</h3><ul>
<li>MySQL utf8無法顯示生僻字與Emoji表情符號，utf8mb4可以。</li>
<li>原本MySQL內的utf8不是一般的UTF-8，他只有三個位元組，utf8mb4才是四個位元組，是真正的UTF-8字符集。</li>
<li>utf8轉utf8mb4不會發生不相容的問題。</li>
<li>utf8mb4_unicode_ci 準確但比較慢utf8mb4_general_ci 速度快但相對不準確。</li>
</ul>
<h2 id="12-全字庫-中文標準交換碼"><a href="#12-全字庫-中文標準交換碼" class="headerlink" title="12. 全字庫 中文標準交換碼"></a>12. 全字庫 中文標準交換碼</h2><h3 id="如何輸入罕用字"><a href="#如何輸入罕用字" class="headerlink" title="如何輸入罕用字"></a>如何輸入罕用字</h3><p>本文將介紹如何輸入罕用字，讓它可以跨各種作業系統及各文件編輯器，放上了網頁也沒問題。</p>
<p>到CNS11643網站 <a href="http://www.cns11643.gov.tw/">http://www.cns11643.gov.tw/</a>→ 依部首或注音查「字」→ 找出該字的 unicode→ 到 word 輸入 unicode→ 輸入完按「Alt+x」→ 複製該字</p>
<h3 id="如何造字"><a href="#如何造字" class="headerlink" title="如何造字"></a>如何造字</h3><p>詳細可以參考國立高雄大學這篇 <a href="https://adm.nuk.edu.tw/nukword/document2.htm#Win10">造字集步驟</a></p>
<h2 id="13-參考資源"><a href="#13-參考資源" class="headerlink" title="13. 參考資源"></a>13. 參考資源</h2><ul>
<li><a href="https://std.tn.edu.tw/sis/userfont/%E5%A6%82%E4%BD%95%E8%BC%B8%E5%85%A5%E7%BD%95%E7%94%A8%E5%AD%97.htm">如何輸入罕用字</a></li>
<li><a href="https://adm.nuk.edu.tw/nukword/document2.htm#Win10">造字集步驟</a></li>
<li><a href="https://adm.nuk.edu.tw/nukeudc/nukeudc.htm">罕字表</a></li>
<li><a href="https://www.readfog.com/a/1638084002220969984">Unicode、UTF-8、UTF-16，終於懂了</a></li>
<li><a href="http://www.chi2ko.com/tool/CJK.htm">字体编辑用中日韩汉字Unicode编码表</a></li>
<li><a href="https://www.cadch.com/modules/news/article.php?storyid=198">一次搞懂MySQL utf8與utf8mb4的差別，general與unicode到底怎麼用??看完不再霧煞煞包準你能懂!</a></li>
<li><a href="https://home.unicode.org/">Unicode官網</a></li>
<li><a href="https://www.emojiall.com/zh-hant/unicode-version-list">unicode版本</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10198444">c#難字處理</a></li>
<li><a href="https://ignatius1895.pixnet.net/blog/post/68072357-%E5%AD%97%E5%85%83%E7%B7%A8%E7%A2%BC%E8%88%87%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88(%E4%B8%80)%EF%BC%9A%E5%89%8D%E8%A8%80">字元編碼與程式設計(一)：前言</a></li>
<li><a href="https://blogger.tigernaxo.com/post/webtech/eudc/">[WebTech] 把電腦的難字造字檔用 FontForge 轉為字型放到網頁上使用</a></li>
<li><a href="https://www.gushiciku.cn/pl/ggY5/zh-hk">ASCII、Unicode、GBK、UTF-8的愛恨糾葛</a></li>
<li><a href="https://kknews.cc/zh-tw/code/e4eao2n.html">「底層原理」Unicode與UTF-8的區別</a></li>
<li><a href="https://www.jianshu.com/p/f89eaa1eb5ee">刨根究底字符编码之七——ANSI编码与代码页(Code Page)</a></li>
<li><a href="https://blog.csdn.net/cnhk1225/article/details/40822645">编码介绍 ASCII与Unicode, codepage, utf-8</a></li>
<li><a href="https://www.biaodianfu.com/python-charset.html">字符编码问题及Python解决方案</a></li>
<li><a href="https://medium.com/gofreight_hq/python-diving-unicode-%E6%B7%B1%E5%85%A5%E6%B7%BA%E5%87%BA-8cdbee3fe81c">Python diving — Unicode 深入淺出</a></li>
<li><a href="https://www.modb.pro/db/175187">TTF里都有什么</a></li>
</ul>
]]></content>
      <categories>
        <category>編碼</category>
      </categories>
      <tags>
        <tag>編碼</tag>
      </tags>
  </entry>
  <entry>
    <title>typescript</title>
    <url>/2022/07/28/2022-07-28%20typescript/</url>
    <content><![CDATA[<h2 id="1-TypeScript-TS-快速入門"><a href="#1-TypeScript-TS-快速入門" class="headerlink" title="1. TypeScript TS 快速入門"></a>1. TypeScript TS 快速入門</h2><h3 id="1-1-什麼是TypeScript？"><a href="#1-1-什麼是TypeScript？" class="headerlink" title="1.1. 什麼是TypeScript？"></a>1.1. 什麼是TypeScript？</h3><ol>
<li>加強版的javascript(Superset)</li>
<li>加強了「Type」的部分</li>
<li>開發完成後，最後還是需要編譯成javascript</li>
<li>適用於開發前端跟後端，例如：搭配React、Express等框架</li>
</ol>
<span id="more"></span>

<h3 id="1-2-為什麼需要TyperScript"><a href="#1-2-為什麼需要TyperScript" class="headerlink" title="1.2. 為什麼需要TyperScript"></a>1.2. 為什麼需要TyperScript</h3><ol>
<li>開發時的(Type)類型檢查</li>
<li>補強動態語言JS，Run起來才會出錯的缺點(不小心用字串做加減乘除)</li>
<li>提高專案程式碼的維護性</li>
</ol>
<h2 id="2-環境安裝"><a href="#2-環境安裝" class="headerlink" title="2. 環境安裝"></a>2. 環境安裝</h2><h3 id="2-1-全局安裝"><a href="#2-1-全局安裝" class="headerlink" title="2.1. 全局安裝"></a>2.1. 全局安裝</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install typescript -g</span><br></pre></td></tr></table></figure>

<h3 id="2-2-專案安裝"><a href="#2-2-專案安裝" class="headerlink" title="2.2. 專案安裝"></a>2.2. 專案安裝</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install typescript --save-dev</span><br></pre></td></tr></table></figure>

<h3 id="2-3-版本檢查"><a href="#2-3-版本檢查" class="headerlink" title="2.3. 版本檢查"></a>2.3. 版本檢查</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tsc -v</span><br></pre></td></tr></table></figure>

<h3 id="2-4-初始化專案"><a href="#2-4-初始化專案" class="headerlink" title="2.4. 初始化專案"></a>2.4. 初始化專案</h3><p>經過以下指令產生<code>tsconfig.json</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tsc --init</span><br></pre></td></tr></table></figure>

<h2 id="3-config設定項目"><a href="#3-config設定項目" class="headerlink" title="3. config設定項目"></a>3. config設定項目</h2><p>這邊簡單記錄幾個config設定</p>
<h3 id="3-1-編譯目標版本"><a href="#3-1-編譯目標版本" class="headerlink" title="3.1. 編譯目標版本"></a>3.1. 編譯目標版本</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;es2016&quot;</span><span class="punctuation">,</span>                                  <span class="comment">/* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */</span></span><br></pre></td></tr></table></figure>

<h3 id="3-2-Source-path"><a href="#3-2-Source-path" class="headerlink" title="3.2. Source path"></a>3.2. Source path</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;rootDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./src&quot;</span><span class="punctuation">,</span>                                  <span class="comment">/* Specify the root folder within your source files. */</span></span><br></pre></td></tr></table></figure>

<h3 id="3-3-Output-path"><a href="#3-3-Output-path" class="headerlink" title="3.3. Output path"></a>3.3. Output path</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./dist/&quot;</span><span class="punctuation">,</span>                                <span class="comment">/* Specify an output folder for all emitted files. */</span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/BMzSwEZ.png" alt="image-20220730193055247"></p>
<h3 id="3-4-允許撰寫js"><a href="#3-4-允許撰寫js" class="headerlink" title="3.4. 允許撰寫js"></a>3.4. 允許撰寫js</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// &quot;allowJs&quot;: true,                                  /* Allow JavaScript files to be a part of your program. Use the &#x27;checkJS&#x27; option to get errors from these files. */</span></span><br></pre></td></tr></table></figure>



<h3 id="3-5-debug模式指向ts檔案"><a href="#3-5-debug模式指向ts檔案" class="headerlink" title="3.5. debug模式指向ts檔案"></a>3.5. debug模式指向ts檔案</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;inlineSourceMap&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>                          <span class="comment">/* Include sourcemap files inside the emitted JavaScript. */</span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/ghxCEfp.png" alt="image-20220730192733527"></p>
<p><img src="https://i.imgur.com/urwlDRE.png" alt="image-20220730192703431"></p>
<h2 id="4-如何complier"><a href="#4-如何complier" class="headerlink" title="4. 如何complier"></a>4. 如何complier</h2><h3 id="4-1-新增index-ts"><a href="#4-1-新增index-ts" class="headerlink" title="4.1. 新增index.ts"></a>4.1. 新增<code>index.ts</code></h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="built_in">string</span> =<span class="string">&quot;kite&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-2-手動編譯檔案"><a href="#4-2-手動編譯檔案" class="headerlink" title="4.2. 手動編譯檔案"></a>4.2. 手動編譯檔案</h3><p>經過以下指令會編譯出<code>index.js</code>檔</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tsc index.ts</span><br></pre></td></tr></table></figure>

<h3 id="4-3-持續監控"><a href="#4-3-持續監控" class="headerlink" title="4.3. 持續監控"></a>4.3. 持續監控</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tsc --watch</span><br></pre></td></tr></table></figure>

<h2 id="5-動手寫程式"><a href="#5-動手寫程式" class="headerlink" title="5. 動手寫程式"></a>5. 動手寫程式</h2><p><img src="https://i.imgur.com/OedIFzb.png" alt="image-20220802022320270"></p>
<h3 id="5-1-basic"><a href="#5-1-basic" class="headerlink" title="5.1. basic"></a>5.1. basic</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ------------ 基本類型 ------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">str</span>: <span class="built_in">string</span> =<span class="string">&#x27;kite&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">str1</span>: <span class="built_in">string</span>;</span><br><span class="line">str1 =<span class="string">&quot;kite&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">num</span>: <span class="built_in">number</span> = <span class="number">1000</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">boo</span>: <span class="built_in">boolean</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">n</span>: <span class="literal">null</span> = <span class="literal">null</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">un</span>: <span class="literal">undefined</span> = <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">test</span>: <span class="built_in">any</span> = <span class="literal">true</span>;<span class="comment">//任何型別都可以</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//陣列</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr1d</span>: <span class="built_in">string</span>[] = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr2d</span>: <span class="built_in">string</span>[][] = [[<span class="string">&#x27;a1&#x27;</span>,<span class="string">&#x27;b1&#x27;</span>,<span class="string">&#x27;c1&#x27;</span>],[<span class="string">&#x27;a2&#x27;</span>,<span class="string">&#x27;b2&#x27;</span>,<span class="string">&#x27;c2&#x27;</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//元組</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">tuple1d</span>: [<span class="built_in">number</span>, <span class="built_in">string</span>, <span class="built_in">boolean</span>] = [<span class="number">1</span>,<span class="string">&#x27;a&#x27;</span>,<span class="literal">true</span>]</span><br><span class="line"><span class="keyword">let</span> <span class="attr">tuple2d</span>: [<span class="built_in">string</span>,<span class="built_in">string</span>][] = [[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>]]</span><br></pre></td></tr></table></figure>



<h3 id="5-2-Enum-枚舉"><a href="#5-2-Enum-枚舉" class="headerlink" title="5.2. Enum 枚舉"></a>5.2. Enum 枚舉</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ------------ Enum 枚舉 ------------</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">LiveStatus</span> &#123;</span><br><span class="line">    <span class="variable constant_">SUCCESS</span> = <span class="number">0</span>,</span><br><span class="line">    <span class="variable constant_">FAIL</span> = -<span class="number">1</span>,</span><br><span class="line">    <span class="variable constant_">STREAMING</span> = <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> liveStatus = <span class="title class_">LiveStatus</span>.<span class="property">FAIL</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(liveStatus);</span><br></pre></td></tr></table></figure>

<h3 id="5-3-Union"><a href="#5-3-Union" class="headerlink" title="5.3. Union"></a>5.3. Union</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ------------ Union ------------</span></span><br><span class="line"><span class="keyword">let</span> union : <span class="built_in">boolean</span> | <span class="built_in">string</span>;</span><br><span class="line">union = <span class="literal">true</span>;</span><br><span class="line">union = <span class="string">&quot;hi,I&#x27;m Support boolean、string type&quot;</span></span><br></pre></td></tr></table></figure>



<h3 id="5-4-Type"><a href="#5-4-Type" class="headerlink" title="5.4. Type"></a>5.4. Type</h3><h4 id="5-4-1-basic"><a href="#5-4-1-basic" class="headerlink" title="5.4.1. basic"></a>5.4.1. basic</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ------------ Type ------------</span></span><br><span class="line"><span class="keyword">type</span> A = <span class="built_in">number</span> | <span class="built_in">string</span> </span><br><span class="line"><span class="keyword">let</span> <span class="attr">a1</span>: A</span><br><span class="line">a1 = <span class="number">1</span></span><br><span class="line">a1 = <span class="string">&quot;type A&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="5-4-2-Partial-Readonly"><a href="#5-4-2-Partial-Readonly" class="headerlink" title="5.4.2. Partial &amp; Readonly"></a>5.4.2. Partial &amp; Readonly</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//保哥 union</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Level</span> = <span class="string">&quot;初階&quot;</span> | <span class="string">&quot;中階&quot;</span> | <span class="string">&quot;高階&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">yourLevel</span>: <span class="title class_">Level</span> = <span class="string">&quot;中階&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//保哥 Partial &amp; ReadOnly Types</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Person</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PersonPartial</span> = <span class="title class_">Partial</span>&lt;<span class="title class_">Person</span>&gt;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PersonReadonly</span> = <span class="title class_">Readonly</span>&lt;<span class="title class_">Person</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="attr">personA</span>: <span class="title class_">Person</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;Will&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="attr">personB</span>:<span class="title class_">PersonPartial</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Will&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="attr">personC</span>:<span class="title class_">PersonReadonly</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Will&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">123</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//personC.name=&quot;kite&quot;;//error</span></span><br></pre></td></tr></table></figure>

<h3 id="5-5-Interface"><a href="#5-5-Interface" class="headerlink" title="5.5. Interface"></a>5.5. Interface</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ------------ Interface ------------</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="5-6-Object"><a href="#5-6-Object" class="headerlink" title="5.6. Object"></a>5.6. Object</h3><p>思考一下type 與 interface的差異性</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ------------ Object ------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Card</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span> </span><br><span class="line">    desc?: <span class="built_in">string</span> <span class="comment">//可選</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">card01</span>: <span class="title class_">Card</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;kite&quot;</span>,</span><br><span class="line">    <span class="attr">desc</span>:<span class="string">&quot;....&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Card2</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span> </span><br><span class="line">    <span class="attr">desc</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Card2</span> &#123;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">card02</span>: <span class="title class_">Card2</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;dog&quot;</span>,</span><br><span class="line">    <span class="attr">desc</span>:<span class="string">&quot;won!&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="5-7-Function"><a href="#5-7-Function" class="headerlink" title="5.7. Function"></a>5.7. Function</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ------------ function ------------</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hello</span>(<span class="params">a: <span class="built_in">string</span>,b: <span class="built_in">string</span></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hello2</span>(<span class="params">a: <span class="built_in">string</span>,b: <span class="built_in">string</span></span>): <span class="built_in">number</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">999</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hello3</span>(<span class="params">a: <span class="built_in">number</span>,b: <span class="built_in">boolean</span>,c: <span class="built_in">string</span></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test2</span>(<span class="params">a: <span class="built_in">number</span></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//可選參數要放在最後面</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hello4</span>(<span class="params">name: <span class="built_in">string</span>, age?: <span class="built_in">number</span></span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(age === <span class="literal">undefined</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="title function_">test2</span>(age)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//箭頭函式</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">func</span> = (<span class="params"></span>) =&gt; &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">func2</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-8-斷言"><a href="#5-8-斷言" class="headerlink" title="5.8. 斷言"></a>5.8. 斷言</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ------------ 斷言 unknown ------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TodoModel</span> = &#123;</span><br><span class="line">    <span class="attr">userId</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">completed</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//https://jsonplaceholder.typicode.com/</span></span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;https://jsonplaceholder.typicode.com/todos/1&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> todoModel = <span class="keyword">await</span> res.<span class="title function_">json</span>() <span class="keyword">as</span> <span class="title class_">TodoModel</span>;    </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(todoModel);    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">data1</span>: <span class="title class_">TodoModel</span> = &#123;</span><br><span class="line">    <span class="string">&quot;userId&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;title&quot;</span>: <span class="string">&quot;delectus aut autem&quot;</span>,</span><br><span class="line">    <span class="string">&quot;completed&quot;</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Beta</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span> </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 假設data1是動態的，想像data1是response回來的json且動態內容，先unknow 再轉為預計的型別</span></span><br><span class="line"><span class="keyword">const</span> beta = data1 <span class="keyword">as</span> <span class="built_in">unknown</span> <span class="keyword">as</span> <span class="title class_">Beta</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">getData</span>()</span><br></pre></td></tr></table></figure>

<h3 id="5-9-Class"><a href="#5-9-Class" class="headerlink" title="5.9. Class"></a>5.9. Class</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ------------ class ------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Live</span> &#123;</span><br><span class="line">    <span class="attr">roomName</span>: <span class="built_in">string</span> </span><br><span class="line">    <span class="keyword">private</span> <span class="attr">id</span>: <span class="built_in">string</span> </span><br><span class="line">    <span class="keyword">protected</span> <span class="attr">name</span>: <span class="built_in">string</span> </span><br><span class="line">    <span class="title function_">constructor</span> (<span class="attr">roomName1</span>: <span class="built_in">string</span>, <span class="attr">id1</span>: <span class="built_in">string</span>, <span class="attr">name1</span>: <span class="built_in">string</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;建立直播中...&#x27;</span>);        </span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">roomName</span> = roomName1;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">id</span> = id1;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">start</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;class Live start method&quot;</span>);        </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`class Live this.id = <span class="subst">$&#123;<span class="variable language_">this</span>.id&#125;</span>`</span>);                </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`class Live this.name = <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//繼承 extends</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CarLive</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Live</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span> (<span class="attr">roomName1</span>: <span class="built_in">string</span>, <span class="attr">id1</span>: <span class="built_in">string</span>, <span class="attr">name1</span>: <span class="built_in">string</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable language_">super</span>(roomName1,id1,name1)        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> live01 = <span class="keyword">new</span> <span class="title class_">Live</span>(<span class="string">&quot;1號&quot;</span>,<span class="string">&quot;00001&quot;</span>,<span class="string">&quot;kite&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(live01);</span><br><span class="line"><span class="comment">//console.log(live01.id);//在開發階段會有報錯提示</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> live02 = <span class="keyword">new</span> <span class="title class_">CarLive</span>(<span class="string">&quot;2號&quot;</span>,<span class="string">&quot;00002&quot;</span>,<span class="string">&quot;Richard&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(live02);</span><br><span class="line">live02.<span class="title function_">start</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//私有變數新寫法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Live2</span>&#123;</span><br><span class="line">    <span class="comment">//↓私有變數</span></span><br><span class="line">    #name</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.#name= name;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(name);        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> live2 = <span class="keyword">new</span> <span class="title class_">Live2</span>(<span class="string">&quot;Mary&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(live2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//實作介面 implements</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">CarProps</span>&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">    <span class="attr">start</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> <span class="keyword">implements</span> <span class="title class_">CarProps</span>&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span> </span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>,age: <span class="built_in">number</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">start</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="5-9-1-public"><a href="#5-9-1-public" class="headerlink" title="5.9.1. public"></a>5.9.1. public</h4><p>當一個變數或方法的可視性被宣告為<code>public</code>。這表示這些方法和屬性可以在<code>類別的裡面與外面被存取</code>。</p>
<h4 id="5-9-2-protected"><a href="#5-9-2-protected" class="headerlink" title="5.9.2. protected"></a>5.9.2. protected</h4><p>當一個變數或方法的可視性被宣告為<code>protected</code>，該變數或方法只能在<code>類別以及子類別的內部存取</code>。</p>
<h4 id="5-9-3-private"><a href="#5-9-3-private" class="headerlink" title="5.9.3. private"></a>5.9.3. private</h4><p>當一個變數或方法的可視性被宣告為<code>private</code>，該變數或方法只能在<code>定義它們的類別內</code>。</p>
<p>實質上，在browser上還是能進行存取，如下圖：</p>
<p><img src="https://i.imgur.com/x75cpRg.png" alt="image-20220730235820137"></p>
<p>新語法新特性，希望能達到private效果可以使用<code>#</code>符號進行變數宣告。再看一次browser，的確已經限制住存取了。</p>
<p><img src="https://i.imgur.com/J1vRZue.png" alt="image-20220731005658972"></p>
<h3 id="5-10-泛型"><a href="#5-10-泛型" class="headerlink" title="5.10. 泛型"></a>5.10. 泛型</h3><h4 id="5-10-1-function"><a href="#5-10-1-function" class="headerlink" title="5.10.1. function"></a>5.10.1. function</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ------------ 泛型 ------------</span></span><br><span class="line"><span class="comment">//function</span></span><br><span class="line"><span class="keyword">function</span> print&lt;T&gt;(<span class="attr">data</span>:T)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;data&#x27;</span>,data);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">print&lt;<span class="built_in">number</span>&gt;(<span class="number">999</span>)</span><br><span class="line">print&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;kite&quot;</span>)</span><br><span class="line">print&lt;<span class="built_in">string</span>[][]&gt;([[<span class="string">&#x27;kite&#x27;</span>,<span class="string">&#x27;Richard&#x27;</span>]])</span><br><span class="line">print&lt;<span class="title class_">CarProps</span>&gt;(&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;kite&quot;</span></span><br><span class="line">    ,<span class="attr">age</span>:<span class="number">123</span></span><br><span class="line">    ,<span class="title function_">start</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`I&#x27;m start method`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="5-10-2-class"><a href="#5-10-2-class" class="headerlink" title="5.10.2. class"></a>5.10.2. class</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//class</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Print</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="attr">data</span>: T</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">d: T</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">data</span> = d;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Print</span>&lt;<span class="built_in">number</span>&gt;(<span class="number">999</span>);</span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Print</span>&lt;<span class="built_in">string</span>&gt;(<span class="string">&#x27;kite&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;p&#x27;</span>,p);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;p1&#x27;</span>,p1);</span><br></pre></td></tr></table></figure>



<h3 id="5-11-Utility-Types"><a href="#5-11-Utility-Types" class="headerlink" title="5.11. Utility Types"></a>5.11. Utility Types</h3><h4 id="5-11-1-Record"><a href="#5-11-1-Record" class="headerlink" title="5.11.1. Record&lt;Keys, Type&gt;"></a>5.11.1. Record&lt;Keys, Type&gt;</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">CatInfo</span> &#123;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="attr">breed</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">type</span> <span class="title class_">CatName</span> = <span class="string">&quot;miffy&quot;</span> | <span class="string">&quot;boris&quot;</span> | <span class="string">&quot;mordred&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">cats</span>: <span class="title class_">Record</span>&lt;<span class="title class_">CatName</span>, <span class="title class_">CatInfo</span>&gt; = &#123;</span><br><span class="line">    <span class="attr">miffy</span>: &#123; <span class="attr">age</span>: <span class="number">10</span>, <span class="attr">breed</span>: <span class="string">&quot;Persian&quot;</span> &#125;,</span><br><span class="line">    <span class="attr">boris</span>: &#123; <span class="attr">age</span>: <span class="number">5</span>, <span class="attr">breed</span>: <span class="string">&quot;Maine Coon&quot;</span> &#125;,</span><br><span class="line">    <span class="attr">mordred</span>: &#123; <span class="attr">age</span>: <span class="number">16</span>, <span class="attr">breed</span>: <span class="string">&quot;British Shorthair&quot;</span> &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h4 id="5-11-2-Pick"><a href="#5-11-2-Pick" class="headerlink" title="5.11.2. Pick&lt;Type, Keys&gt;"></a>5.11.2. Pick&lt;Type, Keys&gt;</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Todo1</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">description</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">completed</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TodoPreview1</span> = <span class="title class_">Pick</span>&lt;<span class="title class_">Todo1</span>, <span class="string">&quot;title&quot;</span> | <span class="string">&quot;completed&quot;</span>&gt;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="attr">todo1</span>: <span class="title class_">TodoPreview1</span> = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;Clean room&quot;</span>,</span><br><span class="line">  <span class="attr">completed</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h4 id="5-11-3-Omit"><a href="#5-11-3-Omit" class="headerlink" title="5.11.3. Omit&lt;Type, Keys&gt;"></a>5.11.3. Omit&lt;Type, Keys&gt;</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Todo2</span> &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">description</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">completed</span>: <span class="built_in">boolean</span>;</span><br><span class="line">    <span class="attr">createdAt</span>: <span class="built_in">number</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TodoPreview2</span> = <span class="title class_">Omit</span>&lt;<span class="title class_">Todo2</span>, <span class="string">&quot;description&quot;</span>&gt;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="attr">todo2</span>: <span class="title class_">TodoPreview2</span> = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;Clean room&quot;</span>,</span><br><span class="line">  <span class="attr">completed</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">createdAt</span>: <span class="number">1615544252770</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h2 id="6-參考連結"><a href="#6-參考連結" class="headerlink" title="6. 參考連結"></a>6. 參考連結</h2><ul>
<li><a href="https://youtu.be/GinkGJZBHIY">【前端速成】TypeScript TS 快速入門｜Tiktok工程師帶你入門前端｜布魯斯前端</a></li>
<li><a href="http://json2ts.com/">json2ts</a></li>
<li><a href="https://jsonplaceholder.typicode.com/">{JSON} Placeholder</a></li>
<li><a href="https://youtu.be/SCLKlc6G0_k">用不用 TypeScript 隨便你，反正我是用了 | Will 保哥 (JSDC 2020)</a></li>
</ul>
]]></content>
      <categories>
        <category>typescript</category>
      </categories>
      <tags>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>網站弱點掃描筆記</title>
    <url>/2022/08/02/2022-08-02%20%E7%B6%B2%E7%AB%99%E5%BC%B1%E9%BB%9E%E6%8E%83%E6%8F%8F%E7%AD%86%E8%A8%98/</url>
    <content><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>寫這篇的原因是因為筆者經過OWASP ZAP修正弱點努力後，客戶後續實際請資安廠商進行掃描。客戶聯絡我需要進行弱點修正，以下記錄一些學習資訊。</p>
<span id="more"></span>


<h2 id="2-環境說明"><a href="#2-環境說明" class="headerlink" title="2. 環境說明"></a>2. 環境說明</h2><ol>
<li>Windows Server 2016</li>
<li>IIS10</li>
<li>網站架構(無後端程式碼)<ol>
<li>HTML</li>
<li>JS</li>
<li>SCSS</li>
<li>CSS</li>
</ol>
</li>
</ol>
<h2 id="3-科普名詞"><a href="#3-科普名詞" class="headerlink" title="3. 科普名詞"></a>3. 科普名詞</h2><h3 id="3-1-TLS-Transport-Layer-Security，傳輸層安全性"><a href="#3-1-TLS-Transport-Layer-Security，傳輸層安全性" class="headerlink" title="3.1. TLS -  (Transport Layer Security，傳輸層安全性)"></a>3.1. TLS -  (Transport Layer Security，傳輸層安全性)</h3><blockquote>
<p>TSL (Transport Layer Security，傳輸層安全性) 是更新、更安全的 SSL 版本。我們仍將安全性憑證稱為 SSL，因為這是較常用的詞彙，不過當您透過DigiCert<a href="https://www.websecurity.digicert.com/zh/tw/ssl-certificate?inid=infoctr_buylink_sslhome">購買 SSL </a>時，您所購買的其實是最新的 TLS 憑證及 <a href="https://www.websecurity.digicert.com/zh/tw/security-topics/how-ssl-works">ECC、RSA 或 DSA 的加密選項</a>。</p>
</blockquote>
<p>簡單來說，<code>TLS</code>是更安全的版本，從<a href="https://zh.wikipedia.org/zh-tw/%E5%82%B3%E8%BC%B8%E5%B1%A4%E5%AE%89%E5%85%A8%E6%80%A7%E5%8D%94%E5%AE%9A">WIKI資料</a>，也可以看到棄用的狀況：</p>
<p><img src="https://i.imgur.com/0heFAtT.png" alt="image-20220802205731442"></p>
<h3 id="3-2-Cipher-密碼"><a href="#3-2-Cipher-密碼" class="headerlink" title="3.2. Cipher - 密碼"></a>3.2. Cipher - 密碼</h3><blockquote>
<p>在密碼學中，<strong>密碼</strong>（英語：cipher，或cypher），是一種用於執行<a href="https://zh.wikipedia.org/wiki/%E5%8A%A0%E5%AF%86">加密</a>或<a href="https://zh.wikipedia.org/wiki/%E8%A7%A3%E5%AF%86">解密</a>的<a href="https://zh.wikipedia.org/wiki/%E7%AE%97%E6%B3%95">演算法</a>——一系列可以作為一個過程來遵循的定義明確的步驟</p>
</blockquote>
<p>比較好聯想的就是我們常說的對稱加密<code>AES</code>、<code>DES</code>，非對稱加密<code>RSA</code>。</p>
<h3 id="3-3-Hash-雜湊"><a href="#3-3-Hash-雜湊" class="headerlink" title="3.3. Hash - 雜湊"></a>3.3. Hash - 雜湊</h3><blockquote>
<p>雜湊演算法也被用來加密存在資料庫中的<a href="https://zh.wikipedia.org/wiki/%E5%AF%86%E7%A2%BC">密碼</a>（password）字串，由於雜湊演算法所計算出來的<strong>雜湊值（Hash Value）</strong>具有<strong>不可逆</strong>（無法逆向演算回原本的數值）的性質，因此可有效的保護密碼。</p>
</blockquote>
<p>用在於檔案校驗碼（Checksum），比如：</p>
<ul>
<li>用來快速判斷檔案是否和原本相同。</li>
<li>有在論壇下載過檔案的人應該都很常見到一長串 MD5 或 SHA-1 驗證碼，就是用來讓你快速檢查你下載的檔案裡頭的內容，是不是跟上傳者上傳的檔案一樣。</li>
</ul>
<h4 id="3-3-1-為什麼雜湊不是加密？"><a href="#3-3-1-為什麼雜湊不是加密？" class="headerlink" title="3.3.1. 為什麼雜湊不是加密？"></a>3.3.1. 為什麼雜湊不是加密？</h4><ul>
<li>今天如果我拿到一串密文，我是有辦法透過解密，得到原始的明文的，而且如果使用非對稱式加密的話，我甚至還可以驗證傳送方是不是本人（是否有被進行中間人攻擊）。<ul>
<li>雜湊演算法在這裡也會被使用，通常會被拿來檢驗傳送的訊息是否有被更改過。</li>
<li>傳送方附上原始訊息經過某個雜湊演算法得出的雜湊值，接收方在解開這個訊息之後，會透過相同的雜湊演算法來驗證。</li>
</ul>
</li>
<li>但如果是拿到一串雜湊值的話，理論上是無法逆向得到原始的明文的，根本無法拿來做資料的傳遞。</li>
</ul>
<p>對於雜湊在網路傳輸上的應用有了更進一步的了解，<code>確認傳送的訊息是否有被更改過</code>！</p>
<p>引用：<a href="https://blog.m157q.tw/posts/2017/12/25/differences-between-encryption-and-hashing/">加密和雜湊有什麼不一樣？</a></p>
<h2 id="4-廠商檢測使用之軟體"><a href="#4-廠商檢測使用之軟體" class="headerlink" title="4. 廠商檢測使用之軟體"></a>4. 廠商檢測使用之軟體</h2><p>引用報告書內容：</p>
<blockquote>
<p>本服務所使用之弱點掃描檢測工具的廠牌為 <code>HCL AppScan</code>，作為網頁弱點掃描檢測工具，可全面搜尋受測單位的漏洞。</p>
</blockquote>
<p>經查詢這套軟體看起來是付費軟體哦。</p>
<h2 id="5-檢測結果"><a href="#5-檢測結果" class="headerlink" title="5. 檢測結果"></a>5. 檢測結果</h2><p><img src="https://i.imgur.com/PNFRTIE.png" alt="image-20220802195617329"></p>
<h3 id="5-1-低強度密碼組合-ROBOT-攻擊：伺服器支援有漏洞的密碼組合"><a href="#5-1-低強度密碼組合-ROBOT-攻擊：伺服器支援有漏洞的密碼組合" class="headerlink" title="5.1. 低強度密碼組合 - ROBOT 攻擊：伺服器支援有漏洞的密碼組合"></a>5.1. 低強度密碼組合 - ROBOT 攻擊：伺服器支援有漏洞的密碼組合</h3><p>網路搜尋找到來自HCL AppScan<a href="https://help.hcltechsw.com/appscan/Enterprise/zh_TW/10.0.1/topics/t_disable_weak_cipher_suites_iis.html">文件說明</a>：</p>
<blockquote>
<p>依預設，IIS 安裝時會啟用 2 個低強度 SSL 2.0 密碼組合：<em>SSL2_RC4_128_WITH_MD5</em> 和 <em>SSL2_DES_192_EDE3_CBC_WITH_MD5</em>。這會影響 AppScan Enterprise 的安全，應該停用這些密碼組合。</p>
</blockquote>
<p>從文件內容中，了解到原來設定都藏在登錄檔之中，試圖理解<code>SSL2_RC4_128_WITH_MD5</code>這個是代表什麼意思，意外發現可以用這張圖片來解釋：</p>
<p><code>Server Protocols</code> + <code>_</code> + <code>Ciphers</code> + <code>_</code> + <code>WITH</code> + <code>Hashes</code></p>
<p><img src="https://i.imgur.com/lctcB5i.png" alt="img"></p>
<p>實際去探訪<code>登錄檔</code>，截圖增加印象：</p>
<p><img src="https://i.imgur.com/zlTfWhL.png" alt="image-20220802203224225"></p>
<h3 id="5-2-偵測到-RC4-密碼組合"><a href="#5-2-偵測到-RC4-密碼組合" class="headerlink" title="5.2. 偵測到 RC4 密碼組合"></a>5.2. 偵測到 RC4 密碼組合</h3><p>經過第一項弱點的認識後，這一項的說明其實就變得更好理解了。也就是不要包含<code>RC4</code>就對了！</p>
<h3 id="5-3-偵測到低強度密碼：並非所有密碼組合都支援完全秘密轉遞"><a href="#5-3-偵測到低強度密碼：並非所有密碼組合都支援完全秘密轉遞" class="headerlink" title="5.3. 偵測到低強度密碼：並非所有密碼組合都支援完全秘密轉遞"></a>5.3. 偵測到低強度密碼：並非所有密碼組合都支援完全秘密轉遞</h3><p>經過第一項弱點的認識後，這一項的說明其實就變得更好理解了。比如不能有<code>SSL</code>、<code>RC4</code>、<code>MD5</code>，並且在組合上避免低安全的組合！</p>
<h2 id="6-工具推薦"><a href="#6-工具推薦" class="headerlink" title="6. 工具推薦"></a>6. 工具推薦</h2><h3 id="6-1-SSLScan"><a href="#6-1-SSLScan" class="headerlink" title="6.1. SSLScan"></a>6.1. SSLScan</h3><p>是一套open source，在github公開，可以自行下載。</p>
<ul>
<li>可以看到<code>SSL/TLS Protocols</code>的enable狀況</li>
<li>可以看到<code>Supported Server Cipher</code> 的支援狀況</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PS C:\Users\kite\Downloads\sslscan-2.0.15&gt; .\sslscan.exe tw.yahoo.com</span><br><span class="line">Version: 2.0.15 Windows 64-bit (Mingw)</span><br><span class="line">OpenSSL 1.1.1e-dev  xx XXX xxxx</span><br><span class="line"></span><br><span class="line">Connected to 119.161.15.251</span><br><span class="line"></span><br><span class="line">Testing SSL server tw.yahoo.com on port 443 using SNI name tw.yahoo.com</span><br><span class="line"></span><br><span class="line">  SSL/TLS Protocols:</span><br><span class="line">SSLv2     disabled</span><br><span class="line">SSLv3     disabled</span><br><span class="line">TLSv1.0   enabled</span><br><span class="line">TLSv1.1   enabled</span><br><span class="line">TLSv1.2   enabled</span><br><span class="line">TLSv1.3   enabled</span><br><span class="line"></span><br><span class="line">  TLS Fallback SCSV:</span><br><span class="line">Server supports TLS Fallback SCSV</span><br><span class="line"></span><br><span class="line">  TLS renegotiation:</span><br><span class="line">Secure session renegotiation supported</span><br><span class="line"></span><br><span class="line">  TLS Compression:</span><br><span class="line">Compression disabled</span><br><span class="line"></span><br><span class="line">  Heartbleed:</span><br><span class="line">TLSv1.3 not vulnerable to heartbleed</span><br><span class="line">TLSv1.2 not vulnerable to heartbleed</span><br><span class="line">TLSv1.1 not vulnerable to heartbleed</span><br><span class="line">TLSv1.0 not vulnerable to heartbleed</span><br><span class="line"></span><br><span class="line">  Supported Server Cipher(s):</span><br><span class="line">Preferred TLSv1.3  128 bits  TLS_AES_128_GCM_SHA256        Curve 25519 DHE 253</span><br><span class="line">Accepted  TLSv1.3  256 bits  TLS_AES_256_GCM_SHA384        Curve 25519 DHE 253</span><br><span class="line">Accepted  TLSv1.3  256 bits  TLS_CHACHA20_POLY1305_SHA256  Curve 25519 DHE 253</span><br><span class="line">Preferred TLSv1.2  128 bits  ECDHE-ECDSA-AES128-GCM-SHA256 Curve 25519 DHE 253</span><br><span class="line">Accepted  TLSv1.2  256 bits  ECDHE-ECDSA-AES256-GCM-SHA384 Curve 25519 DHE 253</span><br><span class="line">Accepted  TLSv1.2  256 bits  ECDHE-ECDSA-CHACHA20-POLY1305 Curve 25519 DHE 253</span><br><span class="line">Accepted  TLSv1.2  256 bits  ECDHE-RSA-CHACHA20-POLY1305   Curve 25519 DHE 253</span><br><span class="line">Accepted  TLSv1.2  128 bits  ECDHE-RSA-AES128-GCM-SHA256   Curve 25519 DHE 253</span><br><span class="line">Accepted  TLSv1.2  256 bits  ECDHE-RSA-AES256-GCM-SHA384   Curve 25519 DHE 253</span><br><span class="line">Accepted  TLSv1.2  128 bits  ECDHE-ECDSA-AES128-SHA256     Curve 25519 DHE 253</span><br><span class="line">Accepted  TLSv1.2  256 bits  ECDHE-ECDSA-AES256-SHA384     Curve 25519 DHE 253</span><br><span class="line">Accepted  TLSv1.2  128 bits  ECDHE-ECDSA-AES128-SHA        Curve 25519 DHE 253</span><br><span class="line">Accepted  TLSv1.2  256 bits  ECDHE-ECDSA-AES256-SHA        Curve 25519 DHE 253</span><br><span class="line">Accepted  TLSv1.2  128 bits  ECDHE-RSA-AES128-SHA256       Curve 25519 DHE 253</span><br><span class="line">Accepted  TLSv1.2  256 bits  ECDHE-RSA-AES256-SHA384       Curve 25519 DHE 253</span><br><span class="line">Accepted  TLSv1.2  128 bits  ECDHE-RSA-AES128-SHA          Curve 25519 DHE 253</span><br><span class="line">Accepted  TLSv1.2  256 bits  ECDHE-RSA-AES256-SHA          Curve 25519 DHE 253</span><br><span class="line">Accepted  TLSv1.2  128 bits  AES128-GCM-SHA256</span><br><span class="line">Accepted  TLSv1.2  256 bits  AES256-GCM-SHA384</span><br><span class="line">Accepted  TLSv1.2  128 bits  AES128-SHA256</span><br><span class="line">Accepted  TLSv1.2  256 bits  AES256-SHA256</span><br><span class="line">Accepted  TLSv1.2  256 bits  AES256-SHA</span><br><span class="line">Preferred TLSv1.1  128 bits  ECDHE-ECDSA-AES128-SHA        Curve 25519 DHE 253</span><br><span class="line">Accepted  TLSv1.1  256 bits  ECDHE-ECDSA-AES256-SHA        Curve 25519 DHE 253</span><br><span class="line">Accepted  TLSv1.1  128 bits  ECDHE-RSA-AES128-SHA          Curve 25519 DHE 253</span><br><span class="line">Accepted  TLSv1.1  256 bits  ECDHE-RSA-AES256-SHA          Curve 25519 DHE 253</span><br><span class="line">Accepted  TLSv1.1  256 bits  AES256-SHA</span><br><span class="line">Preferred TLSv1.0  128 bits  ECDHE-ECDSA-AES128-SHA        Curve 25519 DHE 253</span><br><span class="line">Accepted  TLSv1.0  256 bits  ECDHE-ECDSA-AES256-SHA        Curve 25519 DHE 253</span><br><span class="line">Accepted  TLSv1.0  128 bits  ECDHE-RSA-AES128-SHA          Curve 25519 DHE 253</span><br><span class="line">Accepted  TLSv1.0  256 bits  ECDHE-RSA-AES256-SHA          Curve 25519 DHE 253</span><br><span class="line">Accepted  TLSv1.0  256 bits  AES256-SHA</span><br><span class="line"></span><br><span class="line">  Server Key Exchange Group(s):</span><br><span class="line">TLSv1.3  128 bits  secp256r1 (NIST P-256)</span><br><span class="line">TLSv1.3  192 bits  secp384r1 (NIST P-384)</span><br><span class="line">TLSv1.3  260 bits  secp521r1 (NIST P-521)</span><br><span class="line">TLSv1.3  128 bits  x25519</span><br><span class="line">TLSv1.3  224 bits  x448</span><br><span class="line">TLSv1.2  128 bits  secp256r1 (NIST P-256)</span><br><span class="line">TLSv1.2  192 bits  secp384r1 (NIST P-384)</span><br><span class="line">TLSv1.2  260 bits  secp521r1 (NIST P-521)</span><br><span class="line">TLSv1.2  128 bits  x25519</span><br><span class="line">TLSv1.2  224 bits  x448</span><br><span class="line"></span><br><span class="line">  SSL Certificate:</span><br><span class="line">Signature Algorithm: sha256WithRSAEncryption</span><br><span class="line">ECC Curve Name:      prime256v1</span><br><span class="line">ECC Key Strength:    128</span><br></pre></td></tr></table></figure>

<h3 id="6-2-IIS-Crypto"><a href="#6-2-IIS-Crypto" class="headerlink" title="6.2. IIS Crypto"></a>6.2. IIS Crypto</h3><h2 id="7-參考網站"><a href="#7-參考網站" class="headerlink" title="7. 參考網站"></a>7. 參考網站</h2><ul>
<li><a href="https://blog.darkthread.net/blog/rdp-ssl-cipher-vulnerability/">非網站 Windows 之 SSL 加密弱點檢測及修補</a><ul>
<li>這篇是黑暗大大寫的心得筆記，過程寫的很詳細。其中，也有推薦使用<code>nmap</code>來進行檢測。</li>
</ul>
</li>
<li><a href="http://www.waynezim.com/2011/03/how-to-disable-weak-ssl-protocols-and-ciphers-in-iis/">How to Disable Weak SSL Protocols and Ciphers in IIS</a></li>
<li><a href="https://www.websecurity.digicert.com/zh/tw/security-topics/what-is-ssl-tls-https">什麼是 SSL、TLS 以及 HTTPS？</a></li>
<li><a href="https://blog.m157q.tw/posts/2017/12/25/differences-between-encryption-and-hashing/">加密和雜湊有什麼不一樣？</a></li>
<li><a href="https://medium.com/%E7%A8%8B%E5%BC%8F%E8%A3%A1%E6%9C%89%E8%9F%B2/windows-%E4%B8%BB%E6%A9%9F%E5%A6%82%E4%BD%95%E5%95%9F%E7%94%A8-tls-1-2-d72825f791b9">Windows 主機如何啟用 TLS 1.2</a><ul>
<li>如果要用登錄檔的方式進行修改，這篇圖文並茂，而且還將貼上了reg的文字設定檔</li>
</ul>
</li>
<li><a href="https://hackmd.io/@Not/rJ52Vrp_v#%E4%B8%AD-%E4%BD%BF%E7%94%A8TLS-1011-%E5%81%9C%E7%94%A8TLS%E8%88%8A%E7%89%88%E5%8D%94%E5%AE%9A%EF%BC%8C%E5%8F%AA%E5%95%9F%E7%94%A8TLS-12%E5%90%AB">網站檢測的資安風險修正筆記</a><ul>
<li>IIS Crypto軟體使用方式可以參考這篇，做得還滿不錯的</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>資訊安全</category>
        <category>弱點掃描</category>
      </categories>
      <tags>
        <tag>弱點掃描</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3TypeScript(2) - 創建項目</title>
    <url>/2022/08/06/2022-08-06%20Vue3TypeScript(1)%20-%20%E5%89%B5%E5%BB%BA%E9%A0%85%E7%9B%AE/</url>
    <content><![CDATA[<h2 id="1-安裝"><a href="#1-安裝" class="headerlink" title="1. 安裝"></a>1. 安裝</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm init vite@latest vue3-vite-ts-vuex-element-plus</span><br></pre></td></tr></table></figure>

<span id="more"></span>


<h3 id="1-1-select-a-framework"><a href="#1-1-select-a-framework" class="headerlink" title="1.1. select a framework"></a>1.1. select a framework</h3><p>會提示選擇，選<code>vue</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vue</span><br></pre></td></tr></table></figure>

<h3 id="1-2-select-a-variant"><a href="#1-2-select-a-variant" class="headerlink" title="1.2. select a variant"></a>1.2. select a variant</h3><p>第二次提示，選<code>vue-ts</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vue-ts</span><br></pre></td></tr></table></figure>

<h3 id="1-3-npm-install"><a href="#1-3-npm-install" class="headerlink" title="1.3. npm install"></a>1.3. npm install</h3><p>經由上述初始設定後，輸入指令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>



<h2 id="2-進行簡單整理"><a href="#2-進行簡單整理" class="headerlink" title="2. 進行簡單整理"></a>2. 進行簡單整理</h2><p><code>App.vue</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">&lt;script setup lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>看一下package.json</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;dev&quot;: &quot;vite&quot;,</span><br><span class="line">  &quot;build&quot;: &quot;vue-tsc --noEmit &amp;&amp; vite build&quot;,</span><br><span class="line">  &quot;preview&quot;: &quot;vite preview&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>因此我們可以 使用 <code>npm run dev</code>，啟動了網頁伺服器</p>
<p><img src="https://i.imgur.com/5UHbkP3.png" alt="image-20220806170832284"></p>
]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>Vue3</tag>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3TypeScript(3) - 創建新由</title>
    <url>/2022/08/06/2022-08-06%20Vue3TypeScript(3)%20-%20%E5%89%B5%E5%BB%BA%E8%B7%AF%E7%94%B1/</url>
    <content><![CDATA[<h2 id="1-安裝路由"><a href="#1-安裝路由" class="headerlink" title="1. 安裝路由"></a>1. 安裝路由</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install vue-router</span><br></pre></td></tr></table></figure>

<span id="more"></span>


<h2 id="2-系統架構配置"><a href="#2-系統架構配置" class="headerlink" title="2. 系統架構配置"></a>2. 系統架構配置</h2><h3 id="2-1-新增資料夾-src-router"><a href="#2-1-新增資料夾-src-router" class="headerlink" title="2.1. 新增資料夾 src\router"></a>2.1. 新增資料夾 <code>src\router</code></h3><p>請在<code>src\</code>資料夾底下建立<code>router</code>資料夾，預期結果<code>src\router</code></p>
<h3 id="2-2-新增資料夾-src-views"><a href="#2-2-新增資料夾-src-views" class="headerlink" title="2.2. 新增資料夾 src\views"></a>2.2. 新增資料夾 <code>src\views</code></h3><p>請在<code>src\</code>資料夾底下建立<code>view</code>資料夾，預期結果<code>src\view</code></p>
<h3 id="2-3-新增src-view-Home-vue"><a href="#2-3-新增src-view-Home-vue" class="headerlink" title="2.3. 新增src\view\Home.vue"></a>2.3. 新增<code>src\view\Home.vue</code></h3><p>請在<code>src\views\</code>資料夾底下建立<code>Home.vue</code>，預期結果<code>src\view\Home.vue</code>，並填寫以下內容：</p>
<p><code>Home.vue</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;初始化頁面&lt;/h1&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">export default&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-4-新增src-router-index-ts"><a href="#2-4-新增src-router-index-ts" class="headerlink" title="2.4. 新增src\router\index.ts"></a>2.4. 新增<code>src\router\index.ts</code></h3><p>請在<code>src\router\</code>底下建立<code>index.ts</code>檔案，稍候再來填寫，預期結果<code>src\router\index.ts</code>，並填寫以下內容：</p>
<p><code>index.ts</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createRouter,createWebHistory,<span class="title class_">RouteRecordRaw</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Array</span>&lt;<span class="title class_">RouteRecordRaw</span>&gt; =[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&quot;/&quot;</span>,</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&quot;Home&quot;</span>,</span><br><span class="line">        <span class="attr">component</span>:<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../views/Home.vue&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(),</span><br><span class="line">        routes</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure>

<h3 id="2-5-修改src-main-ts"><a href="#2-5-修改src-main-ts" class="headerlink" title="2.5. 修改src\main.ts"></a>2.5. 修改<code>src\main.ts</code></h3><p><code>main.ts</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./assets/css/reset.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">use</span>(router).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-6-修改src-App-vue"><a href="#2-6-修改src-App-vue" class="headerlink" title="2.6. 修改src\App.vue"></a>2.6. 修改<code>src\App.vue</code></h3><p><code>App.vue</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">html,</span><br><span class="line">body&#123;</span><br><span class="line">    width:100%;</span><br><span class="line">    height:100%;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="3-最後結果"><a href="#3-最後結果" class="headerlink" title="3. 最後結果"></a>3. 最後結果</h2><p>執行<code>npm run dev</code>，預期結果如下：</p>
<p><img src="https://i.imgur.com/e9tkhVr.png" alt="image-20220806221642538"></p>
]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>Vue3</tag>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3TypeScript(4) - 安裝Element-Plus</title>
    <url>/2022/08/06/2022-08-06%20Vue3TypeScript(4)%20-%20%E5%AE%89%E8%A3%9DElement-Plus/</url>
    <content><![CDATA[<h2 id="1-Element-Plus"><a href="#1-Element-Plus" class="headerlink" title="1. Element-Plus"></a>1. Element-Plus</h2><p>可參考官網的<a href="https://element-plus.gitee.io/zh-CN/guide/installation.html">安裝手冊</a></p>
<span id="more"></span>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">NPM</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install element-plus --save</span></span><br></pre></td></tr></table></figure>



<h2 id="2-快速開始-完整導入"><a href="#2-快速開始-完整導入" class="headerlink" title="2. 快速開始 - 完整導入"></a>2. 快速開始 - 完整導入</h2><p>對於網站打包大小不在乎，可以使用這個。</p>
<h3 id="2-1-main-ts修改"><a href="#2-1-main-ts修改" class="headerlink" title="2.1. main.ts修改"></a>2.1. <code>main.ts</code>修改</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; createApp &#125; from &#x27;vue&#x27;</span><br><span class="line">import ElementPlus from &#x27;element-plus&#x27;</span><br><span class="line">import &#x27;element-plus/dist/index.css&#x27;</span><br><span class="line">import App from &#x27;./App.vue&#x27;</span><br><span class="line"></span><br><span class="line">const app = createApp(App)</span><br><span class="line"></span><br><span class="line">app.use(ElementPlus)</span><br><span class="line">app.mount(&#x27;#app&#x27;)</span><br></pre></td></tr></table></figure>

<h3 id="2-2-App-vue修改"><a href="#2-2-App-vue修改" class="headerlink" title="2.2. App.vue修改"></a>2.2. <code>App.vue</code>修改</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-row class=&quot;mb-4&quot;&gt;</span><br><span class="line">    &lt;el-button&gt;Default&lt;/el-button&gt;</span><br><span class="line">    &lt;el-button type=&quot;primary&quot;&gt;Primary&lt;/el-button&gt;</span><br><span class="line">    &lt;el-button type=&quot;success&quot;&gt;Success&lt;/el-button&gt;</span><br><span class="line">    &lt;el-button type=&quot;info&quot;&gt;Info&lt;/el-button&gt;</span><br><span class="line">    &lt;el-button type=&quot;warning&quot;&gt;Warning&lt;/el-button&gt;</span><br><span class="line">    &lt;el-button type=&quot;danger&quot;&gt;Danger&lt;/el-button&gt;</span><br><span class="line">    &lt;el-button&gt;中文&lt;/el-button&gt;</span><br><span class="line">  &lt;/el-row&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">html,</span><br><span class="line">body&#123;</span><br><span class="line">    width:100%;</span><br><span class="line">    height:100%;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-3-最後結果"><a href="#2-3-最後結果" class="headerlink" title="2.3. 最後結果"></a>2.3. 最後結果</h3><p><img src="https://i.imgur.com/y1HcRO6.png" alt="image-20220806223348857"></p>
<h2 id="3-快速開始-自動導入"><a href="#3-快速開始-自動導入" class="headerlink" title="3. 快速開始 - 自動導入"></a>3. 快速開始 - 自動導入</h2><p>首先你需要安裝<code>unplugin-vue-components</code> 和 <code>unplugin-auto-import</code> 兩款套件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -D unplugin-vue-components unplugin-auto-import</span><br></pre></td></tr></table></figure>

<h3 id="3-1-修改vite-config-ts-或-webpack"><a href="#3-1-修改vite-config-ts-或-webpack" class="headerlink" title="3.1. 修改vite.config.ts 或 webpack"></a>3.1. 修改<code>vite.config.ts</code> 或 <code>webpack</code></h3><p>這次練習改<code>vite.config.ts</code>：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">AutoImport</span> <span class="keyword">from</span> <span class="string">&#x27;unplugin-auto-import/vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Components</span> <span class="keyword">from</span> <span class="string">&#x27;unplugin-vue-components/vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ElementPlusResolver</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;unplugin-vue-components/resolvers&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">vue</span>()</span><br><span class="line">    ,</span><br><span class="line">  <span class="title class_">AutoImport</span>(&#123;</span><br><span class="line">    <span class="attr">resolvers</span>: [<span class="title class_">ElementPlusResolver</span>()],</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="title class_">Components</span>(&#123;</span><br><span class="line">    <span class="attr">resolvers</span>: [<span class="title class_">ElementPlusResolver</span>()],</span><br><span class="line">  &#125;),</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="3-2-修改main-ts"><a href="#3-2-修改main-ts" class="headerlink" title="3.2. 修改main.ts"></a>3.2. 修改<code>main.ts</code></h3><p>確實將import elementplus 的程式註解：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./assets/css/reset.css&#x27;</span></span><br><span class="line"><span class="comment">//import ElementPlus from &#x27;element-plus&#x27;</span></span><br><span class="line"><span class="comment">//import &#x27;element-plus/dist/index.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">app.<span class="title function_">use</span>(router)</span><br><span class="line"><span class="comment">//app.use(ElementPlus)</span></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3-3-最後結果"><a href="#3-3-最後結果" class="headerlink" title="3.3. 最後結果"></a>3.3. 最後結果</h3><p>再跑一次 <code>npm run dev</code>驗證結果，確實有自動導入功能：</p>
<p><img src="https://i.imgur.com/RSWHGxQ.png" alt="image-20220806224608276"></p>
]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>Vue3</tag>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3TypeScript(5) - 渲染404和登入頁面</title>
    <url>/2022/08/06/2022-08-06%20Vue3TypeScript(5)%20-%20%E6%B8%B2%E6%9F%93404%E5%92%8C%E7%99%BB%E5%85%A5%E9%A0%81%E9%9D%A2/</url>
    <content><![CDATA[<h2 id="1-404-頁面實作"><a href="#1-404-頁面實作" class="headerlink" title="1. 404 頁面實作"></a>1. 404 頁面實作</h2><h3 id="1-1-新增views-404-vue"><a href="#1-1-新增views-404-vue" class="headerlink" title="1.1. 新增views\404.vue"></a>1.1. 新增<code>views\404.vue</code></h3><span id="more"></span>

<p><code>404.vue</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;not-found&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../assets/404-error.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;error&quot;</span>&gt;</span>        </span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">class</span>=<span class="string">&quot;goback&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;$router.push(&#x27;/&#x27;)&quot;</span>&gt;</span>The page you are looking for can’t be found. Go home by clicking here!<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.not-found</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">width</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">height</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">overflow</span>: hidden;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.not-found</span> <span class="selector-tag">img</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">width</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">height</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.goback</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">position</span>: absolute;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">z-index</span>: <span class="number">9999</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">top</span>: <span class="number">80%</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">left</span>: <span class="number">31%</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">48</span>, <span class="number">173</span>, <span class="number">211</span>);</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">font-size</span>: <span class="number">1.5rem</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">30px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">outline</span>: none;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">border</span>: none;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="1-2-修改router-index-ts"><a href="#1-2-修改router-index-ts" class="headerlink" title="1.2. 修改router\index.ts"></a>1.2. 修改<code>router\index.ts</code></h3><p>使用<code>path/:catchAll(.*)</code>，只要是找不到的都會指向到這</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Array</span>&lt;<span class="title class_">RouteRecordRaw</span>&gt; =[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&quot;/&quot;</span>,</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&quot;Login&quot;</span>,</span><br><span class="line">        <span class="attr">component</span>:<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../views/Login.vue&quot;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&quot;/:catchAll(.*)&quot;</span>,</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&quot;404&quot;</span>,</span><br><span class="line">        <span class="attr">component</span>:<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../views/404.vue&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="1-3-最後結果"><a href="#1-3-最後結果" class="headerlink" title="1.3. 最後結果"></a>1.3. 最後結果</h3><p><img src="https://i.imgur.com/DXFIhlk.png" alt="image-20220807005958868"></p>
<h2 id="2-登入頁實作"><a href="#2-登入頁實作" class="headerlink" title="2. 登入頁實作"></a>2. 登入頁實作</h2><p>在登入頁實作跳轉到後台介面過程，就必須與後端進行串接工作，而在現行主流前後端分離架構下，Mock Server 的準備是前端工程師開發流程非常重要的技能之一。之前就知道的Mock Server 工具是<code>JSON-Server</code>，這是一套運行在<code>node js</code>環境底下的工具。</p>
<p>今天想嘗試另一套「<code>POSTMAN</code> 」軟體，其中也支援這樣的功能，有機會再寫一篇介紹，使用方式與介紹先跳過…總之最後可以取得一個對外的URL提供使用。</p>
<h3 id="2-1-使用vite-config-ts進行代理"><a href="#2-1-使用vite-config-ts進行代理" class="headerlink" title="2.1. 使用vite.config.ts進行代理"></a>2.1. 使用<code>vite.config.ts</code>進行代理</h3><h4 id="2-1-1-修改-vite-config-ts"><a href="#2-1-1-修改-vite-config-ts" class="headerlink" title="2.1.1. 修改\vite.config.ts"></a>2.1.1. 修改<code>\vite.config.ts</code></h4><p>這邊增加了 <code>server proxy</code>，其中<code>target</code> 填上了<code>POSTMAN</code>產生的URL，<code>rewrite</code>部分也請記得改寫</p>
<p><code>vite.config.ts</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">AutoImport</span> <span class="keyword">from</span> <span class="string">&#x27;unplugin-auto-import/vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Components</span> <span class="keyword">from</span> <span class="string">&#x27;unplugin-vue-components/vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ElementPlusResolver</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;unplugin-vue-components/resolvers&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">vue</span>()</span><br><span class="line">    ,</span><br><span class="line">  <span class="title class_">AutoImport</span>(&#123;</span><br><span class="line">    <span class="attr">resolvers</span>: [<span class="title class_">ElementPlusResolver</span>()],</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="title class_">Components</span>(&#123;</span><br><span class="line">    <span class="attr">resolvers</span>: [<span class="title class_">ElementPlusResolver</span>()],</span><br><span class="line">  &#125;),</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">server</span>:&#123;</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;https://c37e652f-46f8-4272-a694-85e33c3766b1.mock.pstmn.io&#x27;</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">rewrite</span>: <span class="function">(<span class="params">path</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> path.<span class="title function_">replace</span>(<span class="string">&#x27;/api&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="2-1-2-修改src-views-Login-vue"><a href="#2-1-2-修改src-views-Login-vue" class="headerlink" title="2.1.2. 修改src\views\Login.vue"></a>2.1.2. 修改<code>src\views\Login.vue</code></h4><p>實際上登入驗證的URL路徑為<code>https://c37e652f-46f8-4272-a694-85e33c3766b1.mock.pstmn.io/login</code>，因為我們使用了代理的關係，這邊填的URL就會以<code>api</code>為開頭：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; data &#125; = <span class="keyword">await</span> axios.<span class="title function_">post</span>(<span class="string">&quot;/api/login&quot;</span>,formData);</span><br></pre></td></tr></table></figure>

<p><code>Login.vue</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">        &lt;h1&gt;英語字典管理系統&lt;/h1&gt;</span><br><span class="line">        &lt;el-divider style=&quot;border-color:black&quot; /&gt;</span><br><span class="line">        &lt;el-row class=&quot;row&quot; justify=&quot;center&quot; style=&quot;margin-bottom:1.2rem;&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;flex items-center&quot;&gt;</span><br><span class="line">                &lt;el-radio-group v-model=&quot;rdoRole&quot;&gt;</span><br><span class="line">                    &lt;el-radio label=&quot;admin&quot; size=&quot;large&quot;&gt;管理員&lt;/el-radio&gt;</span><br><span class="line">                    &lt;el-radio label=&quot;student&quot; size=&quot;large&quot;&gt;考生&lt;/el-radio&gt;</span><br><span class="line">                &lt;/el-radio-group&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/el-row&gt;</span><br><span class="line">        &lt;el-row class=&quot;row&quot; justify=&quot;center&quot;&gt;</span><br><span class="line">            &lt;el-col :span=&quot;12&quot;&gt;</span><br><span class="line">                &lt;el-form :label-position=&quot;labelPosition&quot; label-width=&quot;100px&quot; :model=&quot;formData&quot; style=&quot;max-width: 560px&quot;&gt;</span><br><span class="line">                    &lt;el-form-item label=&quot;帳號&quot;&gt;</span><br><span class="line">                        &lt;el-input v-model=&quot;formData.account&quot; placeholder=&quot;請輸入帳號&quot; /&gt;</span><br><span class="line">                    &lt;/el-form-item&gt;</span><br><span class="line">                    &lt;el-form-item label=&quot;密碼&quot;&gt;</span><br><span class="line">                        &lt;el-input v-model=&quot;formData.password&quot; type=&quot;password&quot; placeholder=&quot;請輸入密碼&quot; show-password /&gt;</span><br><span class="line">                    &lt;/el-form-item&gt;</span><br><span class="line">                    &lt;div style=&quot;text-align:center&quot;&gt;</span><br><span class="line">                        &lt;el-button @click=&quot;btnLogin&quot; type=&quot;info&quot; round</span><br><span class="line">                            style=&quot;text-align:center;width:150px;font-size:1.5rem;background: #4A4A4A;padding:1.5rem&quot;&gt;登入</span><br><span class="line">                        &lt;/el-button&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">                &lt;/el-form&gt;</span><br><span class="line">            &lt;/el-col&gt;</span><br><span class="line">        &lt;/el-row&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">import &#123; reactive, ref &#125; from &#x27;vue&#x27;</span><br><span class="line">import axios from &quot;axios&quot;;</span><br><span class="line">const rdoRole = ref(&#x27;admin&#x27;)</span><br><span class="line">const labelPosition = ref(&#x27;top&#x27;)</span><br><span class="line"></span><br><span class="line">const formData = reactive(&#123;</span><br><span class="line">    account: &#x27;&#x27;,</span><br><span class="line">    password: &#x27;&#x27;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const btnLogin = async () =&gt; &#123;</span><br><span class="line">    console.log(rdoRole.value);</span><br><span class="line">    console.log(formData);</span><br><span class="line">    </span><br><span class="line">    if (formData.account != &#x27;&#x27; &amp;&amp; formData.password != &#x27;&#x27;) &#123;</span><br><span class="line">        console.log(&#x27;ajax&#x27;);  </span><br><span class="line">        const &#123; data &#125; = await axios.post(&quot;/api/login&quot;,formData);</span><br><span class="line">        console.log(data);</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        console.log(&#x27;data 不完整&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.container &#123;</span><br><span class="line">    width: 800px;</span><br><span class="line">    margin: 10% auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">h1 &#123;</span><br><span class="line">    text-align: center;</span><br><span class="line">    font-size: 2rem;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h4 id="2-1-3-最後結果"><a href="#2-1-3-最後結果" class="headerlink" title="2.1.3. 最後結果"></a>2.1.3. 最後結果</h4><p>觀查request console log ，的確有收到server 的response data</p>
<p><img src="https://i.imgur.com/qfEsPeJ.png" alt="image-20220807114039287"></p>
<p>觀查request URL值為<code>http:127.0.0.1:5173/api/login</code>，顯然代理成功，但還是對我感到好奇…實際上是怎麼做到的？有機會回來再了解一下</p>
<p><img src="https://i.imgur.com/KJSbvUT.png" alt="image-20220807114127268"></p>
<h3 id="2-2-設定axios-defaults-baseURL"><a href="#2-2-設定axios-defaults-baseURL" class="headerlink" title="2.2. 設定axios.defaults.baseURL"></a>2.2. 設定<code>axios.defaults.baseURL</code></h3><p>這個部分其實還有很多issue，就是如何做到<code>產品階段設定</code>、<code>開發階段設定</code>吃不一樣的設定檔，這個部分後續花時間回來補一下。</p>
<p>先記錄一下簡單的版本，在有使用axios的地方，起頭就先宣告<code>baseURL</code>：</p>
<p><code>src\view\Login.vue</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">import &#123; reactive, ref &#125; from &#x27;vue&#x27;</span><br><span class="line">import axios from &quot;axios&quot;;</span><br><span class="line">axios.defaults.baseURL=&quot;https://c37e652f-46f8-4272-a694-85e33c3766b1.mock.pstmn.io&quot;;</span><br><span class="line">const rdoRole = ref(&#x27;admin&#x27;)</span><br><span class="line">const labelPosition = ref(&#x27;top&#x27;)</span><br><span class="line"></span><br><span class="line">const formData = reactive(&#123;</span><br><span class="line">    account: &#x27;&#x27;,</span><br><span class="line">    password: &#x27;&#x27;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const btnLogin = async () =&gt; &#123;</span><br><span class="line">    console.log(rdoRole.value);</span><br><span class="line">    console.log(formData);</span><br><span class="line">    </span><br><span class="line">    if (formData.account != &#x27;&#x27; &amp;&amp; formData.password != &#x27;&#x27;) &#123;</span><br><span class="line">        console.log(&#x27;ajax&#x27;);  </span><br><span class="line">        const &#123; data &#125; = await axios.post(&quot;/login&quot;,formData);</span><br><span class="line">        console.log(data);   </span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        console.log(&#x27;data 不完整&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<h2 id="3-伺服器回傳後，前端繼續驗證與處理"><a href="#3-伺服器回傳後，前端繼續驗證與處理" class="headerlink" title="3. 伺服器回傳後，前端繼續驗證與處理"></a>3. 伺服器回傳後，前端繼續驗證與處理</h2><p>接續使用代理方式進行開發，下段程式碼透過<code>localStorage</code>先儲存回傳的<code>token</code>值，<code>element plus</code> 套件的<code>ElMessage</code>元件呈現登入成功的效果(toast notification)</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">btnLogin</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(rdoRole.<span class="property">value</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(formData);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (formData.<span class="property">account</span> != <span class="string">&#x27;&#x27;</span> &amp;&amp; formData.<span class="property">password</span> != <span class="string">&#x27;&#x27;</span>) &#123;        </span><br><span class="line">        <span class="keyword">const</span> &#123; data &#125; = <span class="keyword">await</span> axios.<span class="title function_">post</span>(<span class="string">&quot;/api/login&quot;</span>,formData);</span><br><span class="line">        <span class="keyword">const</span> &#123; token &#125; = data.<span class="property">data</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data);        </span><br><span class="line">        <span class="keyword">if</span>(data.<span class="property">status</span> == <span class="string">&#x27;success&#x27;</span>)</span><br><span class="line">        &#123;            </span><br><span class="line">            <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;token&quot;</span>,token);</span><br><span class="line">            <span class="comment">// @ts-ignore</span></span><br><span class="line">            <span class="title class_">ElMessage</span>(&#123;</span><br><span class="line">                <span class="attr">showClose</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">message</span>: <span class="string">&#x27;登入成功.&#x27;</span>,</span><br><span class="line">                <span class="attr">type</span>: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">            &#125;);</span><br><span class="line">            router.<span class="title function_">push</span>(<span class="string">&#x27;/Main&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&#x27;帳密錯誤&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;data 不完整&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><img src="https://i.imgur.com/MSZ8oDv.png" alt="image-20220807201545862"></p>
<p>其中有一個<code>ts-ignore</code>要特別說明，因為稍早我們使用的是<code>自動載入</code>的方式，所以在開發階段的智能提示，會誤以為沒有進行import動作。要消除這個錯誤提示，我們可以在<code>ElMessage</code>上方加上<code>ts-ignore</code>寫法，錯誤就消失囉！</p>
<h2 id="4-參考資料"><a href="#4-參考資料" class="headerlink" title="4. 參考資料"></a>4. 參考資料</h2><ul>
<li><a href="https://blog.csdn.net/AIfurture/article/details/108616830?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1-108616830-blog-89886735.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1-108616830-blog-89886735.pc_relevant_default&utm_relevant_index=2">vue中使用axios给生产环境和开发环境配置不同的baseUrl</a></li>
<li><a href="https://blog.csdn.net/weixin_41023528/article/details/89886735">axios.defaults.baseURL的三种配置方法</a></li>
</ul>
]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>Vue3</tag>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3TypeScript(6) - 實現路由守衛</title>
    <url>/2022/08/06/2022-08-06%20Vue3TypeScript(6)%20-%20%E5%AF%A6%E7%8F%BE%E8%B7%AF%E7%94%B1%E5%AE%88%E8%A1%9B/</url>
    <content><![CDATA[<h2 id="1-實現路由守衛"><a href="#1-實現路由守衛" class="headerlink" title="1. 實現路由守衛"></a>1. 實現路由守衛</h2><p>主要的設計思維是在router的流程中進行驗證，我們來看如何修正<code>src\router\index.ts</code>檔案：</p>
<span id="more"></span>

<p><code>index.ts</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">isLogin</span>:<span class="built_in">boolean</span> = <span class="variable language_">localStorage</span>.<span class="property">token</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// console.log(`isLogin:$&#123;isLogin&#125;`);    </span></span><br><span class="line">    <span class="comment">// console.log(to.path);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(to.<span class="property">path</span> ===<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    &#123;        </span><br><span class="line">        <span class="title function_">next</span>(<span class="string">&#x27;/login&#x27;</span>);        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(to.<span class="property">path</span> === <span class="string">&#x27;/login&#x27;</span> )&#123;                </span><br><span class="line">        <span class="title function_">next</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        </span><br><span class="line">        isLogin ? <span class="title function_">next</span>() : <span class="title function_">next</span>(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="2-完整程式碼"><a href="#2-完整程式碼" class="headerlink" title="2. 完整程式碼"></a>2. 完整程式碼</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createRouter,createWebHistory,<span class="title class_">RouteRecordRaw</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Array</span>&lt;<span class="title class_">RouteRecordRaw</span>&gt; =[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&quot;/&quot;</span>,</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&quot;Login&quot;</span>,</span><br><span class="line">        <span class="attr">component</span>:<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../views/Login.vue&quot;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&quot;/login&quot;</span>,</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&quot;Login&quot;</span>,</span><br><span class="line">        <span class="attr">component</span>:<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../views/Login.vue&quot;</span>)</span><br><span class="line">    &#125;,    </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&quot;/main&quot;</span>,</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&quot;Main&quot;</span>,</span><br><span class="line">        <span class="attr">component</span>:<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../views/Main.vue&quot;</span>)</span><br><span class="line">    &#125;,    </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&quot;/:catchAll(.*)&quot;</span>,</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&quot;404&quot;</span>,</span><br><span class="line">        <span class="attr">component</span>:<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../views/404.vue&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(),</span><br><span class="line">        routes</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">isLogin</span>:<span class="built_in">boolean</span> = <span class="variable language_">localStorage</span>.<span class="property">token</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// console.log(`isLogin:$&#123;isLogin&#125;`);    </span></span><br><span class="line">    <span class="comment">// console.log(to.path);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(to.<span class="property">path</span> ===<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    &#123;        </span><br><span class="line">        <span class="title function_">next</span>(<span class="string">&#x27;/login&#x27;</span>);        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(to.<span class="property">path</span> === <span class="string">&#x27;/login&#x27;</span> )&#123;                </span><br><span class="line">        <span class="title function_">next</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        </span><br><span class="line">        isLogin ? <span class="title function_">next</span>() : <span class="title function_">next</span>(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>Vue3</tag>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>EFCore讀寫分離</title>
    <url>/2023/10/11/2023-12-12%20EFCore%E8%AE%80%E5%AF%AB%E5%88%86%E9%9B%A2/</url>
    <content><![CDATA[<h2 id="1-讀寫分離示意圖"><a href="#1-讀寫分離示意圖" class="headerlink" title="1. 讀寫分離示意圖"></a>1. 讀寫分離示意圖</h2><p><img src="https://i.imgur.com/AswBDyN.png" alt="image-20231213101632763"></p>
<p><code>發佈伺服器</code>的實作可以透過<code>SQLSERVER</code>的<code>複寫</code>功能，分別設定<code>發佈</code>與<code>訂閱</code>，資料庫複寫設定有興趣可以參考相關連結。以下針對程式碼如何實踐讀寫分離，做個紀錄筆記。</p>
<span id="more"></span>



<h2 id="2-資料準備"><a href="#2-資料準備" class="headerlink" title="2. 資料準備"></a>2. 資料準備</h2><h3 id="2-1-DB"><a href="#2-1-DB" class="headerlink" title="2.1. DB"></a>2.1. DB</h3><p>分別建立<code>MyDB_Master</code>、<code>MyDB_Slave01</code>、<code>MyDB_Slave02</code>，共三個資料庫。</p>
<ul>
<li><p><code>MyDB_Master</code>扮演<code>寫入</code></p>
</li>
<li><p>、<code>MyDB_Slave01</code>、<code>MyDB_Slave02</code>扮演<code>讀取</code>。</p>
</li>
</ul>
<p>完成結果如下：</p>
<p><img src="https://i.imgur.com/cQzoEfS.png" alt="image-20231213102554874"></p>
<h3 id="2-2-SQL"><a href="#2-2-SQL" class="headerlink" title="2.2. SQL"></a>2.2. SQL</h3><ol>
<li><p>三個資料庫建立以下資料表</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [dbo].[SysUser](</span><br><span class="line">    [Id] [<span class="type">int</span>] <span class="keyword">IDENTITY</span>(<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">FOR</span> REPLICATION <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    [UserName] [<span class="type">varchar</span>](<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    [Account] [<span class="type">varchar</span>](<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    [Password] [<span class="type">varchar</span>](<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    [Phone] [<span class="type">varchar</span>](<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    [CreateTime] [datetime] <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"> <span class="keyword">CONSTRAINT</span> [PK_User] <span class="keyword">PRIMARY</span> KEY CLUSTERED </span><br><span class="line">(</span><br><span class="line">    [Id] <span class="keyword">ASC</span></span><br><span class="line">)<span class="keyword">WITH</span> (PAD_INDEX <span class="operator">=</span> OFF, STATISTICS_NORECOMPUTE <span class="operator">=</span> OFF, IGNORE_DUP_KEY <span class="operator">=</span> OFF, ALLOW_ROW_LOCKS <span class="operator">=</span> <span class="keyword">ON</span>, ALLOW_PAGE_LOCKS <span class="operator">=</span> <span class="keyword">ON</span>) <span class="keyword">ON</span> [<span class="keyword">PRIMARY</span>]</span><br><span class="line">) <span class="keyword">ON</span> [<span class="keyword">PRIMARY</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p>新增資料</p>
<p> 使用<code>編輯前200列資料</code>功能，再COPY PASTE以下資料即可。</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#MyDB_Master</span><br><span class="line"><span class="number">1</span>	主<span class="operator">-</span>狗狗<span class="number">01</span>	gougou	eae8da4d<span class="number">-5</span>cf2<span class="number">-4</span>bbc<span class="operator">-</span>ab2b<span class="number">-217</span>a0be96e59	<span class="number">13345435554</span>	<span class="number">2023</span><span class="number">-12</span><span class="number">-13</span> <span class="number">09</span>:<span class="number">08</span>:<span class="number">22.030</span></span><br><span class="line"><span class="number">2</span>	主<span class="operator">-</span>狗狗<span class="number">02</span>	gougou	<span class="number">2</span>d989e51<span class="number">-961</span>a<span class="number">-440</span>b<span class="number">-9528</span><span class="number">-90362</span>ed79d0a	<span class="number">13345435554</span>	<span class="number">2023</span><span class="number">-12</span><span class="number">-13</span> <span class="number">09</span>:<span class="number">08</span>:<span class="number">31.793</span></span><br><span class="line">#MyDB_Slave01</span><br><span class="line"><span class="number">1</span>	從<span class="number">01</span><span class="operator">-</span>狗狗<span class="number">01</span>	gougou	efae76c8<span class="number">-271</span>a<span class="number">-4</span>bbe<span class="operator">-</span>b0aa<span class="number">-512163</span>d1ccaf	<span class="number">13345435554</span>	<span class="number">2023</span><span class="number">-12</span><span class="number">-13</span> <span class="number">09</span>:<span class="number">10</span>:<span class="number">02.887</span></span><br><span class="line">#MyDB_Slave02</span><br><span class="line"><span class="number">1</span>	從<span class="number">02</span><span class="operator">-</span>狗狗<span class="number">01</span>	gougou	efae76c8<span class="number">-271</span>a<span class="number">-4</span>bbe<span class="operator">-</span>b0aa<span class="number">-512163</span>d1ccaf	<span class="number">13345435554</span>	<span class="number">2023</span><span class="number">-12</span><span class="number">-13</span> <span class="number">09</span>:<span class="number">10</span>:<span class="number">02.887</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="3-專案實作"><a href="#3-專案實作" class="headerlink" title="3. 專案實作"></a>3. 專案實作</h2><h3 id="3-1-專案套件"><a href="#3-1-專案套件" class="headerlink" title="3.1. 專案套件"></a>3.1. 專案套件</h3><p><code>EFCoreReadWriteSeparate.csproj</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Project</span> <span class="attr">Sdk</span>=<span class="string">&quot;Microsoft.NET.Sdk.Web&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TargetFramework</span>&gt;</span>net6.0<span class="tag">&lt;/<span class="name">TargetFramework</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Nullable</span>&gt;</span>enable<span class="tag">&lt;/<span class="name">Nullable</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImplicitUsings</span>&gt;</span>enable<span class="tag">&lt;/<span class="name">ImplicitUsings</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ItemGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">&quot;Microsoft.EntityFrameworkCore&quot;</span> <span class="attr">Version</span>=<span class="string">&quot;6.0.25&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">&quot;Microsoft.EntityFrameworkCore.SqlServer&quot;</span> <span class="attr">Version</span>=<span class="string">&quot;6.0.7&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">&quot;Swashbuckle.AspNetCore&quot;</span> <span class="attr">Version</span>=<span class="string">&quot;6.5.0&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ItemGroup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-1-1-設定-DB-Config"><a href="#3-1-1-設定-DB-Config" class="headerlink" title="3.1.1. 設定 DB  Config"></a>3.1.1. 設定 DB  Config</h4><p><code>appsettings.json</code></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;ConnectionStrings&quot;</span>: &#123;</span><br><span class="line">  <span class="comment">//寫</span></span><br><span class="line">  <span class="string">&quot;WriteConnection&quot;</span>: <span class="string">&quot;Server=KITE;Database=MyDB_Master;Trusted_Connection=True;MultipleActiveResultSets=true; TrustServerCertificate=true&quot;</span>,</span><br><span class="line">  <span class="comment">//讀</span></span><br><span class="line">  <span class="string">&quot;ReadConnectionList&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;Server=KITE;Database=MyDB_Slave01;Trusted_Connection=True;MultipleActiveResultSets=true; TrustServerCertificate=true&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Server=KITE;Database=MyDB_Slave02;Trusted_Connection=True;MultipleActiveResultSets=true; TrustServerCertificate=true&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-1-2-讀取-DB-Config"><a href="#3-1-2-讀取-DB-Config" class="headerlink" title="3.1.2. 讀取 DB Config"></a>3.1.2. 讀取 DB Config</h4><p><code>Program.cs</code></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">builder.Services.Configure&lt;DBConnectionOption&gt;(builder.Configuration.GetSection(<span class="string">&quot;ConnectionStrings&quot;</span>));</span><br><span class="line">builder.Services.AddTransient&lt;DbContext, MyDBContext&gt;();</span><br></pre></td></tr></table></figure>

<h4 id="3-1-3-擴充DbContext方法"><a href="#3-1-3-擴充DbContext方法" class="headerlink" title="3.1.3. 擴充DbContext方法"></a>3.1.3. 擴充DbContext方法</h4><p><code>DBModel\DbContextExtend.cs</code></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.EntityFrameworkCore;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">EFCoreReadWriteSeparate.DBModel</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">DbContextExtend</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DbContext <span class="title">ToRead</span>(<span class="params"><span class="keyword">this</span> DbContext dbContext</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (dbContext <span class="keyword">is</span> MyDBContext)</span><br><span class="line">                <span class="keyword">return</span> ((MyDBContext)dbContext).ToRead();</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Exception();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DbContext <span class="title">ToWrite</span>(<span class="params"><span class="keyword">this</span> DbContext dbContext</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (dbContext <span class="keyword">is</span> MyDBContext)</span><br><span class="line">                <span class="keyword">return</span> ((MyDBContext)dbContext).ToWrite();</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Exception();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-1-4-實作DbContext方法"><a href="#3-1-4-實作DbContext方法" class="headerlink" title="3.1.4. 實作DbContext方法"></a>3.1.4. 實作DbContext方法</h4><p><code>DBModel\MyDBContext.cs</code></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> EFCoreReadWriteSeparate.Models;</span><br><span class="line"><span class="keyword">using</span> Microsoft.EntityFrameworkCore;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Options;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">EFCoreReadWriteSeparate.DBModel</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyDBContext</span> : <span class="title">DbContext</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> DBConnectionOption _readAndWrite = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">string</span> conn = <span class="built_in">string</span>.Empty;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyDBContext</span>(<span class="params">IOptionsMonitor&lt;DBConnectionOption&gt; options</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>._readAndWrite = options.CurrentValue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">int</span> _iSeed = <span class="number">0</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> DbContext <span class="title">ToRead</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//隨機</span></span><br><span class="line">            <span class="comment">//int num = new Random(_iSeed++).Next(0, this._readAndWrite.ReadConnectionList.Count);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//輪詢</span></span><br><span class="line">            <span class="keyword">this</span>.Database.GetDbConnection().ConnectionString =</span><br><span class="line">                <span class="keyword">this</span>._readAndWrite.ReadConnectionList[_iSeed++ %</span><br><span class="line">                <span class="keyword">this</span>._readAndWrite.ReadConnectionList.Count];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> DbContext <span class="title">ToWrite</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.Database.GetDbConnection().ConnectionString =</span><br><span class="line">                <span class="keyword">this</span>._readAndWrite.WriteConnection;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> DbSet&lt;SysUser&gt; SysUser &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnConfiguring</span>(<span class="params">DbContextOptionsBuilder optionsBuilder</span>)</span></span><br><span class="line">        &#123;               </span><br><span class="line">            optionsBuilder.UseSqlServer(<span class="keyword">this</span>._readAndWrite.WriteConnection);</span><br><span class="line">         </span><br><span class="line">            <span class="meta">#<span class="keyword">region</span> Print SQL語句</span></span><br><span class="line">            optionsBuilder.UseLoggerFactory(LoggerFactory.Create(builder =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                builder.AddConsole();</span><br><span class="line">            &#125;));</span><br><span class="line">            <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line">            </span><br><span class="line">        &#125;       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-1-5-建立Model-Class"><a href="#3-1-5-建立Model-Class" class="headerlink" title="3.1.5. 建立Model Class"></a>3.1.5. 建立Model Class</h4><p><code>DBModel\SysUser.cs</code></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">EFCoreReadWriteSeparate.DBModel</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SysUser</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> UserName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Account &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Password &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Phone &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> DateTime CreateTime &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-1-6-API測試"><a href="#3-1-6-API測試" class="headerlink" title="3.1.6. API測試"></a>3.1.6. API測試</h4><p><code>WeatherForecastController.cs</code></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">[<span class="meta">HttpPost(Name = <span class="string">&quot;PostWeatherForecast&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> IEnumerable&lt;SysUser&gt; <span class="title">Post</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//新增-------------------</span></span><br><span class="line">    SysUser user = <span class="keyword">new</span> SysUser()</span><br><span class="line">    &#123;</span><br><span class="line">        UserName = <span class="string">&quot;主-狗狗02&quot;</span>,</span><br><span class="line">        Account = <span class="string">&quot;gougou&quot;</span>,</span><br><span class="line">        Password = Guid.NewGuid().ToString(),</span><br><span class="line">        Phone = <span class="string">&quot;13345435554&quot;</span>,</span><br><span class="line">        CreateTime = DateTime.Now</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;新增,目前連結字串為:<span class="subst">&#123;_dbContext.Database.GetDbConnection().ConnectionString&#125;</span>&quot;</span>);</span><br><span class="line">    _dbContext.ToWrite().Add(user);</span><br><span class="line">    _dbContext.SaveChanges();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//只讀--------------------------------</span></span><br><span class="line">    <span class="keyword">var</span> users = _dbContext.ToRead().Set&lt;SysUser&gt;().ToList();</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;讀取SysUser,數量為:<span class="subst">&#123;users.Count&#125;</span>,目前連結字串為:<span class="subst">&#123;_dbContext.Database.GetDbConnection().ConnectionString&#125;</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> users;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-1-7-測試結果"><a href="#3-1-7-測試結果" class="headerlink" title="3.1.7. 測試結果"></a>3.1.7. 測試結果</h4><p>第一次執行，讀取時，取得Slave</p>
<p><img src="https://i.imgur.com/zTNzoxP.png" alt="image-20231213131525781"></p>
<p>觀查command line</p>
<p><img src="https://i.imgur.com/RKOC4AG.png" alt="image-20231213131825336"></p>
<p>第二次執行</p>
<p><img src="https://i.imgur.com/K3pds2U.png" alt="image-20231213131939848"></p>
<p>觀查command line</p>
<p><img src="https://i.imgur.com/Nj0D80Q.png" alt="image-20231213132046360"></p>
<h2 id="4-參考資料"><a href="#4-參考資料" class="headerlink" title="4. 參考資料"></a>4. 參考資料</h2><ul>
<li><a href="https://www.cnblogs.com/wei325/p/16516014.html">SQL Server、MySQL主从搭建，EF Core读写分离代码实现</a></li>
<li><a href="https://blog.csdn.net/KingCruel/article/details/123451714">EFCore 读写分离</a><ul>
<li>這篇實作輪詢作法</li>
</ul>
</li>
<li><a href="https://www.zendei.com/article/77238.html">EF core 實現讀寫分離解決方案</a></li>
<li><a href="https://juejin.cn/post/7199131771668234296">一款针对EF Core轻量级分表分库、读写分离的开源项目</a><ul>
<li>這篇很值得之後研究，其中有實踐分表、分庫、讀寫分離等作法</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>NET CORE</tag>
        <tag>讀寫分離</tag>
        <tag>高併發</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis學習筆記</title>
    <url>/2023/10/16/2023-12-16%20Redis%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/</url>
    <content><![CDATA[<h2 id="1-Redis簡介"><a href="#1-Redis簡介" class="headerlink" title="1. Redis簡介"></a>1. Redis簡介</h2><ul>
<li><p>Remote dictionary server</p>
</li>
<li><p>可以用於數據庫、緩存、消息隊列等各種場景</p>
</li>
<li><p>最熱門NoSQL數據庫之一</p>
</li>
<li><p>基於內存數據庫(記憶體效能&gt;IO效能，也就是Redis&gt;MySQL效能)</p>
</li>
<li><p>GitHub、Twitter、Stackoverflow、百度都在使用</p>
</li>
</ul>
<span id="more"></span>

<h2 id="2-Redis特點"><a href="#2-Redis特點" class="headerlink" title="2. Redis特點"></a>2. Redis特點</h2><ul>
<li><p>高性能Key-Value</p>
</li>
<li><p>多種數據結構，單鍵值對最大支持512M大小的數據</p>
</li>
<li><p>豐富的功能</p>
</li>
<li><p>支持數據持久化、主從複製、哨兵模式等高可用分佈特性</p>
</li>
</ul>
<h3 id="2-1-數據類型"><a href="#2-1-數據類型" class="headerlink" title="2.1. 數據類型"></a>2.1. 數據類型</h3><p>5種基本數據類型</p>
<ul>
<li>字串 String</li>
<li>列表 List</li>
<li>集合 Set</li>
<li>有序集合 SortedSet</li>
<li>哈希 Hash</li>
</ul>
<p><img src="https://i.imgur.com/lITTqKX.png" alt="image-20231214102318825"></p>
<p>高級數據類型</p>
<ul>
<li>消息隊列 Stream</li>
<li>地理空間 Geospatial</li>
<li>HyperLogLog</li>
<li>位圖 Bitmap</li>
<li>位域 Bitfield</li>
</ul>
<h3 id="2-2-使用方式"><a href="#2-2-使用方式" class="headerlink" title="2.2. 使用方式"></a>2.2. 使用方式</h3><p>主要三種類型</p>
<ul>
<li><p>CLI</p>
<ul>
<li>redis-cli</li>
</ul>
</li>
<li><p>API</p>
<ul>
<li>簡單來說就是用程式碼(python、java)的方式進行使用</li>
</ul>
</li>
<li><p>GUI</p>
<ul>
<li>another-redis-desktop-manager</li>
</ul>
</li>
</ul>
<h2 id="3-環境安裝"><a href="#3-環境安裝" class="headerlink" title="3. 環境安裝"></a>3. 環境安裝</h2><p>下載docker image</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull redis</span><br></pre></td></tr></table></figure>

<p>container build</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --name redis-lab -p 6379:6379 -d redis</span><br></pre></td></tr></table></figure>

<h2 id="4-Redis-GUI-工具"><a href="#4-Redis-GUI-工具" class="headerlink" title="4. Redis GUI 工具"></a>4. Redis GUI 工具</h2><h3 id="4-1-這次透過指令方式安裝"><a href="#4-1-這次透過指令方式安裝" class="headerlink" title="4.1. 這次透過指令方式安裝"></a>4.1. 這次透過指令方式安裝</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">choco install another-redis-desktop-manager</span><br></pre></td></tr></table></figure>

<h3 id="4-2-執行結果"><a href="#4-2-執行結果" class="headerlink" title="4.2. 執行結果"></a>4.2. 執行結果</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Windows\System32&gt;choco install another-redis-desktop-manager</span><br><span class="line">Chocolatey v0.11.1</span><br><span class="line">Installing the following packages:</span><br><span class="line">another-redis-desktop-manager</span><br><span class="line">By installing, you accept licenses <span class="keyword">for</span> the packages.</span><br><span class="line">Progress: Downloading another-redis-desktop-manager 1.6.1... 100%</span><br></pre></td></tr></table></figure>

<h3 id="4-3-確認docker-id"><a href="#4-3-確認docker-id" class="headerlink" title="4.3. 確認docker id"></a>4.3. 確認docker id</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Windows\System32&gt;docker ps</span><br><span class="line">CONTAINER ID   IMAGE                      COMMAND                  CREATED          STATUS                 PORTS                            NAMES</span><br><span class="line">65b2b326dc9c   redis                      &quot;docker-entrypoint.s…&quot;   12 minutes ago   Up 12 minutes          0.0.0.0:6379-&gt;6379/tcp           redis-lab</span><br></pre></td></tr></table></figure>

<h3 id="4-4-進入docker操作redis"><a href="#4-4-進入docker操作redis" class="headerlink" title="4.4. 進入docker操作redis"></a>4.4. 進入docker操作redis</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Windows\System32&gt;docker exec -it 65b2 bash</span><br><span class="line">root@65b2b326dc9c:/data# redis-cli</span><br><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br><span class="line">127.0.0.1:6379&gt; set test &quot;hello world&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get test</span><br><span class="line">&quot;hello world&quot;</span><br></pre></td></tr></table></figure>

<h3 id="4-5-透過GUI工具操作"><a href="#4-5-透過GUI工具操作" class="headerlink" title="4.5. 透過GUI工具操作"></a>4.5. 透過GUI工具操作</h3><p><img src="https://i.imgur.com/J0Uw01L.png" alt="image-20231211164508060"></p>
<h2 id="5-String-字串"><a href="#5-String-字串" class="headerlink" title="5. String 字串"></a>5. String 字串</h2><h3 id="5-1-簡介"><a href="#5-1-簡介" class="headerlink" title="5.1. 簡介"></a>5.1. 簡介</h3><ol>
<li><strong>Key-Value 存儲</strong>: Redis 的 STRING 是一個 key-value 存儲結構，每個 STRING 都有一個唯一的 key 用來標識。</li>
<li><strong>二進制安全</strong>: Redis 的 STRING 不僅可以存儲文本字符串，還可以存儲任何二進制數據，這使得它非常適合作為緩存系統。</li>
<li><strong>操作豐富</strong>: Redis 提供了豐富的 STRING 操作命令，包括設置、獲取、刪除、追加等，使得對字符串的操作非常靈活。</li>
</ol>
<h3 id="5-2-使用場景"><a href="#5-2-使用場景" class="headerlink" title="5.2. 使用場景"></a>5.2. 使用場景</h3><h4 id="5-2-1-快取-Caching"><a href="#5-2-1-快取-Caching" class="headerlink" title="5.2.1. 快取 (Caching)"></a>5.2.1. 快取 (Caching)</h4><p>作為一個支持高性能的快取系統，Redis 的 STRING 可以用來存儲經常被訪問的數據，例如網頁內容、查詢結果，以減輕後端數據庫的壓力。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 範例：將結果存入 Redis 快取</span></span><br><span class="line">SET user:1234:profile <span class="string">&quot;&#123;&#x27;id&#x27;:1234, &#x27;name&#x27;:&#x27;John Doe&#x27;, &#x27;age&#x27;:30&#125;&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="5-2-2-計數器-Counters"><a href="#5-2-2-計數器-Counters" class="headerlink" title="5.2.2. 計數器 (Counters)"></a>5.2.2. 計數器 (Counters)</h4><p>可以使用 Redis 的自增（INCR）和自減（DECR）操作，實現計數器的功能，適用於需要跟蹤計數的場景，比如網站訪問次數、商品庫存等。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 範例：增加訪問次數</span></span><br><span class="line">INCR website:visit:count</span><br></pre></td></tr></table></figure>

<h4 id="5-2-3-會話管理-Session-Management"><a href="#5-2-3-會話管理-Session-Management" class="headerlink" title="5.2.3. 會話管理 (Session Management)"></a>5.2.3. 會話管理 (Session Management)</h4><p>存儲和管理用戶的會話數據，比如登錄信息、訪問權限等。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 範例：存儲用戶會話信息</span></span><br><span class="line">SET session:userid:1234 <span class="string">&quot;&#123;&#x27;token&#x27;:&#x27;abc123&#x27;, &#x27;expires&#x27;:&#x27;2023-12-31&#x27;&#125;&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="5-3-常用指令"><a href="#5-3-常用指令" class="headerlink" title="5.3. 常用指令"></a>5.3. 常用指令</h3><h4 id="5-3-1-SET-設定key"><a href="#5-3-1-SET-設定key" class="headerlink" title="5.3.1. SET - 設定key"></a>5.3.1. SET - 設定key</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> kite <span class="built_in">nice</span></span><br><span class="line">OK</span><br></pre></td></tr></table></figure>

<h4 id="5-3-2-GET-讀取key"><a href="#5-3-2-GET-讀取key" class="headerlink" title="5.3.2. GET - 讀取key"></a>5.3.2. GET - 讀取key</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get kite</span><br><span class="line"><span class="string">&quot;nice&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="5-3-3-key大小寫有分"><a href="#5-3-3-key大小寫有分" class="headerlink" title="5.3.3. key大小寫有分"></a>5.3.3. key大小寫有分</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> Kite Nice</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get Kite</span><br><span class="line"><span class="string">&quot;Nice&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="5-3-4-DEL-刪除key"><a href="#5-3-4-DEL-刪除key" class="headerlink" title="5.3.4. DEL - 刪除key"></a>5.3.4. DEL - 刪除key</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; del name</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure>

<h4 id="5-3-5-EXISTS-查詢key"><a href="#5-3-5-EXISTS-查詢key" class="headerlink" title="5.3.5. EXISTS - 查詢key"></a>5.3.5. EXISTS - 查詢key</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; exists name</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; exists age</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure>

<h4 id="5-3-6-KEYS-萬用字查詢"><a href="#5-3-6-KEYS-萬用字查詢" class="headerlink" title="5.3.6. KEYS - 萬用字查詢"></a>5.3.6. KEYS - 萬用字查詢</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;backup4&quot;</span></span><br><span class="line">2) <span class="string">&quot;backup3&quot;</span></span><br><span class="line">3) <span class="string">&quot;age&quot;</span></span><br><span class="line">4) <span class="string">&quot;backup1&quot;</span></span><br><span class="line">5) <span class="string">&quot;backup2&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; keys ba*</span><br><span class="line">1) <span class="string">&quot;backup4&quot;</span></span><br><span class="line">2) <span class="string">&quot;backup3&quot;</span></span><br><span class="line">3) <span class="string">&quot;backup1&quot;</span></span><br><span class="line">4) <span class="string">&quot;backup2&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="5-3-7-FLUSHALL-刪除所有key"><a href="#5-3-7-FLUSHALL-刪除所有key" class="headerlink" title="5.3.7. FLUSHALL - 刪除所有key"></a>5.3.7. FLUSHALL - 刪除所有key</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; flushall</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">(empty array)</span><br></pre></td></tr></table></figure>

<h4 id="5-3-8-中文顯示說明"><a href="#5-3-8-中文顯示說明" class="headerlink" title="5.3.8. 中文顯示說明"></a>5.3.8. 中文顯示說明</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name <span class="string">&quot;悠風&quot;</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line"><span class="string">&quot;\xe6\x82\xa0\xe9\xa2\xa8&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="5-3-9-redis-cli-–raw-正常顯示中文方法"><a href="#5-3-9-redis-cli-–raw-正常顯示中文方法" class="headerlink" title="5.3.9. redis-cli –raw  正常顯示中文方法"></a>5.3.9. redis-cli –raw  正常顯示中文方法</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; quit</span><br><span class="line"><span class="comment"># redis-cli --raw</span></span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line">悠風</span><br></pre></td></tr></table></figure>

<h4 id="5-3-10-EXPIRE-設定過期"><a href="#5-3-10-EXPIRE-設定過期" class="headerlink" title="5.3.10. EXPIRE - 設定過期"></a>5.3.10. EXPIRE - 設定過期</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; expire name 10</span><br></pre></td></tr></table></figure>

<h4 id="5-3-11-TTL-查詢過期"><a href="#5-3-11-TTL-查詢過期" class="headerlink" title="5.3.11. TTL - 查詢過期"></a>5.3.11. TTL - 查詢過期</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ttl name</span><br><span class="line">6</span><br><span class="line">127.0.0.1:6379&gt; ttl name</span><br><span class="line">4</span><br><span class="line">127.0.0.1:6379&gt; ttl name</span><br><span class="line">2</span><br><span class="line">127.0.0.1:6379&gt; ttl name</span><br><span class="line">-2</span><br><span class="line"></span><br><span class="line"><span class="comment">#過期後查詢結果會是空白</span></span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line"></span><br><span class="line"><span class="comment">#過期後查詢結果會是空白</span></span><br><span class="line">127.0.0.1:6379&gt; keys name</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="5-3-12-SETEX-設定key-過期"><a href="#5-3-12-SETEX-設定key-過期" class="headerlink" title="5.3.12. SETEX - 設定key + 過期"></a>5.3.12. SETEX - 設定key + 過期</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; setex name 5 悠風</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; ttl name</span><br><span class="line">1</span><br><span class="line">127.0.0.1:6379&gt; ttl name</span><br><span class="line">-2</span><br></pre></td></tr></table></figure>

<h4 id="5-3-13-SETNX-該值不存在則建立"><a href="#5-3-13-SETNX-該值不存在則建立" class="headerlink" title="5.3.13. SETNX - 該值不存在則建立"></a>5.3.13. SETNX - 該值不存在則建立</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; setnx name kite</span><br><span class="line">1</span><br></pre></td></tr></table></figure>

<h2 id="6-LIST-列表"><a href="#6-LIST-列表" class="headerlink" title="6. LIST 列表"></a>6. LIST 列表</h2><h3 id="6-1-簡介"><a href="#6-1-簡介" class="headerlink" title="6.1. 簡介"></a>6.1. 簡介</h3><p>在 Redis 中，LIST 是一種有序、可重複的資料結構，它允許存儲一個有序的元素列表。每個元素都有一個索引，從 0 開始。LIST 提供了豐富的操作命令，可以在列表的頭部或尾部執行插入、刪除等操作，同時支持範圍查詢和修剪。可實現最簡單的先進先出隊列也就是結合<code>LPUSH</code>(左進) + <code>RPOP</code>(右出)</p>
<p>LIST 資料結構的特點：</p>
<ol>
<li><strong>有序性</strong>: 元素在列表中的存儲順序是有序的，可以按照索引進行訪問。</li>
<li><strong>重複元素</strong>: 元素可以重複存在於列表中，這使得 LIST 可以用來表示多個相同類型的元素。</li>
<li><strong>支持隊列和堆疊操作</strong>: LIST 可以被當作隊列（先進先出，FIFO）或堆疊（後進先出，LIFO）來使用。</li>
</ol>
<h3 id="6-2-使用場景"><a href="#6-2-使用場景" class="headerlink" title="6.2. 使用場景"></a>6.2. 使用場景</h3><h4 id="6-2-1-日誌記錄"><a href="#6-2-1-日誌記錄" class="headerlink" title="6.2.1. 日誌記錄"></a>6.2.1. 日誌記錄</h4><p>隊列的特點是先進先出,後進後出.我們可以使用lpush 命令從隊列的左邊放入,然後利用rpop命令從右邊取出,這樣就模擬實現了隊列.可以用來記錄日誌等</p>
<h4 id="6-2-2-抽獎-搶票"><a href="#6-2-2-抽獎-搶票" class="headerlink" title="6.2.2. 抽獎,搶票"></a>6.2.2. 抽獎,搶票</h4><p>list 是線程安全的,所有的pop操作是原子性的,適用於抽獎,搶票等場景,用來防止超賣問題.這裡重點解釋一下抽獎:主要是分為三步</p>
<ol>
<li>全部獎品打散放入list中</li>
<li>呼叫pop指令從list中取出</li>
<li>將中獎記錄寫入資料庫</li>
</ol>
<h4 id="6-2-3-流量消峰"><a href="#6-2-3-流量消峰" class="headerlink" title="6.2.3. 流量消峰"></a>6.2.3. 流量消峰</h4><p>將所有的請求全部放到list中,然後開啟多個線程來處理後續請求,減輕伺服器壓力,用來處理一些高並發場景.</p>
<h3 id="6-3-常用指令"><a href="#6-3-常用指令" class="headerlink" title="6.3. 常用指令"></a>6.3. 常用指令</h3><h4 id="6-3-1-LPUSH"><a href="#6-3-1-LPUSH" class="headerlink" title="6.3.1. LPUSH"></a>6.3.1. LPUSH</h4><p>第一次</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; LPUSH letter a</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"></span><br><span class="line">&gt; LRANGE letter 0 -1</span><br><span class="line">1) <span class="string">&quot;a&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/AJKwCUc.png" alt="image-20231213213532063"></p>
<p>第二次</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; LPUSH letter b</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"></span><br><span class="line">&gt; LRANGE letter 0 -1</span><br><span class="line">1) <span class="string">&quot;b&quot;</span></span><br><span class="line">2) <span class="string">&quot;a&quot;</span></span><br></pre></td></tr></table></figure>



<p><img src="https://i.imgur.com/SxJcfz8.png" alt="image-20231213213614346"></p>
<p>第三次</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; LPUSH letter c d e</span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br></pre></td></tr></table></figure>



<p><img src="https://i.imgur.com/JI8OdHv.png" alt="image-20231213213634536"></p>
<h4 id="6-3-2-LRANGE"><a href="#6-3-2-LRANGE" class="headerlink" title="6.3.2. LRANGE"></a>6.3.2. LRANGE</h4><p>-1 代表全部</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; LRANGE letter 0 -1</span><br><span class="line">1) <span class="string">&quot;e&quot;</span></span><br><span class="line">2) <span class="string">&quot;d&quot;</span></span><br><span class="line">3) <span class="string">&quot;c&quot;</span></span><br><span class="line">4) <span class="string">&quot;b&quot;</span></span><br><span class="line">5) <span class="string">&quot;a&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="6-3-3-RPUSH"><a href="#6-3-3-RPUSH" class="headerlink" title="6.3.3. RPUSH"></a>6.3.3. RPUSH</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; RPUSH letter f</span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br><span class="line">&gt; LRANGE letter 0 -1</span><br><span class="line">1) <span class="string">&quot;e&quot;</span></span><br><span class="line">2) <span class="string">&quot;d&quot;</span></span><br><span class="line">3) <span class="string">&quot;c&quot;</span></span><br><span class="line">4) <span class="string">&quot;b&quot;</span></span><br><span class="line">5) <span class="string">&quot;a&quot;</span></span><br><span class="line">6) <span class="string">&quot;f&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/ChvUKq0.png" alt="image-20231213213754020"></p>
<p>RPOP </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; RPOP letter</span><br><span class="line"><span class="string">&quot;f&quot;</span></span><br><span class="line"></span><br><span class="line">&gt; LRANGE letter 0 -1</span><br><span class="line">1) <span class="string">&quot;e&quot;</span></span><br><span class="line">2) <span class="string">&quot;d&quot;</span></span><br><span class="line">3) <span class="string">&quot;c&quot;</span></span><br><span class="line">4) <span class="string">&quot;b&quot;</span></span><br><span class="line">5) <span class="string">&quot;a&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/GO4i0Gk.png" alt="image-20231213213849151"></p>
<p>LPOP</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; LPOP letter 2</span><br><span class="line">1) <span class="string">&quot;e&quot;</span></span><br><span class="line">2) <span class="string">&quot;d&quot;</span></span><br><span class="line">&gt; LRANGE letter 0 -1</span><br><span class="line">1) <span class="string">&quot;c&quot;</span></span><br><span class="line">2) <span class="string">&quot;b&quot;</span></span><br><span class="line">3) <span class="string">&quot;a&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/zaNzqqY.png" alt="image-20231213214017278"></p>
<h4 id="6-3-4-LLEN"><a href="#6-3-4-LLEN" class="headerlink" title="6.3.4. LLEN"></a>6.3.4. LLEN</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; LLEN letter</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br></pre></td></tr></table></figure>

<h4 id="6-3-5-LTRIM"><a href="#6-3-5-LTRIM" class="headerlink" title="6.3.5. LTRIM"></a>6.3.5. LTRIM</h4><p>索引從0開始算，所以 1 ~ 3 是 <code>d、c、b</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; LPUSH letter a b c d e</span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br><span class="line"></span><br><span class="line">&gt; LRANGE letter 0 -1</span><br><span class="line">1) <span class="string">&quot;e&quot;</span></span><br><span class="line">2) <span class="string">&quot;d&quot;</span></span><br><span class="line">3) <span class="string">&quot;c&quot;</span></span><br><span class="line">4) <span class="string">&quot;b&quot;</span></span><br><span class="line">5) <span class="string">&quot;a&quot;</span></span><br><span class="line"></span><br><span class="line">&gt; LTRIM letter 1 3</span><br><span class="line"><span class="string">&quot;OK&quot;</span></span><br><span class="line"></span><br><span class="line">&gt; LRANGE letter 0 -1</span><br><span class="line">1) <span class="string">&quot;d&quot;</span></span><br><span class="line">2) <span class="string">&quot;c&quot;</span></span><br><span class="line">3) <span class="string">&quot;b&quot;</span></span><br></pre></td></tr></table></figure>



<h2 id="7-SET-集合"><a href="#7-SET-集合" class="headerlink" title="7. SET 集合"></a>7. SET 集合</h2><h3 id="7-1-簡介"><a href="#7-1-簡介" class="headerlink" title="7.1. 簡介"></a>7.1. 簡介</h3><p>SET 與 LIST 最大的差異是沒有順序，並且不能有重複值</p>
<h4 id="7-1-1-什麼是-Redis-SET-資料結構？"><a href="#7-1-1-什麼是-Redis-SET-資料結構？" class="headerlink" title="7.1.1. 什麼是 Redis SET 資料結構？"></a>7.1.1. 什麼是 Redis SET 資料結構？</h4><p>在 Redis 中，SET 是一種集合型資料結構，用來存儲多個唯一且無序的元素。SET 不允許相同的元素存在，這意味著每個元素在 SET 中都是唯一的。</p>
<h4 id="7-1-2-Redis-SET-的主要特性："><a href="#7-1-2-Redis-SET-的主要特性：" class="headerlink" title="7.1.2. Redis SET 的主要特性："></a>7.1.2. Redis SET 的主要特性：</h4><ul>
<li><strong>唯一性（Unique）</strong>：SET 中的每個元素都是唯一的，不允許重複的元素存在。</li>
<li><strong>無序性（Unordered）</strong>：SET 中的元素是無序的，不像 LIST 或 ZSET 有順序的概念。</li>
<li><strong>操作豐富</strong>：Redis 提供了豐富的 SET 操作命令，包括添加成員、刪除成員、檢查成員是否存在等。</li>
</ul>
<h3 id="7-2-使用場景"><a href="#7-2-使用場景" class="headerlink" title="7.2. 使用場景"></a>7.2. 使用場景</h3><p>redis set是集合類型的資料結構，那麼集合類型就比較適合用於聚合分類。</p>
<h4 id="7-2-1-標籤"><a href="#7-2-1-標籤" class="headerlink" title="7.2.1. 標籤"></a>7.2.1. 標籤</h4><p>例如我們部落格網站常常使用到的興趣標籤，把一個個有著相同嗜好，關注類似內容的用戶利用一個標籤把他們進行歸併。 </p>
<h4 id="7-2-2-共同"><a href="#7-2-2-共同" class="headerlink" title="7.2.2. 共同"></a>7.2.2. 共同</h4><p>共同好友功能，共同喜好，或是可以引申到二度好友之類的擴充應用。</p>
<h4 id="7-2-3-統計"><a href="#7-2-3-統計" class="headerlink" title="7.2.3. 統計"></a>7.2.3. 統計</h4><p>統計網站的獨立IP。利用set集合當中元素不唯一性，可以快速即時統計存取網站的獨立IP。</p>
<h3 id="7-3-常用指令"><a href="#7-3-常用指令" class="headerlink" title="7.3. 常用指令"></a>7.3. 常用指令</h3><h4 id="7-3-1-SADD"><a href="#7-3-1-SADD" class="headerlink" title="7.3.1. SADD"></a>7.3.1. SADD</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; SADD course Redis</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"></span><br><span class="line"><span class="comment">#故意再加一次，加不進去</span></span><br><span class="line">&gt; SADD course Redis</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">&gt; SMEMBERS course</span><br><span class="line">1) <span class="string">&quot;Redis&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="7-3-2-SMEMBERS"><a href="#7-3-2-SMEMBERS" class="headerlink" title="7.3.2. SMEMBERS"></a>7.3.2. SMEMBERS</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; SMEMBERS course</span><br><span class="line">1) <span class="string">&quot;Redis&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="7-3-3-SISMEMBER"><a href="#7-3-3-SISMEMBER" class="headerlink" title="7.3.3. SISMEMBER"></a>7.3.3. SISMEMBER</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; SISMEMBER course Redis</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"></span><br><span class="line">&gt; SISMEMBER course Python</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br></pre></td></tr></table></figure>

<h4 id="7-3-4-SREM"><a href="#7-3-4-SREM" class="headerlink" title="7.3.4. SREM"></a>7.3.4. SREM</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; SREM course Redis</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"></span><br><span class="line">&gt; SMEMBERS course</span><br><span class="line">(empty list or <span class="built_in">set</span>)</span><br></pre></td></tr></table></figure>

<h4 id="7-3-5-其它學習"><a href="#7-3-5-其它學習" class="headerlink" title="7.3.5. 其它學習"></a>7.3.5. 其它學習</h4><p>SINTER、SUNION、SDIFF</p>
<h2 id="8-SortedSet-有序集合"><a href="#8-SortedSet-有序集合" class="headerlink" title="8. SortedSet 有序集合"></a>8. SortedSet 有序集合</h2><h3 id="8-1-簡介"><a href="#8-1-簡介" class="headerlink" title="8.1. 簡介"></a>8.1. 簡介</h3><h4 id="8-1-1-什麼是-Redis-Sorted-Set-資料結構？"><a href="#8-1-1-什麼是-Redis-Sorted-Set-資料結構？" class="headerlink" title="8.1.1. 什麼是 Redis Sorted Set 資料結構？"></a>8.1.1. 什麼是 Redis Sorted Set 資料結構？</h4><p>在 Redis 中，Sorted Set（有序集合）是一種集合型資料結構，它與 SET 類似，但每個成員都關聯著一個分數（score）。這個分數用來排序集合中的元素，因此 Sorted Set 是根據分數有序排列的。</p>
<h4 id="8-1-2-Redis-Sorted-Set-的主要特性："><a href="#8-1-2-Redis-Sorted-Set-的主要特性：" class="headerlink" title="8.1.2. Redis Sorted Set 的主要特性："></a>8.1.2. Redis Sorted Set 的主要特性：</h4><ul>
<li><strong>有序性（Ordered）</strong>：元素根據其分數的大小進行排序，可以按照分數區間或排名獲取元素。</li>
<li><strong>唯一性（Unique）</strong>：每個元素在集合中是唯一的，不允許重複的成員存在。</li>
<li><strong>操作豐富</strong>：Redis 提供了豐富的 Sorted Set 操作命令，包括添加成員、刪除成員、獲取排名、按照分數區間獲取成員等。</li>
</ul>
<h3 id="8-2-使用場景"><a href="#8-2-使用場景" class="headerlink" title="8.2. 使用場景"></a>8.2. 使用場景</h3><h4 id="8-2-1-排行榜（Leaderboard）"><a href="#8-2-1-排行榜（Leaderboard）" class="headerlink" title="8.2.1. 排行榜（Leaderboard）"></a>8.2.1. 排行榜（Leaderboard）</h4><p>Sorted Set 非常適用於實現排行榜，其中成員的分數表示其在排行中的位置，可以根據分數的高低快速獲取排名。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 範例：將玩家分數存入排行榜</span></span><br><span class="line">ZADD leaderboard 1000 <span class="string">&quot;Player1&quot;</span></span><br><span class="line">ZADD leaderboard 950 <span class="string">&quot;Player2&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="8-2-2-過期時間管理"><a href="#8-2-2-過期時間管理" class="headerlink" title="8.2.2. 過期時間管理"></a>8.2.2. 過期時間管理</h4><p>可以使用 Sorted Set 來管理帶有過期時間的數據，分數表示過期時間的時間戳，並使用定期的清理操作來刪除過期的數據。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 範例：將帶有過期時間的數據存入有序集合</span></span><br><span class="line">ZADD expiration:tasks &lt;timestamp&gt; <span class="string">&quot;Task1&quot;</span></span><br><span class="line">ZADD expiration:tasks &lt;timestamp&gt; <span class="string">&quot;Task2&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="8-2-3-區間查詢"><a href="#8-2-3-區間查詢" class="headerlink" title="8.2.3. 區間查詢"></a>8.2.3. 區間查詢</h4><p>Sorted Set 支持根據分數區間進行查詢，這使得它適用於需要根據數值範圍檢索數據的場景。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 範例：獲取分數在指定區間的成員</span></span><br><span class="line">ZRANGEBYSCORE temperature 0 25</span><br></pre></td></tr></table></figure>

<h4 id="8-2-4-數據匹配和搜索"><a href="#8-2-4-數據匹配和搜索" class="headerlink" title="8.2.4. 數據匹配和搜索"></a>8.2.4. 數據匹配和搜索</h4><p>Sorted Set 可以用於實現模糊搜索，分數可以表示相似度或匹配程度，使得可以按照相似度檢索數據。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 範例：根據匹配程度獲取成員</span></span><br><span class="line">ZRANGEBYSCORE similarity 0.8 1.0</span><br></pre></td></tr></table></figure>

<h4 id="8-2-5-即時排名"><a href="#8-2-5-即時排名" class="headerlink" title="8.2.5. 即時排名"></a>8.2.5. 即時排名</h4><p>Sorted Set 可以用於即時排名的場景，例如遊戲中的實時得分排名。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 範例：遊戲中即時更新玩家分數</span></span><br><span class="line">ZADD realtime:scoreboard 1200 <span class="string">&quot;Player1&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="8-3-常用指令"><a href="#8-3-常用指令" class="headerlink" title="8.3. 常用指令"></a>8.3. 常用指令</h3><h4 id="8-3-1-ZADD"><a href="#8-3-1-ZADD" class="headerlink" title="8.3.1. ZADD"></a>8.3.1. ZADD</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZADD result 100 小民 90 小華 80 小新</span><br><span class="line">3</span><br></pre></td></tr></table></figure>

<h4 id="8-3-2-ZRANGE"><a href="#8-3-2-ZRANGE" class="headerlink" title="8.3.2. ZRANGE"></a>8.3.2. ZRANGE</h4><p>只呈現人名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZRANGE result 0 -1</span><br><span class="line">小新</span><br><span class="line">小華</span><br><span class="line">小民</span><br></pre></td></tr></table></figure>

<h4 id="8-3-3-ZRANGE-WITHSCORES"><a href="#8-3-3-ZRANGE-WITHSCORES" class="headerlink" title="8.3.3. ZRANGE WITHSCORES"></a>8.3.3. ZRANGE WITHSCORES</h4><p>分數跟人一起呈現</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZRANGE result 0 -1 WITHSCORES</span><br><span class="line">小新</span><br><span class="line">80</span><br><span class="line">小華</span><br><span class="line">90</span><br><span class="line">小民</span><br><span class="line">100</span><br></pre></td></tr></table></figure>

<h4 id="8-3-4-ZSCORE"><a href="#8-3-4-ZSCORE" class="headerlink" title="8.3.4. ZSCORE"></a>8.3.4. ZSCORE</h4><p>呈現分數</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZSCORE result 小民</span><br><span class="line">100</span><br></pre></td></tr></table></figure>

<h4 id="8-3-5-ZRANK"><a href="#8-3-5-ZRANK" class="headerlink" title="8.3.5. ZRANK"></a>8.3.5. ZRANK</h4><p>有序集合預設是由小到大排序，索引從0開始，小民分數最多，所以索引是2</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZRANK result 小民</span><br><span class="line">2</span><br></pre></td></tr></table></figure>

<h4 id="8-3-6-ZREVRANK"><a href="#8-3-6-ZREVRANK" class="headerlink" title="8.3.6. ZREVRANK"></a>8.3.6. ZREVRANK</h4><p>rev是指reverse 反轉，也就是由大到小</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZREVRANK result 小民</span><br><span class="line">0</span><br></pre></td></tr></table></figure>

<h4 id="8-3-7-其它學習"><a href="#8-3-7-其它學習" class="headerlink" title="8.3.7. 其它學習"></a>8.3.7. 其它學習</h4><p>比如刪除某個成員，對某個成員分數進行增加，刪除某個排名範圍的成員</p>
<h2 id="9-Hash-哈希"><a href="#9-Hash-哈希" class="headerlink" title="9. Hash 哈希"></a>9. Hash 哈希</h2><h3 id="9-1-簡介"><a href="#9-1-簡介" class="headerlink" title="9.1. 簡介"></a>9.1. 簡介</h3><p>key-value資料結構，特別適合來儲存物件。</p>
<h3 id="9-2-使用場景"><a href="#9-2-使用場景" class="headerlink" title="9.2. 使用場景"></a>9.2. 使用場景</h3><h4 id="9-2-1-對象存儲"><a href="#9-2-1-對象存儲" class="headerlink" title="9.2.1. 對象存儲"></a>9.2.1. 對象存儲</h4><p>Hash 非常適用於存儲對象的屬性，例如用戶對象、產品對象等，其中每個字段表示對象的一個屬性，對應的值是這個屬性的值。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 範例：存儲用戶對象</span></span><br><span class="line">HSET user:1234 name <span class="string">&quot;John Doe&quot;</span></span><br><span class="line">HSET user:1234 age 30</span><br><span class="line">HSET user:1234 email <span class="string">&quot;john@example.com&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="9-2-2-網站會話管理"><a href="#9-2-2-網站會話管理" class="headerlink" title="9.2.2. 網站會話管理"></a>9.2.2. 網站會話管理</h4><p>Hash 可以用於存儲網站中的會話信息，其中每個字段表示一個會話屬性，對應的值是這個會話屬性的值。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 範例：存儲會話信息</span></span><br><span class="line">HSET session:abc123 userid 1234</span><br><span class="line">HSET session:abc123 last_access <span class="string">&quot;2023-12-31 23:59:59&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="9-2-3-配置存儲"><a href="#9-2-3-配置存儲" class="headerlink" title="9.2.3. 配置存儲"></a>9.2.3. 配置存儲</h4><p>Hash 可以用於存儲應用程序的配置信息，其中每個字段表示一個配置項，對應的值是這個配置項的值。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 範例：存儲應用程序配置</span></span><br><span class="line">HSET app:config max_connections 100</span><br><span class="line">HSET app:config log_level <span class="string">&quot;info&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="9-3-常用指令"><a href="#9-3-常用指令" class="headerlink" title="9.3. 常用指令"></a>9.3. 常用指令</h3><h4 id="9-3-1-HSET"><a href="#9-3-1-HSET" class="headerlink" title="9.3.1. HSET"></a>9.3.1. HSET</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HSET person name kite</span><br><span class="line">1</span><br><span class="line">127.0.0.1:6379&gt; HSET person age 100</span><br><span class="line">1</span><br></pre></td></tr></table></figure>

<h4 id="9-3-2-HGET"><a href="#9-3-2-HGET" class="headerlink" title="9.3.2. HGET"></a>9.3.2. HGET</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HGET person name</span><br><span class="line">kite</span><br></pre></td></tr></table></figure>

<h4 id="9-3-3-HGETALL"><a href="#9-3-3-HGETALL" class="headerlink" title="9.3.3. HGETALL"></a>9.3.3. HGETALL</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HGETALL person</span><br><span class="line">name</span><br><span class="line">kite</span><br><span class="line">age</span><br><span class="line">100</span><br></pre></td></tr></table></figure>

<h4 id="9-3-4-HDEL"><a href="#9-3-4-HDEL" class="headerlink" title="9.3.4. HDEL"></a>9.3.4. HDEL</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HDEL person age</span><br><span class="line">1</span><br></pre></td></tr></table></figure>

<h4 id="9-3-5-HGETALL"><a href="#9-3-5-HGETALL" class="headerlink" title="9.3.5. HGETALL"></a>9.3.5. HGETALL</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HGETALL person</span><br><span class="line">name</span><br><span class="line">kite</span><br></pre></td></tr></table></figure>

<h4 id="9-3-6-HEXISTS"><a href="#9-3-6-HEXISTS" class="headerlink" title="9.3.6. HEXISTS"></a>9.3.6. HEXISTS</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HEXISTS person name</span><br><span class="line">1</span><br><span class="line">127.0.0.1:6379&gt; HEXISTS person age</span><br><span class="line">0</span><br></pre></td></tr></table></figure>

<h4 id="9-3-7-HKEYS"><a href="#9-3-7-HKEYS" class="headerlink" title="9.3.7. HKEYS"></a>9.3.7. HKEYS</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HKEYS person</span><br><span class="line">name</span><br></pre></td></tr></table></figure>

<h4 id="9-3-8-HLEN"><a href="#9-3-8-HLEN" class="headerlink" title="9.3.8. HLEN"></a>9.3.8. HLEN</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HLEN person</span><br><span class="line">1</span><br></pre></td></tr></table></figure>

<h2 id="10-發佈訂閱模式"><a href="#10-發佈訂閱模式" class="headerlink" title="10. 發佈訂閱模式"></a>10. 發佈訂閱模式</h2><h3 id="10-1-常用指令"><a href="#10-1-常用指令" class="headerlink" title="10.1. 常用指令"></a>10.1. 常用指令</h3><h4 id="10-1-1-subscribe"><a href="#10-1-1-subscribe" class="headerlink" title="10.1.1. subscribe"></a>10.1.1. subscribe</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">subscribe ubereats</span><br></pre></td></tr></table></figure>

<h4 id="10-1-2-publish"><a href="#10-1-2-publish" class="headerlink" title="10.1.2. publish"></a>10.1.2. publish</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">publish ubereats order001</span><br></pre></td></tr></table></figure>

<p>下圖左邊是publish發佈消息，右邊是兩個訂閱者，當publish時，訂閱者們會同步收到消息。</p>
<p><img src="https://i.imgur.com/vCBtT5O.png" alt="image-20231214115332780"></p>
<h2 id="11-GEO"><a href="#11-GEO" class="headerlink" title="11. GEO"></a>11. GEO</h2><h3 id="11-1-常用指令"><a href="#11-1-常用指令" class="headerlink" title="11.1. 常用指令"></a>11.1. 常用指令</h3><h4 id="11-1-1-GEOADD"><a href="#11-1-1-GEOADD" class="headerlink" title="11.1.1. GEOADD"></a>11.1.1. GEOADD</h4><p>經度(116.405285)、緯度(39.904989)、名稱(beijing)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#新增一個</span></span><br><span class="line">127.0.0.1:6379&gt; GEOADD city 116.405285 39.904989 beijing</span><br><span class="line">1</span><br><span class="line"></span><br><span class="line"><span class="comment">#新增多個</span></span><br><span class="line">127.0.0.1:6379&gt; GEOADD city 121.472644 31.231706 shanghai 114.085947 22.547 shenzhen 37 23.125178 guangzhou 120.153576 30.287459 hangzhou</span><br><span class="line">4</span><br></pre></td></tr></table></figure>

<h4 id="11-1-2-GEOPOS"><a href="#11-1-2-GEOPOS" class="headerlink" title="11.1.2. GEOPOS"></a>11.1.2. GEOPOS</h4><p>取得地理位置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; GEOPOS city beijing</span><br><span class="line">116.40528291463851929</span><br><span class="line">39.9049884229125027</span><br></pre></td></tr></table></figure>

<h4 id="11-1-3-GEODIST"><a href="#11-1-3-GEODIST" class="headerlink" title="11.1.3. GEODIST"></a>11.1.3. GEODIST</h4><p>取得北京到上海的距離，預設單位為公尺(M)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; GEODIST city beijing shanghai</span><br><span class="line">1067597.9668</span><br><span class="line"></span><br><span class="line"><span class="comment">#以KM單位顯示</span></span><br><span class="line">127.0.0.1:6379&gt; GEODIST city beijing shanghai KM</span><br><span class="line">1067.5980</span><br></pre></td></tr></table></figure>

<h4 id="11-1-4-GEOSEARCH…FROMMEMBER…BYRADIUS…"><a href="#11-1-4-GEOSEARCH…FROMMEMBER…BYRADIUS…" class="headerlink" title="11.1.4. GEOSEARCH…FROMMEMBER…BYRADIUS…"></a>11.1.4. GEOSEARCH…FROMMEMBER…BYRADIUS…</h4><p>以某某地點為中心，採用半徑方式計算鄰近的城市</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; GEOSEARCH city FROMMEMBER shanghai BYRADIUS 300 KM</span><br><span class="line">hangzhou</span><br><span class="line">shanghai</span><br><span class="line">127.0.0.1:6379&gt; GEOSEARCH city FROMMEMBER shanghai BYRADIUS 2000 KM</span><br><span class="line">shenzhen</span><br><span class="line">hangzhou</span><br><span class="line">shanghai</span><br><span class="line">beijing</span><br></pre></td></tr></table></figure>

<h2 id="12-HyperLogLog"><a href="#12-HyperLogLog" class="headerlink" title="12. HyperLogLog"></a>12. HyperLogLog</h2><h3 id="12-1-常用指令"><a href="#12-1-常用指令" class="headerlink" title="12.1. 常用指令"></a>12.1. 常用指令</h3><h4 id="12-1-1-PFADD"><a href="#12-1-1-PFADD" class="headerlink" title="12.1.1. PFADD"></a>12.1.1. PFADD</h4><p>建立course課程變數，放三個課程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; PFADD course git docker redis</span><br><span class="line">1</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="12-1-2-PFCOUNT"><a href="#12-1-2-PFCOUNT" class="headerlink" title="12.1.2. PFCOUNT"></a>12.1.2. PFCOUNT</h4><p>計算課程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; PFCOUNT course</span><br><span class="line">3</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; PFADD course nginx</span><br><span class="line">1</span><br><span class="line">127.0.0.1:6379&gt; PFCOUNT course</span><br><span class="line">4</span><br></pre></td></tr></table></figure>

<h4 id="12-1-3-PFMEGER"><a href="#12-1-3-PFMEGER" class="headerlink" title="12.1.3. PFMEGER"></a>12.1.3. PFMEGER</h4><p>建立course2課程變數，放三個課程，通過<code>PMERGE</code>合併課程，再進行計算。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; PFADD course2 python git go</span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; PFMERGE result course course2</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; PFCOUNT result</span><br><span class="line">6</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="13-Bitmap-位圖"><a href="#13-Bitmap-位圖" class="headerlink" title="13. Bitmap 位圖"></a>13. Bitmap 位圖</h2><p><img src="https://i.imgur.com/kzsdXDW.png" alt="image-20231214142550274"></p>
<h3 id="13-1-常用指令"><a href="#13-1-常用指令" class="headerlink" title="13.1. 常用指令"></a>13.1. 常用指令</h3><h4 id="13-1-1-SETBIT"><a href="#13-1-1-SETBIT" class="headerlink" title="13.1.1. SETBIT"></a>13.1.1. SETBIT</h4><p><img src="https://i.imgur.com/dp0k5Nw.png" alt="image-20231214142638511"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SETBIT dianzan 0 1</span><br><span class="line">0</span><br><span class="line">127.0.0.1:6379&gt; SETBIT dianzan 1 0</span><br><span class="line">0</span><br></pre></td></tr></table></figure>

<h4 id="13-1-2-GETBIT"><a href="#13-1-2-GETBIT" class="headerlink" title="13.1.2. GETBIT"></a>13.1.2. GETBIT</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; GETBIT dianzan 0</span><br><span class="line">1</span><br><span class="line">127.0.0.1:6379&gt; GETBIT dianzan 1</span><br><span class="line">0</span><br></pre></td></tr></table></figure>

<h4 id="13-1-3-SET"><a href="#13-1-3-SET" class="headerlink" title="13.1.3. SET"></a>13.1.3. SET</h4><p><img src="https://i.imgur.com/5azKUk5.png" alt="image-20231214142747447"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SET dianzan <span class="string">&quot;\xF0&quot;</span></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; GETBIT dianzan 0</span><br><span class="line">1</span><br><span class="line">127.0.0.1:6379&gt; GETBIT dianzan 1</span><br><span class="line">1</span><br><span class="line">127.0.0.1:6379&gt; GETBIT dianzan 2</span><br><span class="line">1</span><br><span class="line">127.0.0.1:6379&gt; GETBIT dianzan 3</span><br><span class="line">1</span><br><span class="line">127.0.0.1:6379&gt; GETBIT dianzan 4</span><br><span class="line">0</span><br><span class="line">127.0.0.1:6379&gt; GETBIT dianzan 5</span><br><span class="line">0</span><br><span class="line">127.0.0.1:6379&gt; GETBIT dianzan 6</span><br><span class="line">0</span><br><span class="line">127.0.0.1:6379&gt; GETBIT dianzan 7</span><br><span class="line">0</span><br></pre></td></tr></table></figure>

<h4 id="13-1-4-BITCOUNT"><a href="#13-1-4-BITCOUNT" class="headerlink" title="13.1.4. BITCOUNT"></a>13.1.4. BITCOUNT</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; BITCOUNT dianzan</span><br><span class="line">4</span><br></pre></td></tr></table></figure>

<h4 id="13-1-5-BITPOS"><a href="#13-1-5-BITPOS" class="headerlink" title="13.1.5. BITPOS"></a>13.1.5. BITPOS</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; BITPOS dianzan 0</span><br><span class="line">4</span><br></pre></td></tr></table></figure>

<h2 id="14-BitField"><a href="#14-BitField" class="headerlink" title="14. BitField"></a>14. BitField</h2><p><img src="https://i.imgur.com/A2UKBL3.png" alt="image-20231214144020140"></p>
<h3 id="14-1-常用指令"><a href="#14-1-常用指令" class="headerlink" title="14.1. 常用指令"></a>14.1. 常用指令</h3><h4 id="14-1-1-BITFIELD…SET…"><a href="#14-1-1-BITFIELD…SET…" class="headerlink" title="14.1.1. BITFIELD…SET…"></a>14.1.1. BITFIELD…SET…</h4><p><code>player:1</code> ： 變數</p>
<p><code>u8</code> ： 正整數長度8</p>
<p><code>#0</code> ：第一個位置</p>
<p><code>1</code>：值</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#等級1</span></span><br><span class="line">127.0.0.1:6379&gt; BITFIELD player:1 <span class="built_in">set</span> u8 <span class="comment">#0 1</span></span><br><span class="line">0</span><br><span class="line"><span class="comment">#金錢100</span></span><br><span class="line">127.0.0.1:6379&gt; BITFIELD player:1 <span class="built_in">set</span> u32 <span class="comment">#1 100</span></span><br><span class="line">0</span><br></pre></td></tr></table></figure>

<h4 id="14-1-2-BITFIELD…GET…"><a href="#14-1-2-BITFIELD…GET…" class="headerlink" title="14.1.2. BITFIELD…GET…"></a>14.1.2. BITFIELD…GET…</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; BITFIELD player:1 get u8 <span class="comment">#0</span></span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; BITFIELD player:1 get u32 <span class="comment">#1</span></span><br><span class="line">100</span><br></pre></td></tr></table></figure>

<h4 id="14-1-3-BITFIELD…incrby…"><a href="#14-1-3-BITFIELD…incrby…" class="headerlink" title="14.1.3. BITFIELD…incrby…"></a>14.1.3. BITFIELD…incrby…</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#增加100金幣</span></span><br><span class="line">127.0.0.1:6379&gt; BITFIELD player:1 incrby u32 <span class="comment">#1 100</span></span><br><span class="line">200</span><br></pre></td></tr></table></figure>



<h2 id="15-Multi"><a href="#15-Multi" class="headerlink" title="15. Multi"></a>15. Multi</h2><p>在執行exec之前，所有命令都會放到佇列中，不會立即執行。</p>
<p>收到exec命令後，有任何一命令失敗，並不影響其它命令。</p>
<p>在執行exec之前，其它客戶提出的請求，並不會被插入到multi裡面。</p>
<p><img src="https://i.imgur.com/koP5xYq.png" alt="image-20231214153249916"></p>
<h3 id="15-1-常用指令"><a href="#15-1-常用指令" class="headerlink" title="15.1. 常用指令"></a>15.1. 常用指令</h3><h4 id="15-1-1-MULTI"><a href="#15-1-1-MULTI" class="headerlink" title="15.1.1. MULTI"></a>15.1.1. MULTI</h4><p>啟動</p>
<h4 id="15-1-2-EXEC"><a href="#15-1-2-EXEC" class="headerlink" title="15.1.2. EXEC"></a>15.1.2. EXEC</h4><p>結束</p>
<p>以下圖為例，當執行了<code>MULTI</code>之後，接著執行指令<code>SET k1 v1</code>、<code>SET k2 v2</code>之後，系統顯示在queued中。</p>
<p>接著，開啟另一個終端機，試著讀取<code>k1</code>，是沒有資料的，當執行了<code>EXEC</code>之後，另一個終端機就讀取得到資料。</p>
<p><img src="https://i.imgur.com/RxLsRi6.png" alt="image-20231214153837912"></p>
<p>以下實驗，證明其中一個指令失敗，並不影響其它執令的執行結果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SET k3 3</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; SET k4 v4</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; SET k5 5</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; MULTI</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379(TX)&gt; INCR k3</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; INCR k4</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; INCR k5</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; EXEC</span><br><span class="line">1) (<span class="built_in">integer</span>) 4</span><br><span class="line">2) (error) ERR value is not an <span class="built_in">integer</span> or out of range</span><br><span class="line">3) (<span class="built_in">integer</span>) 6</span><br><span class="line">127.0.0.1:6379&gt; GET k3</span><br><span class="line"><span class="string">&quot;4&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; GET k4</span><br><span class="line"><span class="string">&quot;v4&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; GET k5</span><br><span class="line"><span class="string">&quot;6&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="16-持久化"><a href="#16-持久化" class="headerlink" title="16. 持久化"></a>16. 持久化</h2><h3 id="16-1-常用指令"><a href="#16-1-常用指令" class="headerlink" title="16.1. 常用指令"></a>16.1. 常用指令</h3><h3 id="16-2-RDB-Redis-Database"><a href="#16-2-RDB-Redis-Database" class="headerlink" title="16.2. RDB(Redis Database)"></a>16.2. RDB(Redis Database)</h3><p>分為自動與手動，自動部分需要去<code>redis.config</code>檔進行修正，以下是截取部分：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Unless specified otherwise, by default Redis will save the DB:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  定時1小時檢查，是否有有1次以上異動，才符合自動儲存條件</span></span><br><span class="line"><span class="comment">#   * After 3600 seconds (an hour) if at least 1 change was performed</span></span><br><span class="line"><span class="comment">#  定時5分鐘檢查，是否有100次以上異動，才符合自動儲存條件</span></span><br><span class="line"><span class="comment">#   * After 300 seconds (5 minutes) if at least 100 changes were performed</span></span><br><span class="line"><span class="comment">#  定時60秒檢查，是否有10000次以上異動，才符合自動儲存條件</span></span><br><span class="line"><span class="comment">#   * After 60 seconds if at least 10000 changes were performed</span></span><br></pre></td></tr></table></figure>

<p>我們可以觀查到，第一個參數表示秒數，第二參數表示執行次數。而docker redis 預設是沒有包<code>redis.config</code>檔，所以如果要的話請去官網下載，可到下方參考連結去使用，下載檔案之後，在啟動docker時記得mount此份文件，修改其內容。</p>
<p>手動部分實驗如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># redis-cli</span></span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">(empty array)</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k1 k1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k2 k2</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="comment">#手動儲存</span></span><br><span class="line">127.0.0.1:6379&gt; save</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="comment">#跳出redis</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看文件</span></span><br><span class="line"><span class="comment"># ls</span></span><br><span class="line">dump.rdb</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用xxd指令查看檔案</span></span><br><span class="line"><span class="comment"># xxd dump.rdb</span></span><br><span class="line">00000000: 5245 4449 5330 3031 31fa 0972 6564 6973  REDIS0011..redis</span><br><span class="line">00000010: 2d76 6572 0537 2e32 2e33 fa0a 7265 6469  -ver.7.2.3..redi</span><br><span class="line">00000020: 732d 6269 7473 c040 fa05 6374 696d 65c2  s-bits.@..ctime.</span><br><span class="line">00000030: b358 7c65 fa08 7573 6564 2d6d 656d c2c8  .X|e..used-mem..</span><br><span class="line">00000040: 3420 00fa 0861 6f66 2d62 6173 65c0 00fe  4 ...aof-base...</span><br><span class="line">00000050: 00fb 0200 0002 6b32 026b 3200 026b 3102  ......k2.k2..k1.   </span><br><span class="line">00000060: 6b31 ff7c 8471 bff0 fe75 7c              k1.|.q...u|    </span><br></pre></td></tr></table></figure>

<p>可以看到最後兩行有剛剛k1與k2的資料，代表已經實質的從記憶體儲放一份到硬碟上，至於多久要寫入一次的要根據伺服器可用的效能去評估與設定。</p>
<blockquote>
<p>補充說明：xxd是一個可以查看2進制或16進制文件內容的linux命令</p>
</blockquote>
<p>另外，通常在使用redis時配給的資源通常會給比較多，而在使用<code>save</code>指令時，redis是無法接受任何請求的，所以有可能會發生阻塞。於是redis又提供了另一個指令<code>bgsave</code>，這個指令可以直接多開一個執行緒，讓它獨立做記憶體搬到IO的工作。這樣的作法可以讓阻塞問題得到緩解。但是在fork出一個新的執行緒的過程中還是會佔用效能，而且在fork過程式，還是沒有辦法處理任何請求，沒有辦法做到秒級的快照。</p>
<p>為了解決這個問題，又提供了AOF的持久化方式。</p>
<h3 id="16-3-AOF-Append-Only-File"><a href="#16-3-AOF-Append-Only-File" class="headerlink" title="16.3. AOF(Append Only File)"></a>16.3. AOF(Append Only File)</h3><p><code>AOF</code>意思是指追加文件，當使用指令時，同時寫入<code>記憶體</code>與<code>追加文件</code>，文件以日誌的方式記錄每一個寫入操作，當REDIS重啟動時，就會通過重新執行<code>AOF</code>文件中的命令來在記憶體中重建整個資料庫的內容。開啟AOF的方式也很簡單，只要在<code>redis.config</code>將<code>appendonly</code> 後方的<code>no</code> 改為<code>yes</code>即可。</p>
<h2 id="17-Replication-主從複製"><a href="#17-Replication-主從複製" class="headerlink" title="17. Replication 主從複製"></a>17. Replication 主從複製</h2><p>Master(主)節點主要負責<code>寫</code>的處理，Slave(從)節點負責<code>讀</code>的處理，主節點的數據變化會通過非同步方式發送給從節點，從節點收到資料後，會更新自己的數據</p>
<p><img src="https://i.imgur.com/tMREXiC.png" alt="Redis: Master-Slave Architecture. Redis is based on Master-Slave… | by  Sunny Garg | Medium"></p>
<h3 id="17-1-Master-建置"><a href="#17-1-Master-建置" class="headerlink" title="17.1. Master 建置"></a>17.1. Master 建置</h3><p>這次實驗透過docker進行，準備1個master，2個slave。</p>
<p>docker預設都是吃同一個switch設定，所以自然可以透過區網方式互相訪問。</p>
<p>開始建置master容器，容器取名為<code>redis-master</code>，指令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name redis-master -d -p 6379:6379 redis</span><br></pre></td></tr></table></figure>

<p>我們為了要取得master區網IP，因此需進入容器中，安裝<code>net-tools</code>工具：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install net-tools</span><br></pre></td></tr></table></figure>

<p>使用<code>ifconfig</code>指令，從訊息中得知ip為<code>172.17.0.2</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ifconfig</span></span><br><span class="line">eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.17.0.2  netmask 255.255.0.0  broadcast 172.17.255.255</span><br><span class="line">        ether 02:42:ac:11:00:02  txqueuelen 0  (Ethernet)</span><br><span class="line">        RX packets 7614  bytes 9949276 (9.4 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 2430  bytes 162974 (159.1 KiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 61  bytes 208513 (203.6 KiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 61  bytes 208513 (203.6 KiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure>

<h3 id="17-2-Slave-建置"><a href="#17-2-Slave-建置" class="headerlink" title="17.2. Slave 建置"></a>17.2. Slave 建置</h3><p>方法1</p>
<p>使用此方法，不需要準備<code>redis.conf</code>檔</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -it --name redis-slave01 -p 6380:6379 redis redis-server --slaveof 172.17.0.2 6379</span><br></pre></td></tr></table></figure>

<p>方法2</p>
<p>建置slave容器之前，我們準備一個<code>redis.conf</code>檔，僅說明需要修改部分(完整檔案放在參考連結那)：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">replicaof 172.17.0.2 6379</span><br></pre></td></tr></table></figure>

<p>使用方法2，開始建置slave容器，容器取名為<code>redis-slave01</code>，指令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name redis-slave01 -d -p 6380:6379 -v C:/docker_data/redis-6380.conf:/usr/local/etc/redis/redis-6380.conf redis redis-server /usr/local/etc/redis/redis-6380.conf</span><br></pre></td></tr></table></figure>

<p>說明相關指令</p>
<p><code>v C:/docker_data/redis-6380.conf:/usr/local/etc/redis/redis-6380.conf redis</code>：將準備好的檔案放在c槽，並以volumn 方式放到docker指定位置。</p>
<p><code> redis-server /usr/local/etc/redis/redis-6380.conf</code>：redis啟動後參考此config設定</p>
<h3 id="17-3-實驗階段"><a href="#17-3-實驗階段" class="headerlink" title="17.3. 實驗階段"></a>17.3. 實驗階段</h3><h4 id="17-3-1-進入Master容器中，簡單設定幾個變數"><a href="#17-3-1-進入Master容器中，簡單設定幾個變數" class="headerlink" title="17.3.1. 進入Master容器中，簡單設定幾個變數"></a>17.3.1. 進入<code>Master</code>容器中，簡單設定幾個變數</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># redis-cli</span></span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">(empty array)</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k1 k1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k2 k2</span><br><span class="line">OK</span><br></pre></td></tr></table></figure>

<h4 id="17-3-2-進入Slave容器中，確認同步狀況"><a href="#17-3-2-進入Slave容器中，確認同步狀況" class="headerlink" title="17.3.2. 進入Slave容器中，確認同步狀況"></a>17.3.2. 進入<code>Slave</code>容器中，確認同步狀況</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it 274f /bin/bash</span><br><span class="line">root@274f984345a9:/data<span class="comment"># redis-cli</span></span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;k2&quot;</span></span><br><span class="line">2) <span class="string">&quot;k1&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="17-3-3-再增加一個Slave，這次特別使用方法1："><a href="#17-3-3-再增加一個Slave，這次特別使用方法1：" class="headerlink" title="17.3.3. 再增加一個Slave，這次特別使用方法1："></a>17.3.3. 再增加一個<code>Slave</code>，這次特別使用方法1：</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -it --name redis-slave02 -p 6381:6379 redis redis-server --slaveof 172.17.0.2 6379</span><br></pre></td></tr></table></figure>

<p>節點資源最後如下</p>
<p><img src="https://i.imgur.com/XBw6qQy.png" alt="image-20231216103946054"></p>
<h4 id="17-3-4-Master開始寫入資料，觀查Slave是否同步，如下："><a href="#17-3-4-Master開始寫入資料，觀查Slave是否同步，如下：" class="headerlink" title="17.3.4. Master開始寫入資料，觀查Slave是否同步，如下："></a>17.3.4. Master開始寫入資料，觀查Slave是否同步，如下：</h4><p><img src="https://i.imgur.com/zXP20s8.png" alt="image-20231216103824221"></p>
<h2 id="18-哨兵模式"><a href="#18-哨兵模式" class="headerlink" title="18. 哨兵模式"></a>18. 哨兵模式</h2><p>如果某個節點發生問題，那麼哨兵就會通過發佈訂閱模式來通知其它節點。當主節點不能正常工作時，哨兵會開始一個自動故障轉移的操作，它會將一個從節點升級為新的主節點，然後再將其他從節點指向新的主節點。</p>
<p><img src="https://i.imgur.com/XHcuLXb.png" alt="圖片"></p>
<h3 id="18-1-首先，準備四個docker-1主、2從、1哨"><a href="#18-1-首先，準備四個docker-1主、2從、1哨" class="headerlink" title="18.1. 首先，準備四個docker(1主、2從、1哨)"></a>18.1. 首先，準備四個docker(1主、2從、1哨)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -it --name redis-master -p 6379:6379 redis redis-server --slaveof 172.17.0.2 6379</span><br><span class="line">docker run -it --name redis-slave01 -p 6380:6379 redis redis-server --slaveof 172.17.0.2 6379</span><br><span class="line">docker run -it --name redis-slave02 -p 6381:6379 redis redis-server --slaveof 172.17.0.2 6379</span><br><span class="line">docker run -it --name redis-sentinel -p 6382:6379 redis</span><br></pre></td></tr></table></figure>

<p>結果如下：</p>
<p><img src="https://i.imgur.com/0xUrsaR.png" alt="redis002"></p>
<h3 id="18-2-建立sentinel-conf檔"><a href="#18-2-建立sentinel-conf檔" class="headerlink" title="18.2. 建立sentinel.conf檔"></a>18.2. 建立<code>sentinel.conf</code>檔</h3><p>進入到<code>redis-sentinel</code>容器中，建立<code>sentinel.conf</code>檔，檔案內容如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sentinel monitor mymaster 172.17.0.2 6379 1</span><br></pre></td></tr></table></figure>

<p>參數說明</p>
<ul>
<li><p><code>mymaster</code> 自取名稱，任意填寫</p>
</li>
<li><p><code>172.17.0.2</code> 填master ip</p>
</li>
<li><p><code>6379</code> master port</p>
</li>
<li><p><code>1</code> 投票人數，這邊只有一個哨兵所以就填1即可。</p>
</li>
</ul>
<h3 id="18-3-啟動哨兵模式"><a href="#18-3-啟動哨兵模式" class="headerlink" title="18.3. 啟動哨兵模式"></a>18.3. 啟動哨兵模式</h3><p>在<code>redis-sentinel</code>容器中，執行指令<code>redis-sentinel sentinel.conf</code>，成功啟動預期如下圖：</p>
<p><img src="https://i.imgur.com/B7boGE0.png" alt="redis001"></p>
<h3 id="18-4-模擬master中斷"><a href="#18-4-模擬master中斷" class="headerlink" title="18.4. 模擬master中斷"></a>18.4. 模擬master中斷</h3><p><img src="https://i.imgur.com/helyHzC.png" alt="redis003"></p>
<h3 id="18-5-觀查哨兵自動轉換"><a href="#18-5-觀查哨兵自動轉換" class="headerlink" title="18.5. 觀查哨兵自動轉換"></a>18.5. 觀查哨兵自動轉換</h3><p>哨兵在自動切換需要一些時間，等待一下…就會看到訊息開始在運作，透過<code>info replication</code>查看，可以觀查到原本的<code>slave01</code>升級變為<code>master</code>，實驗結束，結果如下圖：</p>
<p><img src="https://i.imgur.com/52ZiVNr.png" alt="redis004"></p>
<h2 id="19-模擬排隊程式"><a href="#19-模擬排隊程式" class="headerlink" title="19. 模擬排隊程式"></a>19. 模擬排隊程式</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// See https://aka.ms/new-console-template for more information</span></span><br><span class="line"><span class="keyword">using</span> StackExchange.Redis;</span><br><span class="line"></span><br><span class="line">Console.WriteLine(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立 ConnectionMultiplexer</span></span><br><span class="line"><span class="keyword">var</span> redis = ConnectionMultiplexer.Connect(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">IDatabase db = redis.GetDatabase();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空可能存在的相關鍵</span></span><br><span class="line">db.KeyDelete(<span class="string">&quot;queue&quot;</span>);</span><br><span class="line">db.KeyDelete(<span class="string">&quot;processed&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 啟動兩個模擬客戶端</span></span><br><span class="line">Task.Run(() =&gt; EnqueueCustomers(redis));</span><br><span class="line">Task.Run(() =&gt; ProcessQueue(redis));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 防止主執行緒退出</span></span><br><span class="line">Console.ReadLine();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">async</span> Task <span class="title">EnqueueCustomers</span>(<span class="params">ConnectionMultiplexer redis</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    IDatabase db = redis.GetDatabase();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> customerNumber = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> customer = <span class="string">$&quot;Customer-<span class="subst">&#123;customerNumber&#125;</span>&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 將客戶加入排隊</span></span><br><span class="line">        db.ListRightPush(<span class="string">&quot;queue&quot;</span>, customer);</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;Enqueued <span class="subst">&#123;customer&#125;</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 模擬客戶隨機到達的時間</span></span><br><span class="line">        <span class="keyword">await</span> Task.Delay(TimeSpan.FromSeconds(<span class="keyword">new</span> Random().Next(<span class="number">1</span>, <span class="number">5</span>)));</span><br><span class="line"></span><br><span class="line">        customerNumber++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">async</span> Task <span class="title">ProcessQueue</span>(<span class="params">ConnectionMultiplexer redis</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    IDatabase db = redis.GetDatabase();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 從排隊中取得下一位客戶</span></span><br><span class="line">        <span class="built_in">string</span> customer = db.ListLeftPop(<span class="string">&quot;queue&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (customer != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 處理客戶</span></span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;Processing <span class="subst">&#123;customer&#125;</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 將已處理的客戶加入已處理清單</span></span><br><span class="line">            db.ListRightPush(<span class="string">&quot;processed&quot;</span>, customer);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 若排隊為空，等待一段時間再檢查</span></span><br><span class="line">            <span class="keyword">await</span> Task.Delay(TimeSpan.FromSeconds(<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="19-1-執行過程"><a href="#19-1-執行過程" class="headerlink" title="19.1. 執行過程"></a>19.1. 執行過程</h3><p><img src="https://i.imgur.com/Qzk5Pxh.png" alt="image-20231211164712006"></p>
<h3 id="19-2-觀查redis狀況"><a href="#19-2-觀查redis狀況" class="headerlink" title="19.2. 觀查redis狀況"></a>19.2. 觀查redis狀況</h3><p><img src="https://i.imgur.com/7ra7MSN.png" alt="image-20231211164740246"></p>
<h2 id="20-參考連結"><a href="#20-參考連結" class="headerlink" title="20. 參考連結"></a>20. 參考連結</h2><ul>
<li><a href="https://github.com/qishibo/AnotherRedisDesktopManager/">GUI工具：GitHub:Another Redis Desktop Manager</a></li>
<li><a href="https://www.bilibili.com/video/BV1Jj411D7oG/">【GeekHour】一小时Redis教程</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/443370796">谈谈Redis五种数据结构及真实应用场景</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/42056183">分布式锁看这篇就够了</a><ul>
<li>有空記得看</li>
</ul>
</li>
<li><a href="https://raw.githubusercontent.com/redis/redis/7.2/redis.conf">官網Redis 7.2 config 參考</a></li>
<li><a href="https://github.com/kitefree/RedisNote">個人筆記-RedisNote</a><ul>
<li>包含程式碼範例、redis config檔</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>NoSQL</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>高併發</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Gitea搭配MSSQL筆記</title>
    <url>/2023/12/30/2023-12-30%20Gitea%E6%90%AD%E9%85%8DMSSQL%E7%AD%86%E8%A8%98/</url>
    <content><![CDATA[<h2 id="1-安裝Gitea搭配MSSQL筆記"><a href="#1-安裝Gitea搭配MSSQL筆記" class="headerlink" title="1. 安裝Gitea搭配MSSQL筆記"></a>1. 安裝Gitea搭配MSSQL筆記</h2><h3 id="1-1-DB-SQL-SERVER-相關設定"><a href="#1-1-DB-SQL-SERVER-相關設定" class="headerlink" title="1.1. DB:SQL SERVER 相關設定"></a>1.1. DB:SQL SERVER 相關設定</h3><h4 id="1-1-1-開放1433-port"><a href="#1-1-1-開放1433-port" class="headerlink" title="1.1.1. 開放1433 port"></a>1.1.1. 開放1433 port</h4><p>開放資料庫<code>1433</code>port 對外開放，gitea才能訪問。</p>
<p><img src="https://i.imgur.com/TbBrb4z.png" alt="001"></p>
<span id="more"></span>

<h4 id="1-1-2-建立使用者帳號與資料庫"><a href="#1-1-2-建立使用者帳號與資料庫" class="headerlink" title="1.1.2. 建立使用者帳號與資料庫"></a>1.1.2. 建立使用者帳號與資料庫</h4><p><img src="https://i.imgur.com/1G7BpMR.png" alt="002"></p>
<p>連線物件，確認開放兩種驗證模式</p>
<p><img src="https://i.imgur.com/x2Js2G5.png" alt="003"></p>
<h4 id="1-1-3-設定gitea角色可使用gitea資料庫"><a href="#1-1-3-設定gitea角色可使用gitea資料庫" class="headerlink" title="1.1.3. 設定gitea角色可使用gitea資料庫"></a>1.1.3. 設定gitea角色可使用gitea資料庫</h4><p><img src="https://i.imgur.com/oAJhvqT.png" alt="004"></p>
<h3 id="1-2-Gitea-伺服器對外網路防火牆設定"><a href="#1-2-Gitea-伺服器對外網路防火牆設定" class="headerlink" title="1.2. Gitea:伺服器對外網路防火牆設定"></a>1.2. Gitea:伺服器對外網路防火牆設定</h3><h4 id="1-2-1-新增規則"><a href="#1-2-1-新增規則" class="headerlink" title="1.2.1. 新增規則"></a>1.2.1. 新增規則</h4><p><img src="https://i.imgur.com/Fc0HdhV.png" alt="007"></p>
<h4 id="1-2-2-連接埠"><a href="#1-2-2-連接埠" class="headerlink" title="1.2.2. 連接埠"></a>1.2.2. 連接埠</h4><p><img src="https://i.imgur.com/Qx0YtoQ.png" alt="008"></p>
<h4 id="1-2-3-TCP"><a href="#1-2-3-TCP" class="headerlink" title="1.2.3. TCP"></a>1.2.3. TCP</h4><p><img src="https://i.imgur.com/Re9l7an.png" alt="009"></p>
<h4 id="1-2-4-允許連線"><a href="#1-2-4-允許連線" class="headerlink" title="1.2.4. 允許連線"></a>1.2.4. 允許連線</h4><p><img src="https://i.imgur.com/zOb7LZX.png" alt="010"></p>
<h4 id="1-2-5-何時套用規則"><a href="#1-2-5-何時套用規則" class="headerlink" title="1.2.5. 何時套用規則"></a>1.2.5. 何時套用規則</h4><p><img src="https://i.imgur.com/BPlDghW.png" alt="011"></p>
<h4 id="1-2-6-取名稱"><a href="#1-2-6-取名稱" class="headerlink" title="1.2.6. 取名稱"></a>1.2.6. 取名稱</h4><p><img src="https://i.imgur.com/WSSQhKW.png" alt="012"></p>
<h3 id="1-3-Gitea-安裝"><a href="#1-3-Gitea-安裝" class="headerlink" title="1.3. Gitea 安裝"></a>1.3. Gitea 安裝</h3><h4 id="1-3-1-下載、擺放、執行啟動"><a href="#1-3-1-下載、擺放、執行啟動" class="headerlink" title="1.3.1. 下載、擺放、執行啟動"></a>1.3.1. 下載、擺放、執行啟動</h4><p>把下載的<code>gitea.exe</code> 放在<code>C:\gitea</code>資料夾底下，並執行<code>gitea.exe</code>，結果如下：</p>
<p><img src="https://i.imgur.com/RThtEtB.png" alt="image-20231228164806393"></p>
<h4 id="1-3-2-訪問網站、安裝設定"><a href="#1-3-2-訪問網站、安裝設定" class="headerlink" title="1.3.2. 訪問網站、安裝設定"></a>1.3.2. 訪問網站、安裝設定</h4><p>輸入<code>localhost:3000</code>進行訪問，在<code>初始組態</code>區塊資料庫類型選擇<code>MSSQL</code>，主機、帳號、密碼、資料庫名稱請依序填齊。</p>
<p><img src="https://i.imgur.com/Sw49GWD.png" alt="image-20231228164931216"></p>
<p><code>可選設定區塊</code>建立一個管理員帳號。</p>
<p><img src="https://i.imgur.com/KZX36DV.png" alt="image-20231228165338531"></p>
<h4 id="1-3-3-安裝完成"><a href="#1-3-3-安裝完成" class="headerlink" title="1.3.3. 安裝完成"></a>1.3.3. 安裝完成</h4><p><img src="https://i.imgur.com/SFzdBwN.png" alt="image-20231228165450016"></p>
<h4 id="1-3-4-看資料夾變化"><a href="#1-3-4-看資料夾變化" class="headerlink" title="1.3.4. 看資料夾變化"></a>1.3.4. 看資料夾變化</h4><p>安裝完成後就會多以下資料夾，其中<code>C:\gitea\custom\conf</code>路徑底下有<code>app.ini</code>，之後相關系統設定都可以在這邊再進行調整，例如port 3000 改為 port 80  等等。</p>
<p><img src="https://i.imgur.com/5Vb7lO2.png" alt="image-20231228165612768"></p>
<h3 id="1-4-加入服務，自動啟動"><a href="#1-4-加入服務，自動啟動" class="headerlink" title="1.4. 加入服務，自動啟動"></a>1.4. 加入服務，自動啟動</h3><p>透過指令新增：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sc create gitea start= auto binPath= <span class="string">&quot;&quot;</span>C:\gitea\gitea.exe<span class="string">&quot; web --config &quot;</span>C:\gitea\custom\conf\app.ini<span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/rVhFto0.png" alt="005"></p>
<h4 id="1-4-1-檢查加入服務是否成功"><a href="#1-4-1-檢查加入服務是否成功" class="headerlink" title="1.4.1. 檢查加入服務是否成功"></a>1.4.1. 檢查加入服務是否成功</h4><p><img src="https://i.imgur.com/jPShE0r.png" alt="006"></p>
<h3 id="1-5-連結參考"><a href="#1-5-連結參考" class="headerlink" title="1.5. 連結參考"></a>1.5. 連結參考</h3><ul>
<li><a href="https://anemology.cc/post/sql-server-enabled-sa-account-and-1433-port/">MS SQL Server 啟用 sa 帳戶與 1433 連接埠</a></li>
<li><a href="https://medium.com/@jeff163552/sql-server-%E7%99%BB%E5%85%A5%E9%8C%AF%E8%AA%A4-18456-9d70af0e0532">SQL Server 登入錯誤:18456</a></li>
</ul>
]]></content>
      <categories>
        <category>Gitea</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Gitea</tag>
        <tag>MSSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>ASP.NET、NetCoreAPI整合reCAPTCHA V2記錄</title>
    <url>/2024/01/20/2024-01-20%20ASP.NET%E3%80%81NetCoreAPI%E6%95%B4%E5%90%88reCAPTCHA%20V2%E8%A8%98%E9%8C%84/</url>
    <content><![CDATA[<h2 id="ASP-NET、NetCoreAPI整合reCAPTCHA-V2記錄"><a href="#ASP-NET、NetCoreAPI整合reCAPTCHA-V2記錄" class="headerlink" title="ASP.NET、NetCoreAPI整合reCAPTCHA V2記錄"></a>ASP.NET、NetCoreAPI整合reCAPTCHA V2記錄</h2><h3 id="1-Google-服務申請與設定"><a href="#1-Google-服務申請與設定" class="headerlink" title="1. Google 服務申請與設定"></a>1. Google 服務申請與設定</h3><h4 id="1-1-註冊新網站"><a href="#1-1-註冊新網站" class="headerlink" title="1.1. 註冊新網站"></a>1.1. 註冊新網站</h4><p>輸入以下網址，會看到下圖的結果：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">https://www.google.com/recaptcha/admin</span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/33ZQ6qQ.png" alt="image-20240117093252504"></p>
<span id="more"></span>

<ul>
<li><p>標籤</p>
<ul>
<li>任一填寫</li>
</ul>
</li>
<li><p>類型</p>
<ul>
<li>這邊使用v2，「我不是機器人」核取方塊</li>
</ul>
</li>
<li><p>網域</p>
<ul>
<li>測試階段加入<code>localhost</code></li>
</ul>
</li>
</ul>
<h4 id="1-2-產生金鑰"><a href="#1-2-產生金鑰" class="headerlink" title="1.2. 產生金鑰"></a>1.2. 產生金鑰</h4><p>點選<code>提交</code>按鈕後，會跳轉到下圖的頁面，其中有兩個金鑰後續會使用</p>
<p><img src="https://i.imgur.com/PaBCrX2.png" alt="image-20240117093016927"></p>
<h4 id="1-3-重新進入admin介面"><a href="#1-3-重新進入admin介面" class="headerlink" title="1.3. 重新進入admin介面"></a>1.3. 重新進入admin介面</h4><figure class="highlight http"><table><tr><td class="code"><pre><span class="line">https://www.google.com/recaptcha/admin</span><br></pre></td></tr></table></figure>

<p>可以看到已成功建立，並於首頁出現相關面版資訊，如下圖：</p>
<p><img src="https://i.imgur.com/PHS5VT2.png" alt="image-20240117093845844"></p>
<h3 id="2-WebForm-程式開發環境說明"><a href="#2-WebForm-程式開發環境說明" class="headerlink" title="2. WebForm 程式開發環境說明"></a>2. WebForm 程式開發環境說明</h3><ul>
<li>Visual Studio 2022</li>
<li>ASP.NET WebForm</li>
</ul>
<h4 id="2-1-VS2022-WebForm環境建置-Visual-Studio-Installer"><a href="#2-1-VS2022-WebForm環境建置-Visual-Studio-Installer" class="headerlink" title="2.1. VS2022 WebForm環境建置 (Visual Studio Installer)"></a>2.1. VS2022 WebForm環境建置 (Visual Studio Installer)</h4><ol>
<li>找出此軟體進行安裝，如下：</li>
</ol>
<p><img src="https://i.imgur.com/yjiSU0w.png" alt="image-20240117100529577"></p>
<ol start="2">
<li>開啟軟體後，勾選紅框選項進行安裝，如下：</li>
</ol>
<p><img src="https://i.imgur.com/1XlVf2U.png" alt="image-20240117100457948"></p>
<ol start="3">
<li><p>建立新專案</p>
<p>第二步驟安裝完成後，建立新專案就會看到新的選項囉，如下：</p>
</li>
</ol>
<p><img src="https://i.imgur.com/6mAgugL.png" alt="image-20240117100638981"></p>
<h4 id="2-2-時序圖"><a href="#2-2-時序圖" class="headerlink" title="2.2. 時序圖"></a>2.2. 時序圖</h4><p>簡單來說，大致粗分為：</p>
<ul>
<li>渲染出reCAPTCHA圖形驗證於client 端 browser</li>
<li>WebServer與Google進行溝通驗證</li>
<li>回傳驗證結果至client端</li>
</ul>
<p><img src="https://i.imgur.com/eiHJnGA.png" alt="Google Recaptcha V2"></p>
<p><a href="https://dejanstojanovic.net/aspnet/2018/may/using-google-recaptcha-v2-in-aspnet-core-web-application/">圖片參考來源來自dejanstojanovic.net</a></p>
<h4 id="2-3-程式實作範例"><a href="#2-3-程式實作範例" class="headerlink" title="2.3. 程式實作範例"></a>2.3. 程式實作範例</h4><h5 id="2-3-1-WebForm-aspx"><a href="#2-3-1-WebForm-aspx" class="headerlink" title="2.3.1. WebForm.aspx"></a>2.3.1. WebForm.aspx</h5><p>這隻程式的重點在兩個部分：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://www.google.com/recaptcha/api.js&quot;</span> <span class="keyword">async</span> defer&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;g-recaptcha&quot;</span> <span class="attr">data-sitekey</span>=<span class="string">&quot;6L...EA&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>WebForm.aspx</code></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">&lt;%@ Page Language=<span class="string">&quot;C#&quot;</span> AutoEventWireup=<span class="string">&quot;true&quot;</span> CodeBehind=<span class="string">&quot;WebForm.aspx.cs&quot;</span> Inherits=<span class="string">&quot;ASP_NET_reCAPTCHA.WebForm&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"></span><br><span class="line">&lt;html xmlns=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span><br><span class="line">&lt;head runat=<span class="string">&quot;server&quot;</span>&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span>/&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;https://www.google.com/recaptcha/api.js&quot;</span> <span class="keyword">async</span> defer&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form id=<span class="string">&quot;form1&quot;</span> runat=<span class="string">&quot;server&quot;</span>&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            帳號：&lt;asp:TextBox ID=<span class="string">&quot;TextBox1&quot;</span> runat=<span class="string">&quot;server&quot;</span>&gt;&lt;/asp:TextBox&gt;</span><br><span class="line">            密碼：&lt;asp:TextBox ID=<span class="string">&quot;TextBox2&quot;</span> runat=<span class="string">&quot;server&quot;</span>&gt;&lt;/asp:TextBox&gt;            </span><br><span class="line">            &lt;div <span class="keyword">class</span>=<span class="string">&quot;g-recaptcha&quot;</span> data-sitekey=<span class="string">&quot;6L...EA&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">            &lt;asp:Button ID=<span class="string">&quot;btnSubmit&quot;</span> runat=<span class="string">&quot;server&quot;</span> Text=<span class="string">&quot;送出&quot;</span> OnClick=<span class="string">&quot;btnSubmit_Click&quot;</span> /&gt;</span><br><span class="line">            &lt;asp:Label ID=<span class="string">&quot;lblMsg&quot;</span> runat=<span class="string">&quot;server&quot;</span> Text=<span class="string">&quot;&quot;</span>&gt;&lt;/asp:Label&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        </span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="2-3-2-WebForm-aspx-cs"><a href="#2-3-2-WebForm-aspx-cs" class="headerlink" title="2.3.2. WebForm.aspx.cs"></a>2.3.2. WebForm.aspx.cs</h5><p>當點擊<code>送出</code>按鈕後，會跑到<code>btnSubmit_Click</code>事件，接著讓server與google進行驗證確認，重點有幾項：</p>
<p><code>apiKey</code></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> apiKey = <span class="string">&quot;6L...Dh&quot;</span>;</span><br></pre></td></tr></table></figure>

<p><code>g-recaptcha-response</code></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gRecaptchaResponse = Request.Form[<span class="string">&quot;g-recaptcha-response&quot;</span>];</span><br></pre></td></tr></table></figure>

<p><code>WebForm.aspx.cs</code></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Newtonsoft.Json;</span><br><span class="line"><span class="keyword">using</span> Newtonsoft.Json.Linq;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Web;</span><br><span class="line"><span class="keyword">using</span> System.Web.Services.Description;</span><br><span class="line"><span class="keyword">using</span> System.Web.UI;</span><br><span class="line"><span class="keyword">using</span> System.Web.UI.WebControls;</span><br><span class="line"><span class="keyword">using</span> System.Xml.Linq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ASP_NET_reCAPTCHA</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">WebForm</span> : <span class="title">System.Web.UI.Page</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">Page_Load</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">btnSubmit_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> apiKey = <span class="string">&quot;6L...Dh&quot;</span>;</span><br><span class="line">            <span class="keyword">var</span> url = <span class="string">&quot;https://www.google.com/recaptcha/api/siteverify&quot;</span>;</span><br><span class="line">            <span class="keyword">var</span> wc = <span class="keyword">new</span> System.Net.WebClient();</span><br><span class="line">            wc.Headers.Add(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>);</span><br><span class="line">            <span class="keyword">var</span> gRecaptchaResponse = Request.Form[<span class="string">&quot;g-recaptcha-response&quot;</span>];</span><br><span class="line">            <span class="keyword">var</span> data = <span class="string">&quot;secret=&quot;</span> + apiKey + <span class="string">&quot;&amp;response=&quot;</span> + gRecaptchaResponse;</span><br><span class="line">            <span class="keyword">var</span> json = wc.UploadString(url, data);</span><br><span class="line">            <span class="comment">// JSON 反序化取 .success 屬性 true/false 判斷</span></span><br><span class="line">            <span class="keyword">var</span> success = JsonConvert.DeserializeObject&lt;JObject&gt;(json).Value&lt;<span class="built_in">bool</span>&gt;(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (!success)</span><br><span class="line">            &#123;</span><br><span class="line">                lblMsg.Text = <span class="string">&quot;驗證碼有誤&quot;</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> 檢查帳號密碼</span></span><br><span class="line">            lblMsg.Text = <span class="string">&quot;確認過眼神，你不是機器人，但程式還沒完成&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-3-3-測試與觀查"><a href="#2-3-3-測試與觀查" class="headerlink" title="2.3.3. 測試與觀查"></a>2.3.3. 測試與觀查</h5><h6 id="2-3-3-1-第一次載入畫面"><a href="#2-3-3-1-第一次載入畫面" class="headerlink" title="2.3.3.1. 第一次載入畫面"></a>2.3.3.1. 第一次載入畫面</h6><p><img src="https://i.imgur.com/govkSLd.png" alt="image-20240117110956325"></p>
<h6 id="2-3-3-2-觀查點選我不是機器人核取方塊"><a href="#2-3-3-2-觀查點選我不是機器人核取方塊" class="headerlink" title="2.3.3.2. 觀查點選我不是機器人核取方塊"></a>2.3.3.2. 觀查點選<code>我不是機器人</code>核取方塊</h6><p>點選前與後，在<code>document.getElementById(&quot;g-recaptcha-response&quot;).value</code>值的變化，如下圖紅框：</p>
<p><img src="https://i.imgur.com/sJmnj6R.png" alt="image-20240117112239984"></p>
<h6 id="2-3-3-3-最後結果"><a href="#2-3-3-3-最後結果" class="headerlink" title="2.3.3.3. 最後結果"></a>2.3.3.3. 最後結果</h6><p><img src="https://i.imgur.com/rUV2d5j.png" alt="image-20240117111104999"></p>
<h3 id="3-NET-CORE-API-程式開發環境說明"><a href="#3-NET-CORE-API-程式開發環境說明" class="headerlink" title="3. .NET CORE API 程式開發環境說明"></a>3. .NET CORE API 程式開發環境說明</h3><ul>
<li>NET CORE 6.5.0</li>
</ul>
<h4 id="3-1-VS2022-NET-CORE-API-環境建置"><a href="#3-1-VS2022-NET-CORE-API-環境建置" class="headerlink" title="3.1. VS2022 NET CORE API 環境建置"></a>3.1. VS2022 NET CORE API 環境建置</h4><p>key <code>api</code>找到對應專案類型，如下：</p>
<p><img src="https://i.imgur.com/X04rU0u.png" alt="image-20240120215451256"></p>
<h4 id="3-2-程式實作範例"><a href="#3-2-程式實作範例" class="headerlink" title="3.2. 程式實作範例"></a>3.2. 程式實作範例</h4><h5 id="3-2-1-前端程式碼"><a href="#3-2-1-前端程式碼" class="headerlink" title="3.2.1. 前端程式碼"></a>3.2.1. 前端程式碼</h5><p>準備三個檔案<code>index.html</code>、<code>script.js</code>、<code>style.css</code>，最後結果如下圖：</p>
<p><img src="https://i.imgur.com/7oZ1hMK.png" alt="image-20240120220347776"></p>
<h5 id="3-2-2-wwwroot-index-html"><a href="#3-2-2-wwwroot-index-html" class="headerlink" title="3.2.2. wwwroot\index.html"></a>3.2.2. <code>wwwroot\index.html</code></h5><p>跟webform一樣，需要<code>g-recaptcha</code>與引入<code>https://www.google.com/recaptcha/api.js</code>。差別是送出的click透過ajax實現驗證。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Login Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://www.google.com/recaptcha/api.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;script.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;login-page&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;login-form&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Username&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Password&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;g-recaptcha&quot;</span> <span class="attr">data-sitekey</span>=<span class="string">&quot;6Lc...EA&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;LoginButton()&quot;</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="3-2-3-wwwroot-script-js"><a href="#3-2-3-wwwroot-script-js" class="headerlink" title="3.2.3. wwwroot\script.js"></a>3.2.3. <code>wwwroot\script.js</code></h5><p>透過ajax方式call <code>User/Captcha</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">LoginButton</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> reCaptchaResponse = grecaptcha.<span class="title function_">getResponse</span>();</span><br><span class="line">    <span class="keyword">if</span> (reCaptchaResponse) &#123;</span><br><span class="line">        $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">            <span class="attr">url</span>: <span class="string">&quot;https://localhost:7166/api/User/Captcha&quot;</span>,</span><br><span class="line">            <span class="attr">data</span>: &#123; <span class="attr">userResponse</span>: reCaptchaResponse &#125;,</span><br><span class="line">            <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (data) &#123;</span><br><span class="line">                    <span class="comment">//API returned true</span></span><br><span class="line">                    <span class="title function_">alert</span>(<span class="string">&quot;Captcha Verified&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//API returned false</span></span><br><span class="line">                    <span class="title function_">alert</span>(<span class="string">&quot;Please verify captcha again&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">error</span>: <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;Please try again&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;Something went wrong with reCaptcha. Please try again!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-2-4-wwwroot-style-css"><a href="#3-2-4-wwwroot-style-css" class="headerlink" title="3.2.4. wwwroot\style.css"></a>3.2.4. <code>wwwroot\style.css</code></h5><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> url(<span class="attribute">https</span>://fonts.googleapis.com/css?family=<span class="attribute">Roboto</span>:<span class="number">300</span>);</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.login-page</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">360px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">8%</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.form</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">116</span>, <span class="number">223</span>, <span class="number">187</span>);</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">360px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">20px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.2</span>), <span class="number">0</span> <span class="number">5px</span> <span class="number">5px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.24</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.form</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line">        <span class="attribute">font-family</span>: <span class="string">&quot;Roboto&quot;</span>, sans-serif;</span><br><span class="line">        <span class="attribute">outline</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">background</span>: <span class="number">#f2f2f2</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">15px</span>;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">15px</span>;</span><br><span class="line">        <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.form</span> <span class="selector-tag">button</span> &#123;</span><br><span class="line">        <span class="attribute">font-family</span>: <span class="string">&quot;Roboto&quot;</span>, sans-serif;</span><br><span class="line">        <span class="attribute">text-transform</span>: uppercase;</span><br><span class="line">        <span class="attribute">outline</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">8</span>, <span class="number">103</span>, <span class="number">116</span>);</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">15px</span>;</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#FFFFFF</span>;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">        -webkit-<span class="attribute">transition</span>: all <span class="number">0.3</span> ease;</span><br><span class="line">        <span class="attribute">transition</span>: all <span class="number">0.3</span> ease;</span><br><span class="line">        <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.form</span> <span class="selector-tag">button</span><span class="selector-pseudo">:hover</span>, <span class="selector-class">.form</span> <span class="selector-tag">button</span><span class="selector-pseudo">:active</span>, <span class="selector-class">.form</span> <span class="selector-tag">button</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">            <span class="attribute">background</span>: <span class="number">#073b44</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-2-5-後端程式碼"><a href="#3-2-5-後端程式碼" class="headerlink" title="3.2.5. 後端程式碼"></a>3.2.5. 後端程式碼</h5><h5 id="3-2-6-appsettings-json"><a href="#3-2-6-appsettings-json" class="headerlink" title="3.2.6. appsettings.json"></a>3.2.6. <code>appsettings.json</code></h5><p>設定<code>reCaptcha</code>金鑰，api controller 會用到</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;Logging&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;LogLevel&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;Default&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Information&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Microsoft.AspNetCore&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Warning&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;reCaptcha&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;SecretKey&quot;</span><span class="punctuation">:</span> <span class="string">&quot;6L...Dh&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;AllowedHosts&quot;</span><span class="punctuation">:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h5 id="3-2-7-Program-cs"><a href="#3-2-7-Program-cs" class="headerlink" title="3.2.7. Program.cs"></a>3.2.7. <code>Program.cs</code></h5><p>啟動<code>CORS</code>功能</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//讓前端專案callapi時，會有跨網站存取的議題，請視情況調整，以下完全無限制。</span></span><br><span class="line">builder.Services.AddCors(options =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    options.AddDefaultPolicy(</span><br><span class="line">        policy =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            policy.AllowAnyOrigin()</span><br><span class="line">                .AllowAnyHeader()</span><br><span class="line">                .AllowAnyMethod();</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//啟動cors功能</span></span><br><span class="line">app.UseCors();</span><br></pre></td></tr></table></figure>

<p>注入httpclient功能</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//後端程式要與googl api溝通，所以要將這個服務注入</span></span><br><span class="line">builder.Services.AddHttpClient();</span><br></pre></td></tr></table></figure>

<p>完整程式碼如下：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> builder = WebApplication.CreateBuilder(args);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add services to the container.</span></span><br><span class="line"></span><br><span class="line">builder.Services.AddControllers();</span><br><span class="line"><span class="comment">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span></span><br><span class="line">builder.Services.AddEndpointsApiExplorer();</span><br><span class="line">builder.Services.AddSwaggerGen();</span><br><span class="line"></span><br><span class="line"><span class="comment">//讓前端專案callapi時，會有跨網站存取的議題，請視情況調整，以下完全無限制。</span></span><br><span class="line">builder.Services.AddCors(options =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    options.AddDefaultPolicy(</span><br><span class="line">        policy =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            policy.AllowAnyOrigin()</span><br><span class="line">                .AllowAnyHeader()</span><br><span class="line">                .AllowAnyMethod();</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//後端程式要與googl api溝通，所以要將這個服務注入</span></span><br><span class="line">builder.Services.AddHttpClient();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = builder.Build();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Configure the HTTP request pipeline.</span></span><br><span class="line"><span class="keyword">if</span> (app.Environment.IsDevelopment())</span><br><span class="line">&#123;</span><br><span class="line">    app.UseSwagger();</span><br><span class="line">    app.UseSwaggerUI();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有使用到wwwroot資料夾，以下兩行就必須使用</span></span><br><span class="line">app.UseDefaultFiles();</span><br><span class="line">app.UseStaticFiles();</span><br><span class="line"></span><br><span class="line"><span class="comment">//啟動cors功能</span></span><br><span class="line">app.UseCors();</span><br><span class="line"></span><br><span class="line">app.UseHttpsRedirection();</span><br><span class="line"></span><br><span class="line">app.UseAuthorization();</span><br><span class="line"></span><br><span class="line">app.MapControllers();</span><br><span class="line"></span><br><span class="line">app.Run();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="3-2-8-Controllers-UserController"><a href="#3-2-8-Controllers-UserController" class="headerlink" title="3.2.8. Controllers\UserController"></a>3.2.8. <code>Controllers\UserController</code></h5><p>在<code>controllers</code>資料夾底下建立新controller</p>
<p><img src="https://i.imgur.com/ZQXNeTe.png" alt="image-20240120222645961"></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Authorization;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Http;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class="line"><span class="keyword">using</span> Newtonsoft.Json;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">reCaptchaAPI.Controllers</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Route(<span class="string">&quot;api/[controller]&quot;</span>)</span>]</span><br><span class="line">    [<span class="meta">ApiController</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UserController</span> : <span class="title">ControllerBase</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> IConfiguration _configuration;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> HttpClient _httpClient;</span><br><span class="line">        <span class="comment">//注入兩個服務</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">UserController</span>(<span class="params">IConfiguration configuration, HttpClient httpClient</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _configuration = configuration;</span><br><span class="line">            _httpClient = httpClient;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//API 名稱為 Captcha</span></span><br><span class="line">        [<span class="meta">HttpGet(<span class="string">&quot;Captcha&quot;</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="built_in">bool</span>&gt; <span class="title">GetreCaptchaResponse</span>(<span class="params"><span class="built_in">string</span> userResponse</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//取得config中的金鑰</span></span><br><span class="line">            <span class="keyword">var</span> reCaptchaSecretKey = _configuration[<span class="string">&quot;reCaptcha:SecretKey&quot;</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (reCaptchaSecretKey != <span class="literal">null</span> &amp;&amp; userResponse != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//設定金鑰與ajax丟過來的userResponse</span></span><br><span class="line">                <span class="keyword">var</span> content = <span class="keyword">new</span> FormUrlEncodedContent(<span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    &#123;<span class="string">&quot;secret&quot;</span>, reCaptchaSecretKey &#125;,</span><br><span class="line">                    &#123;<span class="string">&quot;response&quot;</span>, userResponse &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//向google 驗證</span></span><br><span class="line">                <span class="keyword">var</span> response = <span class="keyword">await</span> _httpClient.PostAsync(<span class="string">&quot;https://www.google.com/recaptcha/api/siteverify&quot;</span>, content);</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//驗證結果</span></span><br><span class="line">                <span class="keyword">if</span> (response.IsSuccessStatusCode)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//第一種寫法，將結果映射到reCaptchaResponse</span></span><br><span class="line">                    <span class="keyword">var</span> result = <span class="keyword">await</span> response.Content.ReadFromJsonAsync&lt;reCaptchaResponse&gt;();</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">//第二種寫法，直接取得字串</span></span><br><span class="line">                    <span class="comment">//var result = await response.Content.ReadAsStringAsync();</span></span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">return</span> result.Success;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">reCaptchaResponse</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">bool</span> Success &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">                        </span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">string</span>[] ErrorCodes &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3-3-測試"><a href="#3-3-測試" class="headerlink" title="3.3. 測試"></a>3.3. 測試</h4><p><img src="https://i.imgur.com/OZNBx3m.png" alt="image-20240120222741531"></p>
<p><img src="https://i.imgur.com/b84ovuL.png" alt="image-20240120222809682"></p>
<p><img src="https://i.imgur.com/Edt93Ej.png" alt="image-20240120222827090"></p>
<p><img src="https://i.imgur.com/I4Ti2yl.png" alt="image-20240120222852585"></p>
<h3 id="4-參考連結"><a href="#4-參考連結" class="headerlink" title="4. 參考連結"></a>4. 參考連結</h3><ul>
<li><a href="https://blog.darkthread.net/blog/recaptcha-not-robot-notes/">我不是機器人版 reCAPTCHA 筆記</a><ul>
<li>黑大筆記</li>
</ul>
</li>
<li><a href="https://developers.google.com/recaptcha/docs/display?hl=zh-tw">自動顯示 reCAPTCHA 小工具</a><ul>
<li>google docs，文章有提供相關範例及應用方式</li>
</ul>
</li>
<li><a href="https://developers.google.com/recaptcha/docs/verify?hl=zh-tw">驗證使用者的回應</a><ul>
<li>google docs，文章有提及相關範例及應用方式</li>
</ul>
</li>
<li><a href="https://medium.com/@meghnav274/implementing-google-recaptcha-using-asp-net-core-web-24f539ba4987">Implementing Google reCAPTCHA using ASP.NET Core Web API</a><ul>
<li>主要是參考這篇測試實作NET CORE Web API 的reCAPTCHA</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>C#</category>
        <category>reCAPTCHA</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>NET CORE</tag>
        <tag>ASP.NET</tag>
        <tag>reCAPTCHA</tag>
      </tags>
  </entry>
  <entry>
    <title>Gitea SSL憑證安裝與SSH連線設定</title>
    <url>/2024/02/20/2024-02-20%20Gitea%20SSL%E6%86%91%E8%AD%89%E5%AE%89%E8%A3%9D%E8%88%87SSH%E9%80%A3%E7%B7%9A%E8%A8%AD%E5%AE%9A/</url>
    <content><![CDATA[<h2 id="1-Gitea-SSL憑證安裝與SSH連線設定"><a href="#1-Gitea-SSL憑證安裝與SSH連線設定" class="headerlink" title="1. Gitea SSL憑證安裝與SSH連線設定"></a>1. Gitea SSL憑證安裝與SSH連線設定</h2><h3 id="1-1-動機"><a href="#1-1-動機" class="headerlink" title="1.1. 動機"></a>1.1. 動機</h3><p>單位計畫以 HTTPS 提供 Git 服務，已申請相關網域並預計透過 TWCA 認證單位完成 SSL 設定。然而，網路上缺乏針對 TWCA 與 Gitea 整合的完整教學。為此，整理並實作相關流程，記錄於此，方便日後參考，也希望能幫助有相同需求的人。</p>
<span id="more"></span>

<blockquote>
<p>啟用Gitea Server的SSH服務，可大幅增加連線速度</p>
<p>原本為了方便，直接使用 HTTP 網址來複製儲存庫，但較大的儲存庫同步速度非常慢（例如 420MB 的儲存庫需要 18 分鐘）。後來查閱文件並啟用 SSH 服務，發現同一個儲存庫透過 SSH 只需約 2 分鐘即可完成，速度差異非常明顯。以下整理在 Gitea 啟用 SSH 的步驟。<br>參考來源：<a href="https://jdev.tw/blog/5246/gitea-server-ssh-settings#google_vignette">https://jdev.tw/blog/5246/gitea-server-ssh-settings#google_vignette</a></p>
</blockquote>
<h3 id="1-2-安裝openSSL"><a href="#1-2-安裝openSSL" class="headerlink" title="1.2. 安裝openSSL"></a>1.2. 安裝openSSL</h3><p>在gitea伺服器上安裝openSSL軟體，以下是安裝過程記錄。</p>
<h4 id="1-2-1-下載openSSL"><a href="#1-2-1-下載openSSL" class="headerlink" title="1.2.1. 下載openSSL"></a>1.2.1. 下載openSSL</h4><p>在windows底下安裝openssl，下載連結-&gt;<a href="https://slproweb.com/products/Win32OpenSSL.html%EF%BC%8C%E5%85%B6%E4%B8%AD%E6%9C%89%E6%8F%90%E5%88%B0LTS%E7%82%BA3.0.x%EF%BC%8C">https://slproweb.com/products/Win32OpenSSL.html，其中有提到LTS為3.0.x，</a></p>
<blockquote>
<p>November 30, 2023 - OpenSSL 3.2 is available. Users should currently install a 3.x series and generally only need a Light edition. All application developers should have migrated their applications to use the OpenSSL 3.x series. Note that 3.0.x is a LTS release series while 3.2.x is not.</p>
</blockquote>
<p>因此，這次就以3.0.x下載為目標。</p>
<p><img src="https://raw.githubusercontent.com/kitefree/images/main/data/NVd7Qup.png" alt="image-20240220112204762"></p>
<h4 id="1-2-2-設定環境變數"><a href="#1-2-2-設定環境變數" class="headerlink" title="1.2.2. 設定環境變數"></a>1.2.2. 設定環境變數</h4><p>輸入以下指令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sysdm.cpl</span><br></pre></td></tr></table></figure>

<p>輸入指令介面如下：</p>
<p><img src="https://raw.githubusercontent.com/kitefree/images/main/data/ymJu0Ei.png" alt="img"></p>
<p>接著找到<code>進階</code>，再點選<code>環境變數</code>，如下：</p>
<p><img src="https://raw.githubusercontent.com/kitefree/images/main/data/WypRxhB.png" alt="image-20240220131343147"></p>
<p><img src="https://raw.githubusercontent.com/kitefree/images/main/data/HeSioX4.png" alt="image-20240220113209622"></p>
<p>在<code>使用者變數</code>這邊<code>新增</code>一個變數名稱為<code>OPENSSL_CONF</code>，變數值為<code>C:\Program Files\OpenSSL-Win64\bin\openssl.cfg</code>，如下：</p>
<p><img src="https://raw.githubusercontent.com/kitefree/images/main/data/61ME0tl.png" alt="image-20240220131415577"></p>
<p>點選<code>Path</code>，新增一筆<code>C:\Program Files\OpenSSL-Win64\bin</code>，如下：</p>
<p><img src="https://raw.githubusercontent.com/kitefree/images/main/data/E4LCucu.png" alt="image-20240220113808217"></p>
<p><img src="https://raw.githubusercontent.com/kitefree/images/main/data/WWjIRaD.png" alt="image-20240220113931743"></p>
<h4 id="1-2-3-驗證階段"><a href="#1-2-3-驗證階段" class="headerlink" title="1.2.3. 驗證階段"></a>1.2.3. 驗證階段</h4><p>輸入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl version</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/kitefree/images/main/data/z5S5TAB.png" alt="image-20240220114057432"></p>
<h3 id="1-3-建立憑證CSR檔"><a href="#1-3-建立憑證CSR檔" class="headerlink" title="1.3. 建立憑證CSR檔"></a>1.3. 建立憑證CSR檔</h3><p>我們已經可以使用openssl指令了，接著要開始產生相關檔案，以下是相關筆記記錄。</p>
<h4 id="1-3-1-新增ssl-conf檔"><a href="#1-3-1-新增ssl-conf檔" class="headerlink" title="1.3.1. 新增ssl.conf檔"></a>1.3.1. 新增ssl.conf檔</h4><p>先準備好<code>ssl.conf</code>，儲存路徑放在<code>C:\gitea\custom\ssl</code>，<code>ssl.conf</code>檔案內容如下：</p>
<p><code>ssl.conf</code></p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[req]</span></span><br><span class="line"><span class="attr">prompt</span> = <span class="literal">no</span></span><br><span class="line"><span class="attr">default_md</span> = sha256</span><br><span class="line"><span class="attr">default_bits</span> = <span class="number">2048</span></span><br><span class="line"><span class="attr">distinguished_name</span> = dn</span><br><span class="line"><span class="attr">x509_extensions</span> = v3_req</span><br><span class="line"></span><br><span class="line"><span class="section">[dn]</span></span><br><span class="line"><span class="attr">C</span> = TW</span><br><span class="line"><span class="attr">ST</span> = TAIWAN</span><br><span class="line"><span class="attr">L</span> = TAIPEI</span><br><span class="line"><span class="attr">O</span> = NTNU</span><br><span class="line"><span class="attr">OU</span> = SEC</span><br><span class="line"><span class="attr">CN</span> = gitsrv.xxx.xxx</span><br><span class="line"></span><br><span class="line"><span class="section">[v3_req]</span></span><br></pre></td></tr></table></figure>

<p>結果如下：</p>
<p><img src="https://raw.githubusercontent.com/kitefree/images/main/data/vINsK44.png" alt="image-20240220131807320"></p>
<h4 id="1-3-2-執行指令產生CSR檔案"><a href="#1-3-2-執行指令產生CSR檔案" class="headerlink" title="1.3.2. 執行指令產生CSR檔案"></a>1.3.2. 執行指令產生CSR檔案</h4><p>建立私密金鑰並同時建立 CSR (Certificate Signing Request) 憑證要求檔：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl req -new -nodes -sha256 -utf8 -newkey rsa:2048 -keyout server.key -out server.csr -config ssl.conf</span><br></pre></td></tr></table></figure>

<p>執行結果如下：</p>
<p><img src="https://raw.githubusercontent.com/kitefree/images/main/data/AAdX2Z8.png" alt="image-20240220132009724"></p>
<p>會看到這個資料夾底下出現兩個檔案<code>server.csr</code>、<code>server.key</code>，結果如下：</p>
<p><img src="https://raw.githubusercontent.com/kitefree/images/main/data/hH8UybE.png" alt="image-20240220132026768"></p>
<p>產生出來的檔案格式是<code>PEM (Privacy Enhanced Mail)</code>，也就是文字型的，詳細的檔案類型保哥文章寫的很完整，可以參考相關連結研讀。<code>server.csr</code>內容窺探如下：</p>
<p><code>server.csr</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-----BEGIN CERTIFICATE REQUEST-----</span><br><span class="line">MIIC6TCCAdECAQAwgaMxCzAJBgNVBAYTAlRXMQ8wDQYDVQQIDAZUQUlXQU4xDzAN</span><br><span class="line">BgNVBAcMBlRBSVBFSTEqMCgGA1UECgwhTmF0aW9uYWwgVGFpd2FuIE5vcm1hbCBV</span><br><span class="line">bml2ZXJzaXR5MSUwIwYDVQQLDBxUaGUgU2NpZW5jZSBFZHVjYXRpb24gQ2VudGVy</span><br><span class="line">MR8wHQYDVQQDDBZnaXRzcnYudHFlLm50bnUuZWR1LnR3MIIBIjANBgkqhkiG9w0B</span><br><span class="line">AQEFAAOCAQ8AMIIBCgKCAQEAvFTtnxVYnfUBplPT25WOCu57XWPuupp3YOtu1hiN</span><br><span class="line">gZLnzGOFjuY38pRllqm5lTiyt8Z0bGmD1bsgfIeu7JTvFesM7x1xz0jGFC9G9kAH</span><br><span class="line">opunvnbgORmpzSKgBo/m5DLj/P0fP6FgfKzmkDu+Ap3S+0zrA34pjxZ//clMWsiS</span><br><span class="line">CYzwlyQbXxlK3q5tll3vkDh44MesDW1FnllFvzDNHGLPPZbzaJiOw/qgrZ80EV/h</span><br><span class="line">7Fl56aeOutOzLUVgFjYSG9QKL3Xuln1+QQVlwW46Zf12YDsiBdo7NTxZbl+heYkO</span><br><span class="line">JzS8eaWKkO6ZjLo2YyWpLF6nxywIWS7KGD9dbqq26DOtywIDAQABoAAwDQYJKoZI</span><br><span class="line">hvcNAQELBQADggEBACI1XTy7P9Q4iby5mERlEuUOz6UZ/eDMqSuOP2Ql4LeWu/qd</span><br><span class="line">l9iunWzqK3bBu8GAL1dYDKnzab689RgwM1K5g4KdhEGeFRTSpmPl1NwXjlaZ6W3m</span><br><span class="line">2L0iIrrFTXSU0SVi+PN/XKpp0LDC6GubFXz4lanCYV92J6Zq2lml7qdlIyknvXMc</span><br><span class="line">+NDxBQCEHLTBihw7ghwFZL1zVwl2NCfVqFEw9BstFeYM+zgfu3oikQxZ5xBNlzJs</span><br><span class="line">Ax+XBR9Y0+ob6qwwQXZ1YRLzBk7pYOPoMnCbcInVreW0UV4rlCSwGQ4ncV0E5Edp</span><br><span class="line">o8EwA6X3CcyXpGT0GXzsGPWn3VeK+sz250lMWc8=</span><br><span class="line">-----END CERTIFICATE REQUEST-----</span><br></pre></td></tr></table></figure>

<p>當然，你也可以透過 OpenSSL 工具查看 CSR 檔案的請求內容，命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl req -noout -text -<span class="keyword">in</span> server.csr</span><br></pre></td></tr></table></figure>

<p>接下來就是把<code>server.csr</code>檔再給TWCA單位即可。(這一段是請網管人員用的，不到30min就馬上給我後續的檔案)</p>
<h3 id="1-4-取得TWCA提供的zip檔"><a href="#1-4-取得TWCA提供的zip檔" class="headerlink" title="1.4. 取得TWCA提供的zip檔"></a>1.4. 取得TWCA提供的zip檔</h3><p>走完TWCA申請流程後，會拿到一個zip檔，查看zip內容，最重要的是<code>server.cer</code>檔，如下：</p>
<p><img src="https://raw.githubusercontent.com/kitefree/images/main/data/QVInIkC.png" alt="image-20240220134007947"></p>
<p>截取保哥文章文字：</p>
<blockquote>
<p>由於 PKI 基礎建設，需要一個<strong>公開憑證</strong> (<code>server.cer</code>) 與一個<strong>私密金鑰</strong> (<code>server.key</code>) 才能運作，因此你必須同時擁有這兩個檔案，才能完成整個 TLS 加解密的過程。</p>
</blockquote>
<p>複習一下，在這之前，其實我們就已經有<code>server.key</code>及<code>server.csr</code>，後續不會用到<code>server.csr</code>。</p>
<p>請將<code>server.cer</code>、<code>server.key</code>擺放到<code>C:\gitea\custom</code>(依個人喜好自行決定路徑)，結果如下：</p>
<p><img src="https://raw.githubusercontent.com/kitefree/images/main/data/Fq6ZdrZ.png" alt="image-20240220134458956"></p>
<h3 id="1-5-gitea-伺服器-app-ini-調整參數"><a href="#1-5-gitea-伺服器-app-ini-調整參數" class="headerlink" title="1.5. gitea 伺服器 app.ini 調整參數"></a>1.5. gitea 伺服器 app.ini 調整參數</h3><p>接著，調整<code>app.ini</code>檔案的相關設定，實際路徑會是在<code>C:\gitea\custom\conf</code>。過程中會有try error，所以建議可以參考我的方式建立三個檔案，錯了再比對或還原改回來。三個檔案分別是<code>app.ini</code>、<code>app_no_ssl.ini</code>、<code>app_ssl.ini</code>，說明如下：</p>
<ul>
<li><p>app.ini</p>
<ul>
<li>gitea 預設執行都是吃這個檔案</li>
</ul>
</li>
<li><p>app_no_ssl.ini</p>
<ul>
<li>這個檔案算是在未ssl之前，先複製一份，並重新命名而已</li>
</ul>
</li>
<li><p>app_ssl.ini</p>
<ul>
<li>這個檔案是設定ssl相關設定之後</li>
</ul>
</li>
</ul>
<p>最後，調整內容如下：</p>
<p><code>app.ini</code></p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[server]</span></span><br><span class="line"><span class="attr">PROTOCOL</span>=https</span><br><span class="line"><span class="attr">REDIRECT_OTHER_PORT</span>=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#請填寫正確的cer路徑</span></span><br><span class="line"><span class="attr">CERT_FILE</span>= C:/gitea/custom/server.cer</span><br><span class="line"></span><br><span class="line"><span class="comment">#請填寫正確的私鑰key路徑</span></span><br><span class="line"><span class="attr">KEY_FILE</span>= C:/gitea/custom/server.key</span><br><span class="line"></span><br><span class="line"><span class="comment">#網管申請好的domain，以下是示意，請改為自己申請的domain</span></span><br><span class="line"><span class="attr">SSH_DOMAIN</span> = kite.com.tw</span><br><span class="line"></span><br><span class="line"><span class="comment">#網管申請好的domain，以下是示意，請改為自己申請的domain</span></span><br><span class="line"><span class="attr">DOMAIN</span> = kite.com.tw</span><br><span class="line"><span class="attr">HTTP_PORT</span> = <span class="number">443</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#網管申請好的domain，以下是示意，請改為自己申請的domain</span></span><br><span class="line"><span class="attr">ROOT_URL</span> = https://kite.com.tw</span><br><span class="line"></span><br><span class="line"><span class="attr">PORT_TO_REDIRECT</span> = <span class="number">80</span></span><br><span class="line"><span class="attr">START_SSH_SERVER</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">BUILTIN_SSH_SERVER_USER</span> = git</span><br><span class="line"></span><br><span class="line"><span class="attr">APP_DATA_PATH</span> = C:\gitea/data</span><br><span class="line"><span class="attr">DISABLE_SSH</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">SSH_PORT</span> = <span class="number">22</span></span><br><span class="line"><span class="attr">LFS_START_SERVER</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">LFS_JWT_SECRET</span> = eO57YqkdnirS8VsGh0efQNOFj-PvfSXZUOU2yHi8OmI</span><br><span class="line"><span class="attr">OFFLINE_MODE</span> = <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>調整好後記得重新啟動gitea服務。</p>
<h3 id="1-6-調整伺服器本機防火牆"><a href="#1-6-調整伺服器本機防火牆" class="headerlink" title="1.6. 調整伺服器本機防火牆"></a>1.6. 調整伺服器本機防火牆</h3><p>在實測過程，發現只有伺服器本機能訪問https網站，個人電腦訪問不到，發現是忘記在伺服器本身的防火牆設定<code>port 443</code>，而<code>port 22</code>是給ssh連線用的，先一併設定好。設定內容結果如下：</p>
<p><img src="https://raw.githubusercontent.com/kitefree/images/main/data/EItJHBJ.png" alt="image-20240220132700767"></p>
<h3 id="1-7-驗證測試"><a href="#1-7-驗證測試" class="headerlink" title="1.7. 驗證測試"></a>1.7. 驗證測試</h3><h4 id="1-7-1-測試網站-https-連結"><a href="#1-7-1-測試網站-https-連結" class="headerlink" title="1.7.1. 測試網站(https)連結"></a>1.7.1. 測試網站(https)連結</h4><p>瀏覽器輸入您註冊的網址，成功完成https設定，結果如下：</p>
<p><img src="https://raw.githubusercontent.com/kitefree/images/main/data/B6JTaJ9.png" alt="image-20240220140249844"></p>
<h4 id="1-7-2-測試佈署-git-push"><a href="#1-7-2-測試佈署-git-push" class="headerlink" title="1.7.2. 測試佈署(git push)"></a>1.7.2. 測試佈署(git push)</h4><p>使用<code>git push</code>指令時，會出現以下錯誤</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Are you sure you want to <span class="built_in">continue</span> connecting (<span class="built_in">yes</span>/no/[fingerprint])? Host key verification failed.</span><br><span class="line">fatal: Could not <span class="built_in">read</span> from remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights</span><br><span class="line">and the repository exists.</span><br></pre></td></tr></table></figure>

<h5 id="1-7-2-1-產生金錀"><a href="#1-7-2-1-產生金錀" class="headerlink" title="1.7.2.1. 產生金錀"></a>1.7.2.1. 產生金錀</h5><p>安裝完git軟體之後，其實已內鍵<code>ssh-keygen</code>指令，請執行以下指令產生檔案，而產生的檔案實體路徑預設為<code>C:\Users\使用者登入帳號\.ssh</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">&quot;your_email@example.com&quot;</span></span><br></pre></td></tr></table></figure>

<p>執行完指令後，預期結果如下。觀查資料夾內容新增了兩個檔案，分別是<code>id_rsa</code>、<code>id_rsa.pub</code>，後續步驟會使用到<code>id_rsa.pub</code>檔案內容。</p>
<p><img src="https://raw.githubusercontent.com/kitefree/images/main/data/QrDibvI.png" alt="image-20240220153127134"></p>
<h5 id="1-7-2-2-伺服器設定金鑰"><a href="#1-7-2-2-伺服器設定金鑰" class="headerlink" title="1.7.2.2. 伺服器設定金鑰"></a>1.7.2.2. 伺服器設定金鑰</h5><p>回到gitea伺服器，進行登入後，請點選右上角按鈕，點選<code>設定</code></p>
<p><img src="https://raw.githubusercontent.com/kitefree/images/main/data/gIJ7ufz.png" alt="image-20240220145503796"></p>
<p>點選設定後，如下圖，請再點選<code>SSH/GPG金鑰</code>→<code>增加金鑰</code></p>
<p><img src="https://raw.githubusercontent.com/kitefree/images/main/data/yVuTsO8.png" alt="image-20240220145648145"></p>
<p>請將剛剛的<code>id_rsa.pub</code>內容貼到<code>內容</code>的部分，<code>金鑰名稱</code>自取(不限定)，示意圖如下：</p>
<p><img src="https://raw.githubusercontent.com/kitefree/images/main/data/JztBOpB.png" alt="image-20240220145937107"></p>
<h5 id="1-7-2-3-進行gitpush測試"><a href="#1-7-2-3-進行gitpush測試" class="headerlink" title="1.7.2.3. 進行gitpush測試"></a>1.7.2.3. 進行gitpush測試</h5><p>git push 時會出現以下訊息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">The authenticity of host <span class="string">&#x27;kite.com.tw (xxx.xxx.xxx.xxx)&#x27;</span> can<span class="string">&#x27;t be established.</span></span><br><span class="line"><span class="string">RSA key fingerprint is SHA256:RbjX0POSgF1DBYFwsAiXdmiUqfJQvJBcyPG2rVFQIPk.</span></span><br><span class="line"><span class="string">This key is not known by any other names.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no/[fingerprint])?</span></span><br></pre></td></tr></table></figure>

<p>請輸入<code>fingerprint</code>，接著出現以下問題請輸入 <code>yes</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Please <span class="built_in">type</span> <span class="string">&#x27;yes&#x27;</span>, <span class="string">&#x27;no&#x27;</span> or the fingerprint: <span class="built_in">yes</span></span><br></pre></td></tr></table></figure>

<p>git push 成功，出現訊息如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Warning: Permanently added <span class="string">&#x27;kite.com.tw&#x27;</span> (RSA) to the list of known hosts.</span><br><span class="line">Enumerating objects: 3, <span class="keyword">done</span>.</span><br><span class="line">Counting objects: 100% (3/3), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (3/3), 205 bytes | 205.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Total 3 (delta 0), reused 0 (delta 0), pack-reused 0</span><br><span class="line">remote: . Processing 1 references</span><br><span class="line">remote: Processed 1 references <span class="keyword">in</span> total</span><br><span class="line">To gitsrv.tqe.ntnu.edu.tw:administrator/hrm.git</span><br><span class="line"> * [new branch]      main -&gt; main</span><br><span class="line">branch <span class="string">&#x27;main&#x27;</span> <span class="built_in">set</span> up to track <span class="string">&#x27;origin/main&#x27;</span>.</span><br></pre></td></tr></table></figure>

<p>可以觀查<code>C:\Users\RESH\.ssh</code>資料夾底下的<code>know_host</code>檔變化，已將此domain加入名單中：</p>
<p><img src="https://raw.githubusercontent.com/kitefree/images/main/data/6W2ZyeR.png" alt="image-20240220154143783"></p>
<p><code>know_host</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kite.com.tw ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDqw3JJJkaOAZwrqCrsAkBpvPME1rW310sedo7obINQjLbGqipdb6Y0D/1Szu3j+AAO5wnWzDiyNQTVsvIFXDzo6CpcdNe4ffKsbr8dLqlv9ylmdnwIKbUuTPXljsBVFqXeuCaT6z3RJa48wzyN8lzQ2C2TJIVLMsit9RS4FZTcTpo6B0kCCOp3OXJQ/gYTxYJ+Zz7+3eihGm3xV7/j3pT9ng+LBkwe/fMv40il0yAuho//2nDGGxQpnwPZnqMF0HbvV+apUrx8v0tlgbZZKxsG97c2+5e7AgUG0+I4llMkU0YtRySoRiJtWJLFjJdFyng1wiHlSw/g8qHG99Wk4QMMM0e1WyfVGKWtlbnwR3FUXPm5RXaiHABSErH3C+RY1+AyUpEhxxb8+3CiN+7CtVVCVbkR0Ksmoe2gjNt7vbaWOzphrCcmaZHQ3LmT7Npzw3pR/DqVW4kt2DkmTdHzNSoy0TMRkzWEsHFe7tTUO2Mmq95R/6QHfU8S5AvdPVVwTPqnY2nsVglPwRIYRYGKfdiH9utog8SBihEKJsdsFliaix6FYDYW1dTqWPMvBnhopO5pf77XF4aUHSSRCOjD3X2DKTNJ0iC7rkVQhX34lBoZcce+yvWBnZQ7LY8m+o/XWyLFPkrIjiZY3SRX/E/tyAFGgF8MB4IE3p0apbd3k6ycHQ==</span><br></pre></td></tr></table></figure>

<p>經過以上步驟，已經可以順利完成git 相關指令囉！</p>
<h3 id="1-8-參考資料"><a href="#1-8-參考資料" class="headerlink" title="1.8. 參考資料"></a>1.8. 參考資料</h3><ul>
<li><a href="https://www.cjkuo.net/window_install_openssl/">如何在Window上安裝 OpenSSL?</a><ul>
<li>參考這篇設定openssl的，寫的很完整。</li>
</ul>
</li>
<li><a href="https://blog.miniasp.com/post/2018/04/21/PKI-Digital-Certificate-Format-Convertion-Notes">認識 PKI 架構下的數位憑證格式與憑證格式轉換的心得分享</a><ul>
<li>很棒的知識整理，謝謝保哥</li>
</ul>
</li>
<li><a href="https://jdev.tw/blog/5246/gitea-server-ssh-settings">啟用Gitea Server的SSH服務，可大幅增加連線速度</a><ul>
<li>有教如何產生金鑰以及使用smartgit如何設定金鑰教學</li>
</ul>
</li>
<li><a href="https://blog.csdn.net/jingtingfengguo/article/details/51892864">git遇到的问题之“Please make sure you have the correct access rights and the repository exists.”</a></li>
<li><a href="https://blog.alantsai.net/posts/2015/09/use-ssh-in-windows-for-github">何謂ssh？在Windows下如何使用ssh？如何在Windows透過ssh下載和上傳程式到github?</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10205988">設定 Github SSH 金鑰 feat. Github SSH、HTTPS 的差異</a></li>
</ul>
]]></content>
      <categories>
        <category>Gitea</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>HTTPS</tag>
        <tag>Gitea</tag>
        <tag>SSL</tag>
      </tags>
  </entry>
</search>
